import{s as rt,o as ot,n as Re}from"../chunks/scheduler.36a0863c.js";import{S as it,i as pt,g as u,s as o,r as f,A as ct,h as d,f as t,c as i,j as at,u as g,x as j,k as nt,y as mt,a,v as b,d as $,t as y,w as h,m as ut,n as dt}from"../chunks/index.f891bdb2.js";import{T as ws}from"../chunks/Tip.a8272f7f.js";import{C as w}from"../chunks/CodeBlock.3ec784ea.js";import{F as lt,M as ks}from"../chunks/Markdown.4127c891.js";import{H as Je}from"../chunks/Heading.3fb90772.js";function ft(Z){let n;return{c(){n=ut("También puedes guardar los archivos de configuración como un diccionario; o incluso guardar solo la diferencia entre tu archivo personalizado y la configuración por defecto. Consulta la [documentación sobre configuración](main_classes/configuration) para ver más detalles.")},l(m){n=dt(m,"También puedes guardar los archivos de configuración como un diccionario; o incluso guardar solo la diferencia entre tu archivo personalizado y la configuración por defecto. Consulta la [documentación sobre configuración](main_classes/configuration) para ver más detalles.")},m(m,l){a(m,n,l)},d(m){m&&t(n)}}}function gt(Z){let n,m="Carga los atributos de tu configuración personalizada en el modelo de la siguiente forma:",l,c,M,_,C="Esto crea un modelo con valores aleatorios, en lugar de crearlo con los pesos del preentrenamiento, por lo que no serás capaz de usar este modelo para nada útil hasta que no lo entrenes. El entrenamiento es un proceso costoso, tanto en cuestión de recursos como de tiempo, por lo que generalmente es mejor usar un modelo preentrenado para obtener mejores resultados más rápido, consumiendo una fracción de los recursos que un entrenamiento completo hubiera requerido.",z,q,k="Puedes crear un modelo preentrenado con <code>from_pretrained()</code>:",p,v,W,J,U="Cuando cargues tus pesos del preentrenamiento, el modelo por defecto se carga automáticamente si nos lo proporciona 🤗 Transformers. Sin embargo, siempre puedes reemplazar (todos o algunos de) los atributos del modelo por defecto por los tuyos:",V,R,x;return c=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpc3RpbEJlcnRNb2RlbCUwQSUwQW15X2NvbmZpZyUyMCUzRCUyMERpc3RpbEJlcnRDb25maWcuZnJvbV9wcmV0cmFpbmVkKCUyMi4lMkZ5b3VyX21vZGVsX3NhdmVfcGF0aCUyRm15X2NvbmZpZy5qc29uJTIyKSUwQW1vZGVsJTIwJTNEJTIwRGlzdGlsQmVydE1vZGVsKG15X2NvbmZpZyk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span>my_config = DistilBertConfig.from_pretrained(<span class="hljs-string">&quot;./your_model_save_path/my_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DistilBertModel(my_config)`,wrap:!1}}),v=new w({props:{code:"bW9kZWwlMjAlM0QlMjBEaXN0aWxCZXJ0TW9kZWwuZnJvbV9wcmV0cmFpbmVkKCUyMmRpc3RpbGJlcnQlMkZkaXN0aWxiZXJ0LWJhc2UtdW5jYXNlZCUyMik=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model = DistilBertModel.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)',wrap:!1}}),R=new w({props:{code:"bW9kZWwlMjAlM0QlMjBEaXN0aWxCZXJ0TW9kZWwuZnJvbV9wcmV0cmFpbmVkKCUyMmRpc3RpbGJlcnQlMkZkaXN0aWxiZXJ0LWJhc2UtdW5jYXNlZCUyMiUyQyUyMGNvbmZpZyUzRG15X2NvbmZpZyk=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model = DistilBertModel.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>, config=my_config)',wrap:!1}}),{c(){n=u("p"),n.textContent=m,l=o(),f(c.$$.fragment),M=o(),_=u("p"),_.textContent=C,z=o(),q=u("p"),q.innerHTML=k,p=o(),f(v.$$.fragment),W=o(),J=u("p"),J.textContent=U,V=o(),f(R.$$.fragment)},l(r){n=d(r,"P",{"data-svelte-h":!0}),j(n)!=="svelte-siq4wn"&&(n.textContent=m),l=i(r),g(c.$$.fragment,r),M=i(r),_=d(r,"P",{"data-svelte-h":!0}),j(_)!=="svelte-1ck8k0y"&&(_.textContent=C),z=i(r),q=d(r,"P",{"data-svelte-h":!0}),j(q)!=="svelte-114xr7s"&&(q.innerHTML=k),p=i(r),g(v.$$.fragment,r),W=i(r),J=d(r,"P",{"data-svelte-h":!0}),j(J)!=="svelte-1fd2hjm"&&(J.textContent=U),V=i(r),g(R.$$.fragment,r)},m(r,T){a(r,n,T),a(r,l,T),b(c,r,T),a(r,M,T),a(r,_,T),a(r,z,T),a(r,q,T),a(r,p,T),b(v,r,T),a(r,W,T),a(r,J,T),a(r,V,T),b(R,r,T),x=!0},p:Re,i(r){x||($(c.$$.fragment,r),$(v.$$.fragment,r),$(R.$$.fragment,r),x=!0)},o(r){y(c.$$.fragment,r),y(v.$$.fragment,r),y(R.$$.fragment,r),x=!1},d(r){r&&(t(n),t(l),t(M),t(_),t(z),t(q),t(p),t(W),t(J),t(V)),h(c,r),h(v,r),h(R,r)}}}function bt(Z){let n,m;return n=new ks({props:{$$slots:{default:[gt]},$$scope:{ctx:Z}}}),{c(){f(n.$$.fragment)},l(l){g(n.$$.fragment,l)},m(l,c){b(n,l,c),m=!0},p(l,c){const M={};c&2&&(M.$$scope={dirty:c,ctx:l}),n.$set(M)},i(l){m||($(n.$$.fragment,l),m=!0)},o(l){y(n.$$.fragment,l),m=!1},d(l){h(n,l)}}}function $t(Z){let n,m="Carga los atributos de tu configuración personalizada en el modelo de la siguiente forma:",l,c,M,_,C="Esto crea un modelo con valores aleatorios, en lugar de crearlo con los pesos del preentrenamiento, por lo que no serás capaz de usar este modelo para nada útil hasta que no lo entrenes. El entrenamiento es un proceso costoso, tanto en cuestión de recursos como de tiempo, por lo que generalmente es mejor usar un modelo preentrenado para obtener mejores resultados más rápido, consumiendo solo una fracción de los recursos que un entrenamiento completo hubiera requerido.",z,q,k="Puedes crear un modelo preentrenado con <code>from_pretrained()</code>:",p,v,W,J,U="Cuando cargues tus pesos del preentrenamiento, el modelo por defecto se carga automáticamente si este nos lo proporciona 🤗 Transformers. Sin embargo, siempre puedes reemplazar (todos o algunos de) los atributos del modelo por defecto por los tuyos:",V,R,x;return c=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFRGRGlzdGlsQmVydE1vZGVsJTBBJTBBbXlfY29uZmlnJTIwJTNEJTIwRGlzdGlsQmVydENvbmZpZy5mcm9tX3ByZXRyYWluZWQoJTIyLiUyRnlvdXJfbW9kZWxfc2F2ZV9wYXRoJTJGbXlfY29uZmlnLmpzb24lMjIpJTBBdGZfbW9kZWwlMjAlM0QlMjBURkRpc3RpbEJlcnRNb2RlbChteV9jb25maWcp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFDistilBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span>my_config = DistilBertConfig.from_pretrained(<span class="hljs-string">&quot;./your_model_save_path/my_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFDistilBertModel(my_config)`,wrap:!1}}),v=new w({props:{code:"dGZfbW9kZWwlMjAlM0QlMjBURkRpc3RpbEJlcnRNb2RlbC5mcm9tX3ByZXRyYWluZWQoJTIyZGlzdGlsYmVydCUyRmRpc3RpbGJlcnQtYmFzZS11bmNhc2VkJTIyKQ==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFDistilBertModel.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)',wrap:!1}}),R=new w({props:{code:"dGZfbW9kZWwlMjAlM0QlMjBURkRpc3RpbEJlcnRNb2RlbC5mcm9tX3ByZXRyYWluZWQoJTIyZGlzdGlsYmVydCUyRmRpc3RpbGJlcnQtYmFzZS11bmNhc2VkJTIyJTJDJTIwY29uZmlnJTNEbXlfY29uZmlnKQ==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFDistilBertModel.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>, config=my_config)',wrap:!1}}),{c(){n=u("p"),n.textContent=m,l=o(),f(c.$$.fragment),M=o(),_=u("p"),_.textContent=C,z=o(),q=u("p"),q.innerHTML=k,p=o(),f(v.$$.fragment),W=o(),J=u("p"),J.textContent=U,V=o(),f(R.$$.fragment)},l(r){n=d(r,"P",{"data-svelte-h":!0}),j(n)!=="svelte-siq4wn"&&(n.textContent=m),l=i(r),g(c.$$.fragment,r),M=i(r),_=d(r,"P",{"data-svelte-h":!0}),j(_)!=="svelte-sl2tin"&&(_.textContent=C),z=i(r),q=d(r,"P",{"data-svelte-h":!0}),j(q)!=="svelte-114xr7s"&&(q.innerHTML=k),p=i(r),g(v.$$.fragment,r),W=i(r),J=d(r,"P",{"data-svelte-h":!0}),j(J)!=="svelte-127iuxp"&&(J.textContent=U),V=i(r),g(R.$$.fragment,r)},m(r,T){a(r,n,T),a(r,l,T),b(c,r,T),a(r,M,T),a(r,_,T),a(r,z,T),a(r,q,T),a(r,p,T),b(v,r,T),a(r,W,T),a(r,J,T),a(r,V,T),b(R,r,T),x=!0},p:Re,i(r){x||($(c.$$.fragment,r),$(v.$$.fragment,r),$(R.$$.fragment,r),x=!0)},o(r){y(c.$$.fragment,r),y(v.$$.fragment,r),y(R.$$.fragment,r),x=!1},d(r){r&&(t(n),t(l),t(M),t(_),t(z),t(q),t(p),t(W),t(J),t(V)),h(c,r),h(v,r),h(R,r)}}}function yt(Z){let n,m;return n=new ks({props:{$$slots:{default:[$t]},$$scope:{ctx:Z}}}),{c(){f(n.$$.fragment)},l(l){g(n.$$.fragment,l)},m(l,c){b(n,l,c),m=!0},p(l,c){const M={};c&2&&(M.$$scope={dirty:c,ctx:l}),n.$set(M)},i(l){m||($(n.$$.fragment,l),m=!0)},o(l){y(n.$$.fragment,l),m=!1},d(l){h(n,l)}}}function ht(Z){let n,m="Por ejemplo,  <code>DistilBertForSequenceClassification</code> es un modelo DistilBERT base con una cabeza de clasificación de secuencias. La cabeza de clasificación de secuencias es una capa superior que precede a la recolección de las salidas.",l,c,M,_,C="Puedes reutilizar este punto de guardado o <em>checkpoint</em> para otra tarea fácilmente cambiando a una cabeza de un modelo diferente. Para una tarea de respuesta a preguntas, puedes usar la cabeza del modelo <code>DistilBertForQuestionAnswering</code>. La cabeza de respuesta a preguntas es similar a la de clasificación de secuencias, excepto porque consta de una capa lineal delante de la salida de los <em>hidden states</em>.",z,q,k;return c=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpc3RpbEJlcnRGb3JTZXF1ZW5jZUNsYXNzaWZpY2F0aW9uJTBBJTBBbW9kZWwlMjAlM0QlMjBEaXN0aWxCZXJ0Rm9yU2VxdWVuY2VDbGFzc2lmaWNhdGlvbi5mcm9tX3ByZXRyYWluZWQoJTIyZGlzdGlsYmVydCUyRmRpc3RpbGJlcnQtYmFzZS11bmNhc2VkJTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model = DistilBertForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)`,wrap:!1}}),q=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpc3RpbEJlcnRGb3JRdWVzdGlvbkFuc3dlcmluZyUwQSUwQW1vZGVsJTIwJTNEJTIwRGlzdGlsQmVydEZvclF1ZXN0aW9uQW5zd2VyaW5nLmZyb21fcHJldHJhaW5lZCglMjJkaXN0aWxiZXJ0JTJGZGlzdGlsYmVydC1iYXNlLXVuY2FzZWQlMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span>model = DistilBertForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)`,wrap:!1}}),{c(){n=u("p"),n.innerHTML=m,l=o(),f(c.$$.fragment),M=o(),_=u("p"),_.innerHTML=C,z=o(),f(q.$$.fragment)},l(p){n=d(p,"P",{"data-svelte-h":!0}),j(n)!=="svelte-10sacti"&&(n.innerHTML=m),l=i(p),g(c.$$.fragment,p),M=i(p),_=d(p,"P",{"data-svelte-h":!0}),j(_)!=="svelte-1wmvcxj"&&(_.innerHTML=C),z=i(p),g(q.$$.fragment,p)},m(p,v){a(p,n,v),a(p,l,v),b(c,p,v),a(p,M,v),a(p,_,v),a(p,z,v),b(q,p,v),k=!0},p:Re,i(p){k||($(c.$$.fragment,p),$(q.$$.fragment,p),k=!0)},o(p){y(c.$$.fragment,p),y(q.$$.fragment,p),k=!1},d(p){p&&(t(n),t(l),t(M),t(_),t(z)),h(c,p),h(q,p)}}}function jt(Z){let n,m;return n=new ks({props:{$$slots:{default:[ht]},$$scope:{ctx:Z}}}),{c(){f(n.$$.fragment)},l(l){g(n.$$.fragment,l)},m(l,c){b(n,l,c),m=!0},p(l,c){const M={};c&2&&(M.$$scope={dirty:c,ctx:l}),n.$set(M)},i(l){m||($(n.$$.fragment,l),m=!0)},o(l){y(n.$$.fragment,l),m=!1},d(l){h(n,l)}}}function Mt(Z){let n,m="Por ejemplo,  <code>TFDistilBertForSequenceClassification</code> es un modelo DistilBERT base con una cabeza de clasificación de secuencias. La cabeza de clasificación de secuencias es una capa superior que precede a la recolección de las salidas.",l,c,M,_,C="Puedes reutilizar este punto de guardado o <em>checkpoint</em> para otra tarea fácilmente cambiando a una cabeza de un modelo diferente. Para una tarea de respuesta a preguntas, puedes usar la cabeza del modelo <code>TFDistilBertForQuestionAnswering</code>. La cabeza de respuesta a preguntas es similar a la de clasificación de secuencias, excepto porque consta de una capa lineal delante de la salida de los <em>hidden states</em>.",z,q,k;return c=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFRGRGlzdGlsQmVydEZvclNlcXVlbmNlQ2xhc3NpZmljYXRpb24lMEElMEF0Zl9tb2RlbCUyMCUzRCUyMFRGRGlzdGlsQmVydEZvclNlcXVlbmNlQ2xhc3NpZmljYXRpb24uZnJvbV9wcmV0cmFpbmVkKCUyMmRpc3RpbGJlcnQlMkZkaXN0aWxiZXJ0LWJhc2UtdW5jYXNlZCUyMik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFDistilBertForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFDistilBertForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)`,wrap:!1}}),q=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFRGRGlzdGlsQmVydEZvclF1ZXN0aW9uQW5zd2VyaW5nJTBBJTBBdGZfbW9kZWwlMjAlM0QlMjBURkRpc3RpbEJlcnRGb3JRdWVzdGlvbkFuc3dlcmluZy5mcm9tX3ByZXRyYWluZWQoJTIyZGlzdGlsYmVydCUyRmRpc3RpbGJlcnQtYmFzZS11bmNhc2VkJTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFDistilBertForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFDistilBertForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)`,wrap:!1}}),{c(){n=u("p"),n.innerHTML=m,l=o(),f(c.$$.fragment),M=o(),_=u("p"),_.innerHTML=C,z=o(),f(q.$$.fragment)},l(p){n=d(p,"P",{"data-svelte-h":!0}),j(n)!=="svelte-q6udtk"&&(n.innerHTML=m),l=i(p),g(c.$$.fragment,p),M=i(p),_=d(p,"P",{"data-svelte-h":!0}),j(_)!=="svelte-u4302p"&&(_.innerHTML=C),z=i(p),g(q.$$.fragment,p)},m(p,v){a(p,n,v),a(p,l,v),b(c,p,v),a(p,M,v),a(p,_,v),a(p,z,v),b(q,p,v),k=!0},p:Re,i(p){k||($(c.$$.fragment,p),$(q.$$.fragment,p),k=!0)},o(p){y(c.$$.fragment,p),y(q.$$.fragment,p),k=!1},d(p){p&&(t(n),t(l),t(M),t(_),t(z)),h(c,p),h(q,p)}}}function _t(Z){let n,m;return n=new ks({props:{$$slots:{default:[Mt]},$$scope:{ctx:Z}}}),{c(){f(n.$$.fragment)},l(l){g(n.$$.fragment,l)},m(l,c){b(n,l,c),m=!0},p(l,c){const M={};c&2&&(M.$$scope={dirty:c,ctx:l}),n.$set(M)},i(l){m||($(n.$$.fragment,l),m=!0)},o(l){y(n.$$.fragment,l),m=!1},d(l){h(n,l)}}}function qt(Z){let n,m='No todos los modelos son compatibles con un <em>tokenizer</em> rápido. Échale un vistazo a esta <a href="index#supported-frameworks">tabla</a> para comprobar si un modelo específico es compatible con un <em>tokenizer</em> rápido.';return{c(){n=u("p"),n.innerHTML=m},l(l){n=d(l,"P",{"data-svelte-h":!0}),j(n)!=="svelte-6n6ndp"&&(n.innerHTML=m)},m(l,c){a(l,n,c)},p:Re,d(l){l&&t(n)}}}function vt(Z){let n,m="Por defecto, el <code>AutoTokenizer</code> intentará cargar un <em>tokenizer</em> rápido. Puedes desactivar este comportamiento cambiando el parámetro <code>use_fast=False</code> de <code>from_pretrained</code>.";return{c(){n=u("p"),n.innerHTML=m},l(l){n=d(l,"P",{"data-svelte-h":!0}),j(n)!=="svelte-17vapzn"&&(n.innerHTML=m)},m(l,c){a(l,n,c)},p:Re,d(l){l&&t(n)}}}function Tt(Z){let n,m="Si no estás buscando ninguna personalización en específico, usa el método <code>from_pretrained</code> para cargar los parámetros del extractor de características por defecto del modelo.";return{c(){n=u("p"),n.innerHTML=m},l(l){n=d(l,"P",{"data-svelte-h":!0}),j(n)!=="svelte-1stuznj"&&(n.innerHTML=m)},m(l,c){a(l,n,c)},p:Re,d(l){l&&t(n)}}}function Zt(Z){let n,m,l,c,M,_,C,z='Una <a href="model_doc/auto"><code>AutoClass</code></a> infiere, automáticamente, la arquitectura del modelo y descarga la configuración y los pesos del modelo preentrenado. Normalmente, recomendamos usar una <code>AutoClass</code> para producir un código agnóstico a puntos de guardado o checkpoints. Sin embargo, los usuarios que quieran más control sobre los parámetros específicos de los modelos pueden crear su propio modelo 🤗 Transformers personalizado a partir de varias clases base. Esto puede ser particularmente útil para alguien que esté interesado en estudiar, entrenar o experimentar con modelos 🤗 Transformers. En esta guía vamos a profundizar en la creación de modelos personalizados sin usar <code>AutoClass</code>. Aprenderemos a:',q,k,p="<li>Cargar y personalizar una configuración para un modelo.</li> <li>Crear una arquitectura para un modelo.</li> <li>Crear tokenizadores rápidos y lentos para textos.</li> <li>Crear un extractor de propiedades para tareas de audio o imágenes.</li> <li>Crear un procesador para tareas multimodales.</li>",v,W,J,U,V='Una <a href="main_classes/configuration">configuración</a> es un conjunto de atributos específicos de un modelo. Cada configuración de modelo tiene atributos diferentes. Por ejemplo, todos los modelos de PLN tienen los atributos <code>hidden_size</code>, <code>num_attention_heads</code>, <code>num_hidden_layers</code> y <code>vocab_size</code> en común. Estos atributos especifican el número de cabezas de atención o de capas ocultas con las que se construyen los modelos.',R,x,r='Puedes echarle un vistazo a <a href="model_doc/distilbert">DistilBERT</a> y sus atributos accediendo a <code>DistilBertConfig</code>:',T,L,We,Y,zs="<code>DistilBertConfig</code> muestra todos los atributos por defecto que se han usado para construir un modelo <code>DistilBertModel</code> base. Todos ellos son personalizables, lo que deja espacio para poder experimentar. Por ejemplo, puedes personalizar un modelo predeterminado para:",xe,N,Js="<li>Probar una función de activación diferente, usando el parámetro <code>activation</code>.</li> <li>Usar un valor de abandono (también conocido como <em>dropout</em>) más alto para las probabilidades de las capas de atención, usando el parámetro <code>attention_dropout</code>.</li>",Ue,Q,Ve,P,Rs="Los atributos de los modelos preentrenados pueden ser modificados con la función <code>from_pretrained()</code>:",Ge,I,He,D,Cs="Cuando estés satisfecho con la configuración de tu modelo, puedes guardarlo con la función <code>save_pretrained()</code>. Tu configuración se guardará en un archivo JSON dentro del directorio que le especifiques como parámetro.",Ee,S,Xe,A,Ws="Para volver a usar el archivo de configuración, puedes cargarlo usando <code>from_pretrained()</code>:",Fe,K,Be,G,Le,O,Ye,ee,xs='El siguiente paso será crear un <a href="main_classes/models">modelo</a>. El modelo, al que a veces también nos referimos como arquitectura, es el encargado de definir cada capa y qué operaciones se realizan. Los atributos como <code>num_hidden_layers</code> de la configuración se usan para definir la arquitectura. Todos los modelos comparten una clase base, <code>PreTrainedModel</code>, y algunos métodos comunes que se pueden usar para redimensionar los <em>embeddings</em> o para recortar cabezas de auto-atención (también llamadas <em>self-attention heads</em>). Además, todos los modelos son subclases de <a href="https://pytorch.org/docs/stable/generated/torch.nn.Module.html" rel="nofollow"><code>torch.nn.Module</code></a>, <a href="https://www.tensorflow.org/api_docs/python/tf/keras/Model" rel="nofollow"><code>tf.keras.Model</code></a> o <a href="https://flax.readthedocs.io/en/latest/api_reference/flax.linen/module.html" rel="nofollow"><code>flax.linen.Module</code></a>, lo que significa que son compatibles con su respectivo framework.',Ne,H,Qe,se,Pe,te,Us="En este punto del tutorial, tenemos un modelo DistilBERT base que devuelve los <em>hidden states</em> o estados ocultos. Los <em>hidden states</em> se pasan como parámetros de entrada a la cabeza del modelo para producir la salida. 🤗 Transformers ofrece una cabeza de modelo diferente para cada tarea, siempre y cuando el modelo sea compatible para la tarea (por ejemplo, no puedes usar DistilBERT para una tarea secuencia a secuencia como la traducción).",Ie,E,De,ae,Se,ne,Vs='La ultima clase base que debes conocer antes de usar un modelo con datos textuales es la clase <a href="main_classes/tokenizer">tokenizer</a>, que convierte el texto bruto en tensores. Hay dos tipos de <em>tokenizers</em> que puedes usar con 🤗 Transformers:',Ae,le,Gs='<li><code>PreTrainedTokenizer</code>:  una implementación de un <em>tokenizer</em> hecha en Python.</li> <li><code>PreTrainedTokenizerFast</code>: un <em>tokenizer</em> de nuestra librería <a href="https://huggingface.co/docs/tokenizers/python/latest/" rel="nofollow">🤗 Tokenizer</a>, basada en Rust. Este tipo de <em>tokenizer</em> es bastante más rápido, especialmente durante la tokenización por lotes, gracias a estar implementado en Rust. Esta rápida tokenización también ofrece métodos adicionales como el <em>offset mapping</em>, que relaciona los tokens con sus palabras o caracteres originales.</li>',Ke,re,Hs="Ambos <em>tokenizers</em> son compatibles con los métodos comunes, como los de encodificación y decodificación, los métodos para añadir tokens y aquellos que manejan tokens especiales.",Oe,X,es,oe,Es="Si has entrenado tu propio <em>tokenizer</em>, puedes crear uno desde tu archivo de “vocabulario”:",ss,ie,ts,pe,Xs="Es importante recordar que los vocabularios que provienen de un <em>tokenizer</em> personalizado serán diferentes a los vocabularios generados por el <em>tokenizer</em> de un modelo preentrenado. Debes usar el vocabulario de un <em>tokenizer</em> preentrenado si vas a usar un modelo preentrenado, de lo contrario las entradas no tendrán sentido. Crea un <em>tokenizer</em> con el vocabulario de un modelo preentrenado usando la clase <code>DistilBertTokenizer</code>:",as,ce,ns,me,Fs="Crea un <em>tokenizer</em> rápido con la clase <code>DistilBertTokenizerFast</code>:",ls,ue,rs,F,os,de,is,fe,Bs="Un extractor de características procesa entradas de audio e imagen. Hereda de la clase base <code>FeatureExtractionMixin</code> y también puede heredar de la clase <code>ImageFeatureExtractionMixin</code> para el procesamiento de características de las imágenes o de la clase <code>SequenceFeatureExtractor</code> para el procesamiento de entradas de audio.",ps,ge,Ls='Dependiendo de si trabajas en una tarea de audio o de video, puedes crear un extractor de características asociado al modelo que estés usando. Por ejemplo, podrías crear un <code>ViTFeatureExtractor</code> por defecto si estás usando <a href="model_doc/vit">ViT</a> para clasificación de imágenes:',cs,be,ms,B,us,$e,Ys="Puedes modificar cualquier parámetro de <code>ViTFeatureExtractor</code> para crear tu extractor de características personalizado:",ds,ye,fs,he,Ns="Para las entradas de audio, puedes crear un <code>Wav2Vec2FeatureExtractor</code> y personalizar los parámetros de una forma similar:",gs,je,bs,Me,$s,_e,Qs="Para modelos que son compatibles con tareas multimodales, 🤗 Transformers ofrece una clase <em>procesador</em> que agrupa un extractor de características y un <em>tokenizer</em> en el mismo objeto. Por ejemplo, probemos a usar el procesador <code>Wav2Vec2Processor</code> para una tarea de reconocimiento de voz (ASR). Un ASR transcribe el audio a texto, por lo que necesitaremos un extractor de características y un <em>tokenizer</em>.",ys,qe,Ps="Crea un extractor de características para manejar la entrada de audio:",hs,ve,js,Te,Is="Crea un <em>tokenizer</em> para manejar la entrada de texto:",Ms,Ze,_s,we,Ds="Puedes combinar el extractor de características y el <em>tokenizer</em> en el <code>Wav2Vec2Processor</code>:",qs,ke,vs,ze,Ss="Con dos clases base (la configuración y el modelo) y una clase de preprocesamiento adicional (<em>tokenizer</em>, extractor de características o procesador), puedes crear cualquiera de los modelos compatibles con 🤗 Transformers. Cada una de estas clases son configurables, permitiéndote usar sus atributos específicos. Puedes crear un modelo para entrenarlo de una forma fácil, o modificar un modelo preentrenado disponible para especializarlo.",Ts,Ce,Zs;return M=new Je({props:{title:"Crea una arquitectura personalizada",local:"crea-una-arquitectura-personalizada",headingTag:"h1"}}),W=new Je({props:{title:"Configuración",local:"configuración",headingTag:"h2"}}),L=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpc3RpbEJlcnRDb25maWclMEElMEFjb25maWclMjAlM0QlMjBEaXN0aWxCZXJ0Q29uZmlnKCklMEFwcmludChjb25maWcp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertConfig

<span class="hljs-meta">&gt;&gt;&gt; </span>config = DistilBertConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(config)
DistilBertConfig {
  <span class="hljs-string">&quot;activation&quot;</span>: <span class="hljs-string">&quot;gelu&quot;</span>,
  <span class="hljs-string">&quot;attention_dropout&quot;</span>: <span class="hljs-number">0.1</span>,
  <span class="hljs-string">&quot;dim&quot;</span>: <span class="hljs-number">768</span>,
  <span class="hljs-string">&quot;dropout&quot;</span>: <span class="hljs-number">0.1</span>,
  <span class="hljs-string">&quot;hidden_dim&quot;</span>: <span class="hljs-number">3072</span>,
  <span class="hljs-string">&quot;initializer_range&quot;</span>: <span class="hljs-number">0.02</span>,
  <span class="hljs-string">&quot;max_position_embeddings&quot;</span>: <span class="hljs-number">512</span>,
  <span class="hljs-string">&quot;model_type&quot;</span>: <span class="hljs-string">&quot;distilbert&quot;</span>,
  <span class="hljs-string">&quot;n_heads&quot;</span>: <span class="hljs-number">12</span>,
  <span class="hljs-string">&quot;n_layers&quot;</span>: <span class="hljs-number">6</span>,
  <span class="hljs-string">&quot;pad_token_id&quot;</span>: <span class="hljs-number">0</span>,
  <span class="hljs-string">&quot;qa_dropout&quot;</span>: <span class="hljs-number">0.1</span>,
  <span class="hljs-string">&quot;seq_classif_dropout&quot;</span>: <span class="hljs-number">0.2</span>,
  <span class="hljs-string">&quot;sinusoidal_pos_embds&quot;</span>: false,
  <span class="hljs-string">&quot;transformers_version&quot;</span>: <span class="hljs-string">&quot;4.16.2&quot;</span>,
  <span class="hljs-string">&quot;vocab_size&quot;</span>: <span class="hljs-number">30522</span>
}`,wrap:!1}}),Q=new w({props:{code:"bXlfY29uZmlnJTIwJTNEJTIwRGlzdGlsQmVydENvbmZpZyhhY3RpdmF0aW9uJTNEJTIycmVsdSUyMiUyQyUyMGF0dGVudGlvbl9kcm9wb3V0JTNEMC40KSUwQXByaW50KG15X2NvbmZpZyk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>my_config = DistilBertConfig(activation=<span class="hljs-string">&quot;relu&quot;</span>, attention_dropout=<span class="hljs-number">0.4</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(my_config)
DistilBertConfig {
  <span class="hljs-string">&quot;activation&quot;</span>: <span class="hljs-string">&quot;relu&quot;</span>,
  <span class="hljs-string">&quot;attention_dropout&quot;</span>: <span class="hljs-number">0.4</span>,
  <span class="hljs-string">&quot;dim&quot;</span>: <span class="hljs-number">768</span>,
  <span class="hljs-string">&quot;dropout&quot;</span>: <span class="hljs-number">0.1</span>,
  <span class="hljs-string">&quot;hidden_dim&quot;</span>: <span class="hljs-number">3072</span>,
  <span class="hljs-string">&quot;initializer_range&quot;</span>: <span class="hljs-number">0.02</span>,
  <span class="hljs-string">&quot;max_position_embeddings&quot;</span>: <span class="hljs-number">512</span>,
  <span class="hljs-string">&quot;model_type&quot;</span>: <span class="hljs-string">&quot;distilbert&quot;</span>,
  <span class="hljs-string">&quot;n_heads&quot;</span>: <span class="hljs-number">12</span>,
  <span class="hljs-string">&quot;n_layers&quot;</span>: <span class="hljs-number">6</span>,
  <span class="hljs-string">&quot;pad_token_id&quot;</span>: <span class="hljs-number">0</span>,
  <span class="hljs-string">&quot;qa_dropout&quot;</span>: <span class="hljs-number">0.1</span>,
  <span class="hljs-string">&quot;seq_classif_dropout&quot;</span>: <span class="hljs-number">0.2</span>,
  <span class="hljs-string">&quot;sinusoidal_pos_embds&quot;</span>: false,
  <span class="hljs-string">&quot;transformers_version&quot;</span>: <span class="hljs-string">&quot;4.16.2&quot;</span>,
  <span class="hljs-string">&quot;vocab_size&quot;</span>: <span class="hljs-number">30522</span>
}`,wrap:!1}}),I=new w({props:{code:"bXlfY29uZmlnJTIwJTNEJTIwRGlzdGlsQmVydENvbmZpZy5mcm9tX3ByZXRyYWluZWQoJTIyZGlzdGlsYmVydCUyRmRpc3RpbGJlcnQtYmFzZS11bmNhc2VkJTIyJTJDJTIwYWN0aXZhdGlvbiUzRCUyMnJlbHUlMjIlMkMlMjBhdHRlbnRpb25fZHJvcG91dCUzRDAuNCk=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>my_config = DistilBertConfig.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>, activation=<span class="hljs-string">&quot;relu&quot;</span>, attention_dropout=<span class="hljs-number">0.4</span>)',wrap:!1}}),S=new w({props:{code:"bXlfY29uZmlnLnNhdmVfcHJldHJhaW5lZChzYXZlX2RpcmVjdG9yeSUzRCUyMi4lMkZ5b3VyX21vZGVsX3NhdmVfcGF0aCUyMik=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>my_config.save_pretrained(save_directory=<span class="hljs-string">&quot;./your_model_save_path&quot;</span>)',wrap:!1}}),K=new w({props:{code:"bXlfY29uZmlnJTIwJTNEJTIwRGlzdGlsQmVydENvbmZpZy5mcm9tX3ByZXRyYWluZWQoJTIyLiUyRnlvdXJfbW9kZWxfc2F2ZV9wYXRoJTJGbXlfY29uZmlnLmpzb24lMjIp",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>my_config = DistilBertConfig.from_pretrained(<span class="hljs-string">&quot;./your_model_save_path/my_config.json&quot;</span>)',wrap:!1}}),G=new ws({props:{$$slots:{default:[ft]},$$scope:{ctx:Z}}}),O=new Je({props:{title:"Modelo",local:"modelo",headingTag:"h2"}}),H=new lt({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[yt],pytorch:[bt]},$$scope:{ctx:Z}}}),se=new Je({props:{title:"Cabezas de modelo",local:"cabezas-de-modelo",headingTag:"h3"}}),E=new lt({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[_t],pytorch:[jt]},$$scope:{ctx:Z}}}),ae=new Je({props:{title:"Tokenizer",local:"tokenizer",headingTag:"h2"}}),X=new ws({props:{warning:!0,$$slots:{default:[qt]},$$scope:{ctx:Z}}}),ie=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpc3RpbEJlcnRUb2tlbml6ZXIlMEElMEFteV90b2tlbml6ZXIlMjAlM0QlMjBEaXN0aWxCZXJ0VG9rZW5pemVyKHZvY2FiX2ZpbGUlM0QlMjJteV92b2NhYl9maWxlLnR4dCUyMiUyQyUyMGRvX2xvd2VyX2Nhc2UlM0RGYWxzZSUyQyUyMHBhZGRpbmdfc2lkZSUzRCUyMmxlZnQlMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>my_tokenizer = DistilBertTokenizer(vocab_file=<span class="hljs-string">&quot;my_vocab_file.txt&quot;</span>, do_lower_case=<span class="hljs-literal">False</span>, padding_side=<span class="hljs-string">&quot;left&quot;</span>)`,wrap:!1}}),ce=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpc3RpbEJlcnRUb2tlbml6ZXIlMEElMEFzbG93X3Rva2VuaXplciUyMCUzRCUyMERpc3RpbEJlcnRUb2tlbml6ZXIuZnJvbV9wcmV0cmFpbmVkKCUyMmRpc3RpbGJlcnQlMkZkaXN0aWxiZXJ0LWJhc2UtdW5jYXNlZCUyMik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>slow_tokenizer = DistilBertTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)`,wrap:!1}}),ue=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpc3RpbEJlcnRUb2tlbml6ZXJGYXN0JTBBJTBBZmFzdF90b2tlbml6ZXIlMjAlM0QlMjBEaXN0aWxCZXJ0VG9rZW5pemVyRmFzdC5mcm9tX3ByZXRyYWluZWQoJTIyZGlzdGlsYmVydCUyRmRpc3RpbGJlcnQtYmFzZS11bmNhc2VkJTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertTokenizerFast

<span class="hljs-meta">&gt;&gt;&gt; </span>fast_tokenizer = DistilBertTokenizerFast.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)`,wrap:!1}}),F=new ws({props:{$$slots:{default:[vt]},$$scope:{ctx:Z}}}),de=new Je({props:{title:"Extractor de Características",local:"extractor-de-características",headingTag:"h2"}}),be=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFZpVEZlYXR1cmVFeHRyYWN0b3IlMEElMEF2aXRfZXh0cmFjdG9yJTIwJTNEJTIwVmlURmVhdHVyZUV4dHJhY3RvcigpJTBBcHJpbnQodml0X2V4dHJhY3Rvcik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ViTFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span>vit_extractor = ViTFeatureExtractor()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(vit_extractor)
ViTFeatureExtractor {
  <span class="hljs-string">&quot;do_normalize&quot;</span>: true,
  <span class="hljs-string">&quot;do_resize&quot;</span>: true,
  <span class="hljs-string">&quot;feature_extractor_type&quot;</span>: <span class="hljs-string">&quot;ViTFeatureExtractor&quot;</span>,
  <span class="hljs-string">&quot;image_mean&quot;</span>: [
    <span class="hljs-number">0.5</span>,
    <span class="hljs-number">0.5</span>,
    <span class="hljs-number">0.5</span>
  ],
  <span class="hljs-string">&quot;image_std&quot;</span>: [
    <span class="hljs-number">0.5</span>,
    <span class="hljs-number">0.5</span>,
    <span class="hljs-number">0.5</span>
  ],
  <span class="hljs-string">&quot;resample&quot;</span>: <span class="hljs-number">2</span>,
  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">224</span>
}`,wrap:!1}}),B=new ws({props:{$$slots:{default:[Tt]},$$scope:{ctx:Z}}}),ye=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFZpVEZlYXR1cmVFeHRyYWN0b3IlMEElMEFteV92aXRfZXh0cmFjdG9yJTIwJTNEJTIwVmlURmVhdHVyZUV4dHJhY3RvcihyZXNhbXBsZSUzRCUyMlBJTC5JbWFnZS5CT1glMjIlMkMlMjBkb19ub3JtYWxpemUlM0RGYWxzZSUyQyUyMGltYWdlX21lYW4lM0QlNUIwLjMlMkMlMjAwLjMlMkMlMjAwLjMlNUQpJTBBcHJpbnQobXlfdml0X2V4dHJhY3Rvcik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ViTFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span>my_vit_extractor = ViTFeatureExtractor(resample=<span class="hljs-string">&quot;PIL.Image.BOX&quot;</span>, do_normalize=<span class="hljs-literal">False</span>, image_mean=[<span class="hljs-number">0.3</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.3</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(my_vit_extractor)
ViTFeatureExtractor {
  <span class="hljs-string">&quot;do_normalize&quot;</span>: false,
  <span class="hljs-string">&quot;do_resize&quot;</span>: true,
  <span class="hljs-string">&quot;feature_extractor_type&quot;</span>: <span class="hljs-string">&quot;ViTFeatureExtractor&quot;</span>,
  <span class="hljs-string">&quot;image_mean&quot;</span>: [
    <span class="hljs-number">0.3</span>,
    <span class="hljs-number">0.3</span>,
    <span class="hljs-number">0.3</span>
  ],
  <span class="hljs-string">&quot;image_std&quot;</span>: [
    <span class="hljs-number">0.5</span>,
    <span class="hljs-number">0.5</span>,
    <span class="hljs-number">0.5</span>
  ],
  <span class="hljs-string">&quot;resample&quot;</span>: <span class="hljs-string">&quot;PIL.Image.BOX&quot;</span>,
  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">224</span>
}`,wrap:!1}}),je=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFdhdjJWZWMyRmVhdHVyZUV4dHJhY3RvciUwQSUwQXcydjJfZXh0cmFjdG9yJTIwJTNEJTIwV2F2MlZlYzJGZWF0dXJlRXh0cmFjdG9yKCklMEFwcmludCh3MnYyX2V4dHJhY3Rvcik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Wav2Vec2FeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span>w2v2_extractor = Wav2Vec2FeatureExtractor()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(w2v2_extractor)
Wav2Vec2FeatureExtractor {
  <span class="hljs-string">&quot;do_normalize&quot;</span>: true,
  <span class="hljs-string">&quot;feature_extractor_type&quot;</span>: <span class="hljs-string">&quot;Wav2Vec2FeatureExtractor&quot;</span>,
  <span class="hljs-string">&quot;feature_size&quot;</span>: <span class="hljs-number">1</span>,
  <span class="hljs-string">&quot;padding_side&quot;</span>: <span class="hljs-string">&quot;right&quot;</span>,
  <span class="hljs-string">&quot;padding_value&quot;</span>: <span class="hljs-number">0.0</span>,
  <span class="hljs-string">&quot;return_attention_mask&quot;</span>: false,
  <span class="hljs-string">&quot;sampling_rate&quot;</span>: <span class="hljs-number">16000</span>
}`,wrap:!1}}),Me=new Je({props:{title:"Procesador",local:"procesador",headingTag:"h2"}}),ve=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFdhdjJWZWMyRmVhdHVyZUV4dHJhY3RvciUwQSUwQWZlYXR1cmVfZXh0cmFjdG9yJTIwJTNEJTIwV2F2MlZlYzJGZWF0dXJlRXh0cmFjdG9yKHBhZGRpbmdfdmFsdWUlM0QxLjAlMkMlMjBkb19ub3JtYWxpemUlM0RUcnVlKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Wav2Vec2FeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = Wav2Vec2FeatureExtractor(padding_value=<span class="hljs-number">1.0</span>, do_normalize=<span class="hljs-literal">True</span>)`,wrap:!1}}),Ze=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFdhdjJWZWMyQ1RDVG9rZW5pemVyJTBBJTBBdG9rZW5pemVyJTIwJTNEJTIwV2F2MlZlYzJDVENUb2tlbml6ZXIodm9jYWJfZmlsZSUzRCUyMm15X3ZvY2FiX2ZpbGUudHh0JTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Wav2Vec2CTCTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = Wav2Vec2CTCTokenizer(vocab_file=<span class="hljs-string">&quot;my_vocab_file.txt&quot;</span>)`,wrap:!1}}),ke=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFdhdjJWZWMyUHJvY2Vzc29yJTBBJTBBcHJvY2Vzc29yJTIwJTNEJTIwV2F2MlZlYzJQcm9jZXNzb3IoZmVhdHVyZV9leHRyYWN0b3IlM0RmZWF0dXJlX2V4dHJhY3RvciUyQyUyMHRva2VuaXplciUzRHRva2VuaXplcik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Wav2Vec2Processor

<span class="hljs-meta">&gt;&gt;&gt; </span>processor = Wav2Vec2Processor(feature_extractor=feature_extractor, tokenizer=tokenizer)`,wrap:!1}}),{c(){n=u("meta"),m=o(),l=u("p"),c=o(),f(M.$$.fragment),_=o(),C=u("p"),C.innerHTML=z,q=o(),k=u("ul"),k.innerHTML=p,v=o(),f(W.$$.fragment),J=o(),U=u("p"),U.innerHTML=V,R=o(),x=u("p"),x.innerHTML=r,T=o(),f(L.$$.fragment),We=o(),Y=u("p"),Y.innerHTML=zs,xe=o(),N=u("ul"),N.innerHTML=Js,Ue=o(),f(Q.$$.fragment),Ve=o(),P=u("p"),P.innerHTML=Rs,Ge=o(),f(I.$$.fragment),He=o(),D=u("p"),D.innerHTML=Cs,Ee=o(),f(S.$$.fragment),Xe=o(),A=u("p"),A.innerHTML=Ws,Fe=o(),f(K.$$.fragment),Be=o(),f(G.$$.fragment),Le=o(),f(O.$$.fragment),Ye=o(),ee=u("p"),ee.innerHTML=xs,Ne=o(),f(H.$$.fragment),Qe=o(),f(se.$$.fragment),Pe=o(),te=u("p"),te.innerHTML=Us,Ie=o(),f(E.$$.fragment),De=o(),f(ae.$$.fragment),Se=o(),ne=u("p"),ne.innerHTML=Vs,Ae=o(),le=u("ul"),le.innerHTML=Gs,Ke=o(),re=u("p"),re.innerHTML=Hs,Oe=o(),f(X.$$.fragment),es=o(),oe=u("p"),oe.innerHTML=Es,ss=o(),f(ie.$$.fragment),ts=o(),pe=u("p"),pe.innerHTML=Xs,as=o(),f(ce.$$.fragment),ns=o(),me=u("p"),me.innerHTML=Fs,ls=o(),f(ue.$$.fragment),rs=o(),f(F.$$.fragment),os=o(),f(de.$$.fragment),is=o(),fe=u("p"),fe.innerHTML=Bs,ps=o(),ge=u("p"),ge.innerHTML=Ls,cs=o(),f(be.$$.fragment),ms=o(),f(B.$$.fragment),us=o(),$e=u("p"),$e.innerHTML=Ys,ds=o(),f(ye.$$.fragment),fs=o(),he=u("p"),he.innerHTML=Ns,gs=o(),f(je.$$.fragment),bs=o(),f(Me.$$.fragment),$s=o(),_e=u("p"),_e.innerHTML=Qs,ys=o(),qe=u("p"),qe.textContent=Ps,hs=o(),f(ve.$$.fragment),js=o(),Te=u("p"),Te.innerHTML=Is,Ms=o(),f(Ze.$$.fragment),_s=o(),we=u("p"),we.innerHTML=Ds,qs=o(),f(ke.$$.fragment),vs=o(),ze=u("p"),ze.innerHTML=Ss,Ts=o(),Ce=u("p"),this.h()},l(e){const s=ct("svelte-u9bgzb",document.head);n=d(s,"META",{name:!0,content:!0}),s.forEach(t),m=i(e),l=d(e,"P",{}),at(l).forEach(t),c=i(e),g(M.$$.fragment,e),_=i(e),C=d(e,"P",{"data-svelte-h":!0}),j(C)!=="svelte-dm1462"&&(C.innerHTML=z),q=i(e),k=d(e,"UL",{"data-svelte-h":!0}),j(k)!=="svelte-1xm5p5u"&&(k.innerHTML=p),v=i(e),g(W.$$.fragment,e),J=i(e),U=d(e,"P",{"data-svelte-h":!0}),j(U)!=="svelte-1arlb8"&&(U.innerHTML=V),R=i(e),x=d(e,"P",{"data-svelte-h":!0}),j(x)!=="svelte-mfbtck"&&(x.innerHTML=r),T=i(e),g(L.$$.fragment,e),We=i(e),Y=d(e,"P",{"data-svelte-h":!0}),j(Y)!=="svelte-e66cw3"&&(Y.innerHTML=zs),xe=i(e),N=d(e,"UL",{"data-svelte-h":!0}),j(N)!=="svelte-1qbxlnb"&&(N.innerHTML=Js),Ue=i(e),g(Q.$$.fragment,e),Ve=i(e),P=d(e,"P",{"data-svelte-h":!0}),j(P)!=="svelte-vq831o"&&(P.innerHTML=Rs),Ge=i(e),g(I.$$.fragment,e),He=i(e),D=d(e,"P",{"data-svelte-h":!0}),j(D)!=="svelte-4x2db6"&&(D.innerHTML=Cs),Ee=i(e),g(S.$$.fragment,e),Xe=i(e),A=d(e,"P",{"data-svelte-h":!0}),j(A)!=="svelte-sjybtz"&&(A.innerHTML=Ws),Fe=i(e),g(K.$$.fragment,e),Be=i(e),g(G.$$.fragment,e),Le=i(e),g(O.$$.fragment,e),Ye=i(e),ee=d(e,"P",{"data-svelte-h":!0}),j(ee)!=="svelte-12lqec2"&&(ee.innerHTML=xs),Ne=i(e),g(H.$$.fragment,e),Qe=i(e),g(se.$$.fragment,e),Pe=i(e),te=d(e,"P",{"data-svelte-h":!0}),j(te)!=="svelte-1c4hggu"&&(te.innerHTML=Us),Ie=i(e),g(E.$$.fragment,e),De=i(e),g(ae.$$.fragment,e),Se=i(e),ne=d(e,"P",{"data-svelte-h":!0}),j(ne)!=="svelte-1t9vh79"&&(ne.innerHTML=Vs),Ae=i(e),le=d(e,"UL",{"data-svelte-h":!0}),j(le)!=="svelte-l7fe2p"&&(le.innerHTML=Gs),Ke=i(e),re=d(e,"P",{"data-svelte-h":!0}),j(re)!=="svelte-v619fo"&&(re.innerHTML=Hs),Oe=i(e),g(X.$$.fragment,e),es=i(e),oe=d(e,"P",{"data-svelte-h":!0}),j(oe)!=="svelte-7bvzxa"&&(oe.innerHTML=Es),ss=i(e),g(ie.$$.fragment,e),ts=i(e),pe=d(e,"P",{"data-svelte-h":!0}),j(pe)!=="svelte-uuuewf"&&(pe.innerHTML=Xs),as=i(e),g(ce.$$.fragment,e),ns=i(e),me=d(e,"P",{"data-svelte-h":!0}),j(me)!=="svelte-1g84zm4"&&(me.innerHTML=Fs),ls=i(e),g(ue.$$.fragment,e),rs=i(e),g(F.$$.fragment,e),os=i(e),g(de.$$.fragment,e),is=i(e),fe=d(e,"P",{"data-svelte-h":!0}),j(fe)!=="svelte-80wwb4"&&(fe.innerHTML=Bs),ps=i(e),ge=d(e,"P",{"data-svelte-h":!0}),j(ge)!=="svelte-w8g7kr"&&(ge.innerHTML=Ls),cs=i(e),g(be.$$.fragment,e),ms=i(e),g(B.$$.fragment,e),us=i(e),$e=d(e,"P",{"data-svelte-h":!0}),j($e)!=="svelte-owaqea"&&($e.innerHTML=Ys),ds=i(e),g(ye.$$.fragment,e),fs=i(e),he=d(e,"P",{"data-svelte-h":!0}),j(he)!=="svelte-1sgakve"&&(he.innerHTML=Ns),gs=i(e),g(je.$$.fragment,e),bs=i(e),g(Me.$$.fragment,e),$s=i(e),_e=d(e,"P",{"data-svelte-h":!0}),j(_e)!=="svelte-15a5ye0"&&(_e.innerHTML=Qs),ys=i(e),qe=d(e,"P",{"data-svelte-h":!0}),j(qe)!=="svelte-1301iq7"&&(qe.textContent=Ps),hs=i(e),g(ve.$$.fragment,e),js=i(e),Te=d(e,"P",{"data-svelte-h":!0}),j(Te)!=="svelte-5jsh85"&&(Te.innerHTML=Is),Ms=i(e),g(Ze.$$.fragment,e),_s=i(e),we=d(e,"P",{"data-svelte-h":!0}),j(we)!=="svelte-mqecrb"&&(we.innerHTML=Ds),qs=i(e),g(ke.$$.fragment,e),vs=i(e),ze=d(e,"P",{"data-svelte-h":!0}),j(ze)!=="svelte-lijb3q"&&(ze.innerHTML=Ss),Ts=i(e),Ce=d(e,"P",{}),at(Ce).forEach(t),this.h()},h(){nt(n,"name","hf:doc:metadata"),nt(n,"content",wt)},m(e,s){mt(document.head,n),a(e,m,s),a(e,l,s),a(e,c,s),b(M,e,s),a(e,_,s),a(e,C,s),a(e,q,s),a(e,k,s),a(e,v,s),b(W,e,s),a(e,J,s),a(e,U,s),a(e,R,s),a(e,x,s),a(e,T,s),b(L,e,s),a(e,We,s),a(e,Y,s),a(e,xe,s),a(e,N,s),a(e,Ue,s),b(Q,e,s),a(e,Ve,s),a(e,P,s),a(e,Ge,s),b(I,e,s),a(e,He,s),a(e,D,s),a(e,Ee,s),b(S,e,s),a(e,Xe,s),a(e,A,s),a(e,Fe,s),b(K,e,s),a(e,Be,s),b(G,e,s),a(e,Le,s),b(O,e,s),a(e,Ye,s),a(e,ee,s),a(e,Ne,s),b(H,e,s),a(e,Qe,s),b(se,e,s),a(e,Pe,s),a(e,te,s),a(e,Ie,s),b(E,e,s),a(e,De,s),b(ae,e,s),a(e,Se,s),a(e,ne,s),a(e,Ae,s),a(e,le,s),a(e,Ke,s),a(e,re,s),a(e,Oe,s),b(X,e,s),a(e,es,s),a(e,oe,s),a(e,ss,s),b(ie,e,s),a(e,ts,s),a(e,pe,s),a(e,as,s),b(ce,e,s),a(e,ns,s),a(e,me,s),a(e,ls,s),b(ue,e,s),a(e,rs,s),b(F,e,s),a(e,os,s),b(de,e,s),a(e,is,s),a(e,fe,s),a(e,ps,s),a(e,ge,s),a(e,cs,s),b(be,e,s),a(e,ms,s),b(B,e,s),a(e,us,s),a(e,$e,s),a(e,ds,s),b(ye,e,s),a(e,fs,s),a(e,he,s),a(e,gs,s),b(je,e,s),a(e,bs,s),b(Me,e,s),a(e,$s,s),a(e,_e,s),a(e,ys,s),a(e,qe,s),a(e,hs,s),b(ve,e,s),a(e,js,s),a(e,Te,s),a(e,Ms,s),b(Ze,e,s),a(e,_s,s),a(e,we,s),a(e,qs,s),b(ke,e,s),a(e,vs,s),a(e,ze,s),a(e,Ts,s),a(e,Ce,s),Zs=!0},p(e,[s]){const As={};s&2&&(As.$$scope={dirty:s,ctx:e}),G.$set(As);const Ks={};s&2&&(Ks.$$scope={dirty:s,ctx:e}),H.$set(Ks);const Os={};s&2&&(Os.$$scope={dirty:s,ctx:e}),E.$set(Os);const et={};s&2&&(et.$$scope={dirty:s,ctx:e}),X.$set(et);const st={};s&2&&(st.$$scope={dirty:s,ctx:e}),F.$set(st);const tt={};s&2&&(tt.$$scope={dirty:s,ctx:e}),B.$set(tt)},i(e){Zs||($(M.$$.fragment,e),$(W.$$.fragment,e),$(L.$$.fragment,e),$(Q.$$.fragment,e),$(I.$$.fragment,e),$(S.$$.fragment,e),$(K.$$.fragment,e),$(G.$$.fragment,e),$(O.$$.fragment,e),$(H.$$.fragment,e),$(se.$$.fragment,e),$(E.$$.fragment,e),$(ae.$$.fragment,e),$(X.$$.fragment,e),$(ie.$$.fragment,e),$(ce.$$.fragment,e),$(ue.$$.fragment,e),$(F.$$.fragment,e),$(de.$$.fragment,e),$(be.$$.fragment,e),$(B.$$.fragment,e),$(ye.$$.fragment,e),$(je.$$.fragment,e),$(Me.$$.fragment,e),$(ve.$$.fragment,e),$(Ze.$$.fragment,e),$(ke.$$.fragment,e),Zs=!0)},o(e){y(M.$$.fragment,e),y(W.$$.fragment,e),y(L.$$.fragment,e),y(Q.$$.fragment,e),y(I.$$.fragment,e),y(S.$$.fragment,e),y(K.$$.fragment,e),y(G.$$.fragment,e),y(O.$$.fragment,e),y(H.$$.fragment,e),y(se.$$.fragment,e),y(E.$$.fragment,e),y(ae.$$.fragment,e),y(X.$$.fragment,e),y(ie.$$.fragment,e),y(ce.$$.fragment,e),y(ue.$$.fragment,e),y(F.$$.fragment,e),y(de.$$.fragment,e),y(be.$$.fragment,e),y(B.$$.fragment,e),y(ye.$$.fragment,e),y(je.$$.fragment,e),y(Me.$$.fragment,e),y(ve.$$.fragment,e),y(Ze.$$.fragment,e),y(ke.$$.fragment,e),Zs=!1},d(e){e&&(t(m),t(l),t(c),t(_),t(C),t(q),t(k),t(v),t(J),t(U),t(R),t(x),t(T),t(We),t(Y),t(xe),t(N),t(Ue),t(Ve),t(P),t(Ge),t(He),t(D),t(Ee),t(Xe),t(A),t(Fe),t(Be),t(Le),t(Ye),t(ee),t(Ne),t(Qe),t(Pe),t(te),t(Ie),t(De),t(Se),t(ne),t(Ae),t(le),t(Ke),t(re),t(Oe),t(es),t(oe),t(ss),t(ts),t(pe),t(as),t(ns),t(me),t(ls),t(rs),t(os),t(is),t(fe),t(ps),t(ge),t(cs),t(ms),t(us),t($e),t(ds),t(fs),t(he),t(gs),t(bs),t($s),t(_e),t(ys),t(qe),t(hs),t(js),t(Te),t(Ms),t(_s),t(we),t(qs),t(vs),t(ze),t(Ts),t(Ce)),t(n),h(M,e),h(W,e),h(L,e),h(Q,e),h(I,e),h(S,e),h(K,e),h(G,e),h(O,e),h(H,e),h(se,e),h(E,e),h(ae,e),h(X,e),h(ie,e),h(ce,e),h(ue,e),h(F,e),h(de,e),h(be,e),h(B,e),h(ye,e),h(je,e),h(Me,e),h(ve,e),h(Ze,e),h(ke,e)}}}const wt='{"title":"Crea una arquitectura personalizada","local":"crea-una-arquitectura-personalizada","sections":[{"title":"Configuración","local":"configuración","sections":[],"depth":2},{"title":"Modelo","local":"modelo","sections":[{"title":"Cabezas de modelo","local":"cabezas-de-modelo","sections":[],"depth":3}],"depth":2},{"title":"Tokenizer","local":"tokenizer","sections":[],"depth":2},{"title":"Extractor de Características","local":"extractor-de-características","sections":[],"depth":2},{"title":"Procesador","local":"procesador","sections":[],"depth":2}],"depth":1}';function kt(Z){return ot(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ut extends it{constructor(n){super(),pt(this,n,kt,Zt,rt,{})}}export{Ut as component};
