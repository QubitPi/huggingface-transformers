import{s as nt,o as at,n as st}from"../chunks/scheduler.9bc65507.js";import{S as ot,i as pt,g as o,s as a,r as q,A as rt,h as p,f as l,c as s,j as lt,u as z,x as f,k as it,y as ft,a as i,v as B,d as I,t as J,w as N}from"../chunks/index.707bf1b6.js";import{T as mt}from"../chunks/Tip.c2ecdbf4.js";import{H as Y}from"../chunks/Heading.342b1fa6.js";function ut(L){let n,u='DialoGPT のアーキテクチャは GPT2 モデルに基づいています。API リファレンスと例については、<a href="openai-community/gpt2">GPT2 のドキュメント ページ</a> を参照してください。';return{c(){n=o("p"),n.innerHTML=u},l(r){n=p(r,"P",{"data-svelte-h":!0}),f(n)!=="svelte-5oxuc2"&&(n.innerHTML=u)},m(r,w){i(r,n,w)},p:st,d(r){r&&l(n)}}}function $t(L){let n,u,r,w,$,M,T,D,v,F=`DialoGPT は、<a href="https://arxiv.org/abs/1911.00536" rel="nofollow">DialoGPT: Large-Scale Generative Pre-training for Conversational Response Generation</a> で Yizhe Zhang, Siqi Sun, Michel Galley, Yen-Chun Chen, Chris Brockett, Xiang Gao,
Jianfeng Gao, Jingjing Liu, Bill Dolan.これは、から抽出された 147M 万の会話のようなやりとりでトレーニングされた GPT2 モデルです。
レディット。`,H,P,X="論文の要約は次のとおりです。",y,c,Z=`<em>私たちは、大規模で調整可能なニューラル会話応答生成モデル DialoGPT (対話生成事前トレーニング済み) を紹介します。
変成器）。 Reddit のコメント チェーンから抽出された 1 億 4,700 万件の会話のようなやり取りを対象にトレーニングされました。
2005 年から 2017 年にかけて、DialoGPT は人間に近いパフォーマンスを達成するために Hugging Face PyTorch トランスフォーマーを拡張しました。
シングルターンダイアログ設定における自動評価と人間による評価の両方。会話システムが
DialoGPT を活用すると、強力なベースラインよりも関連性が高く、内容が充実し、コンテキストに一貫性のある応答が生成されます。
システム。神経反応の研究を促進するために、事前トレーニングされたモデルとトレーニング パイプラインが公開されています。
よりインテリジェントなオープンドメイン対話システムの生成と開発。</em>`,S,h,K='元のコードは <a href="https://github.com/microsoft/DialoGPT" rel="nofollow">ここ</a> にあります。',U,_,b,g,Q=`<li>DialoGPT は絶対位置埋め込みを備えたモデルであるため、通常は入力を右側にパディングすることをお勧めします。
左よりも。</li> <li>DialoGPT は、会話データの因果言語モデリング (CLM) 目標に基づいてトレーニングされているため、強力です
オープンドメイン対話システムにおける応答生成時。</li> <li>DialoGPT を使用すると、<a href="https://huggingface.co/microsoft/DialoGPT-medium" rel="nofollow">DialoGPT’s model card</a> に示されているように、ユーザーはわずか 10 行のコードでチャット ボットを作成できます。</li>`,j,x,V="トレーニング：",A,G,W=`DialoGPT をトレーニングまたは微調整するには、因果言語モデリング トレーニングを使用できます。公式論文を引用すると： *私たちは
OpenAI GPT-2に従って、マルチターン対話セッションを長いテキストとしてモデル化し、生成タスクを言語としてフレーム化します
モデリング。まず、ダイアログ セッション内のすべてのダイアログ ターンを長いテキスト x_1,…, x_N に連結します (N は`,E,C,tt="<li>詳細については、元の論文を参照してください。</li>",k,m,O,d,R;return $=new Y({props:{title:"DialoGPT",local:"dialogpt",headingTag:"h1"}}),T=new Y({props:{title:"Overview",local:"overview",headingTag:"h2"}}),_=new Y({props:{title:"Usage tips",local:"usage-tips",headingTag:"h2"}}),m=new mt({props:{$$slots:{default:[ut]},$$scope:{ctx:L}}}),{c(){n=o("meta"),u=a(),r=o("p"),w=a(),q($.$$.fragment),M=a(),q(T.$$.fragment),D=a(),v=o("p"),v.innerHTML=F,H=a(),P=o("p"),P.textContent=X,y=a(),c=o("p"),c.innerHTML=Z,S=a(),h=o("p"),h.innerHTML=K,U=a(),q(_.$$.fragment),b=a(),g=o("ul"),g.innerHTML=Q,j=a(),x=o("p"),x.textContent=V,A=a(),G=o("p"),G.textContent=W,E=a(),C=o("ul"),C.innerHTML=tt,k=a(),q(m.$$.fragment),O=a(),d=o("p"),this.h()},l(t){const e=rt("svelte-u9bgzb",document.head);n=p(e,"META",{name:!0,content:!0}),e.forEach(l),u=s(t),r=p(t,"P",{}),lt(r).forEach(l),w=s(t),z($.$$.fragment,t),M=s(t),z(T.$$.fragment,t),D=s(t),v=p(t,"P",{"data-svelte-h":!0}),f(v)!=="svelte-1s6k9j6"&&(v.innerHTML=F),H=s(t),P=p(t,"P",{"data-svelte-h":!0}),f(P)!=="svelte-1cv3nri"&&(P.textContent=X),y=s(t),c=p(t,"P",{"data-svelte-h":!0}),f(c)!=="svelte-29ryet"&&(c.innerHTML=Z),S=s(t),h=p(t,"P",{"data-svelte-h":!0}),f(h)!=="svelte-14h9auw"&&(h.innerHTML=K),U=s(t),z(_.$$.fragment,t),b=s(t),g=p(t,"UL",{"data-svelte-h":!0}),f(g)!=="svelte-7irg4f"&&(g.innerHTML=Q),j=s(t),x=p(t,"P",{"data-svelte-h":!0}),f(x)!=="svelte-vhw68w"&&(x.textContent=V),A=s(t),G=p(t,"P",{"data-svelte-h":!0}),f(G)!=="svelte-8ield1"&&(G.textContent=W),E=s(t),C=p(t,"UL",{"data-svelte-h":!0}),f(C)!=="svelte-1wixjvn"&&(C.innerHTML=tt),k=s(t),z(m.$$.fragment,t),O=s(t),d=p(t,"P",{}),lt(d).forEach(l),this.h()},h(){it(n,"name","hf:doc:metadata"),it(n,"content",Tt)},m(t,e){ft(document.head,n),i(t,u,e),i(t,r,e),i(t,w,e),B($,t,e),i(t,M,e),B(T,t,e),i(t,D,e),i(t,v,e),i(t,H,e),i(t,P,e),i(t,y,e),i(t,c,e),i(t,S,e),i(t,h,e),i(t,U,e),B(_,t,e),i(t,b,e),i(t,g,e),i(t,j,e),i(t,x,e),i(t,A,e),i(t,G,e),i(t,E,e),i(t,C,e),i(t,k,e),B(m,t,e),i(t,O,e),i(t,d,e),R=!0},p(t,[e]){const et={};e&2&&(et.$$scope={dirty:e,ctx:t}),m.$set(et)},i(t){R||(I($.$$.fragment,t),I(T.$$.fragment,t),I(_.$$.fragment,t),I(m.$$.fragment,t),R=!0)},o(t){J($.$$.fragment,t),J(T.$$.fragment,t),J(_.$$.fragment,t),J(m.$$.fragment,t),R=!1},d(t){t&&(l(u),l(r),l(w),l(M),l(D),l(v),l(H),l(P),l(y),l(c),l(S),l(h),l(U),l(b),l(g),l(j),l(x),l(A),l(G),l(E),l(C),l(k),l(O),l(d)),l(n),N($,t),N(T,t),N(_,t),N(m,t)}}}const Tt='{"title":"DialoGPT","local":"dialogpt","sections":[{"title":"Overview","local":"overview","sections":[],"depth":2},{"title":"Usage tips","local":"usage-tips","sections":[],"depth":2}],"depth":1}';function vt(L){return at(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class gt extends ot{constructor(n){super(),pt(this,n,vt,$t,nt,{})}}export{gt as component};
