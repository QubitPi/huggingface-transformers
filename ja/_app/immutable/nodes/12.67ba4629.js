import{s as je,o as be,n as G}from"../chunks/scheduler.9bc65507.js";import{S as _e,i as Me,g as f,s as p,r as $,A as Te,h as u,f as e,c as i,j as ge,u as g,x as d,k as ye,y as ve,a,v as y,d as h,t as j,w as b}from"../chunks/index.707bf1b6.js";import{T as Fs}from"../chunks/Tip.c2ecdbf4.js";import{C as q}from"../chunks/CodeBlock.54a9f38d.js";import{F as he,M as Ft}from"../chunks/Markdown.8ab98a13.js";import{H as Q}from"../chunks/Heading.342b1fa6.js";function we(Z){let l,c='カスタム構成ファイルを辞書として保存することも、カスタム構成属性とデフォルトの構成属性の違いだけを保存することもできます！詳細については<a href="main_classes/configuration">configuration</a>のドキュメンテーションをご覧ください。';return{c(){l=f("p"),l.innerHTML=c},l(n){l=u(n,"P",{"data-svelte-h":!0}),d(l)!=="svelte-1es1e5s"&&(l.innerHTML=c)},m(n,o){a(n,l,o)},p:G,d(n){n&&e(l)}}}function Ze(Z){let l,c="モデルにカスタム構成属性をロードします：",n,o,_,M,W=`これにより、事前トレーニング済みの重みではなくランダムな値を持つモデルが作成されます。
これは、トレーニングが行われるまで、まだ有用なものとして使用することはできません。
トレーニングはコストと時間がかかるプロセスです。
通常、トレーニングに必要なリソースの一部しか使用せず、より速くより良い結果を得るために事前学習済みモデルを使用することが良いでしょう。`,R,T,J='<a href="/docs/transformers/main/ja/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a>を使用して事前学習済みモデルを作成します：',m,v,U,k,x="事前学習済みの重みをロードする際、モデルが🤗 Transformersによって提供されている場合、デフォルトのモデル設定が自動的にロードされます。ただし、必要に応じてデフォルトのモデル設定属性の一部またはすべてを独自のもので置き換えることができます。",z,C,V;return o=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpc3RpbEJlcnRNb2RlbCUwQSUwQW15X2NvbmZpZyUyMCUzRCUyMERpc3RpbEJlcnRDb25maWcuZnJvbV9wcmV0cmFpbmVkKCUyMi4lMkZ5b3VyX21vZGVsX3NhdmVfcGF0aCUyRmNvbmZpZy5qc29uJTIyKSUwQW1vZGVsJTIwJTNEJTIwRGlzdGlsQmVydE1vZGVsKG15X2NvbmZpZyk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span>my_config = DistilBertConfig.from_pretrained(<span class="hljs-string">&quot;./your_model_save_path/config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DistilBertModel(my_config)`,wrap:!1}}),v=new q({props:{code:"bW9kZWwlMjAlM0QlMjBEaXN0aWxCZXJ0TW9kZWwuZnJvbV9wcmV0cmFpbmVkKCUyMmRpc3RpbGJlcnQlMkZkaXN0aWxiZXJ0LWJhc2UtdW5jYXNlZCUyMik=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model = DistilBertModel.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)',wrap:!1}}),C=new q({props:{code:"bW9kZWwlMjAlM0QlMjBEaXN0aWxCZXJ0TW9kZWwuZnJvbV9wcmV0cmFpbmVkKCUyMmRpc3RpbGJlcnQlMkZkaXN0aWxiZXJ0LWJhc2UtdW5jYXNlZCUyMiUyQyUyMGNvbmZpZyUzRG15X2NvbmZpZyk=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model = DistilBertModel.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>, config=my_config)',wrap:!1}}),{c(){l=f("p"),l.textContent=c,n=p(),$(o.$$.fragment),_=p(),M=f("p"),M.textContent=W,R=p(),T=f("p"),T.innerHTML=J,m=p(),$(v.$$.fragment),U=p(),k=f("p"),k.textContent=x,z=p(),$(C.$$.fragment)},l(r){l=u(r,"P",{"data-svelte-h":!0}),d(l)!=="svelte-2f7gqq"&&(l.textContent=c),n=i(r),g(o.$$.fragment,r),_=i(r),M=u(r,"P",{"data-svelte-h":!0}),d(M)!=="svelte-1kzpzh3"&&(M.textContent=W),R=i(r),T=u(r,"P",{"data-svelte-h":!0}),d(T)!=="svelte-he7hu5"&&(T.innerHTML=J),m=i(r),g(v.$$.fragment,r),U=i(r),k=u(r,"P",{"data-svelte-h":!0}),d(k)!=="svelte-17tmn3z"&&(k.textContent=x),z=i(r),g(C.$$.fragment,r)},m(r,w){a(r,l,w),a(r,n,w),y(o,r,w),a(r,_,w),a(r,M,w),a(r,R,w),a(r,T,w),a(r,m,w),y(v,r,w),a(r,U,w),a(r,k,w),a(r,z,w),y(C,r,w),V=!0},p:G,i(r){V||(h(o.$$.fragment,r),h(v.$$.fragment,r),h(C.$$.fragment,r),V=!0)},o(r){j(o.$$.fragment,r),j(v.$$.fragment,r),j(C.$$.fragment,r),V=!1},d(r){r&&(e(l),e(n),e(_),e(M),e(R),e(T),e(m),e(U),e(k),e(z)),b(o,r),b(v,r),b(C,r)}}}function qe(Z){let l,c;return l=new Ft({props:{$$slots:{default:[Ze]},$$scope:{ctx:Z}}}),{c(){$(l.$$.fragment)},l(n){g(l.$$.fragment,n)},m(n,o){y(l,n,o),c=!0},p(n,o){const _={};o&2&&(_.$$scope={dirty:o,ctx:n}),l.$set(_)},i(n){c||(h(l.$$.fragment,n),c=!0)},o(n){j(l.$$.fragment,n),c=!1},d(n){b(l,n)}}}function Je(Z){let l,c="モデルにカスタム設定属性をロードしてください：",n,o,_,M,W=`これにより、事前学習済みの重みではなくランダムな値を持つモデルが作成されます。
このモデルを有用な目的にはまだ使用することはできません。トレーニングはコストがかかり、時間がかかるプロセスです。
一般的には、トレーニングに必要なリソースの一部しか使用せずに、より速く優れた結果を得るために事前学習済みモデルを使用することが良いでしょう。`,R,T,J='<a href="/docs/transformers/main/ja/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a>を使用して事前学習済みモデルを作成します：',m,v,U,k,x="事前学習済みの重みをロードする際、モデルが🤗 Transformersによって提供されている場合、デフォルトのモデル構成が自動的にロードされます。ただし、必要であればデフォルトのモデル構成属性の一部またはすべてを独自のもので置き換えることもできます：",z,C,V;return o=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFRGRGlzdGlsQmVydE1vZGVsJTBBJTBBbXlfY29uZmlnJTIwJTNEJTIwRGlzdGlsQmVydENvbmZpZy5mcm9tX3ByZXRyYWluZWQoJTIyLiUyRnlvdXJfbW9kZWxfc2F2ZV9wYXRoJTJGbXlfY29uZmlnLmpzb24lMjIpJTBBdGZfbW9kZWwlMjAlM0QlMjBURkRpc3RpbEJlcnRNb2RlbChteV9jb25maWcp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFDistilBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span>my_config = DistilBertConfig.from_pretrained(<span class="hljs-string">&quot;./your_model_save_path/my_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFDistilBertModel(my_config)`,wrap:!1}}),v=new q({props:{code:"dGZfbW9kZWwlMjAlM0QlMjBURkRpc3RpbEJlcnRNb2RlbC5mcm9tX3ByZXRyYWluZWQoJTIyZGlzdGlsYmVydCUyRmRpc3RpbGJlcnQtYmFzZS11bmNhc2VkJTIyKQ==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFDistilBertModel.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)',wrap:!1}}),C=new q({props:{code:"dGZfbW9kZWwlMjAlM0QlMjBURkRpc3RpbEJlcnRNb2RlbC5mcm9tX3ByZXRyYWluZWQoJTIyZGlzdGlsYmVydCUyRmRpc3RpbGJlcnQtYmFzZS11bmNhc2VkJTIyJTJDJTIwY29uZmlnJTNEbXlfY29uZmlnKQ==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFDistilBertModel.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>, config=my_config)',wrap:!1}}),{c(){l=f("p"),l.textContent=c,n=p(),$(o.$$.fragment),_=p(),M=f("p"),M.textContent=W,R=p(),T=f("p"),T.innerHTML=J,m=p(),$(v.$$.fragment),U=p(),k=f("p"),k.textContent=x,z=p(),$(C.$$.fragment)},l(r){l=u(r,"P",{"data-svelte-h":!0}),d(l)!=="svelte-68i60b"&&(l.textContent=c),n=i(r),g(o.$$.fragment,r),_=i(r),M=u(r,"P",{"data-svelte-h":!0}),d(M)!=="svelte-4zczag"&&(M.textContent=W),R=i(r),T=u(r,"P",{"data-svelte-h":!0}),d(T)!=="svelte-7st5n7"&&(T.innerHTML=J),m=i(r),g(v.$$.fragment,r),U=i(r),k=u(r,"P",{"data-svelte-h":!0}),d(k)!=="svelte-1l2jp01"&&(k.textContent=x),z=i(r),g(C.$$.fragment,r)},m(r,w){a(r,l,w),a(r,n,w),y(o,r,w),a(r,_,w),a(r,M,w),a(r,R,w),a(r,T,w),a(r,m,w),y(v,r,w),a(r,U,w),a(r,k,w),a(r,z,w),y(C,r,w),V=!0},p:G,i(r){V||(h(o.$$.fragment,r),h(v.$$.fragment,r),h(C.$$.fragment,r),V=!0)},o(r){j(o.$$.fragment,r),j(v.$$.fragment,r),j(C.$$.fragment,r),V=!1},d(r){r&&(e(l),e(n),e(_),e(M),e(R),e(T),e(m),e(U),e(k),e(z)),b(o,r),b(v,r),b(C,r)}}}function Re(Z){let l,c;return l=new Ft({props:{$$slots:{default:[Je]},$$scope:{ctx:Z}}}),{c(){$(l.$$.fragment)},l(n){g(l.$$.fragment,n)},m(n,o){y(l,n,o),c=!0},p(n,o){const _={};o&2&&(_.$$scope={dirty:o,ctx:n}),l.$set(_)},i(n){c||(h(l.$$.fragment,n),c=!0)},o(n){j(l.$$.fragment,n),c=!1},d(n){b(l,n)}}}function ke(Z){let l,c="たとえば、<code>DistilBertForSequenceClassification</code>は、シーケンス分類ヘッドを持つベースのDistilBERTモデルです。シーケンス分類ヘッドは、プールされた出力の上にある線形層です。",n,o,_,M,W=`新しいタスクにこのチェックポイントを簡単に再利用するには、異なるモデルヘッドに切り替えます。
質問応答タスクの場合、<code>DistilBertForQuestionAnswering</code> モデルヘッドを使用します。
質問応答ヘッドはシーケンス分類ヘッドと類似していますが、隠れ状態の出力の上に線形層があります。`,R,T,J;return o=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpc3RpbEJlcnRGb3JTZXF1ZW5jZUNsYXNzaWZpY2F0aW9uJTBBJTBBbW9kZWwlMjAlM0QlMjBEaXN0aWxCZXJ0Rm9yU2VxdWVuY2VDbGFzc2lmaWNhdGlvbi5mcm9tX3ByZXRyYWluZWQoJTIyZGlzdGlsYmVydCUyRmRpc3RpbGJlcnQtYmFzZS11bmNhc2VkJTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model = DistilBertForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)`,wrap:!1}}),T=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpc3RpbEJlcnRGb3JRdWVzdGlvbkFuc3dlcmluZyUwQSUwQW1vZGVsJTIwJTNEJTIwRGlzdGlsQmVydEZvclF1ZXN0aW9uQW5zd2VyaW5nLmZyb21fcHJldHJhaW5lZCglMjJkaXN0aWxiZXJ0JTJGZGlzdGlsYmVydC1iYXNlLXVuY2FzZWQlMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span>model = DistilBertForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)`,wrap:!1}}),{c(){l=f("p"),l.innerHTML=c,n=p(),$(o.$$.fragment),_=p(),M=f("p"),M.innerHTML=W,R=p(),$(T.$$.fragment)},l(m){l=u(m,"P",{"data-svelte-h":!0}),d(l)!=="svelte-1k4xv3d"&&(l.innerHTML=c),n=i(m),g(o.$$.fragment,m),_=i(m),M=u(m,"P",{"data-svelte-h":!0}),d(M)!=="svelte-1c4ilc3"&&(M.innerHTML=W),R=i(m),g(T.$$.fragment,m)},m(m,v){a(m,l,v),a(m,n,v),y(o,m,v),a(m,_,v),a(m,M,v),a(m,R,v),y(T,m,v),J=!0},p:G,i(m){J||(h(o.$$.fragment,m),h(T.$$.fragment,m),J=!0)},o(m){j(o.$$.fragment,m),j(T.$$.fragment,m),J=!1},d(m){m&&(e(l),e(n),e(_),e(M),e(R)),b(o,m),b(T,m)}}}function Ce(Z){let l,c;return l=new Ft({props:{$$slots:{default:[ke]},$$scope:{ctx:Z}}}),{c(){$(l.$$.fragment)},l(n){g(l.$$.fragment,n)},m(n,o){y(l,n,o),c=!0},p(n,o){const _={};o&2&&(_.$$scope={dirty:o,ctx:n}),l.$set(_)},i(n){c||(h(l.$$.fragment,n),c=!0)},o(n){j(l.$$.fragment,n),c=!1},d(n){b(l,n)}}}function We(Z){let l,c="例えば、<code>TFDistilBertForSequenceClassification</code>は、シーケンス分類ヘッドを持つベースのDistilBERTモデルです。シーケンス分類ヘッドは、プールされた出力の上にある線形層です。",n,o,_,M,W=`別のタスクにこのチェックポイントを簡単に再利用することができ、異なるモデルヘッドに切り替えるだけです。
質問応答タスクの場合、<code>TFDistilBertForQuestionAnswering</code>モデルヘッドを使用します。
質問応答ヘッドはシーケンス分類ヘッドと似ていますが、隠れ状態の出力の上に線形層があるだけです。`,R,T,J;return o=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFRGRGlzdGlsQmVydEZvclNlcXVlbmNlQ2xhc3NpZmljYXRpb24lMEElMEF0Zl9tb2RlbCUyMCUzRCUyMFRGRGlzdGlsQmVydEZvclNlcXVlbmNlQ2xhc3NpZmljYXRpb24uZnJvbV9wcmV0cmFpbmVkKCUyMmRpc3RpbGJlcnQlMkZkaXN0aWxiZXJ0LWJhc2UtdW5jYXNlZCUyMik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFDistilBertForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFDistilBertForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)`,wrap:!1}}),T=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFRGRGlzdGlsQmVydEZvclF1ZXN0aW9uQW5zd2VyaW5nJTBBJTBBdGZfbW9kZWwlMjAlM0QlMjBURkRpc3RpbEJlcnRGb3JRdWVzdGlvbkFuc3dlcmluZy5mcm9tX3ByZXRyYWluZWQoJTIyZGlzdGlsYmVydCUyRmRpc3RpbGJlcnQtYmFzZS11bmNhc2VkJTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFDistilBertForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFDistilBertForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)`,wrap:!1}}),{c(){l=f("p"),l.innerHTML=c,n=p(),$(o.$$.fragment),_=p(),M=f("p"),M.innerHTML=W,R=p(),$(T.$$.fragment)},l(m){l=u(m,"P",{"data-svelte-h":!0}),d(l)!=="svelte-1l1ixjb"&&(l.innerHTML=c),n=i(m),g(o.$$.fragment,m),_=i(m),M=u(m,"P",{"data-svelte-h":!0}),d(M)!=="svelte-10dgokn"&&(M.innerHTML=W),R=i(m),g(T.$$.fragment,m)},m(m,v){a(m,l,v),a(m,n,v),y(o,m,v),a(m,_,v),a(m,M,v),a(m,R,v),y(T,m,v),J=!0},p:G,i(m){J||(h(o.$$.fragment,m),h(T.$$.fragment,m),J=!0)},o(m){j(o.$$.fragment,m),j(T.$$.fragment,m),J=!1},d(m){m&&(e(l),e(n),e(_),e(M),e(R)),b(o,m),b(T,m)}}}function Ue(Z){let l,c;return l=new Ft({props:{$$slots:{default:[We]},$$scope:{ctx:Z}}}),{c(){$(l.$$.fragment)},l(n){g(l.$$.fragment,n)},m(n,o){y(l,n,o),c=!0},p(n,o){const _={};o&2&&(_.$$scope={dirty:o,ctx:n}),l.$set(_)},i(n){c||(h(l.$$.fragment,n),c=!0)},o(n){j(l.$$.fragment,n),c=!1},d(n){b(l,n)}}}function Ve(Z){let l,c=`すべてのモデルが高速なトークナイザをサポートしているわけではありません。
モデルが高速なトークナイザをサポートしているかどうかを確認するには、この<a href="index#supported-frameworks">表</a>をご覧ください。`;return{c(){l=f("p"),l.innerHTML=c},l(n){l=u(n,"P",{"data-svelte-h":!0}),d(l)!=="svelte-10ryv2l"&&(l.innerHTML=c)},m(n,o){a(n,l,o)},p:G,d(n){n&&e(l)}}}function xe(Z){let l,c='デフォルトでは、<a href="/docs/transformers/main/ja/model_doc/auto#transformers.AutoTokenizer">AutoTokenizer</a>は高速なトークナイザを読み込もうとします。<code>from_pretrained</code>内で<code>use_fast=False</code>を設定することで、この動作を無効にすることができます。';return{c(){l=f("p"),l.innerHTML=c},l(n){l=u(n,"P",{"data-svelte-h":!0}),d(l)!=="svelte-5zrwko"&&(l.innerHTML=c)},m(n,o){a(n,l,o)},p:G,d(n){n&&e(l)}}}function ze(Z){let l,c="カスタマイズを必要としない場合、モデルのデフォルトの画像プロセッサパラメータをロードするには、単純に<code>from_pretrained</code>メソッドを使用してください。";return{c(){l=f("p"),l.innerHTML=c},l(n){l=u(n,"P",{"data-svelte-h":!0}),d(l)!=="svelte-hj79vi"&&(l.innerHTML=c)},m(n,o){a(n,l,o)},p:G,d(n){n&&e(l)}}}function Ge(Z){let l,c="カスタマイズを行わない場合、モデルのデフォルトの特徴抽出器パラメーターをロードするには、単に <code>from_pretrained</code> メソッドを使用してください。";return{c(){l=f("p"),l.innerHTML=c},l(n){l=u(n,"P",{"data-svelte-h":!0}),d(l)!=="svelte-bb0lk7"&&(l.innerHTML=c)},m(n,o){a(n,l,o)},p:G,d(n){n&&e(l)}}}function Fe(Z){let l,c,n,o,_,M,W,R='<a href="model_doc/auto"><code>AutoClass</code></a>は、モデルのアーキテクチャを自動的に推論し、事前学習済みの設定と重みをダウンロードします。一般的には、チェックポイントに依存しないコードを生成するために<code>AutoClass</code>を使用することをお勧めします。ただし、特定のモデルパラメータに対する制御をより詳細に行いたいユーザーは、いくつかの基本クラスからカスタム🤗 Transformersモデルを作成できます。これは、🤗 Transformersモデルを研究、トレーニング、または実験する興味があるユーザーに特に役立つかもしれません。このガイドでは、<code>AutoClass</code>を使用しないカスタムモデルの作成について詳しく説明します。次の方法を学びます：',T,J,m="<li>モデルの設定をロードおよびカスタマイズする。</li> <li>モデルアーキテクチャを作成する。</li> <li>テキスト用の遅いトークナイザと高速トークナイザを作成する。</li> <li>ビジョンタスク用の画像プロセッサを作成する。</li> <li>オーディオタスク用の特徴抽出器を作成する。</li> <li>マルチモーダルタスク用のプロセッサを作成する。</li>",v,U,k,x,z='<a href="main_classes/configuration">設定</a>は、モデルの特定の属性を指します。各モデルの設定には異なる属性があります。たとえば、すべてのNLPモデルには、<code>hidden_size</code>、<code>num_attention_heads</code>、<code>num_hidden_layers</code>、および<code>vocab_size</code>属性が共通してあります。これらの属性は、モデルを構築するための注意ヘッドの数や隠れ層の数を指定します。',C,V,r='<a href="model_doc/distilbert">DistilBERT</a>をより詳しく調べるために、<code>DistilBertConfig</code>にアクセスしてその属性を調べてみましょう：',w,P,Hs,N,Ht=`<code>DistilBertConfig</code>は、基本の<code>DistilBertModel</code>を構築するために使用されるすべてのデフォルト属性を表示します。
すべての属性はカスタマイズ可能で、実験のためのスペースを提供します。例えば、デフォルトのモデルをカスタマイズして以下のようなことができます：`,Xs,I,Xt="<li><code>activation</code>パラメータで異なる活性化関数を試す。</li> <li><code>attention_dropout</code>パラメータで注意確率の高いドロップアウト率を使用する。</li>",Bs,D,Es,S,Bt='事前学習済みモデルの属性は、<a href="/docs/transformers/main/ja/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a> 関数で変更できます：',Ys,A,Ls,K,Et='Once you are satisfied with your model configuration, you can save it with <a href="/docs/transformers/main/ja/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">PretrainedConfig.save_pretrained()</a>. Your configuration file is stored as a JSON file in the specified save directory.',Qs,O,Ps,ss,Yt='設定ファイルを再利用するには、<a href="/docs/transformers/main/ja/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>を使用してそれをロードします：',Ns,ts,Is,F,Ds,es,Ss,as,Lt=`次のステップは、<a href="main_classes/models">モデル</a>を作成することです。モデル（アーキテクチャとも緩く言われることがあります）は、各レイヤーが何をしているか、どの操作が行われているかを定義します。構成からの <code>num_hidden_layers</code> のような属性はアーキテクチャを定義するために使用されます。
すべてのモデルは <a href="/docs/transformers/main/ja/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> をベースクラスとし、入力埋め込みのリサイズやセルフアテンションヘッドのプルーニングなど、共通のメソッドがいくつかあります。
さらに、すべてのモデルは <a href="https://pytorch.org/docs/stable/generated/torch.nn.Module.html" rel="nofollow"><code>torch.nn.Module</code></a>、<a href="https://www.tensorflow.org/api_docs/python/tf/keras/Model" rel="nofollow"><code>tf.keras.Model</code></a>、または <a href="https://flax.readthedocs.io/en/latest/api_reference/flax.linen/module.html" rel="nofollow"><code>flax.linen.Module</code></a> のいずれかのサブクラスでもあります。つまり、モデルはそれぞれのフレームワークの使用法と互換性があります。`,As,H,Ks,ls,Os,ns,Qt="この時点で、ベースのDistilBERTモデルがあり、これは隠れた状態を出力します。隠れた状態はモデルのヘッドへの入力として渡され、最終的な出力を生成します。🤗 Transformersは、モデルがそのタスクをサポートしている限り、各タスクに対応する異なるモデルヘッドを提供します（つまり、DistilBERTを翻訳のようなシーケンス対シーケンスタスクに使用することはできません）。",st,X,tt,rs,et,ps,Pt=`テキストデータをモデルで使用する前に必要な最後のベースクラスは、生のテキストをテンソルに変換するための<a href="main_classes/tokenizer">トークナイザ</a>です。
🤗 Transformersで使用できる2つのタイプのトークナイザがあります：`,at,is,Nt=`<li><a href="/docs/transformers/main/ja/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>: トークナイザのPython実装です。</li> <li><a href="/docs/transformers/main/ja/main_classes/tokenizer#transformers.PreTrainedTokenizerFast">PreTrainedTokenizerFast</a>: Rustベースの<a href="https://huggingface.co/docs/tokenizers/python/latest/" rel="nofollow">🤗 Tokenizer</a>ライブラリからのトークナイザです。
このトークナイザのタイプは、そのRust実装により、特にバッチトークナイゼーション中に高速です。
高速なトークナイザは、トークンを元の単語または文字にマッピングする<em>オフセットマッピング</em>などの追加メソッドも提供します。</li>`,lt,os,It="両方のトークナイザは、エンコードとデコード、新しいトークンの追加、特別なトークンの管理など、共通のメソッドをサポートしています。",nt,B,rt,ms,Dt="独自のトークナイザをトレーニングした場合、<em>ボキャブラリー</em>ファイルからトークナイザを作成できます。",pt,cs,it,fs,St=`カスタムトークナイザーから生成される語彙は、事前学習済みモデルのトークナイザーが生成する語彙とは異なることを覚えておくことは重要です。
事前学習済みモデルを使用する場合は、事前学習済みモデルの語彙を使用する必要があります。そうしないと、入力が意味をなさなくなります。
<code>DistilBertTokenizer</code>クラスを使用して、事前学習済みモデルの語彙を持つトークナイザーを作成します:`,ot,us,mt,ds,At="<code>DistilBertTokenizerFast</code>クラスを使用して高速なトークナイザを作成します：",ct,$s,ft,E,ut,gs,dt,ys,Kt='画像プロセッサはビジョン入力を処理します。これは基本クラス <a href="/docs/transformers/main/ja/main_classes/image_processor#transformers.ImageProcessingMixin">ImageProcessingMixin</a> を継承しています。',$t,hs,Ot=`使用するには、使用しているモデルに関連付けられた画像プロセッサを作成します。
たとえば、画像分類に<a href="model_doc/vit">ViT</a>を使用する場合、デフォルトの <code>ViTImageProcessor</code> を作成します。`,gt,js,yt,Y,ht,bs,se="<code>ViTImageProcessor</code>のパラメータを変更して、カスタムの画像プロセッサを作成できます：",jt,_s,bt,Ms,_t,Ts,te='フィーチャー抽出器は音声入力を処理します。これは基本的な <a href="/docs/transformers/main/ja/main_classes/feature_extractor#transformers.FeatureExtractionMixin">FeatureExtractionMixin</a> クラスから継承され、音声入力を処理するための <a href="/docs/transformers/main/ja/main_classes/feature_extractor#transformers.SequenceFeatureExtractor">SequenceFeatureExtractor</a> クラスからも継承されることがあります。',Mt,vs,ee='使用するには、モデルに関連付けられたフィーチャー抽出器を作成します。たとえば、音声分類に <a href="model_doc/wav2vec2">Wav2Vec2</a> を使用する場合、デフォルトの <code>Wav2Vec2FeatureExtractor</code> を作成します。',Tt,ws,vt,L,wt,Zs,ae="<code>Wav2Vec2FeatureExtractor</code> のパラメーターを変更して、カスタム特徴抽出器を作成できます:",Zt,qs,qt,Js,Jt,Rs,le=`マルチモーダルタスクをサポートするモデルに対して、🤗 Transformersは便利なプロセッサクラスを提供しています。
このプロセッサクラスは、特徴量抽出器やトークナイザなどの処理クラスを便利にラップし、単一のオブジェクトに結合します。
たとえば、自動音声認識タスク（ASR）用に<code>Wav2Vec2Processor</code>を使用してみましょう。
ASRは音声をテキストに転写するタスクであり、音声入力を処理するために特徴量抽出器とトークナイザが必要です。`,Rt,ks,ne="音声入力を処理する特徴量抽出器を作成します：",kt,Cs,Ct,Ws,re="テキスト入力を処理するトークナイザを作成します:",Wt,Us,Ut,Vs,pe="<code>Wav2Vec2Processor</code>で特徴量抽出器とトークナイザを組み合わせます：",Vt,xs,xt,zs,ie="二つの基本クラス - 設定とモデル - および追加の前処理クラス（トークナイザ、画像プロセッサ、特徴抽出器、またはプロセッサ）を使用することで、🤗 Transformers がサポートするモデルのいずれかを作成できます。これらの基本クラスは設定可能で、必要な特性を使用できます。モデルをトレーニング用に簡単にセットアップしたり、既存の事前学習済みモデルを微調整することができます。",zt,Gs,Gt;return _=new Q({props:{title:"Create a custom architecture",local:"create-a-custom-architecture",headingTag:"h1"}}),U=new Q({props:{title:"Configuration",local:"configuration",headingTag:"h2"}}),P=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpc3RpbEJlcnRDb25maWclMEElMEFjb25maWclMjAlM0QlMjBEaXN0aWxCZXJ0Q29uZmlnKCklMEFwcmludChjb25maWcp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertConfig

<span class="hljs-meta">&gt;&gt;&gt; </span>config = DistilBertConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(config)
DistilBertConfig {
  <span class="hljs-string">&quot;activation&quot;</span>: <span class="hljs-string">&quot;gelu&quot;</span>,
  <span class="hljs-string">&quot;attention_dropout&quot;</span>: <span class="hljs-number">0.1</span>,
  <span class="hljs-string">&quot;dim&quot;</span>: <span class="hljs-number">768</span>,
  <span class="hljs-string">&quot;dropout&quot;</span>: <span class="hljs-number">0.1</span>,
  <span class="hljs-string">&quot;hidden_dim&quot;</span>: <span class="hljs-number">3072</span>,
  <span class="hljs-string">&quot;initializer_range&quot;</span>: <span class="hljs-number">0.02</span>,
  <span class="hljs-string">&quot;max_position_embeddings&quot;</span>: <span class="hljs-number">512</span>,
  <span class="hljs-string">&quot;model_type&quot;</span>: <span class="hljs-string">&quot;distilbert&quot;</span>,
  <span class="hljs-string">&quot;n_heads&quot;</span>: <span class="hljs-number">12</span>,
  <span class="hljs-string">&quot;n_layers&quot;</span>: <span class="hljs-number">6</span>,
  <span class="hljs-string">&quot;pad_token_id&quot;</span>: <span class="hljs-number">0</span>,
  <span class="hljs-string">&quot;qa_dropout&quot;</span>: <span class="hljs-number">0.1</span>,
  <span class="hljs-string">&quot;seq_classif_dropout&quot;</span>: <span class="hljs-number">0.2</span>,
  <span class="hljs-string">&quot;sinusoidal_pos_embds&quot;</span>: false,
  <span class="hljs-string">&quot;transformers_version&quot;</span>: <span class="hljs-string">&quot;4.16.2&quot;</span>,
  <span class="hljs-string">&quot;vocab_size&quot;</span>: <span class="hljs-number">30522</span>
}`,wrap:!1}}),D=new q({props:{code:"bXlfY29uZmlnJTIwJTNEJTIwRGlzdGlsQmVydENvbmZpZyhhY3RpdmF0aW9uJTNEJTIycmVsdSUyMiUyQyUyMGF0dGVudGlvbl9kcm9wb3V0JTNEMC40KSUwQXByaW50KG15X2NvbmZpZyk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>my_config = DistilBertConfig(activation=<span class="hljs-string">&quot;relu&quot;</span>, attention_dropout=<span class="hljs-number">0.4</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(my_config)
DistilBertConfig {
  <span class="hljs-string">&quot;activation&quot;</span>: <span class="hljs-string">&quot;relu&quot;</span>,
  <span class="hljs-string">&quot;attention_dropout&quot;</span>: <span class="hljs-number">0.4</span>,
  <span class="hljs-string">&quot;dim&quot;</span>: <span class="hljs-number">768</span>,
  <span class="hljs-string">&quot;dropout&quot;</span>: <span class="hljs-number">0.1</span>,
  <span class="hljs-string">&quot;hidden_dim&quot;</span>: <span class="hljs-number">3072</span>,
  <span class="hljs-string">&quot;initializer_range&quot;</span>: <span class="hljs-number">0.02</span>,
  <span class="hljs-string">&quot;max_position_embeddings&quot;</span>: <span class="hljs-number">512</span>,
  <span class="hljs-string">&quot;model_type&quot;</span>: <span class="hljs-string">&quot;distilbert&quot;</span>,
  <span class="hljs-string">&quot;n_heads&quot;</span>: <span class="hljs-number">12</span>,
  <span class="hljs-string">&quot;n_layers&quot;</span>: <span class="hljs-number">6</span>,
  <span class="hljs-string">&quot;pad_token_id&quot;</span>: <span class="hljs-number">0</span>,
  <span class="hljs-string">&quot;qa_dropout&quot;</span>: <span class="hljs-number">0.1</span>,
  <span class="hljs-string">&quot;seq_classif_dropout&quot;</span>: <span class="hljs-number">0.2</span>,
  <span class="hljs-string">&quot;sinusoidal_pos_embds&quot;</span>: false,
  <span class="hljs-string">&quot;transformers_version&quot;</span>: <span class="hljs-string">&quot;4.16.2&quot;</span>,
  <span class="hljs-string">&quot;vocab_size&quot;</span>: <span class="hljs-number">30522</span>
}`,wrap:!1}}),A=new q({props:{code:"bXlfY29uZmlnJTIwJTNEJTIwRGlzdGlsQmVydENvbmZpZy5mcm9tX3ByZXRyYWluZWQoJTIyZGlzdGlsYmVydCUyRmRpc3RpbGJlcnQtYmFzZS11bmNhc2VkJTIyJTJDJTIwYWN0aXZhdGlvbiUzRCUyMnJlbHUlMjIlMkMlMjBhdHRlbnRpb25fZHJvcG91dCUzRDAuNCk=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>my_config = DistilBertConfig.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>, activation=<span class="hljs-string">&quot;relu&quot;</span>, attention_dropout=<span class="hljs-number">0.4</span>)',wrap:!1}}),O=new q({props:{code:"bXlfY29uZmlnLnNhdmVfcHJldHJhaW5lZChzYXZlX2RpcmVjdG9yeSUzRCUyMi4lMkZ5b3VyX21vZGVsX3NhdmVfcGF0aCUyMik=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>my_config.save_pretrained(save_directory=<span class="hljs-string">&quot;./your_model_save_path&quot;</span>)',wrap:!1}}),ts=new q({props:{code:"bXlfY29uZmlnJTIwJTNEJTIwRGlzdGlsQmVydENvbmZpZy5mcm9tX3ByZXRyYWluZWQoJTIyLiUyRnlvdXJfbW9kZWxfc2F2ZV9wYXRoJTJGY29uZmlnLmpzb24lMjIp",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>my_config = DistilBertConfig.from_pretrained(<span class="hljs-string">&quot;./your_model_save_path/config.json&quot;</span>)',wrap:!1}}),F=new Fs({props:{$$slots:{default:[we]},$$scope:{ctx:Z}}}),es=new Q({props:{title:"Model",local:"model",headingTag:"h2"}}),H=new he({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[Re],pytorch:[qe]},$$scope:{ctx:Z}}}),ls=new Q({props:{title:"Model heads",local:"model-heads",headingTag:"h3"}}),X=new he({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[Ue],pytorch:[Ce]},$$scope:{ctx:Z}}}),rs=new Q({props:{title:"Tokenizer",local:"tokenizer",headingTag:"h2"}}),B=new Fs({props:{warning:!0,$$slots:{default:[Ve]},$$scope:{ctx:Z}}}),cs=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpc3RpbEJlcnRUb2tlbml6ZXIlMEElMEFteV90b2tlbml6ZXIlMjAlM0QlMjBEaXN0aWxCZXJ0VG9rZW5pemVyKHZvY2FiX2ZpbGUlM0QlMjJteV92b2NhYl9maWxlLnR4dCUyMiUyQyUyMGRvX2xvd2VyX2Nhc2UlM0RGYWxzZSUyQyUyMHBhZGRpbmdfc2lkZSUzRCUyMmxlZnQlMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>my_tokenizer = DistilBertTokenizer(vocab_file=<span class="hljs-string">&quot;my_vocab_file.txt&quot;</span>, do_lower_case=<span class="hljs-literal">False</span>, padding_side=<span class="hljs-string">&quot;left&quot;</span>)`,wrap:!1}}),us=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpc3RpbEJlcnRUb2tlbml6ZXIlMEElMEFzbG93X3Rva2VuaXplciUyMCUzRCUyMERpc3RpbEJlcnRUb2tlbml6ZXIuZnJvbV9wcmV0cmFpbmVkKCUyMmRpc3RpbGJlcnQlMkZkaXN0aWxiZXJ0LWJhc2UtdW5jYXNlZCUyMik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>slow_tokenizer = DistilBertTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)`,wrap:!1}}),$s=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpc3RpbEJlcnRUb2tlbml6ZXJGYXN0JTBBJTBBZmFzdF90b2tlbml6ZXIlMjAlM0QlMjBEaXN0aWxCZXJ0VG9rZW5pemVyRmFzdC5mcm9tX3ByZXRyYWluZWQoJTIyZGlzdGlsYmVydCUyRmRpc3RpbGJlcnQtYmFzZS11bmNhc2VkJTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertTokenizerFast

<span class="hljs-meta">&gt;&gt;&gt; </span>fast_tokenizer = DistilBertTokenizerFast.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)`,wrap:!1}}),E=new Fs({props:{$$slots:{default:[xe]},$$scope:{ctx:Z}}}),gs=new Q({props:{title:"Image Processor",local:"image-processor",headingTag:"h2"}}),js=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFZpVEltYWdlUHJvY2Vzc29yJTBBJTBBdml0X2V4dHJhY3RvciUyMCUzRCUyMFZpVEltYWdlUHJvY2Vzc29yKCklMEFwcmludCh2aXRfZXh0cmFjdG9yKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ViTImageProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span>vit_extractor = ViTImageProcessor()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(vit_extractor)
ViTImageProcessor {
  <span class="hljs-string">&quot;do_normalize&quot;</span>: true,
  <span class="hljs-string">&quot;do_resize&quot;</span>: true,
  <span class="hljs-string">&quot;image_processor_type&quot;</span>: <span class="hljs-string">&quot;ViTImageProcessor&quot;</span>,
  <span class="hljs-string">&quot;image_mean&quot;</span>: [
    <span class="hljs-number">0.5</span>,
    <span class="hljs-number">0.5</span>,
    <span class="hljs-number">0.5</span>
  ],
  <span class="hljs-string">&quot;image_std&quot;</span>: [
    <span class="hljs-number">0.5</span>,
    <span class="hljs-number">0.5</span>,
    <span class="hljs-number">0.5</span>
  ],
  <span class="hljs-string">&quot;resample&quot;</span>: <span class="hljs-number">2</span>,
  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">224</span>
}`,wrap:!1}}),Y=new Fs({props:{$$slots:{default:[ze]},$$scope:{ctx:Z}}}),_s=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFZpVEltYWdlUHJvY2Vzc29yJTBBJTBBbXlfdml0X2V4dHJhY3RvciUyMCUzRCUyMFZpVEltYWdlUHJvY2Vzc29yKHJlc2FtcGxlJTNEJTIyUElMLkltYWdlLkJPWCUyMiUyQyUyMGRvX25vcm1hbGl6ZSUzREZhbHNlJTJDJTIwaW1hZ2VfbWVhbiUzRCU1QjAuMyUyQyUyMDAuMyUyQyUyMDAuMyU1RCklMEFwcmludChteV92aXRfZXh0cmFjdG9yKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ViTImageProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span>my_vit_extractor = ViTImageProcessor(resample=<span class="hljs-string">&quot;PIL.Image.BOX&quot;</span>, do_normalize=<span class="hljs-literal">False</span>, image_mean=[<span class="hljs-number">0.3</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.3</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(my_vit_extractor)
ViTImageProcessor {
  <span class="hljs-string">&quot;do_normalize&quot;</span>: false,
  <span class="hljs-string">&quot;do_resize&quot;</span>: true,
  <span class="hljs-string">&quot;image_processor_type&quot;</span>: <span class="hljs-string">&quot;ViTImageProcessor&quot;</span>,
  <span class="hljs-string">&quot;image_mean&quot;</span>: [
    <span class="hljs-number">0.3</span>,
    <span class="hljs-number">0.3</span>,
    <span class="hljs-number">0.3</span>
  ],
  <span class="hljs-string">&quot;image_std&quot;</span>: [
    <span class="hljs-number">0.5</span>,
    <span class="hljs-number">0.5</span>,
    <span class="hljs-number">0.5</span>
  ],
  <span class="hljs-string">&quot;resample&quot;</span>: <span class="hljs-string">&quot;PIL.Image.BOX&quot;</span>,
  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">224</span>
}`,wrap:!1}}),Ms=new Q({props:{title:"Feature Extractor",local:"feature-extractor",headingTag:"h2"}}),ws=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFdhdjJWZWMyRmVhdHVyZUV4dHJhY3RvciUwQSUwQXcydjJfZXh0cmFjdG9yJTIwJTNEJTIwV2F2MlZlYzJGZWF0dXJlRXh0cmFjdG9yKCklMEFwcmludCh3MnYyX2V4dHJhY3Rvcik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Wav2Vec2FeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span>w2v2_extractor = Wav2Vec2FeatureExtractor()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(w2v2_extractor)
Wav2Vec2FeatureExtractor {
  <span class="hljs-string">&quot;do_normalize&quot;</span>: true,
  <span class="hljs-string">&quot;feature_extractor_type&quot;</span>: <span class="hljs-string">&quot;Wav2Vec2FeatureExtractor&quot;</span>,
  <span class="hljs-string">&quot;feature_size&quot;</span>: <span class="hljs-number">1</span>,
  <span class="hljs-string">&quot;padding_side&quot;</span>: <span class="hljs-string">&quot;right&quot;</span>,
  <span class="hljs-string">&quot;padding_value&quot;</span>: <span class="hljs-number">0.0</span>,
  <span class="hljs-string">&quot;return_attention_mask&quot;</span>: false,
  <span class="hljs-string">&quot;sampling_rate&quot;</span>: <span class="hljs-number">16000</span>
}`,wrap:!1}}),L=new Fs({props:{$$slots:{default:[Ge]},$$scope:{ctx:Z}}}),qs=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFdhdjJWZWMyRmVhdHVyZUV4dHJhY3RvciUwQSUwQXcydjJfZXh0cmFjdG9yJTIwJTNEJTIwV2F2MlZlYzJGZWF0dXJlRXh0cmFjdG9yKHNhbXBsaW5nX3JhdGUlM0Q4MDAwJTJDJTIwZG9fbm9ybWFsaXplJTNERmFsc2UpJTBBcHJpbnQodzJ2Ml9leHRyYWN0b3Ip",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Wav2Vec2FeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span>w2v2_extractor = Wav2Vec2FeatureExtractor(sampling_rate=<span class="hljs-number">8000</span>, do_normalize=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(w2v2_extractor)
Wav2Vec2FeatureExtractor {
  <span class="hljs-string">&quot;do_normalize&quot;</span>: false,
  <span class="hljs-string">&quot;feature_extractor_type&quot;</span>: <span class="hljs-string">&quot;Wav2Vec2FeatureExtractor&quot;</span>,
  <span class="hljs-string">&quot;feature_size&quot;</span>: <span class="hljs-number">1</span>,
  <span class="hljs-string">&quot;padding_side&quot;</span>: <span class="hljs-string">&quot;right&quot;</span>,
  <span class="hljs-string">&quot;padding_value&quot;</span>: <span class="hljs-number">0.0</span>,
  <span class="hljs-string">&quot;return_attention_mask&quot;</span>: false,
  <span class="hljs-string">&quot;sampling_rate&quot;</span>: <span class="hljs-number">8000</span>
}`,wrap:!1}}),Js=new Q({props:{title:"Processor",local:"processor",headingTag:"h2"}}),Cs=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFdhdjJWZWMyRmVhdHVyZUV4dHJhY3RvciUwQSUwQWZlYXR1cmVfZXh0cmFjdG9yJTIwJTNEJTIwV2F2MlZlYzJGZWF0dXJlRXh0cmFjdG9yKHBhZGRpbmdfdmFsdWUlM0QxLjAlMkMlMjBkb19ub3JtYWxpemUlM0RUcnVlKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Wav2Vec2FeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = Wav2Vec2FeatureExtractor(padding_value=<span class="hljs-number">1.0</span>, do_normalize=<span class="hljs-literal">True</span>)`,wrap:!1}}),Us=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFdhdjJWZWMyQ1RDVG9rZW5pemVyJTBBJTBBdG9rZW5pemVyJTIwJTNEJTIwV2F2MlZlYzJDVENUb2tlbml6ZXIodm9jYWJfZmlsZSUzRCUyMm15X3ZvY2FiX2ZpbGUudHh0JTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Wav2Vec2CTCTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = Wav2Vec2CTCTokenizer(vocab_file=<span class="hljs-string">&quot;my_vocab_file.txt&quot;</span>)`,wrap:!1}}),xs=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFdhdjJWZWMyUHJvY2Vzc29yJTBBJTBBcHJvY2Vzc29yJTIwJTNEJTIwV2F2MlZlYzJQcm9jZXNzb3IoZmVhdHVyZV9leHRyYWN0b3IlM0RmZWF0dXJlX2V4dHJhY3RvciUyQyUyMHRva2VuaXplciUzRHRva2VuaXplcik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Wav2Vec2Processor

<span class="hljs-meta">&gt;&gt;&gt; </span>processor = Wav2Vec2Processor(feature_extractor=feature_extractor, tokenizer=tokenizer)`,wrap:!1}}),{c(){l=f("meta"),c=p(),n=f("p"),o=p(),$(_.$$.fragment),M=p(),W=f("p"),W.innerHTML=R,T=p(),J=f("ul"),J.innerHTML=m,v=p(),$(U.$$.fragment),k=p(),x=f("p"),x.innerHTML=z,C=p(),V=f("p"),V.innerHTML=r,w=p(),$(P.$$.fragment),Hs=p(),N=f("p"),N.innerHTML=Ht,Xs=p(),I=f("ul"),I.innerHTML=Xt,Bs=p(),$(D.$$.fragment),Es=p(),S=f("p"),S.innerHTML=Bt,Ys=p(),$(A.$$.fragment),Ls=p(),K=f("p"),K.innerHTML=Et,Qs=p(),$(O.$$.fragment),Ps=p(),ss=f("p"),ss.innerHTML=Yt,Ns=p(),$(ts.$$.fragment),Is=p(),$(F.$$.fragment),Ds=p(),$(es.$$.fragment),Ss=p(),as=f("p"),as.innerHTML=Lt,As=p(),$(H.$$.fragment),Ks=p(),$(ls.$$.fragment),Os=p(),ns=f("p"),ns.textContent=Qt,st=p(),$(X.$$.fragment),tt=p(),$(rs.$$.fragment),et=p(),ps=f("p"),ps.innerHTML=Pt,at=p(),is=f("ul"),is.innerHTML=Nt,lt=p(),os=f("p"),os.textContent=It,nt=p(),$(B.$$.fragment),rt=p(),ms=f("p"),ms.innerHTML=Dt,pt=p(),$(cs.$$.fragment),it=p(),fs=f("p"),fs.innerHTML=St,ot=p(),$(us.$$.fragment),mt=p(),ds=f("p"),ds.innerHTML=At,ct=p(),$($s.$$.fragment),ft=p(),$(E.$$.fragment),ut=p(),$(gs.$$.fragment),dt=p(),ys=f("p"),ys.innerHTML=Kt,$t=p(),hs=f("p"),hs.innerHTML=Ot,gt=p(),$(js.$$.fragment),yt=p(),$(Y.$$.fragment),ht=p(),bs=f("p"),bs.innerHTML=se,jt=p(),$(_s.$$.fragment),bt=p(),$(Ms.$$.fragment),_t=p(),Ts=f("p"),Ts.innerHTML=te,Mt=p(),vs=f("p"),vs.innerHTML=ee,Tt=p(),$(ws.$$.fragment),vt=p(),$(L.$$.fragment),wt=p(),Zs=f("p"),Zs.innerHTML=ae,Zt=p(),$(qs.$$.fragment),qt=p(),$(Js.$$.fragment),Jt=p(),Rs=f("p"),Rs.innerHTML=le,Rt=p(),ks=f("p"),ks.textContent=ne,kt=p(),$(Cs.$$.fragment),Ct=p(),Ws=f("p"),Ws.textContent=re,Wt=p(),$(Us.$$.fragment),Ut=p(),Vs=f("p"),Vs.innerHTML=pe,Vt=p(),$(xs.$$.fragment),xt=p(),zs=f("p"),zs.textContent=ie,zt=p(),Gs=f("p"),this.h()},l(s){const t=Te("svelte-u9bgzb",document.head);l=u(t,"META",{name:!0,content:!0}),t.forEach(e),c=i(s),n=u(s,"P",{}),ge(n).forEach(e),o=i(s),g(_.$$.fragment,s),M=i(s),W=u(s,"P",{"data-svelte-h":!0}),d(W)!=="svelte-mcpcj1"&&(W.innerHTML=R),T=i(s),J=u(s,"UL",{"data-svelte-h":!0}),d(J)!=="svelte-1w0j0s8"&&(J.innerHTML=m),v=i(s),g(U.$$.fragment,s),k=i(s),x=u(s,"P",{"data-svelte-h":!0}),d(x)!=="svelte-m9ensk"&&(x.innerHTML=z),C=i(s),V=u(s,"P",{"data-svelte-h":!0}),d(V)!=="svelte-19cbxp1"&&(V.innerHTML=r),w=i(s),g(P.$$.fragment,s),Hs=i(s),N=u(s,"P",{"data-svelte-h":!0}),d(N)!=="svelte-1jv2s9s"&&(N.innerHTML=Ht),Xs=i(s),I=u(s,"UL",{"data-svelte-h":!0}),d(I)!=="svelte-n8ze8y"&&(I.innerHTML=Xt),Bs=i(s),g(D.$$.fragment,s),Es=i(s),S=u(s,"P",{"data-svelte-h":!0}),d(S)!=="svelte-7yzt3t"&&(S.innerHTML=Bt),Ys=i(s),g(A.$$.fragment,s),Ls=i(s),K=u(s,"P",{"data-svelte-h":!0}),d(K)!=="svelte-1337xmo"&&(K.innerHTML=Et),Qs=i(s),g(O.$$.fragment,s),Ps=i(s),ss=u(s,"P",{"data-svelte-h":!0}),d(ss)!=="svelte-nv6at0"&&(ss.innerHTML=Yt),Ns=i(s),g(ts.$$.fragment,s),Is=i(s),g(F.$$.fragment,s),Ds=i(s),g(es.$$.fragment,s),Ss=i(s),as=u(s,"P",{"data-svelte-h":!0}),d(as)!=="svelte-czfsw8"&&(as.innerHTML=Lt),As=i(s),g(H.$$.fragment,s),Ks=i(s),g(ls.$$.fragment,s),Os=i(s),ns=u(s,"P",{"data-svelte-h":!0}),d(ns)!=="svelte-6aa2me"&&(ns.textContent=Qt),st=i(s),g(X.$$.fragment,s),tt=i(s),g(rs.$$.fragment,s),et=i(s),ps=u(s,"P",{"data-svelte-h":!0}),d(ps)!=="svelte-powoua"&&(ps.innerHTML=Pt),at=i(s),is=u(s,"UL",{"data-svelte-h":!0}),d(is)!=="svelte-nwauxs"&&(is.innerHTML=Nt),lt=i(s),os=u(s,"P",{"data-svelte-h":!0}),d(os)!=="svelte-vl9u2x"&&(os.textContent=It),nt=i(s),g(B.$$.fragment,s),rt=i(s),ms=u(s,"P",{"data-svelte-h":!0}),d(ms)!=="svelte-1d2sx2j"&&(ms.innerHTML=Dt),pt=i(s),g(cs.$$.fragment,s),it=i(s),fs=u(s,"P",{"data-svelte-h":!0}),d(fs)!=="svelte-snvj0m"&&(fs.innerHTML=St),ot=i(s),g(us.$$.fragment,s),mt=i(s),ds=u(s,"P",{"data-svelte-h":!0}),d(ds)!=="svelte-pckj0p"&&(ds.innerHTML=At),ct=i(s),g($s.$$.fragment,s),ft=i(s),g(E.$$.fragment,s),ut=i(s),g(gs.$$.fragment,s),dt=i(s),ys=u(s,"P",{"data-svelte-h":!0}),d(ys)!=="svelte-16w3n4l"&&(ys.innerHTML=Kt),$t=i(s),hs=u(s,"P",{"data-svelte-h":!0}),d(hs)!=="svelte-un51dz"&&(hs.innerHTML=Ot),gt=i(s),g(js.$$.fragment,s),yt=i(s),g(Y.$$.fragment,s),ht=i(s),bs=u(s,"P",{"data-svelte-h":!0}),d(bs)!=="svelte-1lw6ucr"&&(bs.innerHTML=se),jt=i(s),g(_s.$$.fragment,s),bt=i(s),g(Ms.$$.fragment,s),_t=i(s),Ts=u(s,"P",{"data-svelte-h":!0}),d(Ts)!=="svelte-qauk16"&&(Ts.innerHTML=te),Mt=i(s),vs=u(s,"P",{"data-svelte-h":!0}),d(vs)!=="svelte-dt8fqz"&&(vs.innerHTML=ee),Tt=i(s),g(ws.$$.fragment,s),vt=i(s),g(L.$$.fragment,s),wt=i(s),Zs=u(s,"P",{"data-svelte-h":!0}),d(Zs)!=="svelte-o1uww"&&(Zs.innerHTML=ae),Zt=i(s),g(qs.$$.fragment,s),qt=i(s),g(Js.$$.fragment,s),Jt=i(s),Rs=u(s,"P",{"data-svelte-h":!0}),d(Rs)!=="svelte-1u6m7h9"&&(Rs.innerHTML=le),Rt=i(s),ks=u(s,"P",{"data-svelte-h":!0}),d(ks)!=="svelte-1l7ona4"&&(ks.textContent=ne),kt=i(s),g(Cs.$$.fragment,s),Ct=i(s),Ws=u(s,"P",{"data-svelte-h":!0}),d(Ws)!=="svelte-10frop5"&&(Ws.textContent=re),Wt=i(s),g(Us.$$.fragment,s),Ut=i(s),Vs=u(s,"P",{"data-svelte-h":!0}),d(Vs)!=="svelte-fr1oeq"&&(Vs.innerHTML=pe),Vt=i(s),g(xs.$$.fragment,s),xt=i(s),zs=u(s,"P",{"data-svelte-h":!0}),d(zs)!=="svelte-1s5aq77"&&(zs.textContent=ie),zt=i(s),Gs=u(s,"P",{}),ge(Gs).forEach(e),this.h()},h(){ye(l,"name","hf:doc:metadata"),ye(l,"content",He)},m(s,t){ve(document.head,l),a(s,c,t),a(s,n,t),a(s,o,t),y(_,s,t),a(s,M,t),a(s,W,t),a(s,T,t),a(s,J,t),a(s,v,t),y(U,s,t),a(s,k,t),a(s,x,t),a(s,C,t),a(s,V,t),a(s,w,t),y(P,s,t),a(s,Hs,t),a(s,N,t),a(s,Xs,t),a(s,I,t),a(s,Bs,t),y(D,s,t),a(s,Es,t),a(s,S,t),a(s,Ys,t),y(A,s,t),a(s,Ls,t),a(s,K,t),a(s,Qs,t),y(O,s,t),a(s,Ps,t),a(s,ss,t),a(s,Ns,t),y(ts,s,t),a(s,Is,t),y(F,s,t),a(s,Ds,t),y(es,s,t),a(s,Ss,t),a(s,as,t),a(s,As,t),y(H,s,t),a(s,Ks,t),y(ls,s,t),a(s,Os,t),a(s,ns,t),a(s,st,t),y(X,s,t),a(s,tt,t),y(rs,s,t),a(s,et,t),a(s,ps,t),a(s,at,t),a(s,is,t),a(s,lt,t),a(s,os,t),a(s,nt,t),y(B,s,t),a(s,rt,t),a(s,ms,t),a(s,pt,t),y(cs,s,t),a(s,it,t),a(s,fs,t),a(s,ot,t),y(us,s,t),a(s,mt,t),a(s,ds,t),a(s,ct,t),y($s,s,t),a(s,ft,t),y(E,s,t),a(s,ut,t),y(gs,s,t),a(s,dt,t),a(s,ys,t),a(s,$t,t),a(s,hs,t),a(s,gt,t),y(js,s,t),a(s,yt,t),y(Y,s,t),a(s,ht,t),a(s,bs,t),a(s,jt,t),y(_s,s,t),a(s,bt,t),y(Ms,s,t),a(s,_t,t),a(s,Ts,t),a(s,Mt,t),a(s,vs,t),a(s,Tt,t),y(ws,s,t),a(s,vt,t),y(L,s,t),a(s,wt,t),a(s,Zs,t),a(s,Zt,t),y(qs,s,t),a(s,qt,t),y(Js,s,t),a(s,Jt,t),a(s,Rs,t),a(s,Rt,t),a(s,ks,t),a(s,kt,t),y(Cs,s,t),a(s,Ct,t),a(s,Ws,t),a(s,Wt,t),y(Us,s,t),a(s,Ut,t),a(s,Vs,t),a(s,Vt,t),y(xs,s,t),a(s,xt,t),a(s,zs,t),a(s,zt,t),a(s,Gs,t),Gt=!0},p(s,[t]){const oe={};t&2&&(oe.$$scope={dirty:t,ctx:s}),F.$set(oe);const me={};t&2&&(me.$$scope={dirty:t,ctx:s}),H.$set(me);const ce={};t&2&&(ce.$$scope={dirty:t,ctx:s}),X.$set(ce);const fe={};t&2&&(fe.$$scope={dirty:t,ctx:s}),B.$set(fe);const ue={};t&2&&(ue.$$scope={dirty:t,ctx:s}),E.$set(ue);const de={};t&2&&(de.$$scope={dirty:t,ctx:s}),Y.$set(de);const $e={};t&2&&($e.$$scope={dirty:t,ctx:s}),L.$set($e)},i(s){Gt||(h(_.$$.fragment,s),h(U.$$.fragment,s),h(P.$$.fragment,s),h(D.$$.fragment,s),h(A.$$.fragment,s),h(O.$$.fragment,s),h(ts.$$.fragment,s),h(F.$$.fragment,s),h(es.$$.fragment,s),h(H.$$.fragment,s),h(ls.$$.fragment,s),h(X.$$.fragment,s),h(rs.$$.fragment,s),h(B.$$.fragment,s),h(cs.$$.fragment,s),h(us.$$.fragment,s),h($s.$$.fragment,s),h(E.$$.fragment,s),h(gs.$$.fragment,s),h(js.$$.fragment,s),h(Y.$$.fragment,s),h(_s.$$.fragment,s),h(Ms.$$.fragment,s),h(ws.$$.fragment,s),h(L.$$.fragment,s),h(qs.$$.fragment,s),h(Js.$$.fragment,s),h(Cs.$$.fragment,s),h(Us.$$.fragment,s),h(xs.$$.fragment,s),Gt=!0)},o(s){j(_.$$.fragment,s),j(U.$$.fragment,s),j(P.$$.fragment,s),j(D.$$.fragment,s),j(A.$$.fragment,s),j(O.$$.fragment,s),j(ts.$$.fragment,s),j(F.$$.fragment,s),j(es.$$.fragment,s),j(H.$$.fragment,s),j(ls.$$.fragment,s),j(X.$$.fragment,s),j(rs.$$.fragment,s),j(B.$$.fragment,s),j(cs.$$.fragment,s),j(us.$$.fragment,s),j($s.$$.fragment,s),j(E.$$.fragment,s),j(gs.$$.fragment,s),j(js.$$.fragment,s),j(Y.$$.fragment,s),j(_s.$$.fragment,s),j(Ms.$$.fragment,s),j(ws.$$.fragment,s),j(L.$$.fragment,s),j(qs.$$.fragment,s),j(Js.$$.fragment,s),j(Cs.$$.fragment,s),j(Us.$$.fragment,s),j(xs.$$.fragment,s),Gt=!1},d(s){s&&(e(c),e(n),e(o),e(M),e(W),e(T),e(J),e(v),e(k),e(x),e(C),e(V),e(w),e(Hs),e(N),e(Xs),e(I),e(Bs),e(Es),e(S),e(Ys),e(Ls),e(K),e(Qs),e(Ps),e(ss),e(Ns),e(Is),e(Ds),e(Ss),e(as),e(As),e(Ks),e(Os),e(ns),e(st),e(tt),e(et),e(ps),e(at),e(is),e(lt),e(os),e(nt),e(rt),e(ms),e(pt),e(it),e(fs),e(ot),e(mt),e(ds),e(ct),e(ft),e(ut),e(dt),e(ys),e($t),e(hs),e(gt),e(yt),e(ht),e(bs),e(jt),e(bt),e(_t),e(Ts),e(Mt),e(vs),e(Tt),e(vt),e(wt),e(Zs),e(Zt),e(qt),e(Jt),e(Rs),e(Rt),e(ks),e(kt),e(Ct),e(Ws),e(Wt),e(Ut),e(Vs),e(Vt),e(xt),e(zs),e(zt),e(Gs)),e(l),b(_,s),b(U,s),b(P,s),b(D,s),b(A,s),b(O,s),b(ts,s),b(F,s),b(es,s),b(H,s),b(ls,s),b(X,s),b(rs,s),b(B,s),b(cs,s),b(us,s),b($s,s),b(E,s),b(gs,s),b(js,s),b(Y,s),b(_s,s),b(Ms,s),b(ws,s),b(L,s),b(qs,s),b(Js,s),b(Cs,s),b(Us,s),b(xs,s)}}}const He='{"title":"Create a custom architecture","local":"create-a-custom-architecture","sections":[{"title":"Configuration","local":"configuration","sections":[],"depth":2},{"title":"Model","local":"model","sections":[{"title":"Model heads","local":"model-heads","sections":[],"depth":3}],"depth":2},{"title":"Tokenizer","local":"tokenizer","sections":[],"depth":2},{"title":"Image Processor","local":"image-processor","sections":[],"depth":2},{"title":"Feature Extractor","local":"feature-extractor","sections":[],"depth":2},{"title":"Processor","local":"processor","sections":[],"depth":2}],"depth":1}';function Xe(Z){return be(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ne extends _e{constructor(l){super(),Me(this,l,Xe,Fe,je,{})}}export{Ne as component};
