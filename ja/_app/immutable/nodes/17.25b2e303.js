import{s as xi,o as Ti,n as _i}from"../chunks/scheduler.9bc65507.js";import{S as Mi,i as wi,g as p,s,r as $,A as yi,h as i,f as l,c as a,j as ji,u as f,x as m,k as vi,y as ki,a as n,v as r,d as u,t as g,w as d}from"../chunks/index.707bf1b6.js";import{T as Ui}from"../chunks/Tip.c2ecdbf4.js";import{Y as Vl}from"../chunks/Youtube.e1129c6f.js";import{C as c}from"../chunks/CodeBlock.54a9f38d.js";import{H as o}from"../chunks/Heading.342b1fa6.js";function Vi(Zl){let h,j="各モデルのラベルは異なる場合があるため、常に各モデルのドキュメントを確認して、それらの特定のラベルに関する詳細情報を確認してください！";return{c(){h=p("p"),h.textContent=j},l(b){h=i(b,"P",{"data-svelte-h":!0}),m(h)!=="svelte-weo1n5"&&(h.textContent=j)},m(b,kl){n(b,h,kl)},p:_i,d(b){b&&l(h)}}}function Zi(Zl){let h,j,b,kl,v,Hl,x,Na="この用語集は、一般的な機械学習と 🤗 トランスフォーマーの用語を定義し、ドキュメンテーションをより理解するのに役立ちます。",Pl,T,Ll,_,ql,M,Xa="アテンション マスクは、シーケンスをバッチ処理する際に使用されるオプションの引数です。",zl,w,Rl,y,Ga="この引数は、モデルにどのトークンを注視すべきか、どのトークンを注視しないかを示します。",Jl,k,Ba="例えば、次の2つのシーケンスを考えてみてください：",Il,U,Wl,V,Ea="The encoded versions have different lengths:",Fl,Z,Nl,H,Sa=`したがって、これらのシーケンスをそのまま同じテンソルに配置することはできません。最初のシーケンスは、
2番目のシーケンスの長さに合わせてパディングする必要があります。または、2番目のシーケンスは、最初のシーケンスの
長さに切り詰める必要があります。`,Xl,P,Ya=`最初の場合、IDのリストはパディングインデックスで拡張されます。トークナイザにリストを渡し、次のようにパディングするように
依頼できます:`,Gl,L,Bl,q,Qa="0sが追加されて、最初の文が2番目の文と同じ長さになるのがわかります：",El,z,Sl,R,Da='これは、PyTorchまたはTensorFlowでテンソルに変換できます。注意マスクは、モデルがそれらに注意を払わないように、埋め込まれたインデックスの位置を示すバイナリテンソルです。<a href="/docs/transformers/main/ja/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>では、<code>1</code>は注意を払う必要がある値を示し、<code>0</code>は埋め込まれた値を示します。この注意マスクは、トークナイザが返す辞書のキー「attention_mask」の下にあります。',Yl,J,Ql,I,Dl,W,Aa='<a href="#encoder-models">エンコーダーモデル</a> および <a href="#masked-language-modeling-mlm">マスク言語モデリング</a> を参照してください。',Al,F,Kl,N,Ka='<a href="#causal-language-modeling">因果言語モデリング</a> および <a href="#decoder-models">デコーダーモデル</a> を参照してください。',Ol,X,en,G,tn,B,Oa='バックボーンは、生の隠れた状態や特徴を出力するネットワーク（埋め込みと層）です。通常、特徴を入力として受け取るために <a href="#head">ヘッド</a> に接続されており、予測を行います。たとえば、<code>ViTModel</code> は特定のヘッドが上にないバックボーンです。他のモデルも <code>VitModel</code> をバックボーンとして使用できます、例えば <a href="model_doc/dpt">DPT</a> です。',ln,E,nn,S,sn,Y,ep="モデルがテキストを順番に読み、次の単語を予測する事前トレーニングタスクです。通常、モデルは文全体を読み取りますが、特定のタイムステップで未来のトークンを隠すためにモデル内でマスクを使用します。",an,Q,pn,D,tp="カラー画像は、赤、緑、青（RGB）の3つのチャネルの値の組み合わせから成り立っており、グレースケール画像は1つのチャネルしか持ちません。🤗 Transformers では、チャネルは画像のテンソルの最初または最後の次元になることがあります：[<code>n_channels</code>, <code>height</code>, <code>width</code>] または [<code>height</code>, <code>width</code>, <code>n_channels</code>]。",mn,A,$n,K,lp="入力と出力が正確にどのように整列するかを正確に知らなくてもモデルを学習させるアルゴリズム。CTC は、特定の入力に対してすべての可能な出力の分布を計算し、その中から最も可能性の高い出力を選択します。CTC は、スピーカーの異なる発話速度など、さまざまな理由で音声がトランスクリプトと完全に整合しない場合に、音声認識タスクで一般的に使用されます。",fn,O,rn,ee,np="ニューラルネットワークの一種で、入力行列が要素ごとに小さな行列（カーネルまたはフィルター）と乗算され、値が新しい行列に合計されるレイヤーのタイプ。これは入力行列全体に対して繰り返される畳み込み操作として知られ、各操作は入力行列の異なるセグメントに適用されます。畳み込みニューラルネットワーク（CNN）は、コンピュータビジョンで一般的に使用されています。",un,te,gn,le,dn,ne,sp="この入力はエンコーダーデコーダーモデルに特有であり、デコーダーに供給される入力IDを含みます。これらの入力は、翻訳や要約などのシーケンスツーシーケンスタスクに使用され、通常、各モデルに固有の方法で構築されます。",on,se,ap="ほとんどのエンコーダーデコーダーモデル（BART、T5）は、<code>labels</code> から独自に <code>decoder_input_ids</code> を作成します。このようなモデルでは、<code>labels</code> を渡すことがトレーニングを処理する優れた方法です。",hn,ae,pp="シーケンスツーシーケンストレーニングにおけるこれらの入力IDの処理方法を確認するために、各モデルのドキュメントを確認してください。",cn,pe,bn,ie,ip="オートリグレッションモデルとも呼ばれ、モデルがテキストを順番に読み、次の単語を予測する事前トレーニングタスク（因果言語モデリング）に関与します。通常、モデルは文全体を読み取り、特定のタイムステップで未来のトークンを隠すマスクを使用して行われます。",Cn,me,jn,$e,vn,fe,mp="ニューラルネットワークを使用する機械学習アルゴリズムで、複数の層を持っています。",xn,re,Tn,ue,_n,ge,$p='オートエンコーディングモデルとしても知られており、エンコーダーモデルは入力（テキストや画像など）を、埋め込みと呼ばれる簡略化された数値表現に変換します。エンコーダーモデルは、しばしば<a href="#masked-language-modeling-mlm">マスクされた言語モデリング（#masked-language-modeling-mlm）</a>などの技術を使用して事前にトレーニングされ、入力シーケンスの一部をマスクし、モデルにより意味のある表現を作成することが強制されます。',Mn,de,wn,oe,yn,he,kn,ce,fp="生データをより情報豊かで機械学習アルゴリズムにとって有用な特徴のセットに選択および変換するプロセス。特徴抽出の例には、生のテキストを単語埋め込みに変換したり、画像/ビデオデータからエッジや形状などの重要な特徴を抽出したりすることが含まれます。",Un,be,Vn,Ce,rp=`トランスフォーマー内の各残差注意ブロックでは、通常、自己注意層の後に2つのフィードフォワード層が続きます。
フィードフォワード層の中間埋め込みサイズは、モデルの隠れたサイズよりも大きいことがよくあります（たとえば、<code>google-bert/bert-base-uncased</code>の場合）。`,Zn,je,up='入力サイズが <code>[batch_size、sequence_length]</code> の場合、中間フィードフォワード埋め込み <code>[batch_size、sequence_length、config.intermediate_size]</code> を保存するために必要なメモリは、メモリの大部分を占めることがあります。<a href="https://arxiv.org/abs/2001.04451" rel="nofollow">Reformer: The Efficient Transformer</a>の著者は、計算が <code>sequence_length</code> 次元に依存しないため、両方のフィードフォワード層の出力埋め込み <code>[batch_size、config.hidden_size]_0、...、[batch_size、config.hidden_size]_n</code> を個別に計算し、後で <code>[batch_size、sequence_length、config.hidden_size]</code> に連結することは数学的に等価であると気付きました。これにより、増加した計算時間とメモリ使用量のトレードオフが生じますが、数学的に等価な結果が得られます。',Hn,ve,gp='<a href="/docs/transformers/main/ja/internal/modeling_utils#transformers.apply_chunking_to_forward">apply_chunking_to_forward()</a> 関数を使用するモデルの場合、<code>chunk_size</code> は並列に計算される出力埋め込みの数を定義し、メモリと時間の複雑さのトレードオフを定義します。<code>chunk_size</code> が 0 に設定されている場合、フィードフォワードのチャンキングは行われません。',Pn,xe,Ln,Te,dp='ファインチューニングは、事前にトレーニングされたモデルを取り、その重みを固定し、新しく追加された<a href="#head">model head</a>で出力レイヤーを置き換える形式の転移学習です。モデルヘッドは対象のデータセットでトレーニングされます。',qn,_e,op='詳細については、<a href="https://huggingface.co/docs/transformers/training" rel="nofollow">Fine-tune a pretrained model</a> チュートリアルを参照して、🤗 Transformersを使用したモデルのファインチューニング方法を学びましょう。',zn,Me,Rn,we,Jn,ye,hp="モデルヘッドは、ニューラルネットワークの最後のレイヤーを指し、生の隠れた状態を受け入れて異なる次元に射影します。各タスクに対して異なるモデルヘッドがあります。例えば：",In,ke,cp='<li><code>GPT2ForSequenceClassification</code> は、ベースの<code>GPT2Model</code>の上にあるシーケンス分類ヘッド（線形層）です。</li> <li><code>ViTForImageClassification</code> は、ベースの<code>ViTModel</code>の<code>CLS</code>トークンの最終隠れた状態の上にある画像分類ヘッド（線形層）です。</li> <li><code>Wav2Vec2ForCTC</code> は、<a href="#connectionist-temporal-classification-ctc">CTC</a>を持つベースの<code>Wav2Vec2Model</code>の言語モデリングヘッドです。</li>',Wn,Ue,Fn,Ve,Nn,Ze,bp="ビジョンベースのトランスフォーマーモデルは、画像をより小さなパッチに分割し、それらを線形に埋め込み、モデルにシーケンスとして渡します。モデルの",Xn,He,Gn,Pe,Cp='推論は、トレーニングが完了した後に新しいデータでモデルを評価するプロセスです。 🤗 Transformers を使用して推論を実行する方法については、<a href="https://huggingface.co/docs/transformers/pipeline_tutorial" rel="nofollow">推論のパイプライン</a> チュートリアルを参照してください。',Bn,Le,En,qe,jp="入力IDは、モデルへの入力として渡す必要があるパラメーターの中で最も一般的なものです。これらはトークンのインデックスであり、モデルによって入力として使用されるシーケンスを構築するトークンの数値表現です。",Sn,ze,Yn,Re,vp='各トークナイザーは異なる方法で動作しますが、基本的なメカニズムは同じです。以下はBERTトークナイザーを使用した例です。BERTトークナイザーは<a href="https://arxiv.org/pdf/1609.08144.pdf" rel="nofollow">WordPiece</a>トークナイザーです。',Qn,Je,Dn,Ie,xp="トークナイザーは、シーケンスをトークナイザー語彙で使用可能なトークンに分割します。",An,We,Kn,Fe,Tp=`トークンは単語またはサブワードです。 たとえば、ここでは “VRAM” はモデルの語彙に含まれていなかったため、“V”、“RA”、“M” に分割されました。
これらのトークンが別々の単語ではなく、同じ単語の一部であることを示すために、“RA” と “M” にはダブルハッシュのプレフィックスが追加されます。`,On,Ne,es,Xe,_p='これらのトークンは、モデルが理解できるようにIDに変換できます。これは、文をトークナイザーに直接供給して行うことができます。トークナイザーは、パフォーマンスの向上のために<a href="https://github.com/huggingface/tokenizers" rel="nofollow">🤗 Tokenizers</a>のRust実装を活用しています。',ts,Ge,ls,Be,Mp="トークナイザーは、対応するモデルが正しく動作するために必要なすべての引数を含む辞書を返します。トークンのインデックスは、キー <code>input_ids</code> の下にあります。",ns,Ee,ss,Se,wp="注意：トークナイザは、関連するモデルがそれらを必要とする場合に自動的に「特別なトークン」を追加します。これらは、モデルが時折使用する特別なIDです。",as,Ye,yp="前のIDシーケンスをデコードする場合、",ps,Qe,is,De,kp="私たちは見ます",ms,Ae,$s,Ke,Up='これは<a href="/docs/transformers/main/ja/model_doc/bert#transformers.BertModel">BertModel</a>がその入力を期待する方法です。',fs,Oe,rs,et,us,tt,Vp="ラベルは、モデルが損失を計算するために渡すことができるオプションの引数です。これらのラベルは、モデルの予測の期待値であるべきです。モデルは、通常の損失を使用して、その予測と期待値（ラベル）との間の損失を計算します。",gs,lt,Zp="これらのラベルはモデルのヘッドに応じて異なります。たとえば：",ds,nt,Hp='<li>シーケンス分類モデル（<a href="/docs/transformers/main/ja/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a>）の場合、モデルは次元が <code>(batch_size)</code> のテンソルを期待し、バッチ内の各値がシーケンス全体の予測ラベルに対応します。</li> <li>トークン分類モデル（<a href="/docs/transformers/main/ja/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a>）の場合、モデルは次元が <code>(batch_size, seq_length)</code> のテンソルを期待し、各値が各個々のトークンの予測ラベルに対応します。</li> <li>マスク言語モデリングの場合（<a href="/docs/transformers/main/ja/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a>）、モデルは次元が <code>(batch_size, seq_length)</code> のテンソルを期待し、各値が各個々のトークンの予測ラベルに対応します。ここでのラベルはマスクされたトークンのトークンIDであり、他のトークンには通常 -100 などの値が設定されます。</li> <li>シーケンス間のタスクの場合（<a href="/docs/transformers/main/ja/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a>、<code>MBartForConditionalGeneration</code>）、モデルは次元が <code>(batch_size, tgt_seq_length)</code> のテンソルを期待し、各値が各入力シーケンスに関連付けられたターゲットシーケンスに対応します。トレーニング中、BARTとT5の両方は適切な <code>decoder_input_ids</code> とデコーダーのアテンションマスクを内部で生成します。通常、これらを提供する必要はありません。これはエンコーダーデコーダーフレームワークを利用するモデルには適用されません。</li> <li>画像分類モデルの場合（<code>ViTForImageClassification</code>）、モデルは次元が <code>(batch_size)</code> のテンソルを期待し、バッチ内の各値が各個々の画像の予測ラベルに対応します。</li> <li>セマンティックセグメンテーションモデルの場合（<code>SegformerForSemanticSegmentation</code>）、モデルは次元が <code>(batch_size, height, width)</code> のテンソルを期待し、バッチ内の各値が各個々のピクセルの予測ラベルに対応します。</li> <li>物体検出モデルの場合（<a href="/docs/transformers/main/ja/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a>）、モデルは各個々の画像の予測ラベルと境界ボックスの数に対応する <code>class_labels</code> と <code>boxes</code> キーを持つ辞書のリストを期待します。</li> <li>自動音声認識モデルの場合（<code>Wav2Vec2ForCTC</code>）、モデルは次元が <code>(batch_size, target_length)</code> のテンソルを期待し、各値が各個々のトークンの予測ラベルに対応します。</li>',os,C,hs,st,Pp='ベースモデル（<a href="/docs/transformers/main/ja/model_doc/bert#transformers.BertModel">BertModel</a>）はラベルを受け入れません。これらはベースのトランスフォーマーモデルであり、単に特徴を出力します。',cs,at,bs,pt,Lp="大量のデータでトレーニングされた変換器言語モデル（GPT-3、BLOOM、OPT）を指す一般的な用語です。これらのモデルは通常、多くの学習可能なパラメータを持っています（たとえば、GPT-3の場合、1750億個）。",Cs,it,js,mt,vs,$t,qp="モデルはテキストの破損バージョンを見る事前トレーニングタスクで、通常はランダムに一部のトークンをマスキングして元のテキストを予測する必要があります。",xs,ft,Ts,rt,zp="テキストと別の種類の入力（たとえば画像）を組み合わせるタスクです。",_s,ut,Ms,gt,ws,dt,Rp='テキストを生成する関連するすべてのタスク（たとえば、<a href="https://transformer.huggingface.co/" rel="nofollow">Transformersで書く</a>、翻訳など）。',ys,ot,ks,ht,Jp="テキストを扱う方法を一般的に表現したものです。",Us,ct,Vs,bt,Ip="テキスト内に何があるかを理解する関連するすべてのタスク（たとえば、テキスト全体の分類、個々の単語の分類など）。",Zs,Ct,Hs,jt,Ps,vt,Wp="🤗 Transformersのパイプラインは、データの前処理と変換を特定の順序で実行してデータを処理し、モデルから予測を返す一連のステップを指す抽象化です。パイプラインに見られるいくつかのステージの例には、データの前処理、特徴抽出、正規化などがあります。",Ls,xt,Fp='詳細については、<a href="https://huggingface.co/docs/transformers/pipeline_tutorial" rel="nofollow">推論のためのパイプライン</a>を参照してください。',qs,Tt,zs,_t,Np="モデルに渡される画像の数値表現のテンソルです。ピクセル値は、形状が [<code>バッチサイズ</code>, <code>チャネル数</code>, <code>高さ</code>, <code>幅</code>] の行列で、画像プロセッサから生成されます。",Rs,Mt,Js,wt,Xp="行列を小さな行列に縮小する操作で、プール対象の次元の最大値または平均値を取ることが一般的です。プーリングレイヤーは一般的に畳み込みレイヤーの間に見られ、特徴表現をダウンサンプリングします。",Is,yt,Ws,kt,Gp="トークンごとの位置が埋め込まれているRNNとは異なり、トランスフォーマーは各トークンの位置を把握していません。したがって、モデルはトークンの位置を識別するために位置ID（<code>position_ids</code>）を使用します。",Fs,Ut,Bp="これはオプションのパラメータです。モデルに <code>position_ids</code> が渡されない場合、IDは自動的に絶対的な位置埋め込みとして作成されます。",Ns,Vt,Ep="絶対的な位置埋め込みは範囲 <code>[0、config.max_position_embeddings - 1]</code> から選択されます。一部のモデルは、正弦波位置埋め込みや相対位置埋め込みなど、他のタイプの位置埋め込みを使用することがあります。",Xs,Zt,Gs,Ht,Sp='生データを機械学習モデルで簡単に処理できる形式に準備するタスクです。例えば、テキストは通常、トークン化によって前処理されます。他の入力タイプに対する前処理の具体的な方法を知りたい場合は、<a href="https://huggingface.co/docs/transformers/preprocessing" rel="nofollow">Preprocess</a> チュートリアルをご覧ください。',Bs,Pt,Es,Lt,Yp='あるデータ（たとえば、Wikipedia全体など）で事前に学習されたモデルです。事前学習の方法には、自己教師ありの目的が含まれ、テキストを読み取り、次の単語を予測しようとするもの（<a href="#causal-language-modeling">因果言語モデリング</a>を参照）や、一部の単語をマスクし、それらを予測しようとするもの（<a href="#masked-language-modeling-mlm">マスク言語モデリング</a>を参照）があります。',Ss,qt,Qp="音声とビジョンモデルには独自の事前学習の目的があります。たとえば、Wav2Vec2は音声モデルで、モデルに対して「真の」音声表現を偽の音声表現のセットから識別する必要がある対比的なタスクで事前学習されています。一方、BEiTはビジョンモデルで、一部の画像パッチをマスクし、モデルにマスクされたパッチを予測させるタスク（マスク言語モデリングの目的と似ています）で事前学習されています。",Ys,zt,Qs,Rt,Ds,Jt,Dp="テキストを処理するために層をループさせるモデルの一種です。",As,It,Ks,Wt,Ap="生データの意味のある表現を学習する機械学習のサブフィールドです。表現学習の技術の一部には単語埋め込み、オートエンコーダー、Generative Adversarial Networks（GANs）などがあります。",Os,Ft,ea,Nt,ta,Xt,Kp="秒ごとに取られるサンプル（オーディオ信号など）の数をヘルツ単位で測定したものです。サンプリングレートは音声などの連続信号を離散化する結果です。",la,Gt,na,Bt,Op="入力の各要素は、どの他の要素に注意を払うべきかを検出します。",sa,Et,aa,St,ei='モデルがラベルのないデータから自分自身の学習目標を作成する機械学習技術のカテゴリです。これは<a href="#unsupervised-learning">教師なし学習</a>や<a href="#supervised-learning">教師あり学習</a>とは異なり、学習プロセスはユーザーからは明示的には監督されていない点が異なります。',pa,Yt,ti='自己教師あり学習の1つの例は<a href="#masked-language-modeling-mlm">マスク言語モデリング</a>で、モデルには一部のトークンが削除された文が与えられ、欠落したトークンを予測するように学習します。',ia,Qt,ma,Dt,li='ラベル付きデータの少量とラベルのないデータの大量を組み合わせてモデルの精度を向上させる広範な機械学習トレーニング技術のカテゴリです。<a href="#supervised-learning">教師あり学習</a>や<a href="#unsupervised-learning">教師なし学習</a>とは異なり、半教師あり学習のアプローチの1つは「セルフトレーニング」であり、モデルはラベル付きデータでトレーニングされ、次にラベルのないデータで予測を行います。モデルが最も自信を持って予測する部分がラベル付きデータセットに追加され、モデルの再トレーニングに使用されます。',$a,At,fa,Kt,ni='入力から新しいシーケンスを生成するモデルです。翻訳モデルや要約モデル（<a href="model_doc/bart">Bart</a>や<a href="model_doc/t5">T5</a>など）などがこれに該当します。',ra,Ot,ua,el,si='<a href="#convolution">畳み込み</a>または<a href="#pooling">プーリング</a>において、ストライドはカーネルが行列上で移動する距離を指します。ストライドが1の場合、カーネルは1ピクセルずつ移動し、ストライドが2の場合、カーネルは2ピクセルずつ移動します。',ga,tl,da,ll,ai="モデルのトレーニング方法の一つで、直接ラベル付きデータを使用してモデルの性能を修正し指導します。データがトレーニングされているモデルに供給され、その予測が既知のラベルと比較されます。モデルは予測がどれだけ誤っていたかに基づいて重みを更新し、プロセスはモデルの性能を最適化するために繰り返されます。",oa,nl,ha,sl,ca,al,pi="文の一部であり、通常は単語ですが、サブワード（一般的でない単語はしばしばサブワードに分割されることがあります）または句読点の記号であることもあります。",ba,pl,Ca,il,ii="一部のモデルは、文のペアの分類や質問応答を行うことを目的としています。",ja,ml,va,$l,mi="これには異なる2つのシーケンスを単一の「input_ids」エントリに結合する必要があり、通常は分類子（<code>[CLS]</code>）や区切り記号（<code>[SEP]</code>）などの特別なトークンの助けを借りて実行されます。例えば、BERTモデルは次のように2つのシーケンス入力を構築します：",xa,fl,$i="日本語訳を提供していただきたいです。Markdown形式で記述してください。",Ta,rl,_a,ul,fi="我々は、前述のように、2つのシーケンスを2つの引数として <code>tokenizer</code> に渡すことで、このような文を自動的に生成することができます（以前のようにリストではなく）。以下のように：",Ma,gl,wa,dl,ri="これに対応するコードは以下です：",ya,ol,ka,hl,ui="一部のモデルでは、1つのシーケンスがどこで終わり、別のシーケンスがどこで始まるかを理解するのに十分な情報が備わっています。ただし、BERTなどの他のモデルでは、トークンタイプID（セグメントIDとも呼ばれる）も使用されています。これは、モデル内の2つのシーケンスを識別するバイナリマスクとして表されます。",Ua,cl,gi="トークナイザは、このマスクを「token_type_ids」として返します。",Va,bl,Za,Cl,di="最初のシーケンス、つまり質問のために使用される「コンテキスト」は、すべてのトークンが「0」で表されています。一方、2番目のシーケンス、質問に対応するものは、すべてのトークンが「1」で表されています。",Ha,jl,oi="一部のモデル、例えば <code>XLNetModel</code> のように、追加のトークンが「2」で表されます。",Pa,vl,La,xl,hi="事前に学習されたモデルを取り、それをタスク固有のデータセットに適応させる技術。ゼロからモデルを訓練する代わりに、既存のモデルから得た知識を出発点として活用できます。これにより学習プロセスが加速し、必要な訓練データの量が減少します。",qa,Tl,za,_l,ci="自己注意ベースの深層学習モデルアーキテクチャ。",Ra,Ml,Ja,wl,Ia,yl,bi="モデルに提供されるデータがラベル付けされていないモデルトレーニングの形態。教師なし学習の技術は、タスクに役立つパターンを見つけるためにデータ分布の統計情報を活用します。",Wa,Ul,Fa;return v=new o({props:{title:"Glossary",local:"glossary",headingTag:"h1"}}),T=new o({props:{title:"A",local:"a",headingTag:"h2"}}),_=new o({props:{title:"attention mask",local:"attention-mask",headingTag:"h3"}}),w=new Vl({props:{id:"M6adb1j2jPI"}}),U=new c({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEJlcnRUb2tlbml6ZXIlMEElMEF0b2tlbml6ZXIlMjAlM0QlMjBCZXJ0VG9rZW5pemVyLmZyb21fcHJldHJhaW5lZCglMjJnb29nbGUtYmVydCUyRmJlcnQtYmFzZS1jYXNlZCUyMiklMEElMEFzZXF1ZW5jZV9hJTIwJTNEJTIwJTIyVGhpcyUyMGlzJTIwYSUyMHNob3J0JTIwc2VxdWVuY2UuJTIyJTBBc2VxdWVuY2VfYiUyMCUzRCUyMCUyMlRoaXMlMjBpcyUyMGElMjByYXRoZXIlMjBsb25nJTIwc2VxdWVuY2UuJTIwSXQlMjBpcyUyMGF0JTIwbGVhc3QlMjBsb25nZXIlMjB0aGFuJTIwdGhlJTIwc2VxdWVuY2UlMjBBLiUyMiUwQSUwQWVuY29kZWRfc2VxdWVuY2VfYSUyMCUzRCUyMHRva2VuaXplcihzZXF1ZW5jZV9hKSU1QiUyMmlucHV0X2lkcyUyMiU1RCUwQWVuY29kZWRfc2VxdWVuY2VfYiUyMCUzRCUyMHRva2VuaXplcihzZXF1ZW5jZV9iKSU1QiUyMmlucHV0X2lkcyUyMiU1RA==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>sequence_a = <span class="hljs-string">&quot;This is a short sequence.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>sequence_b = <span class="hljs-string">&quot;This is a rather long sequence. It is at least longer than the sequence A.&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_sequence_a = tokenizer(sequence_a)[<span class="hljs-string">&quot;input_ids&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_sequence_b = tokenizer(sequence_b)[<span class="hljs-string">&quot;input_ids&quot;</span>]`,wrap:!1}}),Z=new c({props:{code:"bGVuKGVuY29kZWRfc2VxdWVuY2VfYSklMkMlMjBsZW4oZW5jb2RlZF9zZXF1ZW5jZV9iKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(encoded_sequence_a), <span class="hljs-built_in">len</span>(encoded_sequence_b)
(<span class="hljs-number">8</span>, <span class="hljs-number">19</span>)`,wrap:!1}}),L=new c({props:{code:"cGFkZGVkX3NlcXVlbmNlcyUyMCUzRCUyMHRva2VuaXplciglNUJzZXF1ZW5jZV9hJTJDJTIwc2VxdWVuY2VfYiU1RCUyQyUyMHBhZGRpbmclM0RUcnVlKQ==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>padded_sequences = tokenizer([sequence_a, sequence_b], padding=<span class="hljs-literal">True</span>)',wrap:!1}}),z=new c({props:{code:"cGFkZGVkX3NlcXVlbmNlcyU1QiUyMmlucHV0X2lkcyUyMiU1RA==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>padded_sequences[<span class="hljs-string">&quot;input_ids&quot;</span>]
[[<span class="hljs-number">101</span>, <span class="hljs-number">1188</span>, <span class="hljs-number">1110</span>, <span class="hljs-number">170</span>, <span class="hljs-number">1603</span>, <span class="hljs-number">4954</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">101</span>, <span class="hljs-number">1188</span>, <span class="hljs-number">1110</span>, <span class="hljs-number">170</span>, <span class="hljs-number">1897</span>, <span class="hljs-number">1263</span>, <span class="hljs-number">4954</span>, <span class="hljs-number">119</span>, <span class="hljs-number">1135</span>, <span class="hljs-number">1110</span>, <span class="hljs-number">1120</span>, <span class="hljs-number">1655</span>, <span class="hljs-number">2039</span>, <span class="hljs-number">1190</span>, <span class="hljs-number">1103</span>, <span class="hljs-number">4954</span>, <span class="hljs-number">138</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>]]`,wrap:!1}}),J=new c({props:{code:"cGFkZGVkX3NlcXVlbmNlcyU1QiUyMmF0dGVudGlvbl9tYXNrJTIyJTVE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>padded_sequences[<span class="hljs-string">&quot;attention_mask&quot;</span>]
[[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]]`,wrap:!1}}),I=new o({props:{title:"autoencoding models",local:"autoencoding-models",headingTag:"h3"}}),F=new o({props:{title:"autoregressive models",local:"autoregressive-models",headingTag:"h3"}}),X=new o({props:{title:"B",local:"b",headingTag:"h2"}}),G=new o({props:{title:"backbone",local:"backbone",headingTag:"h3"}}),E=new o({props:{title:"C",local:"c",headingTag:"h2"}}),S=new o({props:{title:"causal language modeling",local:"causal-language-modeling",headingTag:"h3"}}),Q=new o({props:{title:"channel",local:"channel",headingTag:"h3"}}),A=new o({props:{title:"connectionist temporal classification (CTC)",local:"connectionist-temporal-classification-ctc",headingTag:"h3"}}),O=new o({props:{title:"convolution",local:"convolution",headingTag:"h3"}}),te=new o({props:{title:"D",local:"d",headingTag:"h2"}}),le=new o({props:{title:"decoder input IDs",local:"decoder-input-ids",headingTag:"h3"}}),pe=new o({props:{title:"decoder models",local:"decoder-models",headingTag:"h3"}}),me=new Vl({props:{id:"d_ixlCubqQw"}}),$e=new o({props:{title:"deep learning (DL)",local:"deep-learning-dl",headingTag:"h3"}}),re=new o({props:{title:"E",local:"e",headingTag:"h2"}}),ue=new o({props:{title:"encoder models",local:"encoder-models",headingTag:"h3"}}),de=new Vl({props:{id:"H39Z_720T5s"}}),oe=new o({props:{title:"F",local:"f",headingTag:"h2"}}),he=new o({props:{title:"feature extraction",local:"feature-extraction",headingTag:"h3"}}),be=new o({props:{title:"feed forward chunking",local:"feed-forward-chunking",headingTag:"h3"}}),xe=new o({props:{title:"finetuned models",local:"finetuned-models",headingTag:"h3"}}),Me=new o({props:{title:"H",local:"h",headingTag:"h2"}}),we=new o({props:{title:"head",local:"head",headingTag:"h3"}}),Ue=new o({props:{title:"I",local:"i",headingTag:"h2"}}),Ve=new o({props:{title:"image patch",local:"image-patch",headingTag:"h3"}}),He=new o({props:{title:"inference",local:"inference",headingTag:"h3"}}),Le=new o({props:{title:"input IDs",local:"input-ids",headingTag:"h3"}}),ze=new Vl({props:{id:"VFp38yj8h3A"}}),Je=new c({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEJlcnRUb2tlbml6ZXIlMEElMEF0b2tlbml6ZXIlMjAlM0QlMjBCZXJ0VG9rZW5pemVyLmZyb21fcHJldHJhaW5lZCglMjJnb29nbGUtYmVydCUyRmJlcnQtYmFzZS1jYXNlZCUyMiklMEElMEFzZXF1ZW5jZSUyMCUzRCUyMCUyMkElMjBUaXRhbiUyMFJUWCUyMGhhcyUyMDI0R0IlMjBvZiUyMFZSQU0lMjI=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>sequence = <span class="hljs-string">&quot;A Titan RTX has 24GB of VRAM&quot;</span>`,wrap:!1}}),We=new c({props:{code:"dG9rZW5pemVkX3NlcXVlbmNlJTIwJTNEJTIwdG9rZW5pemVyLnRva2VuaXplKHNlcXVlbmNlKQ==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tokenized_sequence = tokenizer.tokenize(sequence)',wrap:!1}}),Ne=new c({props:{code:"cHJpbnQodG9rZW5pemVkX3NlcXVlbmNlKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(tokenized_sequence)
[<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;Titan&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;##T&#x27;</span>, <span class="hljs-string">&#x27;##X&#x27;</span>, <span class="hljs-string">&#x27;has&#x27;</span>, <span class="hljs-string">&#x27;24&#x27;</span>, <span class="hljs-string">&#x27;##GB&#x27;</span>, <span class="hljs-string">&#x27;of&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;##RA&#x27;</span>, <span class="hljs-string">&#x27;##M&#x27;</span>]`,wrap:!1}}),Ge=new c({props:{code:"aW5wdXRzJTIwJTNEJTIwdG9rZW5pemVyKHNlcXVlbmNlKQ==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(sequence)',wrap:!1}}),Ee=new c({props:{code:"ZW5jb2RlZF9zZXF1ZW5jZSUyMCUzRCUyMGlucHV0cyU1QiUyMmlucHV0X2lkcyUyMiU1RCUwQXByaW50KGVuY29kZWRfc2VxdWVuY2Up",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_sequence = inputs[<span class="hljs-string">&quot;input_ids&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(encoded_sequence)
[<span class="hljs-number">101</span>, <span class="hljs-number">138</span>, <span class="hljs-number">18696</span>, <span class="hljs-number">155</span>, <span class="hljs-number">1942</span>, <span class="hljs-number">3190</span>, <span class="hljs-number">1144</span>, <span class="hljs-number">1572</span>, <span class="hljs-number">13745</span>, <span class="hljs-number">1104</span>, <span class="hljs-number">159</span>, <span class="hljs-number">9664</span>, <span class="hljs-number">2107</span>, <span class="hljs-number">102</span>]`,wrap:!1}}),Qe=new c({props:{code:"ZGVjb2RlZF9zZXF1ZW5jZSUyMCUzRCUyMHRva2VuaXplci5kZWNvZGUoZW5jb2RlZF9zZXF1ZW5jZSk=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>decoded_sequence = tokenizer.decode(encoded_sequence)',wrap:!1}}),Ae=new c({props:{code:"cHJpbnQoZGVjb2RlZF9zZXF1ZW5jZSk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(decoded_sequence)
[CLS] A Titan RTX has 24GB of VRAM [SEP]`,wrap:!1}}),Oe=new o({props:{title:"L",local:"l",headingTag:"h2"}}),et=new o({props:{title:"Labels",local:"labels",headingTag:"h3"}}),C=new Ui({props:{$$slots:{default:[Vi]},$$scope:{ctx:Zl}}}),at=new o({props:{title:"large language models (LLM)",local:"large-language-models-llm",headingTag:"h3"}}),it=new o({props:{title:"M",local:"m",headingTag:"h2"}}),mt=new o({props:{title:"masked language modeling (MLM)",local:"masked-language-modeling-mlm",headingTag:"h3"}}),ft=new o({props:{title:"multimodal",local:"multimodal",headingTag:"h3"}}),ut=new o({props:{title:"N",local:"n",headingTag:"h2"}}),gt=new o({props:{title:"Natural language generation (NLG)",local:"natural-language-generation-nlg",headingTag:"h3"}}),ot=new o({props:{title:"Natural language processing (NLP)",local:"natural-language-processing-nlp",headingTag:"h3"}}),ct=new o({props:{title:"Natural language understanding (NLU)",local:"natural-language-understanding-nlu",headingTag:"h3"}}),Ct=new o({props:{title:"P",local:"p",headingTag:"h2"}}),jt=new o({props:{title:"pipeline",local:"pipeline",headingTag:"h3"}}),Tt=new o({props:{title:"pixel values",local:"pixel-values",headingTag:"h3"}}),Mt=new o({props:{title:"pooling",local:"pooling",headingTag:"h3"}}),yt=new o({props:{title:"position IDs",local:"position-ids",headingTag:"h3"}}),Zt=new o({props:{title:"preprocessing",local:"preprocessing",headingTag:"h3"}}),Pt=new o({props:{title:"pretrained model",local:"pretrained-model",headingTag:"h3"}}),zt=new o({props:{title:"R",local:"r",headingTag:"h2"}}),Rt=new o({props:{title:"recurrent neural network (RNN)",local:"recurrent-neural-network-rnn",headingTag:"h3"}}),It=new o({props:{title:"representation learning",local:"representation-learning",headingTag:"h3"}}),Ft=new o({props:{title:"S",local:"s",headingTag:"h2"}}),Nt=new o({props:{title:"sampling rate",local:"sampling-rate",headingTag:"h3"}}),Gt=new o({props:{title:"self-attention",local:"self-attention",headingTag:"h3"}}),Et=new o({props:{title:"self-supervised learning",local:"self-supervised-learning",headingTag:"h3"}}),Qt=new o({props:{title:"semi-supervised learning",local:"semi-supervised-learning",headingTag:"h3"}}),At=new o({props:{title:"sequence-to-sequence (seq2seq)",local:"sequence-to-sequence-seq2seq",headingTag:"h3"}}),Ot=new o({props:{title:"stride",local:"stride",headingTag:"h3"}}),tl=new o({props:{title:"supervised learning",local:"supervised-learning",headingTag:"h3"}}),nl=new o({props:{title:"T",local:"t",headingTag:"h2"}}),sl=new o({props:{title:"token",local:"token",headingTag:"h3"}}),pl=new o({props:{title:"token Type IDs",local:"token-type-ids",headingTag:"h3"}}),ml=new Vl({props:{id:"0u3ioSwev3s"}}),rl=new c({props:{code:"JTIzJTIwJTVCQ0xTJTVEJTIwU0VRVUVOQ0VfQSUyMCU1QlNFUCU1RCUyMFNFUVVFTkNFX0IlMjAlNUJTRVAlNUQ=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># [CLS] SEQUENCE_A [SEP] SEQUENCE_B [SEP]</span>',wrap:!1}}),gl=new c({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEJlcnRUb2tlbml6ZXIlMEElMEF0b2tlbml6ZXIlMjAlM0QlMjBCZXJ0VG9rZW5pemVyLmZyb21fcHJldHJhaW5lZCglMjJnb29nbGUtYmVydCUyRmJlcnQtYmFzZS1jYXNlZCUyMiklMEFzZXF1ZW5jZV9hJTIwJTNEJTIwJTIySHVnZ2luZ0ZhY2UlMjBpcyUyMGJhc2VkJTIwaW4lMjBOWUMlMjIlMEFzZXF1ZW5jZV9iJTIwJTNEJTIwJTIyV2hlcmUlMjBpcyUyMEh1Z2dpbmdGYWNlJTIwYmFzZWQlM0YlMjIlMEElMEFlbmNvZGVkX2RpY3QlMjAlM0QlMjB0b2tlbml6ZXIoc2VxdWVuY2VfYSUyQyUyMHNlcXVlbmNlX2IpJTBBZGVjb2RlZCUyMCUzRCUyMHRva2VuaXplci5kZWNvZGUoZW5jb2RlZF9kaWN0JTVCJTIyaW5wdXRfaWRzJTIyJTVEKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sequence_a = <span class="hljs-string">&quot;HuggingFace is based in NYC&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>sequence_b = <span class="hljs-string">&quot;Where is HuggingFace based?&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dict = tokenizer(sequence_a, sequence_b)
<span class="hljs-meta">&gt;&gt;&gt; </span>decoded = tokenizer.decode(encoded_dict[<span class="hljs-string">&quot;input_ids&quot;</span>])`,wrap:!1}}),ol=new c({props:{code:"cHJpbnQoZGVjb2RlZCk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(decoded)
[CLS] HuggingFace <span class="hljs-keyword">is</span> based <span class="hljs-keyword">in</span> NYC [SEP] Where <span class="hljs-keyword">is</span> HuggingFace based? [SEP]`,wrap:!1}}),bl=new c({props:{code:"ZW5jb2RlZF9kaWN0JTVCJTIydG9rZW5fdHlwZV9pZHMlMjIlNUQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dict[<span class="hljs-string">&quot;token_type_ids&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]`,wrap:!1}}),vl=new o({props:{title:"transfer learning",local:"transfer-learning",headingTag:"h3"}}),Tl=new o({props:{title:"transformer",local:"transformer",headingTag:"h3"}}),Ml=new o({props:{title:"U",local:"u",headingTag:"h2"}}),wl=new o({props:{title:"unsupervised learning",local:"unsupervised-learning",headingTag:"h3"}}),{c(){h=p("meta"),j=s(),b=p("p"),kl=s(),$(v.$$.fragment),Hl=s(),x=p("p"),x.textContent=Na,Pl=s(),$(T.$$.fragment),Ll=s(),$(_.$$.fragment),ql=s(),M=p("p"),M.textContent=Xa,zl=s(),$(w.$$.fragment),Rl=s(),y=p("p"),y.textContent=Ga,Jl=s(),k=p("p"),k.textContent=Ba,Il=s(),$(U.$$.fragment),Wl=s(),V=p("p"),V.textContent=Ea,Fl=s(),$(Z.$$.fragment),Nl=s(),H=p("p"),H.textContent=Sa,Xl=s(),P=p("p"),P.textContent=Ya,Gl=s(),$(L.$$.fragment),Bl=s(),q=p("p"),q.textContent=Qa,El=s(),$(z.$$.fragment),Sl=s(),R=p("p"),R.innerHTML=Da,Yl=s(),$(J.$$.fragment),Ql=s(),$(I.$$.fragment),Dl=s(),W=p("p"),W.innerHTML=Aa,Al=s(),$(F.$$.fragment),Kl=s(),N=p("p"),N.innerHTML=Ka,Ol=s(),$(X.$$.fragment),en=s(),$(G.$$.fragment),tn=s(),B=p("p"),B.innerHTML=Oa,ln=s(),$(E.$$.fragment),nn=s(),$(S.$$.fragment),sn=s(),Y=p("p"),Y.textContent=ep,an=s(),$(Q.$$.fragment),pn=s(),D=p("p"),D.innerHTML=tp,mn=s(),$(A.$$.fragment),$n=s(),K=p("p"),K.textContent=lp,fn=s(),$(O.$$.fragment),rn=s(),ee=p("p"),ee.textContent=np,un=s(),$(te.$$.fragment),gn=s(),$(le.$$.fragment),dn=s(),ne=p("p"),ne.textContent=sp,on=s(),se=p("p"),se.innerHTML=ap,hn=s(),ae=p("p"),ae.textContent=pp,cn=s(),$(pe.$$.fragment),bn=s(),ie=p("p"),ie.textContent=ip,Cn=s(),$(me.$$.fragment),jn=s(),$($e.$$.fragment),vn=s(),fe=p("p"),fe.textContent=mp,xn=s(),$(re.$$.fragment),Tn=s(),$(ue.$$.fragment),_n=s(),ge=p("p"),ge.innerHTML=$p,Mn=s(),$(de.$$.fragment),wn=s(),$(oe.$$.fragment),yn=s(),$(he.$$.fragment),kn=s(),ce=p("p"),ce.textContent=fp,Un=s(),$(be.$$.fragment),Vn=s(),Ce=p("p"),Ce.innerHTML=rp,Zn=s(),je=p("p"),je.innerHTML=up,Hn=s(),ve=p("p"),ve.innerHTML=gp,Pn=s(),$(xe.$$.fragment),Ln=s(),Te=p("p"),Te.innerHTML=dp,qn=s(),_e=p("p"),_e.innerHTML=op,zn=s(),$(Me.$$.fragment),Rn=s(),$(we.$$.fragment),Jn=s(),ye=p("p"),ye.textContent=hp,In=s(),ke=p("ul"),ke.innerHTML=cp,Wn=s(),$(Ue.$$.fragment),Fn=s(),$(Ve.$$.fragment),Nn=s(),Ze=p("p"),Ze.textContent=bp,Xn=s(),$(He.$$.fragment),Gn=s(),Pe=p("p"),Pe.innerHTML=Cp,Bn=s(),$(Le.$$.fragment),En=s(),qe=p("p"),qe.textContent=jp,Sn=s(),$(ze.$$.fragment),Yn=s(),Re=p("p"),Re.innerHTML=vp,Qn=s(),$(Je.$$.fragment),Dn=s(),Ie=p("p"),Ie.textContent=xp,An=s(),$(We.$$.fragment),Kn=s(),Fe=p("p"),Fe.textContent=Tp,On=s(),$(Ne.$$.fragment),es=s(),Xe=p("p"),Xe.innerHTML=_p,ts=s(),$(Ge.$$.fragment),ls=s(),Be=p("p"),Be.innerHTML=Mp,ns=s(),$(Ee.$$.fragment),ss=s(),Se=p("p"),Se.textContent=wp,as=s(),Ye=p("p"),Ye.textContent=yp,ps=s(),$(Qe.$$.fragment),is=s(),De=p("p"),De.textContent=kp,ms=s(),$(Ae.$$.fragment),$s=s(),Ke=p("p"),Ke.innerHTML=Up,fs=s(),$(Oe.$$.fragment),rs=s(),$(et.$$.fragment),us=s(),tt=p("p"),tt.textContent=Vp,gs=s(),lt=p("p"),lt.textContent=Zp,ds=s(),nt=p("ul"),nt.innerHTML=Hp,os=s(),$(C.$$.fragment),hs=s(),st=p("p"),st.innerHTML=Pp,cs=s(),$(at.$$.fragment),bs=s(),pt=p("p"),pt.textContent=Lp,Cs=s(),$(it.$$.fragment),js=s(),$(mt.$$.fragment),vs=s(),$t=p("p"),$t.textContent=qp,xs=s(),$(ft.$$.fragment),Ts=s(),rt=p("p"),rt.textContent=zp,_s=s(),$(ut.$$.fragment),Ms=s(),$(gt.$$.fragment),ws=s(),dt=p("p"),dt.innerHTML=Rp,ys=s(),$(ot.$$.fragment),ks=s(),ht=p("p"),ht.textContent=Jp,Us=s(),$(ct.$$.fragment),Vs=s(),bt=p("p"),bt.textContent=Ip,Zs=s(),$(Ct.$$.fragment),Hs=s(),$(jt.$$.fragment),Ps=s(),vt=p("p"),vt.textContent=Wp,Ls=s(),xt=p("p"),xt.innerHTML=Fp,qs=s(),$(Tt.$$.fragment),zs=s(),_t=p("p"),_t.innerHTML=Np,Rs=s(),$(Mt.$$.fragment),Js=s(),wt=p("p"),wt.textContent=Xp,Is=s(),$(yt.$$.fragment),Ws=s(),kt=p("p"),kt.innerHTML=Gp,Fs=s(),Ut=p("p"),Ut.innerHTML=Bp,Ns=s(),Vt=p("p"),Vt.innerHTML=Ep,Xs=s(),$(Zt.$$.fragment),Gs=s(),Ht=p("p"),Ht.innerHTML=Sp,Bs=s(),$(Pt.$$.fragment),Es=s(),Lt=p("p"),Lt.innerHTML=Yp,Ss=s(),qt=p("p"),qt.textContent=Qp,Ys=s(),$(zt.$$.fragment),Qs=s(),$(Rt.$$.fragment),Ds=s(),Jt=p("p"),Jt.textContent=Dp,As=s(),$(It.$$.fragment),Ks=s(),Wt=p("p"),Wt.textContent=Ap,Os=s(),$(Ft.$$.fragment),ea=s(),$(Nt.$$.fragment),ta=s(),Xt=p("p"),Xt.textContent=Kp,la=s(),$(Gt.$$.fragment),na=s(),Bt=p("p"),Bt.textContent=Op,sa=s(),$(Et.$$.fragment),aa=s(),St=p("p"),St.innerHTML=ei,pa=s(),Yt=p("p"),Yt.innerHTML=ti,ia=s(),$(Qt.$$.fragment),ma=s(),Dt=p("p"),Dt.innerHTML=li,$a=s(),$(At.$$.fragment),fa=s(),Kt=p("p"),Kt.innerHTML=ni,ra=s(),$(Ot.$$.fragment),ua=s(),el=p("p"),el.innerHTML=si,ga=s(),$(tl.$$.fragment),da=s(),ll=p("p"),ll.textContent=ai,oa=s(),$(nl.$$.fragment),ha=s(),$(sl.$$.fragment),ca=s(),al=p("p"),al.textContent=pi,ba=s(),$(pl.$$.fragment),Ca=s(),il=p("p"),il.textContent=ii,ja=s(),$(ml.$$.fragment),va=s(),$l=p("p"),$l.innerHTML=mi,xa=s(),fl=p("p"),fl.textContent=$i,Ta=s(),$(rl.$$.fragment),_a=s(),ul=p("p"),ul.innerHTML=fi,Ma=s(),$(gl.$$.fragment),wa=s(),dl=p("p"),dl.textContent=ri,ya=s(),$(ol.$$.fragment),ka=s(),hl=p("p"),hl.textContent=ui,Ua=s(),cl=p("p"),cl.textContent=gi,Va=s(),$(bl.$$.fragment),Za=s(),Cl=p("p"),Cl.textContent=di,Ha=s(),jl=p("p"),jl.innerHTML=oi,Pa=s(),$(vl.$$.fragment),La=s(),xl=p("p"),xl.textContent=hi,qa=s(),$(Tl.$$.fragment),za=s(),_l=p("p"),_l.textContent=ci,Ra=s(),$(Ml.$$.fragment),Ja=s(),$(wl.$$.fragment),Ia=s(),yl=p("p"),yl.textContent=bi,Wa=s(),Ul=p("p"),this.h()},l(e){const t=yi("svelte-u9bgzb",document.head);h=i(t,"META",{name:!0,content:!0}),t.forEach(l),j=a(e),b=i(e,"P",{}),ji(b).forEach(l),kl=a(e),f(v.$$.fragment,e),Hl=a(e),x=i(e,"P",{"data-svelte-h":!0}),m(x)!=="svelte-98428p"&&(x.textContent=Na),Pl=a(e),f(T.$$.fragment,e),Ll=a(e),f(_.$$.fragment,e),ql=a(e),M=i(e,"P",{"data-svelte-h":!0}),m(M)!=="svelte-b689fo"&&(M.textContent=Xa),zl=a(e),f(w.$$.fragment,e),Rl=a(e),y=i(e,"P",{"data-svelte-h":!0}),m(y)!=="svelte-qkn552"&&(y.textContent=Ga),Jl=a(e),k=i(e,"P",{"data-svelte-h":!0}),m(k)!=="svelte-1scnakr"&&(k.textContent=Ba),Il=a(e),f(U.$$.fragment,e),Wl=a(e),V=i(e,"P",{"data-svelte-h":!0}),m(V)!=="svelte-xx5dsm"&&(V.textContent=Ea),Fl=a(e),f(Z.$$.fragment,e),Nl=a(e),H=i(e,"P",{"data-svelte-h":!0}),m(H)!=="svelte-1j3w18u"&&(H.textContent=Sa),Xl=a(e),P=i(e,"P",{"data-svelte-h":!0}),m(P)!=="svelte-1vpkk6k"&&(P.textContent=Ya),Gl=a(e),f(L.$$.fragment,e),Bl=a(e),q=i(e,"P",{"data-svelte-h":!0}),m(q)!=="svelte-1w1o84y"&&(q.textContent=Qa),El=a(e),f(z.$$.fragment,e),Sl=a(e),R=i(e,"P",{"data-svelte-h":!0}),m(R)!=="svelte-1qil5s9"&&(R.innerHTML=Da),Yl=a(e),f(J.$$.fragment,e),Ql=a(e),f(I.$$.fragment,e),Dl=a(e),W=i(e,"P",{"data-svelte-h":!0}),m(W)!=="svelte-us5p97"&&(W.innerHTML=Aa),Al=a(e),f(F.$$.fragment,e),Kl=a(e),N=i(e,"P",{"data-svelte-h":!0}),m(N)!=="svelte-1h1qvni"&&(N.innerHTML=Ka),Ol=a(e),f(X.$$.fragment,e),en=a(e),f(G.$$.fragment,e),tn=a(e),B=i(e,"P",{"data-svelte-h":!0}),m(B)!=="svelte-1i4h6d2"&&(B.innerHTML=Oa),ln=a(e),f(E.$$.fragment,e),nn=a(e),f(S.$$.fragment,e),sn=a(e),Y=i(e,"P",{"data-svelte-h":!0}),m(Y)!=="svelte-13x5eus"&&(Y.textContent=ep),an=a(e),f(Q.$$.fragment,e),pn=a(e),D=i(e,"P",{"data-svelte-h":!0}),m(D)!=="svelte-zva3o2"&&(D.innerHTML=tp),mn=a(e),f(A.$$.fragment,e),$n=a(e),K=i(e,"P",{"data-svelte-h":!0}),m(K)!=="svelte-1vlzo70"&&(K.textContent=lp),fn=a(e),f(O.$$.fragment,e),rn=a(e),ee=i(e,"P",{"data-svelte-h":!0}),m(ee)!=="svelte-9ss1cp"&&(ee.textContent=np),un=a(e),f(te.$$.fragment,e),gn=a(e),f(le.$$.fragment,e),dn=a(e),ne=i(e,"P",{"data-svelte-h":!0}),m(ne)!=="svelte-bv5bmi"&&(ne.textContent=sp),on=a(e),se=i(e,"P",{"data-svelte-h":!0}),m(se)!=="svelte-1bxvzcr"&&(se.innerHTML=ap),hn=a(e),ae=i(e,"P",{"data-svelte-h":!0}),m(ae)!=="svelte-1vdsvcc"&&(ae.textContent=pp),cn=a(e),f(pe.$$.fragment,e),bn=a(e),ie=i(e,"P",{"data-svelte-h":!0}),m(ie)!=="svelte-1y8510s"&&(ie.textContent=ip),Cn=a(e),f(me.$$.fragment,e),jn=a(e),f($e.$$.fragment,e),vn=a(e),fe=i(e,"P",{"data-svelte-h":!0}),m(fe)!=="svelte-16y6ldr"&&(fe.textContent=mp),xn=a(e),f(re.$$.fragment,e),Tn=a(e),f(ue.$$.fragment,e),_n=a(e),ge=i(e,"P",{"data-svelte-h":!0}),m(ge)!=="svelte-14uh7md"&&(ge.innerHTML=$p),Mn=a(e),f(de.$$.fragment,e),wn=a(e),f(oe.$$.fragment,e),yn=a(e),f(he.$$.fragment,e),kn=a(e),ce=i(e,"P",{"data-svelte-h":!0}),m(ce)!=="svelte-1u048nz"&&(ce.textContent=fp),Un=a(e),f(be.$$.fragment,e),Vn=a(e),Ce=i(e,"P",{"data-svelte-h":!0}),m(Ce)!=="svelte-4qz63u"&&(Ce.innerHTML=rp),Zn=a(e),je=i(e,"P",{"data-svelte-h":!0}),m(je)!=="svelte-1s0xfws"&&(je.innerHTML=up),Hn=a(e),ve=i(e,"P",{"data-svelte-h":!0}),m(ve)!=="svelte-vzcml4"&&(ve.innerHTML=gp),Pn=a(e),f(xe.$$.fragment,e),Ln=a(e),Te=i(e,"P",{"data-svelte-h":!0}),m(Te)!=="svelte-o8bekk"&&(Te.innerHTML=dp),qn=a(e),_e=i(e,"P",{"data-svelte-h":!0}),m(_e)!=="svelte-1qyyp5b"&&(_e.innerHTML=op),zn=a(e),f(Me.$$.fragment,e),Rn=a(e),f(we.$$.fragment,e),Jn=a(e),ye=i(e,"P",{"data-svelte-h":!0}),m(ye)!=="svelte-b8nd6a"&&(ye.textContent=hp),In=a(e),ke=i(e,"UL",{"data-svelte-h":!0}),m(ke)!=="svelte-i6g7vc"&&(ke.innerHTML=cp),Wn=a(e),f(Ue.$$.fragment,e),Fn=a(e),f(Ve.$$.fragment,e),Nn=a(e),Ze=i(e,"P",{"data-svelte-h":!0}),m(Ze)!=="svelte-or0u16"&&(Ze.textContent=bp),Xn=a(e),f(He.$$.fragment,e),Gn=a(e),Pe=i(e,"P",{"data-svelte-h":!0}),m(Pe)!=="svelte-1mq9o86"&&(Pe.innerHTML=Cp),Bn=a(e),f(Le.$$.fragment,e),En=a(e),qe=i(e,"P",{"data-svelte-h":!0}),m(qe)!=="svelte-1xl9th5"&&(qe.textContent=jp),Sn=a(e),f(ze.$$.fragment,e),Yn=a(e),Re=i(e,"P",{"data-svelte-h":!0}),m(Re)!=="svelte-1iaou9k"&&(Re.innerHTML=vp),Qn=a(e),f(Je.$$.fragment,e),Dn=a(e),Ie=i(e,"P",{"data-svelte-h":!0}),m(Ie)!=="svelte-1hulsc"&&(Ie.textContent=xp),An=a(e),f(We.$$.fragment,e),Kn=a(e),Fe=i(e,"P",{"data-svelte-h":!0}),m(Fe)!=="svelte-1df5ffw"&&(Fe.textContent=Tp),On=a(e),f(Ne.$$.fragment,e),es=a(e),Xe=i(e,"P",{"data-svelte-h":!0}),m(Xe)!=="svelte-y3gz8j"&&(Xe.innerHTML=_p),ts=a(e),f(Ge.$$.fragment,e),ls=a(e),Be=i(e,"P",{"data-svelte-h":!0}),m(Be)!=="svelte-1oqtc77"&&(Be.innerHTML=Mp),ns=a(e),f(Ee.$$.fragment,e),ss=a(e),Se=i(e,"P",{"data-svelte-h":!0}),m(Se)!=="svelte-19u3lwk"&&(Se.textContent=wp),as=a(e),Ye=i(e,"P",{"data-svelte-h":!0}),m(Ye)!=="svelte-19thhzy"&&(Ye.textContent=yp),ps=a(e),f(Qe.$$.fragment,e),is=a(e),De=i(e,"P",{"data-svelte-h":!0}),m(De)!=="svelte-1bl6ik4"&&(De.textContent=kp),ms=a(e),f(Ae.$$.fragment,e),$s=a(e),Ke=i(e,"P",{"data-svelte-h":!0}),m(Ke)!=="svelte-13vth4t"&&(Ke.innerHTML=Up),fs=a(e),f(Oe.$$.fragment,e),rs=a(e),f(et.$$.fragment,e),us=a(e),tt=i(e,"P",{"data-svelte-h":!0}),m(tt)!=="svelte-hyfzpl"&&(tt.textContent=Vp),gs=a(e),lt=i(e,"P",{"data-svelte-h":!0}),m(lt)!=="svelte-186is3b"&&(lt.textContent=Zp),ds=a(e),nt=i(e,"UL",{"data-svelte-h":!0}),m(nt)!=="svelte-1eupwxe"&&(nt.innerHTML=Hp),os=a(e),f(C.$$.fragment,e),hs=a(e),st=i(e,"P",{"data-svelte-h":!0}),m(st)!=="svelte-99n2st"&&(st.innerHTML=Pp),cs=a(e),f(at.$$.fragment,e),bs=a(e),pt=i(e,"P",{"data-svelte-h":!0}),m(pt)!=="svelte-hhnawo"&&(pt.textContent=Lp),Cs=a(e),f(it.$$.fragment,e),js=a(e),f(mt.$$.fragment,e),vs=a(e),$t=i(e,"P",{"data-svelte-h":!0}),m($t)!=="svelte-1corwln"&&($t.textContent=qp),xs=a(e),f(ft.$$.fragment,e),Ts=a(e),rt=i(e,"P",{"data-svelte-h":!0}),m(rt)!=="svelte-1bi895w"&&(rt.textContent=zp),_s=a(e),f(ut.$$.fragment,e),Ms=a(e),f(gt.$$.fragment,e),ws=a(e),dt=i(e,"P",{"data-svelte-h":!0}),m(dt)!=="svelte-1idtumq"&&(dt.innerHTML=Rp),ys=a(e),f(ot.$$.fragment,e),ks=a(e),ht=i(e,"P",{"data-svelte-h":!0}),m(ht)!=="svelte-17wjpps"&&(ht.textContent=Jp),Us=a(e),f(ct.$$.fragment,e),Vs=a(e),bt=i(e,"P",{"data-svelte-h":!0}),m(bt)!=="svelte-zng9pc"&&(bt.textContent=Ip),Zs=a(e),f(Ct.$$.fragment,e),Hs=a(e),f(jt.$$.fragment,e),Ps=a(e),vt=i(e,"P",{"data-svelte-h":!0}),m(vt)!=="svelte-1nnxit4"&&(vt.textContent=Wp),Ls=a(e),xt=i(e,"P",{"data-svelte-h":!0}),m(xt)!=="svelte-z4hxb7"&&(xt.innerHTML=Fp),qs=a(e),f(Tt.$$.fragment,e),zs=a(e),_t=i(e,"P",{"data-svelte-h":!0}),m(_t)!=="svelte-c0rpvo"&&(_t.innerHTML=Np),Rs=a(e),f(Mt.$$.fragment,e),Js=a(e),wt=i(e,"P",{"data-svelte-h":!0}),m(wt)!=="svelte-15cvkah"&&(wt.textContent=Xp),Is=a(e),f(yt.$$.fragment,e),Ws=a(e),kt=i(e,"P",{"data-svelte-h":!0}),m(kt)!=="svelte-1ogm7t8"&&(kt.innerHTML=Gp),Fs=a(e),Ut=i(e,"P",{"data-svelte-h":!0}),m(Ut)!=="svelte-dypimq"&&(Ut.innerHTML=Bp),Ns=a(e),Vt=i(e,"P",{"data-svelte-h":!0}),m(Vt)!=="svelte-ijg7se"&&(Vt.innerHTML=Ep),Xs=a(e),f(Zt.$$.fragment,e),Gs=a(e),Ht=i(e,"P",{"data-svelte-h":!0}),m(Ht)!=="svelte-o3ayyb"&&(Ht.innerHTML=Sp),Bs=a(e),f(Pt.$$.fragment,e),Es=a(e),Lt=i(e,"P",{"data-svelte-h":!0}),m(Lt)!=="svelte-piqayw"&&(Lt.innerHTML=Yp),Ss=a(e),qt=i(e,"P",{"data-svelte-h":!0}),m(qt)!=="svelte-lazfg2"&&(qt.textContent=Qp),Ys=a(e),f(zt.$$.fragment,e),Qs=a(e),f(Rt.$$.fragment,e),Ds=a(e),Jt=i(e,"P",{"data-svelte-h":!0}),m(Jt)!=="svelte-dtonry"&&(Jt.textContent=Dp),As=a(e),f(It.$$.fragment,e),Ks=a(e),Wt=i(e,"P",{"data-svelte-h":!0}),m(Wt)!=="svelte-lb1gv3"&&(Wt.textContent=Ap),Os=a(e),f(Ft.$$.fragment,e),ea=a(e),f(Nt.$$.fragment,e),ta=a(e),Xt=i(e,"P",{"data-svelte-h":!0}),m(Xt)!=="svelte-1vlvca9"&&(Xt.textContent=Kp),la=a(e),f(Gt.$$.fragment,e),na=a(e),Bt=i(e,"P",{"data-svelte-h":!0}),m(Bt)!=="svelte-81xkfp"&&(Bt.textContent=Op),sa=a(e),f(Et.$$.fragment,e),aa=a(e),St=i(e,"P",{"data-svelte-h":!0}),m(St)!=="svelte-1anffyb"&&(St.innerHTML=ei),pa=a(e),Yt=i(e,"P",{"data-svelte-h":!0}),m(Yt)!=="svelte-1uj6w5e"&&(Yt.innerHTML=ti),ia=a(e),f(Qt.$$.fragment,e),ma=a(e),Dt=i(e,"P",{"data-svelte-h":!0}),m(Dt)!=="svelte-1yr93xm"&&(Dt.innerHTML=li),$a=a(e),f(At.$$.fragment,e),fa=a(e),Kt=i(e,"P",{"data-svelte-h":!0}),m(Kt)!=="svelte-plkgv5"&&(Kt.innerHTML=ni),ra=a(e),f(Ot.$$.fragment,e),ua=a(e),el=i(e,"P",{"data-svelte-h":!0}),m(el)!=="svelte-1lfg9vu"&&(el.innerHTML=si),ga=a(e),f(tl.$$.fragment,e),da=a(e),ll=i(e,"P",{"data-svelte-h":!0}),m(ll)!=="svelte-3yfaw1"&&(ll.textContent=ai),oa=a(e),f(nl.$$.fragment,e),ha=a(e),f(sl.$$.fragment,e),ca=a(e),al=i(e,"P",{"data-svelte-h":!0}),m(al)!=="svelte-1yydr3x"&&(al.textContent=pi),ba=a(e),f(pl.$$.fragment,e),Ca=a(e),il=i(e,"P",{"data-svelte-h":!0}),m(il)!=="svelte-1nchoj5"&&(il.textContent=ii),ja=a(e),f(ml.$$.fragment,e),va=a(e),$l=i(e,"P",{"data-svelte-h":!0}),m($l)!=="svelte-12aravh"&&($l.innerHTML=mi),xa=a(e),fl=i(e,"P",{"data-svelte-h":!0}),m(fl)!=="svelte-1drn9bt"&&(fl.textContent=$i),Ta=a(e),f(rl.$$.fragment,e),_a=a(e),ul=i(e,"P",{"data-svelte-h":!0}),m(ul)!=="svelte-1av928b"&&(ul.innerHTML=fi),Ma=a(e),f(gl.$$.fragment,e),wa=a(e),dl=i(e,"P",{"data-svelte-h":!0}),m(dl)!=="svelte-khfiqf"&&(dl.textContent=ri),ya=a(e),f(ol.$$.fragment,e),ka=a(e),hl=i(e,"P",{"data-svelte-h":!0}),m(hl)!=="svelte-1z032cb"&&(hl.textContent=ui),Ua=a(e),cl=i(e,"P",{"data-svelte-h":!0}),m(cl)!=="svelte-1ojxlzn"&&(cl.textContent=gi),Va=a(e),f(bl.$$.fragment,e),Za=a(e),Cl=i(e,"P",{"data-svelte-h":!0}),m(Cl)!=="svelte-sk90dq"&&(Cl.textContent=di),Ha=a(e),jl=i(e,"P",{"data-svelte-h":!0}),m(jl)!=="svelte-mptj76"&&(jl.innerHTML=oi),Pa=a(e),f(vl.$$.fragment,e),La=a(e),xl=i(e,"P",{"data-svelte-h":!0}),m(xl)!=="svelte-pdt40r"&&(xl.textContent=hi),qa=a(e),f(Tl.$$.fragment,e),za=a(e),_l=i(e,"P",{"data-svelte-h":!0}),m(_l)!=="svelte-uzfhy9"&&(_l.textContent=ci),Ra=a(e),f(Ml.$$.fragment,e),Ja=a(e),f(wl.$$.fragment,e),Ia=a(e),yl=i(e,"P",{"data-svelte-h":!0}),m(yl)!=="svelte-2c8cjo"&&(yl.textContent=bi),Wa=a(e),Ul=i(e,"P",{}),ji(Ul).forEach(l),this.h()},h(){vi(h,"name","hf:doc:metadata"),vi(h,"content",Hi)},m(e,t){ki(document.head,h),n(e,j,t),n(e,b,t),n(e,kl,t),r(v,e,t),n(e,Hl,t),n(e,x,t),n(e,Pl,t),r(T,e,t),n(e,Ll,t),r(_,e,t),n(e,ql,t),n(e,M,t),n(e,zl,t),r(w,e,t),n(e,Rl,t),n(e,y,t),n(e,Jl,t),n(e,k,t),n(e,Il,t),r(U,e,t),n(e,Wl,t),n(e,V,t),n(e,Fl,t),r(Z,e,t),n(e,Nl,t),n(e,H,t),n(e,Xl,t),n(e,P,t),n(e,Gl,t),r(L,e,t),n(e,Bl,t),n(e,q,t),n(e,El,t),r(z,e,t),n(e,Sl,t),n(e,R,t),n(e,Yl,t),r(J,e,t),n(e,Ql,t),r(I,e,t),n(e,Dl,t),n(e,W,t),n(e,Al,t),r(F,e,t),n(e,Kl,t),n(e,N,t),n(e,Ol,t),r(X,e,t),n(e,en,t),r(G,e,t),n(e,tn,t),n(e,B,t),n(e,ln,t),r(E,e,t),n(e,nn,t),r(S,e,t),n(e,sn,t),n(e,Y,t),n(e,an,t),r(Q,e,t),n(e,pn,t),n(e,D,t),n(e,mn,t),r(A,e,t),n(e,$n,t),n(e,K,t),n(e,fn,t),r(O,e,t),n(e,rn,t),n(e,ee,t),n(e,un,t),r(te,e,t),n(e,gn,t),r(le,e,t),n(e,dn,t),n(e,ne,t),n(e,on,t),n(e,se,t),n(e,hn,t),n(e,ae,t),n(e,cn,t),r(pe,e,t),n(e,bn,t),n(e,ie,t),n(e,Cn,t),r(me,e,t),n(e,jn,t),r($e,e,t),n(e,vn,t),n(e,fe,t),n(e,xn,t),r(re,e,t),n(e,Tn,t),r(ue,e,t),n(e,_n,t),n(e,ge,t),n(e,Mn,t),r(de,e,t),n(e,wn,t),r(oe,e,t),n(e,yn,t),r(he,e,t),n(e,kn,t),n(e,ce,t),n(e,Un,t),r(be,e,t),n(e,Vn,t),n(e,Ce,t),n(e,Zn,t),n(e,je,t),n(e,Hn,t),n(e,ve,t),n(e,Pn,t),r(xe,e,t),n(e,Ln,t),n(e,Te,t),n(e,qn,t),n(e,_e,t),n(e,zn,t),r(Me,e,t),n(e,Rn,t),r(we,e,t),n(e,Jn,t),n(e,ye,t),n(e,In,t),n(e,ke,t),n(e,Wn,t),r(Ue,e,t),n(e,Fn,t),r(Ve,e,t),n(e,Nn,t),n(e,Ze,t),n(e,Xn,t),r(He,e,t),n(e,Gn,t),n(e,Pe,t),n(e,Bn,t),r(Le,e,t),n(e,En,t),n(e,qe,t),n(e,Sn,t),r(ze,e,t),n(e,Yn,t),n(e,Re,t),n(e,Qn,t),r(Je,e,t),n(e,Dn,t),n(e,Ie,t),n(e,An,t),r(We,e,t),n(e,Kn,t),n(e,Fe,t),n(e,On,t),r(Ne,e,t),n(e,es,t),n(e,Xe,t),n(e,ts,t),r(Ge,e,t),n(e,ls,t),n(e,Be,t),n(e,ns,t),r(Ee,e,t),n(e,ss,t),n(e,Se,t),n(e,as,t),n(e,Ye,t),n(e,ps,t),r(Qe,e,t),n(e,is,t),n(e,De,t),n(e,ms,t),r(Ae,e,t),n(e,$s,t),n(e,Ke,t),n(e,fs,t),r(Oe,e,t),n(e,rs,t),r(et,e,t),n(e,us,t),n(e,tt,t),n(e,gs,t),n(e,lt,t),n(e,ds,t),n(e,nt,t),n(e,os,t),r(C,e,t),n(e,hs,t),n(e,st,t),n(e,cs,t),r(at,e,t),n(e,bs,t),n(e,pt,t),n(e,Cs,t),r(it,e,t),n(e,js,t),r(mt,e,t),n(e,vs,t),n(e,$t,t),n(e,xs,t),r(ft,e,t),n(e,Ts,t),n(e,rt,t),n(e,_s,t),r(ut,e,t),n(e,Ms,t),r(gt,e,t),n(e,ws,t),n(e,dt,t),n(e,ys,t),r(ot,e,t),n(e,ks,t),n(e,ht,t),n(e,Us,t),r(ct,e,t),n(e,Vs,t),n(e,bt,t),n(e,Zs,t),r(Ct,e,t),n(e,Hs,t),r(jt,e,t),n(e,Ps,t),n(e,vt,t),n(e,Ls,t),n(e,xt,t),n(e,qs,t),r(Tt,e,t),n(e,zs,t),n(e,_t,t),n(e,Rs,t),r(Mt,e,t),n(e,Js,t),n(e,wt,t),n(e,Is,t),r(yt,e,t),n(e,Ws,t),n(e,kt,t),n(e,Fs,t),n(e,Ut,t),n(e,Ns,t),n(e,Vt,t),n(e,Xs,t),r(Zt,e,t),n(e,Gs,t),n(e,Ht,t),n(e,Bs,t),r(Pt,e,t),n(e,Es,t),n(e,Lt,t),n(e,Ss,t),n(e,qt,t),n(e,Ys,t),r(zt,e,t),n(e,Qs,t),r(Rt,e,t),n(e,Ds,t),n(e,Jt,t),n(e,As,t),r(It,e,t),n(e,Ks,t),n(e,Wt,t),n(e,Os,t),r(Ft,e,t),n(e,ea,t),r(Nt,e,t),n(e,ta,t),n(e,Xt,t),n(e,la,t),r(Gt,e,t),n(e,na,t),n(e,Bt,t),n(e,sa,t),r(Et,e,t),n(e,aa,t),n(e,St,t),n(e,pa,t),n(e,Yt,t),n(e,ia,t),r(Qt,e,t),n(e,ma,t),n(e,Dt,t),n(e,$a,t),r(At,e,t),n(e,fa,t),n(e,Kt,t),n(e,ra,t),r(Ot,e,t),n(e,ua,t),n(e,el,t),n(e,ga,t),r(tl,e,t),n(e,da,t),n(e,ll,t),n(e,oa,t),r(nl,e,t),n(e,ha,t),r(sl,e,t),n(e,ca,t),n(e,al,t),n(e,ba,t),r(pl,e,t),n(e,Ca,t),n(e,il,t),n(e,ja,t),r(ml,e,t),n(e,va,t),n(e,$l,t),n(e,xa,t),n(e,fl,t),n(e,Ta,t),r(rl,e,t),n(e,_a,t),n(e,ul,t),n(e,Ma,t),r(gl,e,t),n(e,wa,t),n(e,dl,t),n(e,ya,t),r(ol,e,t),n(e,ka,t),n(e,hl,t),n(e,Ua,t),n(e,cl,t),n(e,Va,t),r(bl,e,t),n(e,Za,t),n(e,Cl,t),n(e,Ha,t),n(e,jl,t),n(e,Pa,t),r(vl,e,t),n(e,La,t),n(e,xl,t),n(e,qa,t),r(Tl,e,t),n(e,za,t),n(e,_l,t),n(e,Ra,t),r(Ml,e,t),n(e,Ja,t),r(wl,e,t),n(e,Ia,t),n(e,yl,t),n(e,Wa,t),n(e,Ul,t),Fa=!0},p(e,[t]){const Ci={};t&2&&(Ci.$$scope={dirty:t,ctx:e}),C.$set(Ci)},i(e){Fa||(u(v.$$.fragment,e),u(T.$$.fragment,e),u(_.$$.fragment,e),u(w.$$.fragment,e),u(U.$$.fragment,e),u(Z.$$.fragment,e),u(L.$$.fragment,e),u(z.$$.fragment,e),u(J.$$.fragment,e),u(I.$$.fragment,e),u(F.$$.fragment,e),u(X.$$.fragment,e),u(G.$$.fragment,e),u(E.$$.fragment,e),u(S.$$.fragment,e),u(Q.$$.fragment,e),u(A.$$.fragment,e),u(O.$$.fragment,e),u(te.$$.fragment,e),u(le.$$.fragment,e),u(pe.$$.fragment,e),u(me.$$.fragment,e),u($e.$$.fragment,e),u(re.$$.fragment,e),u(ue.$$.fragment,e),u(de.$$.fragment,e),u(oe.$$.fragment,e),u(he.$$.fragment,e),u(be.$$.fragment,e),u(xe.$$.fragment,e),u(Me.$$.fragment,e),u(we.$$.fragment,e),u(Ue.$$.fragment,e),u(Ve.$$.fragment,e),u(He.$$.fragment,e),u(Le.$$.fragment,e),u(ze.$$.fragment,e),u(Je.$$.fragment,e),u(We.$$.fragment,e),u(Ne.$$.fragment,e),u(Ge.$$.fragment,e),u(Ee.$$.fragment,e),u(Qe.$$.fragment,e),u(Ae.$$.fragment,e),u(Oe.$$.fragment,e),u(et.$$.fragment,e),u(C.$$.fragment,e),u(at.$$.fragment,e),u(it.$$.fragment,e),u(mt.$$.fragment,e),u(ft.$$.fragment,e),u(ut.$$.fragment,e),u(gt.$$.fragment,e),u(ot.$$.fragment,e),u(ct.$$.fragment,e),u(Ct.$$.fragment,e),u(jt.$$.fragment,e),u(Tt.$$.fragment,e),u(Mt.$$.fragment,e),u(yt.$$.fragment,e),u(Zt.$$.fragment,e),u(Pt.$$.fragment,e),u(zt.$$.fragment,e),u(Rt.$$.fragment,e),u(It.$$.fragment,e),u(Ft.$$.fragment,e),u(Nt.$$.fragment,e),u(Gt.$$.fragment,e),u(Et.$$.fragment,e),u(Qt.$$.fragment,e),u(At.$$.fragment,e),u(Ot.$$.fragment,e),u(tl.$$.fragment,e),u(nl.$$.fragment,e),u(sl.$$.fragment,e),u(pl.$$.fragment,e),u(ml.$$.fragment,e),u(rl.$$.fragment,e),u(gl.$$.fragment,e),u(ol.$$.fragment,e),u(bl.$$.fragment,e),u(vl.$$.fragment,e),u(Tl.$$.fragment,e),u(Ml.$$.fragment,e),u(wl.$$.fragment,e),Fa=!0)},o(e){g(v.$$.fragment,e),g(T.$$.fragment,e),g(_.$$.fragment,e),g(w.$$.fragment,e),g(U.$$.fragment,e),g(Z.$$.fragment,e),g(L.$$.fragment,e),g(z.$$.fragment,e),g(J.$$.fragment,e),g(I.$$.fragment,e),g(F.$$.fragment,e),g(X.$$.fragment,e),g(G.$$.fragment,e),g(E.$$.fragment,e),g(S.$$.fragment,e),g(Q.$$.fragment,e),g(A.$$.fragment,e),g(O.$$.fragment,e),g(te.$$.fragment,e),g(le.$$.fragment,e),g(pe.$$.fragment,e),g(me.$$.fragment,e),g($e.$$.fragment,e),g(re.$$.fragment,e),g(ue.$$.fragment,e),g(de.$$.fragment,e),g(oe.$$.fragment,e),g(he.$$.fragment,e),g(be.$$.fragment,e),g(xe.$$.fragment,e),g(Me.$$.fragment,e),g(we.$$.fragment,e),g(Ue.$$.fragment,e),g(Ve.$$.fragment,e),g(He.$$.fragment,e),g(Le.$$.fragment,e),g(ze.$$.fragment,e),g(Je.$$.fragment,e),g(We.$$.fragment,e),g(Ne.$$.fragment,e),g(Ge.$$.fragment,e),g(Ee.$$.fragment,e),g(Qe.$$.fragment,e),g(Ae.$$.fragment,e),g(Oe.$$.fragment,e),g(et.$$.fragment,e),g(C.$$.fragment,e),g(at.$$.fragment,e),g(it.$$.fragment,e),g(mt.$$.fragment,e),g(ft.$$.fragment,e),g(ut.$$.fragment,e),g(gt.$$.fragment,e),g(ot.$$.fragment,e),g(ct.$$.fragment,e),g(Ct.$$.fragment,e),g(jt.$$.fragment,e),g(Tt.$$.fragment,e),g(Mt.$$.fragment,e),g(yt.$$.fragment,e),g(Zt.$$.fragment,e),g(Pt.$$.fragment,e),g(zt.$$.fragment,e),g(Rt.$$.fragment,e),g(It.$$.fragment,e),g(Ft.$$.fragment,e),g(Nt.$$.fragment,e),g(Gt.$$.fragment,e),g(Et.$$.fragment,e),g(Qt.$$.fragment,e),g(At.$$.fragment,e),g(Ot.$$.fragment,e),g(tl.$$.fragment,e),g(nl.$$.fragment,e),g(sl.$$.fragment,e),g(pl.$$.fragment,e),g(ml.$$.fragment,e),g(rl.$$.fragment,e),g(gl.$$.fragment,e),g(ol.$$.fragment,e),g(bl.$$.fragment,e),g(vl.$$.fragment,e),g(Tl.$$.fragment,e),g(Ml.$$.fragment,e),g(wl.$$.fragment,e),Fa=!1},d(e){e&&(l(j),l(b),l(kl),l(Hl),l(x),l(Pl),l(Ll),l(ql),l(M),l(zl),l(Rl),l(y),l(Jl),l(k),l(Il),l(Wl),l(V),l(Fl),l(Nl),l(H),l(Xl),l(P),l(Gl),l(Bl),l(q),l(El),l(Sl),l(R),l(Yl),l(Ql),l(Dl),l(W),l(Al),l(Kl),l(N),l(Ol),l(en),l(tn),l(B),l(ln),l(nn),l(sn),l(Y),l(an),l(pn),l(D),l(mn),l($n),l(K),l(fn),l(rn),l(ee),l(un),l(gn),l(dn),l(ne),l(on),l(se),l(hn),l(ae),l(cn),l(bn),l(ie),l(Cn),l(jn),l(vn),l(fe),l(xn),l(Tn),l(_n),l(ge),l(Mn),l(wn),l(yn),l(kn),l(ce),l(Un),l(Vn),l(Ce),l(Zn),l(je),l(Hn),l(ve),l(Pn),l(Ln),l(Te),l(qn),l(_e),l(zn),l(Rn),l(Jn),l(ye),l(In),l(ke),l(Wn),l(Fn),l(Nn),l(Ze),l(Xn),l(Gn),l(Pe),l(Bn),l(En),l(qe),l(Sn),l(Yn),l(Re),l(Qn),l(Dn),l(Ie),l(An),l(Kn),l(Fe),l(On),l(es),l(Xe),l(ts),l(ls),l(Be),l(ns),l(ss),l(Se),l(as),l(Ye),l(ps),l(is),l(De),l(ms),l($s),l(Ke),l(fs),l(rs),l(us),l(tt),l(gs),l(lt),l(ds),l(nt),l(os),l(hs),l(st),l(cs),l(bs),l(pt),l(Cs),l(js),l(vs),l($t),l(xs),l(Ts),l(rt),l(_s),l(Ms),l(ws),l(dt),l(ys),l(ks),l(ht),l(Us),l(Vs),l(bt),l(Zs),l(Hs),l(Ps),l(vt),l(Ls),l(xt),l(qs),l(zs),l(_t),l(Rs),l(Js),l(wt),l(Is),l(Ws),l(kt),l(Fs),l(Ut),l(Ns),l(Vt),l(Xs),l(Gs),l(Ht),l(Bs),l(Es),l(Lt),l(Ss),l(qt),l(Ys),l(Qs),l(Ds),l(Jt),l(As),l(Ks),l(Wt),l(Os),l(ea),l(ta),l(Xt),l(la),l(na),l(Bt),l(sa),l(aa),l(St),l(pa),l(Yt),l(ia),l(ma),l(Dt),l($a),l(fa),l(Kt),l(ra),l(ua),l(el),l(ga),l(da),l(ll),l(oa),l(ha),l(ca),l(al),l(ba),l(Ca),l(il),l(ja),l(va),l($l),l(xa),l(fl),l(Ta),l(_a),l(ul),l(Ma),l(wa),l(dl),l(ya),l(ka),l(hl),l(Ua),l(cl),l(Va),l(Za),l(Cl),l(Ha),l(jl),l(Pa),l(La),l(xl),l(qa),l(za),l(_l),l(Ra),l(Ja),l(Ia),l(yl),l(Wa),l(Ul)),l(h),d(v,e),d(T,e),d(_,e),d(w,e),d(U,e),d(Z,e),d(L,e),d(z,e),d(J,e),d(I,e),d(F,e),d(X,e),d(G,e),d(E,e),d(S,e),d(Q,e),d(A,e),d(O,e),d(te,e),d(le,e),d(pe,e),d(me,e),d($e,e),d(re,e),d(ue,e),d(de,e),d(oe,e),d(he,e),d(be,e),d(xe,e),d(Me,e),d(we,e),d(Ue,e),d(Ve,e),d(He,e),d(Le,e),d(ze,e),d(Je,e),d(We,e),d(Ne,e),d(Ge,e),d(Ee,e),d(Qe,e),d(Ae,e),d(Oe,e),d(et,e),d(C,e),d(at,e),d(it,e),d(mt,e),d(ft,e),d(ut,e),d(gt,e),d(ot,e),d(ct,e),d(Ct,e),d(jt,e),d(Tt,e),d(Mt,e),d(yt,e),d(Zt,e),d(Pt,e),d(zt,e),d(Rt,e),d(It,e),d(Ft,e),d(Nt,e),d(Gt,e),d(Et,e),d(Qt,e),d(At,e),d(Ot,e),d(tl,e),d(nl,e),d(sl,e),d(pl,e),d(ml,e),d(rl,e),d(gl,e),d(ol,e),d(bl,e),d(vl,e),d(Tl,e),d(Ml,e),d(wl,e)}}}const Hi='{"title":"Glossary","local":"glossary","sections":[{"title":"A","local":"a","sections":[{"title":"attention mask","local":"attention-mask","sections":[],"depth":3},{"title":"autoencoding models","local":"autoencoding-models","sections":[],"depth":3},{"title":"autoregressive models","local":"autoregressive-models","sections":[],"depth":3}],"depth":2},{"title":"B","local":"b","sections":[{"title":"backbone","local":"backbone","sections":[],"depth":3}],"depth":2},{"title":"C","local":"c","sections":[{"title":"causal language modeling","local":"causal-language-modeling","sections":[],"depth":3},{"title":"channel","local":"channel","sections":[],"depth":3},{"title":"connectionist temporal classification (CTC)","local":"connectionist-temporal-classification-ctc","sections":[],"depth":3},{"title":"convolution","local":"convolution","sections":[],"depth":3}],"depth":2},{"title":"D","local":"d","sections":[{"title":"decoder input IDs","local":"decoder-input-ids","sections":[],"depth":3},{"title":"decoder models","local":"decoder-models","sections":[],"depth":3},{"title":"deep learning (DL)","local":"deep-learning-dl","sections":[],"depth":3}],"depth":2},{"title":"E","local":"e","sections":[{"title":"encoder models","local":"encoder-models","sections":[],"depth":3}],"depth":2},{"title":"F","local":"f","sections":[{"title":"feature extraction","local":"feature-extraction","sections":[],"depth":3},{"title":"feed forward chunking","local":"feed-forward-chunking","sections":[],"depth":3},{"title":"finetuned models","local":"finetuned-models","sections":[],"depth":3}],"depth":2},{"title":"H","local":"h","sections":[{"title":"head","local":"head","sections":[],"depth":3}],"depth":2},{"title":"I","local":"i","sections":[{"title":"image patch","local":"image-patch","sections":[],"depth":3},{"title":"inference","local":"inference","sections":[],"depth":3},{"title":"input IDs","local":"input-ids","sections":[],"depth":3}],"depth":2},{"title":"L","local":"l","sections":[{"title":"Labels","local":"labels","sections":[],"depth":3},{"title":"large language models (LLM)","local":"large-language-models-llm","sections":[],"depth":3}],"depth":2},{"title":"M","local":"m","sections":[{"title":"masked language modeling (MLM)","local":"masked-language-modeling-mlm","sections":[],"depth":3},{"title":"multimodal","local":"multimodal","sections":[],"depth":3}],"depth":2},{"title":"N","local":"n","sections":[{"title":"Natural language generation (NLG)","local":"natural-language-generation-nlg","sections":[],"depth":3},{"title":"Natural language processing (NLP)","local":"natural-language-processing-nlp","sections":[],"depth":3},{"title":"Natural language understanding (NLU)","local":"natural-language-understanding-nlu","sections":[],"depth":3}],"depth":2},{"title":"P","local":"p","sections":[{"title":"pipeline","local":"pipeline","sections":[],"depth":3},{"title":"pixel values","local":"pixel-values","sections":[],"depth":3},{"title":"pooling","local":"pooling","sections":[],"depth":3},{"title":"position IDs","local":"position-ids","sections":[],"depth":3},{"title":"preprocessing","local":"preprocessing","sections":[],"depth":3},{"title":"pretrained model","local":"pretrained-model","sections":[],"depth":3}],"depth":2},{"title":"R","local":"r","sections":[{"title":"recurrent neural network (RNN)","local":"recurrent-neural-network-rnn","sections":[],"depth":3},{"title":"representation learning","local":"representation-learning","sections":[],"depth":3}],"depth":2},{"title":"S","local":"s","sections":[{"title":"sampling rate","local":"sampling-rate","sections":[],"depth":3},{"title":"self-attention","local":"self-attention","sections":[],"depth":3},{"title":"self-supervised learning","local":"self-supervised-learning","sections":[],"depth":3},{"title":"semi-supervised learning","local":"semi-supervised-learning","sections":[],"depth":3},{"title":"sequence-to-sequence (seq2seq)","local":"sequence-to-sequence-seq2seq","sections":[],"depth":3},{"title":"stride","local":"stride","sections":[],"depth":3},{"title":"supervised learning","local":"supervised-learning","sections":[],"depth":3}],"depth":2},{"title":"T","local":"t","sections":[{"title":"token","local":"token","sections":[],"depth":3},{"title":"token Type IDs","local":"token-type-ids","sections":[],"depth":3},{"title":"transfer learning","local":"transfer-learning","sections":[],"depth":3},{"title":"transformer","local":"transformer","sections":[],"depth":3}],"depth":2},{"title":"U","local":"u","sections":[{"title":"unsupervised learning","local":"unsupervised-learning","sections":[],"depth":3}],"depth":2}],"depth":1}';function Pi(Zl){return Ti(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Wi extends Mi{constructor(h){super(),wi(this,h,Pi,Zi,xi,{})}}export{Wi as component};
