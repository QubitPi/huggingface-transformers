import{s as $n,o as In,n as Zn}from"../chunks/scheduler.9bc65507.js";import{S as xn,i as kn,g as p,s as a,r as M,A as Vn,h as m,f as l,c as n,j as Cn,u as i,x as c,k as Nt,y as Gn,a as e,v as j,d as h,t as y,w as r}from"../chunks/index.707bf1b6.js";import{T as _n}from"../chunks/Tip.c2ecdbf4.js";import{C as o}from"../chunks/CodeBlock.54a9f38d.js";import{D as Bn}from"../chunks/DocNotebookDropdown.41f65cb5.js";import{H as w}from"../chunks/Heading.342b1fa6.js";function Wn(Ft){let T,I="このガイドに従うには、GPU が必要です。ノートブックで作業している場合は、次の行を実行して GPU が利用可能かどうかを確認します。",g,u,U;return u=new o({props:{code:"IW52aWRpYS1zbWk=",highlighted:"!nvidia-smi",wrap:!1}}),{c(){T=p("p"),T.textContent=I,g=a(),M(u.$$.fragment)},l(J){T=m(J,"P",{"data-svelte-h":!0}),c(T)!=="svelte-7uq5e7"&&(T.textContent=I),g=n(J),i(u.$$.fragment,J)},m(J,d){e(J,T,d),e(J,g,d),j(u,J,d),U=!0},p:Zn,i(J){U||(h(u.$$.fragment,J),U=!0)},o(J){y(u.$$.fragment,J),U=!1},d(J){J&&(l(T),l(g)),r(u,J)}}}function vn(Ft){let T,I,g,u,U,J,d,Ht,Z,Ma=`テキスト読み上げ (TTS) は、テキストから自然な音声を作成するタスクです。音声は複数の形式で生成できます。
言語と複数の話者向け。現在、いくつかのテキスト読み上げモデルが 🤗 Transformers で利用可能です。
<a href="../model_doc/bark">Bark</a>、<a href="../model_doc/mms">MMS</a>、<a href="../model_doc/vits">VITS</a>、および <a href="../model_doc/speecht5">SpeechT5</a>。`,At,x,ia=`<code>text-to-audio</code>パイプライン (またはその別名 - <code>text-to-speech</code>) を使用して、音声を簡単に生成できます。 Bark などの一部のモデルは、
笑い、ため息、泣きなどの非言語コミュニケーションを生成したり、音楽を追加したりするように条件付けすることもできます。
Bark で<code>text-to-speech</code>パイプラインを使用する方法の例を次に示します。`,qt,k,Et,V,ja="ノートブックで結果の音声を聞くために使用できるコード スニペットを次に示します。",St,G,Pt,_,ha=`Bark およびその他の事前トレーニングされた TTS モデルができることの詳細な例については、次のドキュメントを参照してください。
<a href="https://huggingface.co/learn/audio-course/chapter6/pre-trained_models" rel="nofollow">音声コース</a>。`,Lt,B,ya=`TTS モデルを微調整する場合、現在微調整できるのは SpeechT5 のみです。 SpeechT5 は、次の組み合わせで事前トレーニングされています。
音声からテキストへのデータとテキストから音声へのデータ。両方のテキストに共有される隠された表現の統一された空間を学習できるようにします。
そしてスピーチ。これは、同じ事前トレーニング済みモデルをさまざまなタスクに合わせて微調整できることを意味します。さらに、SpeechT5
X ベクトル スピーカーの埋め込みを通じて複数のスピーカーをサポートします。`,Dt,W,ra="このガイドの残りの部分では、次の方法を説明します。",Kt,v,oa='<li><a href="https://huggingface.co/datasets/facebook/voxpopuli" rel="nofollow">VoxPopuli</a> のオランダ語 (<code>nl</code>) 言語サブセット上の英語音声で元々トレーニングされた <a href="../model_doc/speecht5">SpeechT5</a> を微調整します。 データセット。</li> <li>パイプラインを使用するか直接使用するかの 2 つの方法のいずれかで、洗練されたモデルを推論に使用します。</li>',Ot,R,Ja="始める前に、必要なライブラリがすべてインストールされていることを確認してください。",sl,X,tl,Y,Ta="SpeechT5 のすべての機能がまだ正式リリースにマージされていないため、ソースから 🤗Transformers をインストールします。",ll,z,el,f,al,Q,ua="Hugging Face アカウントにログインして、モデルをアップロードしてコミュニティと共有することをお勧めします。プロンプトが表示されたら、トークンを入力してログインします。",nl,N,pl,F,ml,H,Ua=`<a href="https://huggingface.co/datasets/facebook/voxpopuli" rel="nofollow">VoxPopuli</a> は、以下で構成される大規模な多言語音声コーパスです。
データは 2009 年から 2020 年の欧州議会のイベント記録をソースとしています。 15 件分のラベル付き音声文字起こしデータが含まれています。
ヨーロッパの言語。このガイドではオランダ語のサブセットを使用していますが、自由に別のサブセットを選択してください。`,cl,A,wa=`VoxPopuli またはその他の自動音声認識 (ASR) データセットは最適ではない可能性があることに注意してください。
TTS モデルをトレーニングするためのオプション。過剰なバックグラウンドノイズなど、ASR にとって有益となる機能は次のとおりです。
通常、TTS では望ましくありません。ただし、最高品質、多言語、マルチスピーカーの TTS データセットを見つけるのは非常に困難な場合があります。
挑戦的。`,Ml,q,da="データをロードしましょう:",il,E,jl,S,ga=`微調整には 20968 個の例で十分です。 SpeechT5 はオーディオ データのサンプリング レートが 16 kHz であることを想定しているため、
データセット内の例がこの要件を満たしていることを確認してください。`,hl,P,yl,L,rl,D,fa="使用するモデル チェックポイントを定義し、適切なプロセッサをロードすることから始めましょう。",ol,K,Jl,O,Tl,ss,ba="まずはテキストデータをクリーンアップすることから始めます。テキストを処理するには、プロセッサのトークナイザー部分が必要です。",ul,ts,Ul,ls,Ca=`データセットの例には、<code>raw_text</code>機能と <code>normalized_text</code>機能が含まれています。テキスト入力としてどの機能を使用するかを決めるときは、
SpeechT5 トークナイザーには数値のトークンがないことを考慮してください。 <code>normalized_text</code>には数字が書かれています
テキストとして出力します。したがって、これはより適切であり、入力テキストとして <code>normalized_text</code> を使用することをお勧めします。`,wl,es,$a=`SpeechT5 は英語でトレーニングされているため、オランダ語のデータセット内の特定の文字を認識しない可能性があります。もし
残っているように、これらの文字は <code>&lt;unk&gt;</code>トークンに変換されます。ただし、オランダ語では、<code>à</code>などの特定の文字は
音節を強調することに慣れています。テキストの意味を保持するために、この文字を通常の<code>a</code>に置き換えることができます。`,dl,as,Ia=`サポートされていないトークンを識別するには、<code>SpeechT5Tokenizer</code>を使用してデータセット内のすべての一意の文字を抽出します。
文字をトークンとして扱います。これを行うには、以下を連結する <code>extract_all_chars</code> マッピング関数を作成します。
すべての例からの転写を 1 つの文字列にまとめ、それを文字セットに変換します。
すべての文字起こしが一度に利用できるように、<code>dataset.map()</code>で<code>b​​atched=True</code>と<code>batch_size=-1</code>を必ず設定してください。
マッピング機能。`,gl,ns,fl,ps,Za=`これで、2 つの文字セットができました。1 つはデータセットの語彙を持ち、もう 1 つはトークナイザーの語彙を持ちます。
データセット内でサポートされていない文字を特定するには、これら 2 つのセットの差分を取ることができます。結果として
set には、データセットにはあるがトークナイザーには含まれていない文字が含まれます。`,bl,ms,Cl,cs,xa=`前の手順で特定されたサポートされていない文字を処理するには、これらの文字を
有効なトークン。スペースはトークナイザーですでに <code>▁</code> に置き換えられているため、個別に処理する必要がないことに注意してください。`,$l,Ms,Il,is,ka="テキスト内の特殊文字を扱ったので、今度は音声データに焦点を移します。",Zl,js,xl,hs,Va=`VoxPopuli データセットには複数の話者の音声が含まれていますが、データセットには何人の話者が含まれているのでしょうか?に
これを決定すると、一意の話者の数と、各話者がデータセットに寄与する例の数を数えることができます。
データセットには合計 20,968 個の例が含まれており、この情報により、分布をより深く理解できるようになります。
講演者とデータ内の例。`,kl,ys,Vl,rs,Ga="ヒストグラムをプロットすると、各話者にどれだけのデータがあるかを把握できます。",Gl,os,_l,b,_a='<img src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/transformers/tasks/tts_speakers_histogram.png" alt="Speakers histogram"/>',Bl,Js,Ba=`ヒストグラムから、データセット内の話者の約 3 分の 1 の例が 100 未満であることがわかります。
約 10 人の講演者が 500 以上の例を持っています。トレーニング効率を向上させ、データセットのバランスをとるために、次のことを制限できます。
100 ～ 400 個の例を含むデータを講演者に提供します。`,Wl,Ts,vl,us,Wa="残りのスピーカーの数を確認してみましょう。",Rl,Us,Xl,ws,va="残りの例がいくつあるか見てみましょう。",Yl,ds,zl,gs,Ra="約 40 人のユニークな講演者からの 10,000 弱の例が残りますが、これで十分です。",Ql,fs,Xa=`例が少ないスピーカーの中には、例が長い場合、実際にはより多くの音声が利用できる場合があることに注意してください。しかし、
各話者の音声の合計量を決定するには、データセット全体をスキャンする必要があります。
各オーディオ ファイルのロードとデコードを伴う時間のかかるプロセス。そのため、ここではこのステップをスキップすることにしました。`,Nl,bs,Fl,Cs,Ya=`TTS モデルが複数のスピーカーを区別できるようにするには、サンプルごとにスピーカーの埋め込みを作成する必要があります。
スピーカーの埋め込みは、特定のスピーカーの音声特性をキャプチャするモデルへの追加入力です。
これらのスピーカー埋め込みを生成するには、事前トレーニングされた <a href="https://huggingface.co/speechbrain/spkrec-xvect-voxceleb" rel="nofollow">spkrec-xvect-voxceleb</a> を使用します。
SpeechBrain のモデル。`,Hl,$s,za=`入力オーディオ波形を受け取り、512 要素のベクトルを出力する関数 <code>create_speaker_embedding()</code> を作成します。
対応するスピーカー埋め込みが含まれます。`,Al,Is,ql,Zs,Qa=`<code>speechbrain/spkrec-xvect-voxceleb</code>モデルは、VoxCeleb からの英語音声でトレーニングされたことに注意することが重要です。
データセットですが、このガイドのトレーニング例はオランダ語です。このモデルは今後も生成されると信じていますが、
オランダ語のデータセットに適切な話者埋め込みを行っても、この仮定はすべての場合に当てはまらない可能性があります。`,El,xs,Na=`最適な結果を得るには、最初にターゲット音声で X ベクトル モデルをトレーニングすることをお勧めします。これにより、モデルが確実に
オランダ語に存在する独特の音声特徴をよりよく捉えることができます。`,Sl,ks,Pl,Vs,Fa=`最後に、モデルが期待する形式にデータを処理しましょう。を取り込む <code>prepare_dataset</code> 関数を作成します。
これは 1 つの例であり、<code>SpeechT5Processor</code> オブジェクトを使用して入力テキストをトークン化し、ターゲット オーディオをログメル スペクトログラムにロードします。
また、追加の入力としてスピーカーの埋め込みも追加する必要があります。`,Ll,Gs,Dl,_s,Ha="単一の例を見て、処理が正しいことを確認します。",Kl,Bs,Ol,Ws,Aa="スピーカーのエンベディングは 512 要素のベクトルである必要があります。",se,vs,te,Rs,qa="ラベルは、80 メル ビンを含むログメル スペクトログラムである必要があります。",le,Xs,ee,C,Ea='<img src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/transformers/tasks/tts_logmelspectrogram_1.png" alt="Log-mel spectrogram with 80 mel bins"/>',ae,Ys,Sa=`補足: このスペクトログラムがわかりにくいと感じる場合は、低周波を配置する規則に慣れていることが原因である可能性があります。
プロットの下部に高周波、上部に高周波が表示されます。ただし、matplotlib ライブラリを使用してスペクトログラムを画像としてプロットする場合、
Y 軸が反転され、スペクトログラムが上下逆に表示されます。`,ne,zs,Pa="次に、処理関数をデータセット全体に適用します。これには 5 ～ 10 分かかります。",pe,Qs,me,Ns,La=`データセット内の一部の例が、モデルが処理できる最大入力長 (600 トークン) を超えていることを示す警告が表示されます。
それらの例をデータセットから削除します。ここではさらに進んで、より大きなバッチ サイズを可能にするために、200 トークンを超えるものはすべて削除します。`,ce,Fs,Me,Hs,Da="次に、基本的なトレーニング/テスト分割を作成します。",ie,As,je,qs,he,Es,Ka=`複数の例を 1 つのバッチに結合するには、カスタム データ照合器を定義する必要があります。このコレーターは、短いシーケンスをパディングで埋め込みます。
トークンを使用して、すべての例が同じ長さになるようにします。スペクトログラム ラベルの場合、埋め込まれた部分は特別な値 <code>-100</code> に置き換えられます。この特別な価値は
スペクトログラム損失を計算するときに、スペクトログラムのその部分を無視するようにモデルに指示します。`,ye,Ss,re,Ps,Oa=`SpeechT5 では、モデルのデコーダ部分への入力が 2 分の 1 に削減されます。つまり、すべてのデータが破棄されます。
ターゲット シーケンスからの他のタイムステップ。次に、デコーダは 2 倍の長さのシーケンスを予測します。オリジナル以来
ターゲット シーケンスの長さが奇数である可能性がある場合、データ照合機能はバッチの最大長を切り捨てて、
2の倍数。`,oe,Ls,Je,Ds,Te,Ks,sn="プロセッサのロードに使用したのと同じチェックポイントから事前トレーニングされたモデルをロードします。",ue,Os,Ue,st,tn="<code>use_cache=True</code>オプションは、勾配チェックポイントと互換性がありません。トレーニングのために無効にします。",we,tt,de,lt,ln=`トレーニング引数を定義します。ここでは、トレーニング プロセス中に評価メトリクスを計算していません。代わりに、
損失だけを見てください。`,ge,et,fe,at,en="<code>Trainer</code>オブジェクトをインスタンス化し、モデル、データセット、データ照合器をそれに渡します。",be,nt,Ce,pt,an=`これで、トレーニングを開始する準備が整いました。トレーニングには数時間かかります。 GPU に応じて、
トレーニングを開始するときに、CUDA の「メモリ不足」エラーが発生する可能性があります。この場合、減らすことができます
<code>per_device_train_batch_size</code>を 2 倍に増分し、<code>gradient_accumulation_steps</code>を 2 倍に増やして補正します。`,$e,mt,Ie,ct,nn="パイプラインでチェックポイントを使用できるようにするには、必ずプロセッサをチェックポイントとともに保存してください。",Ze,Mt,xe,it,pn="最終モデルを 🤗 ハブにプッシュします。",ke,jt,Ve,ht,Ge,yt,_e,rt,mn=`モデルを微調整したので、それを推論に使用できるようになりました。
まず、対応するパイプラインでそれを使用する方法を見てみましょう。 <code>&quot;text-to-speech&quot;</code> パイプラインを作成しましょう
チェックポイント:`,Be,ot,We,Jt,cn="ナレーションを希望するオランダ語のテキストを選択してください。例:",ve,Tt,Re,ut,Mn="パイプラインで SpeechT5 を使用するには、スピーカーの埋め込みが必要です。テスト データセットの例から取得してみましょう。",Xe,Ut,Ye,wt,jn="これで、テキストとスピーカーの埋め込みをパイプラインに渡すことができ、残りはパイプラインが処理します。",ze,dt,Qe,gt,hn="その後、結果を聞くことができます。",Ne,ft,Fe,bt,He,Ct,yn="パイプラインを使用しなくても同じ推論結果を得ることができますが、より多くの手順が必要になります。",Ae,$t,rn="🤗 ハブからモデルをロードします。",qe,It,Ee,Zt,on="テスト データセットから例を選択して、スピーカーの埋め込みを取得します。",Se,xt,Pe,kt,Jn="入力テキストを定義し、トークン化します。",Le,Vt,De,Gt,Tn="モデルを使用してスペクトログラムを作成します。",Ke,_t,Oe,Bt,un="次のことを行う場合は、スペクトログラムを視覚化します。",sa,Wt,ta,$,Un='<img src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/transformers/tasks/tts_logmelspectrogram_2.png" alt="Generated log-mel spectrogram"/>',la,vt,wn="最後に、ボコーダーを使用してスペクトログラムをサウンドに変換します。",ea,Rt,aa,Xt,dn=`私たちの経験では、このモデルから満足のいく結果を得るのは難しい場合があります。スピーカーの品質
埋め込みは重要な要素であるようです。 SpeechT5 は英語の x ベクトルで事前トレーニングされているため、最高のパフォーマンスを発揮します
英語スピーカーの埋め込みを使用する場合。合成音声の音質が悪い場合は、別のスピーカー埋め込みを使用してみてください。`,na,Yt,gn=`トレーニング期間を長くすると、結果の質も向上する可能性があります。それでも、そのスピーチは明らかに英語ではなくオランダ語です。
話者の音声特性をキャプチャします (例の元の音声と比較)。
もう 1 つ実験すべきことは、モデルの構成です。たとえば、<code>config.reduction_factor = 1</code>を使用してみてください。
これにより結果が改善されるかどうかを確認してください。`,pa,zt,fn=`最後に、倫理的配慮を考慮することが不可欠です。 TTS テクノロジーには数多くの有用な用途がありますが、
また、知らないうちに誰かの声を偽装するなど、悪意のある目的に使用される可能性もあります。お願いします
TTS は賢明かつ責任を持って使用してください。`,ma,Qt,ca;return U=new w({props:{title:"Text to speech",local:"text-to-speech",headingTag:"h1"}}),d=new Bn({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Mixed",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/ja/text-to-speech.ipynb"},{label:"PyTorch",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/ja/pytorch/text-to-speech.ipynb"},{label:"TensorFlow",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/ja/tensorflow/text-to-speech.ipynb"},{label:"Mixed",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/ja/text-to-speech.ipynb"},{label:"PyTorch",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/ja/pytorch/text-to-speech.ipynb"},{label:"TensorFlow",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/ja/tensorflow/text-to-speech.ipynb"}]}}),k=new o({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBcGlwZSUyMCUzRCUyMHBpcGVsaW5lKCUyMnRleHQtdG8tc3BlZWNoJTIyJTJDJTIwbW9kZWwlM0QlMjJzdW5vJTJGYmFyay1zbWFsbCUyMiklMEF0ZXh0JTIwJTNEJTIwJTIyJTVCY2xlYXJzJTIwdGhyb2F0JTVEJTIwVGhpcyUyMGlzJTIwYSUyMHRlc3QlMjAuLi4lMjBhbmQlMjBJJTIwanVzdCUyMHRvb2slMjBhJTIwbG9uZyUyMHBhdXNlLiUyMiUwQW91dHB1dCUyMCUzRCUyMHBpcGUodGV4dCk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>pipe = pipeline(<span class="hljs-string">&quot;text-to-speech&quot;</span>, model=<span class="hljs-string">&quot;suno/bark-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;[clears throat] This is a test ... and I just took a long pause.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>output = pipe(text)`,wrap:!1}}),G=new o({props:{code:"ZnJvbSUyMElQeXRob24uZGlzcGxheSUyMGltcG9ydCUyMEF1ZGlvJTBBQXVkaW8ob3V0cHV0JTVCJTIyYXVkaW8lMjIlNUQlMkMlMjByYXRlJTNEb3V0cHV0JTVCJTIyc2FtcGxpbmdfcmF0ZSUyMiU1RCk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> IPython.display <span class="hljs-keyword">import</span> Audio
<span class="hljs-meta">&gt;&gt;&gt; </span>Audio(output[<span class="hljs-string">&quot;audio&quot;</span>], rate=output[<span class="hljs-string">&quot;sampling_rate&quot;</span>])`,wrap:!1}}),X=new o({props:{code:"cGlwJTIwaW5zdGFsbCUyMGRhdGFzZXRzJTIwc291bmRmaWxlJTIwc3BlZWNoYnJhaW4lMjBhY2NlbGVyYXRl",highlighted:"pip install datasets soundfile speechbrain accelerate",wrap:!1}}),z=new o({props:{code:"cGlwJTIwaW5zdGFsbCUyMGdpdCUyQmh0dHBzJTNBJTJGJTJGZ2l0aHViLmNvbSUyRmh1Z2dpbmdmYWNlJTJGdHJhbnNmb3JtZXJzLmdpdA==",highlighted:"pip install git+https://github.com/huggingface/transformers.git",wrap:!1}}),f=new _n({props:{$$slots:{default:[Wn]},$$scope:{ctx:Ft}}}),N=new o({props:{code:"ZnJvbSUyMGh1Z2dpbmdmYWNlX2h1YiUyMGltcG9ydCUyMG5vdGVib29rX2xvZ2luJTBBJTBBbm90ZWJvb2tfbG9naW4oKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login

<span class="hljs-meta">&gt;&gt;&gt; </span>notebook_login()`,wrap:!1}}),F=new w({props:{title:"Load the dataset",local:"load-the-dataset",headingTag:"h2"}}),E=new o({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTJDJTIwQXVkaW8lMEElMEFkYXRhc2V0JTIwJTNEJTIwbG9hZF9kYXRhc2V0KCUyMmZhY2Vib29rJTJGdm94cG9wdWxpJTIyJTJDJTIwJTIybmwlMjIlMkMlMjBzcGxpdCUzRCUyMnRyYWluJTIyKSUwQWxlbihkYXRhc2V0KQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;facebook/voxpopuli&quot;</span>, <span class="hljs-string">&quot;nl&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(dataset)
<span class="hljs-number">20968</span>`,wrap:!1}}),P=new o({props:{code:"ZGF0YXNldCUyMCUzRCUyMGRhdGFzZXQuY2FzdF9jb2x1bW4oJTIyYXVkaW8lMjIlMkMlMjBBdWRpbyhzYW1wbGluZ19yYXRlJTNEMTYwMDApKQ==",highlighted:'dataset = dataset.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))',wrap:!1}}),L=new w({props:{title:"Preprocess the data",local:"preprocess-the-data",headingTag:"h2"}}),K=new o({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFNwZWVjaFQ1UHJvY2Vzc29yJTBBJTBBY2hlY2twb2ludCUyMCUzRCUyMCUyMm1pY3Jvc29mdCUyRnNwZWVjaHQ1X3R0cyUyMiUwQXByb2Nlc3NvciUyMCUzRCUyMFNwZWVjaFQ1UHJvY2Vzc29yLmZyb21fcHJldHJhaW5lZChjaGVja3BvaW50KQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SpeechT5Processor

<span class="hljs-meta">&gt;&gt;&gt; </span>checkpoint = <span class="hljs-string">&quot;microsoft/speecht5_tts&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = SpeechT5Processor.from_pretrained(checkpoint)`,wrap:!1}}),O=new w({props:{title:"Text cleanup for SpeechT5 tokenization",local:"text-cleanup-for-speecht5-tokenization",headingTag:"h3"}}),ts=new o({props:{code:"dG9rZW5pemVyJTIwJTNEJTIwcHJvY2Vzc29yLnRva2VuaXplcg==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = processor.tokenizer',wrap:!1}}),ns=new o({props:{code:"ZGVmJTIwZXh0cmFjdF9hbGxfY2hhcnMoYmF0Y2gpJTNBJTBBJTIwJTIwJTIwJTIwYWxsX3RleHQlMjAlM0QlMjAlMjIlMjAlMjIuam9pbihiYXRjaCU1QiUyMm5vcm1hbGl6ZWRfdGV4dCUyMiU1RCklMEElMjAlMjAlMjAlMjB2b2NhYiUyMCUzRCUyMGxpc3Qoc2V0KGFsbF90ZXh0KSklMEElMjAlMjAlMjAlMjByZXR1cm4lMjAlN0IlMjJ2b2NhYiUyMiUzQSUyMCU1QnZvY2FiJTVEJTJDJTIwJTIyYWxsX3RleHQlMjIlM0ElMjAlNUJhbGxfdGV4dCU1RCU3RCUwQSUwQSUwQXZvY2FicyUyMCUzRCUyMGRhdGFzZXQubWFwKCUwQSUyMCUyMCUyMCUyMGV4dHJhY3RfYWxsX2NoYXJzJTJDJTBBJTIwJTIwJTIwJTIwYmF0Y2hlZCUzRFRydWUlMkMlMEElMjAlMjAlMjAlMjBiYXRjaF9zaXplJTNELTElMkMlMEElMjAlMjAlMjAlMjBrZWVwX2luX21lbW9yeSUzRFRydWUlMkMlMEElMjAlMjAlMjAlMjByZW1vdmVfY29sdW1ucyUzRGRhdGFzZXQuY29sdW1uX25hbWVzJTJDJTBBKSUwQSUwQWRhdGFzZXRfdm9jYWIlMjAlM0QlMjBzZXQodm9jYWJzJTVCJTIydm9jYWIlMjIlNUQlNUIwJTVEKSUwQXRva2VuaXplcl92b2NhYiUyMCUzRCUyMCU3QmslMjBmb3IlMjBrJTJDJTIwXyUyMGluJTIwdG9rZW5pemVyLmdldF92b2NhYigpLml0ZW1zKCklN0Q=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_all_chars</span>(<span class="hljs-params">batch</span>):
<span class="hljs-meta">... </span>    all_text = <span class="hljs-string">&quot; &quot;</span>.join(batch[<span class="hljs-string">&quot;normalized_text&quot;</span>])
<span class="hljs-meta">... </span>    vocab = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(all_text))
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;vocab&quot;</span>: [vocab], <span class="hljs-string">&quot;all_text&quot;</span>: [all_text]}


<span class="hljs-meta">&gt;&gt;&gt; </span>vocabs = dataset.<span class="hljs-built_in">map</span>(
<span class="hljs-meta">... </span>    extract_all_chars,
<span class="hljs-meta">... </span>    batched=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    batch_size=-<span class="hljs-number">1</span>,
<span class="hljs-meta">... </span>    keep_in_memory=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    remove_columns=dataset.column_names,
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_vocab = <span class="hljs-built_in">set</span>(vocabs[<span class="hljs-string">&quot;vocab&quot;</span>][<span class="hljs-number">0</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer_vocab = {k <span class="hljs-keyword">for</span> k, _ <span class="hljs-keyword">in</span> tokenizer.get_vocab().items()}`,wrap:!1}}),ms=new o({props:{code:"ZGF0YXNldF92b2NhYiUyMC0lMjB0b2tlbml6ZXJfdm9jYWI=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_vocab - tokenizer_vocab
{<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;à&#x27;</span>, <span class="hljs-string">&#x27;ç&#x27;</span>, <span class="hljs-string">&#x27;è&#x27;</span>, <span class="hljs-string">&#x27;ë&#x27;</span>, <span class="hljs-string">&#x27;í&#x27;</span>, <span class="hljs-string">&#x27;ï&#x27;</span>, <span class="hljs-string">&#x27;ö&#x27;</span>, <span class="hljs-string">&#x27;ü&#x27;</span>}`,wrap:!1}}),Ms=new o({props:{code:"cmVwbGFjZW1lbnRzJTIwJTNEJTIwJTVCJTBBJTIwJTIwJTIwJTIwKCUyMiVDMyVBMCUyMiUyQyUyMCUyMmElMjIpJTJDJTBBJTIwJTIwJTIwJTIwKCUyMiVDMyVBNyUyMiUyQyUyMCUyMmMlMjIpJTJDJTBBJTIwJTIwJTIwJTIwKCUyMiVDMyVBOCUyMiUyQyUyMCUyMmUlMjIpJTJDJTBBJTIwJTIwJTIwJTIwKCUyMiVDMyVBQiUyMiUyQyUyMCUyMmUlMjIpJTJDJTBBJTIwJTIwJTIwJTIwKCUyMiVDMyVBRCUyMiUyQyUyMCUyMmklMjIpJTJDJTBBJTIwJTIwJTIwJTIwKCUyMiVDMyVBRiUyMiUyQyUyMCUyMmklMjIpJTJDJTBBJTIwJTIwJTIwJTIwKCUyMiVDMyVCNiUyMiUyQyUyMCUyMm8lMjIpJTJDJTBBJTIwJTIwJTIwJTIwKCUyMiVDMyVCQyUyMiUyQyUyMCUyMnUlMjIpJTJDJTBBJTVEJTBBJTBBJTBBZGVmJTIwY2xlYW51cF90ZXh0KGlucHV0cyklM0ElMEElMjAlMjAlMjAlMjBmb3IlMjBzcmMlMkMlMjBkc3QlMjBpbiUyMHJlcGxhY2VtZW50cyUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGlucHV0cyU1QiUyMm5vcm1hbGl6ZWRfdGV4dCUyMiU1RCUyMCUzRCUyMGlucHV0cyU1QiUyMm5vcm1hbGl6ZWRfdGV4dCUyMiU1RC5yZXBsYWNlKHNyYyUyQyUyMGRzdCklMEElMjAlMjAlMjAlMjByZXR1cm4lMjBpbnB1dHMlMEElMEElMEFkYXRhc2V0JTIwJTNEJTIwZGF0YXNldC5tYXAoY2xlYW51cF90ZXh0KQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>replacements = [
<span class="hljs-meta">... </span>    (<span class="hljs-string">&quot;à&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>),
<span class="hljs-meta">... </span>    (<span class="hljs-string">&quot;ç&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>),
<span class="hljs-meta">... </span>    (<span class="hljs-string">&quot;è&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>),
<span class="hljs-meta">... </span>    (<span class="hljs-string">&quot;ë&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>),
<span class="hljs-meta">... </span>    (<span class="hljs-string">&quot;í&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>),
<span class="hljs-meta">... </span>    (<span class="hljs-string">&quot;ï&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>),
<span class="hljs-meta">... </span>    (<span class="hljs-string">&quot;ö&quot;</span>, <span class="hljs-string">&quot;o&quot;</span>),
<span class="hljs-meta">... </span>    (<span class="hljs-string">&quot;ü&quot;</span>, <span class="hljs-string">&quot;u&quot;</span>),
<span class="hljs-meta">... </span>]


<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">cleanup_text</span>(<span class="hljs-params">inputs</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> src, dst <span class="hljs-keyword">in</span> replacements:
<span class="hljs-meta">... </span>        inputs[<span class="hljs-string">&quot;normalized_text&quot;</span>] = inputs[<span class="hljs-string">&quot;normalized_text&quot;</span>].replace(src, dst)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> inputs


<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.<span class="hljs-built_in">map</span>(cleanup_text)`,wrap:!1}}),js=new w({props:{title:"Speakers",local:"speakers",headingTag:"h3"}}),ys=new o({props:{code:"ZnJvbSUyMGNvbGxlY3Rpb25zJTIwaW1wb3J0JTIwZGVmYXVsdGRpY3QlMEElMEFzcGVha2VyX2NvdW50cyUyMCUzRCUyMGRlZmF1bHRkaWN0KGludCklMEElMEFmb3IlMjBzcGVha2VyX2lkJTIwaW4lMjBkYXRhc2V0JTVCJTIyc3BlYWtlcl9pZCUyMiU1RCUzQSUwQSUyMCUyMCUyMCUyMHNwZWFrZXJfY291bnRzJTVCc3BlYWtlcl9pZCU1RCUyMCUyQiUzRCUyMDE=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict

<span class="hljs-meta">&gt;&gt;&gt; </span>speaker_counts = defaultdict(<span class="hljs-built_in">int</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> speaker_id <span class="hljs-keyword">in</span> dataset[<span class="hljs-string">&quot;speaker_id&quot;</span>]:
<span class="hljs-meta">... </span>    speaker_counts[speaker_id] += <span class="hljs-number">1</span>`,wrap:!1}}),os=new o({props:{code:"aW1wb3J0JTIwbWF0cGxvdGxpYi5weXBsb3QlMjBhcyUyMHBsdCUwQSUwQXBsdC5maWd1cmUoKSUwQXBsdC5oaXN0KHNwZWFrZXJfY291bnRzLnZhbHVlcygpJTJDJTIwYmlucyUzRDIwKSUwQXBsdC55bGFiZWwoJTIyU3BlYWtlcnMlMjIpJTBBcGx0LnhsYWJlbCglMjJFeGFtcGxlcyUyMiklMEFwbHQuc2hvdygp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt

<span class="hljs-meta">&gt;&gt;&gt; </span>plt.figure()
<span class="hljs-meta">&gt;&gt;&gt; </span>plt.hist(speaker_counts.values(), bins=<span class="hljs-number">20</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>plt.ylabel(<span class="hljs-string">&quot;Speakers&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>plt.xlabel(<span class="hljs-string">&quot;Examples&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>plt.show()`,wrap:!1}}),Ts=new o({props:{code:"ZGVmJTIwc2VsZWN0X3NwZWFrZXIoc3BlYWtlcl9pZCklM0ElMEElMjAlMjAlMjAlMjByZXR1cm4lMjAxMDAlMjAlM0MlM0QlMjBzcGVha2VyX2NvdW50cyU1QnNwZWFrZXJfaWQlNUQlMjAlM0MlM0QlMjA0MDAlMEElMEElMEFkYXRhc2V0JTIwJTNEJTIwZGF0YXNldC5maWx0ZXIoc2VsZWN0X3NwZWFrZXIlMkMlMjBpbnB1dF9jb2x1bW5zJTNEJTVCJTIyc3BlYWtlcl9pZCUyMiU1RCk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">select_speaker</span>(<span class="hljs-params">speaker_id</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> <span class="hljs-number">100</span> &lt;= speaker_counts[speaker_id] &lt;= <span class="hljs-number">400</span>


<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.<span class="hljs-built_in">filter</span>(select_speaker, input_columns=[<span class="hljs-string">&quot;speaker_id&quot;</span>])`,wrap:!1}}),Us=new o({props:{code:"bGVuKHNldChkYXRhc2V0JTVCJTIyc3BlYWtlcl9pZCUyMiU1RCkp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(dataset[<span class="hljs-string">&quot;speaker_id&quot;</span>]))
<span class="hljs-number">42</span>`,wrap:!1}}),ds=new o({props:{code:"bGVuKGRhdGFzZXQp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(dataset)
<span class="hljs-number">9973</span>`,wrap:!1}}),bs=new w({props:{title:"Speaker embeddings",local:"speaker-embeddings",headingTag:"h3"}}),Is=new o({props:{code:"aW1wb3J0JTIwb3MlMEFpbXBvcnQlMjB0b3JjaCUwQWZyb20lMjBzcGVlY2hicmFpbi5wcmV0cmFpbmVkJTIwaW1wb3J0JTIwRW5jb2RlckNsYXNzaWZpZXIlMEElMEFzcGtfbW9kZWxfbmFtZSUyMCUzRCUyMCUyMnNwZWVjaGJyYWluJTJGc3BrcmVjLXh2ZWN0LXZveGNlbGViJTIyJTBBJTBBZGV2aWNlJTIwJTNEJTIwJTIyY3VkYSUyMiUyMGlmJTIwdG9yY2guY3VkYS5pc19hdmFpbGFibGUoKSUyMGVsc2UlMjAlMjJjcHUlMjIlMEFzcGVha2VyX21vZGVsJTIwJTNEJTIwRW5jb2RlckNsYXNzaWZpZXIuZnJvbV9ocGFyYW1zKCUwQSUyMCUyMCUyMCUyMHNvdXJjZSUzRHNwa19tb2RlbF9uYW1lJTJDJTBBJTIwJTIwJTIwJTIwcnVuX29wdHMlM0QlN0IlMjJkZXZpY2UlMjIlM0ElMjBkZXZpY2UlN0QlMkMlMEElMjAlMjAlMjAlMjBzYXZlZGlyJTNEb3MucGF0aC5qb2luKCUyMiUyRnRtcCUyMiUyQyUyMHNwa19tb2RlbF9uYW1lKSUyQyUwQSklMEElMEElMEFkZWYlMjBjcmVhdGVfc3BlYWtlcl9lbWJlZGRpbmcod2F2ZWZvcm0pJTNBJTBBJTIwJTIwJTIwJTIwd2l0aCUyMHRvcmNoLm5vX2dyYWQoKSUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHNwZWFrZXJfZW1iZWRkaW5ncyUyMCUzRCUyMHNwZWFrZXJfbW9kZWwuZW5jb2RlX2JhdGNoKHRvcmNoLnRlbnNvcih3YXZlZm9ybSkpJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwc3BlYWtlcl9lbWJlZGRpbmdzJTIwJTNEJTIwdG9yY2gubm4uZnVuY3Rpb25hbC5ub3JtYWxpemUoc3BlYWtlcl9lbWJlZGRpbmdzJTJDJTIwZGltJTNEMiklMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBzcGVha2VyX2VtYmVkZGluZ3MlMjAlM0QlMjBzcGVha2VyX2VtYmVkZGluZ3Muc3F1ZWV6ZSgpLmNwdSgpLm51bXB5KCklMEElMjAlMjAlMjAlMjByZXR1cm4lMjBzcGVha2VyX2VtYmVkZGluZ3M=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> os
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> speechbrain.pretrained <span class="hljs-keyword">import</span> EncoderClassifier

<span class="hljs-meta">&gt;&gt;&gt; </span>spk_model_name = <span class="hljs-string">&quot;speechbrain/spkrec-xvect-voxceleb&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>device = <span class="hljs-string">&quot;cuda&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>speaker_model = EncoderClassifier.from_hparams(
<span class="hljs-meta">... </span>    source=spk_model_name,
<span class="hljs-meta">... </span>    run_opts={<span class="hljs-string">&quot;device&quot;</span>: device},
<span class="hljs-meta">... </span>    savedir=os.path.join(<span class="hljs-string">&quot;/tmp&quot;</span>, spk_model_name),
<span class="hljs-meta">... </span>)


<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_speaker_embedding</span>(<span class="hljs-params">waveform</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>        speaker_embeddings = speaker_model.encode_batch(torch.tensor(waveform))
<span class="hljs-meta">... </span>        speaker_embeddings = torch.nn.functional.normalize(speaker_embeddings, dim=<span class="hljs-number">2</span>)
<span class="hljs-meta">... </span>        speaker_embeddings = speaker_embeddings.squeeze().cpu().numpy()
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> speaker_embeddings`,wrap:!1}}),ks=new w({props:{title:"Processing the dataset",local:"processing-the-dataset",headingTag:"h3"}}),Gs=new o({props:{code:"ZGVmJTIwcHJlcGFyZV9kYXRhc2V0KGV4YW1wbGUpJTNBJTBBJTIwJTIwJTIwJTIwYXVkaW8lMjAlM0QlMjBleGFtcGxlJTVCJTIyYXVkaW8lMjIlNUQlMEElMEElMjAlMjAlMjAlMjBleGFtcGxlJTIwJTNEJTIwcHJvY2Vzc29yKCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHRleHQlM0RleGFtcGxlJTVCJTIybm9ybWFsaXplZF90ZXh0JTIyJTVEJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwYXVkaW9fdGFyZ2V0JTNEYXVkaW8lNUIlMjJhcnJheSUyMiU1RCUyQyUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHNhbXBsaW5nX3JhdGUlM0RhdWRpbyU1QiUyMnNhbXBsaW5nX3JhdGUlMjIlNUQlMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjByZXR1cm5fYXR0ZW50aW9uX21hc2slM0RGYWxzZSUyQyUwQSUyMCUyMCUyMCUyMCklMEElMEElMjAlMjAlMjAlMjAlMjMlMjBzdHJpcCUyMG9mZiUyMHRoZSUyMGJhdGNoJTIwZGltZW5zaW9uJTBBJTIwJTIwJTIwJTIwZXhhbXBsZSU1QiUyMmxhYmVscyUyMiU1RCUyMCUzRCUyMGV4YW1wbGUlNUIlMjJsYWJlbHMlMjIlNUQlNUIwJTVEJTBBJTBBJTIwJTIwJTIwJTIwJTIzJTIwdXNlJTIwU3BlZWNoQnJhaW4lMjB0byUyMG9idGFpbiUyMHgtdmVjdG9yJTBBJTIwJTIwJTIwJTIwZXhhbXBsZSU1QiUyMnNwZWFrZXJfZW1iZWRkaW5ncyUyMiU1RCUyMCUzRCUyMGNyZWF0ZV9zcGVha2VyX2VtYmVkZGluZyhhdWRpbyU1QiUyMmFycmF5JTIyJTVEKSUwQSUwQSUyMCUyMCUyMCUyMHJldHVybiUyMGV4YW1wbGU=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">prepare_dataset</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    audio = example[<span class="hljs-string">&quot;audio&quot;</span>]

<span class="hljs-meta">... </span>    example = processor(
<span class="hljs-meta">... </span>        text=example[<span class="hljs-string">&quot;normalized_text&quot;</span>],
<span class="hljs-meta">... </span>        audio_target=audio[<span class="hljs-string">&quot;array&quot;</span>],
<span class="hljs-meta">... </span>        sampling_rate=audio[<span class="hljs-string">&quot;sampling_rate&quot;</span>],
<span class="hljs-meta">... </span>        return_attention_mask=<span class="hljs-literal">False</span>,
<span class="hljs-meta">... </span>    )

<span class="hljs-meta">... </span>    <span class="hljs-comment"># strip off the batch dimension</span>
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;labels&quot;</span>] = example[<span class="hljs-string">&quot;labels&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">... </span>    <span class="hljs-comment"># use SpeechBrain to obtain x-vector</span>
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;speaker_embeddings&quot;</span>] = create_speaker_embedding(audio[<span class="hljs-string">&quot;array&quot;</span>])

<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example`,wrap:!1}}),Bs=new o({props:{code:"cHJvY2Vzc2VkX2V4YW1wbGUlMjAlM0QlMjBwcmVwYXJlX2RhdGFzZXQoZGF0YXNldCU1QjAlNUQpJTBBbGlzdChwcm9jZXNzZWRfZXhhbXBsZS5rZXlzKCkp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>processed_example = prepare_dataset(dataset[<span class="hljs-number">0</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(processed_example.keys())
[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;labels&#x27;</span>, <span class="hljs-string">&#x27;stop_labels&#x27;</span>, <span class="hljs-string">&#x27;speaker_embeddings&#x27;</span>]`,wrap:!1}}),vs=new o({props:{code:"cHJvY2Vzc2VkX2V4YW1wbGUlNUIlMjJzcGVha2VyX2VtYmVkZGluZ3MlMjIlNUQuc2hhcGU=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>processed_example[<span class="hljs-string">&quot;speaker_embeddings&quot;</span>].shape
(<span class="hljs-number">512</span>,)`,wrap:!1}}),Xs=new o({props:{code:"aW1wb3J0JTIwbWF0cGxvdGxpYi5weXBsb3QlMjBhcyUyMHBsdCUwQSUwQXBsdC5maWd1cmUoKSUwQXBsdC5pbXNob3cocHJvY2Vzc2VkX2V4YW1wbGUlNUIlMjJsYWJlbHMlMjIlNUQuVCklMEFwbHQuc2hvdygp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt

<span class="hljs-meta">&gt;&gt;&gt; </span>plt.figure()
<span class="hljs-meta">&gt;&gt;&gt; </span>plt.imshow(processed_example[<span class="hljs-string">&quot;labels&quot;</span>].T)
<span class="hljs-meta">&gt;&gt;&gt; </span>plt.show()`,wrap:!1}}),Qs=new o({props:{code:"ZGF0YXNldCUyMCUzRCUyMGRhdGFzZXQubWFwKHByZXBhcmVfZGF0YXNldCUyQyUyMHJlbW92ZV9jb2x1bW5zJTNEZGF0YXNldC5jb2x1bW5fbmFtZXMp",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.<span class="hljs-built_in">map</span>(prepare_dataset, remove_columns=dataset.column_names)',wrap:!1}}),Fs=new o({props:{code:"ZGVmJTIwaXNfbm90X3Rvb19sb25nKGlucHV0X2lkcyklM0ElMEElMjAlMjAlMjAlMjBpbnB1dF9sZW5ndGglMjAlM0QlMjBsZW4oaW5wdXRfaWRzKSUwQSUyMCUyMCUyMCUyMHJldHVybiUyMGlucHV0X2xlbmd0aCUyMCUzQyUyMDIwMCUwQSUwQSUwQWRhdGFzZXQlMjAlM0QlMjBkYXRhc2V0LmZpbHRlcihpc19ub3RfdG9vX2xvbmclMkMlMjBpbnB1dF9jb2x1bW5zJTNEJTVCJTIyaW5wdXRfaWRzJTIyJTVEKSUwQWxlbihkYXRhc2V0KQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_not_too_long</span>(<span class="hljs-params">input_ids</span>):
<span class="hljs-meta">... </span>    input_length = <span class="hljs-built_in">len</span>(input_ids)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> input_length &lt; <span class="hljs-number">200</span>


<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.<span class="hljs-built_in">filter</span>(is_not_too_long, input_columns=[<span class="hljs-string">&quot;input_ids&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(dataset)
<span class="hljs-number">8259</span>`,wrap:!1}}),As=new o({props:{code:"ZGF0YXNldCUyMCUzRCUyMGRhdGFzZXQudHJhaW5fdGVzdF9zcGxpdCh0ZXN0X3NpemUlM0QwLjEp",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.train_test_split(test_size=<span class="hljs-number">0.1</span>)',wrap:!1}}),qs=new w({props:{title:"Data collator",local:"data-collator",headingTag:"h3"}}),Ss=new o({props:{code:"ZnJvbSUyMGRhdGFjbGFzc2VzJTIwaW1wb3J0JTIwZGF0YWNsYXNzJTBBZnJvbSUyMHR5cGluZyUyMGltcG9ydCUyMEFueSUyQyUyMERpY3QlMkMlMjBMaXN0JTJDJTIwVW5pb24lMEElMEElMEElNDBkYXRhY2xhc3MlMEFjbGFzcyUyMFRUU0RhdGFDb2xsYXRvcldpdGhQYWRkaW5nJTNBJTBBJTIwJTIwJTIwJTIwcHJvY2Vzc29yJTNBJTIwQW55JTBBJTBBJTIwJTIwJTIwJTIwZGVmJTIwX19jYWxsX18oc2VsZiUyQyUyMGZlYXR1cmVzJTNBJTIwTGlzdCU1QkRpY3QlNUJzdHIlMkMlMjBVbmlvbiU1Qkxpc3QlNUJpbnQlNUQlMkMlMjB0b3JjaC5UZW5zb3IlNUQlNUQlNUQpJTIwLSUzRSUyMERpY3QlNUJzdHIlMkMlMjB0b3JjaC5UZW5zb3IlNUQlM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBpbnB1dF9pZHMlMjAlM0QlMjAlNUIlN0IlMjJpbnB1dF9pZHMlMjIlM0ElMjBmZWF0dXJlJTVCJTIyaW5wdXRfaWRzJTIyJTVEJTdEJTIwZm9yJTIwZmVhdHVyZSUyMGluJTIwZmVhdHVyZXMlNUQlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBsYWJlbF9mZWF0dXJlcyUyMCUzRCUyMCU1QiU3QiUyMmlucHV0X3ZhbHVlcyUyMiUzQSUyMGZlYXR1cmUlNUIlMjJsYWJlbHMlMjIlNUQlN0QlMjBmb3IlMjBmZWF0dXJlJTIwaW4lMjBmZWF0dXJlcyU1RCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHNwZWFrZXJfZmVhdHVyZXMlMjAlM0QlMjAlNUJmZWF0dXJlJTVCJTIyc3BlYWtlcl9lbWJlZGRpbmdzJTIyJTVEJTIwZm9yJTIwZmVhdHVyZSUyMGluJTIwZmVhdHVyZXMlNUQlMEElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjMlMjBjb2xsYXRlJTIwdGhlJTIwaW5wdXRzJTIwYW5kJTIwdGFyZ2V0cyUyMGludG8lMjBhJTIwYmF0Y2glMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBiYXRjaCUyMCUzRCUyMHByb2Nlc3Nvci5wYWQoaW5wdXRfaWRzJTNEaW5wdXRfaWRzJTJDJTIwbGFiZWxzJTNEbGFiZWxfZmVhdHVyZXMlMkMlMjByZXR1cm5fdGVuc29ycyUzRCUyMnB0JTIyKSUwQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMyUyMHJlcGxhY2UlMjBwYWRkaW5nJTIwd2l0aCUyMC0xMDAlMjB0byUyMGlnbm9yZSUyMGxvc3MlMjBjb3JyZWN0bHklMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBiYXRjaCU1QiUyMmxhYmVscyUyMiU1RCUyMCUzRCUyMGJhdGNoJTVCJTIybGFiZWxzJTIyJTVELm1hc2tlZF9maWxsKGJhdGNoLmRlY29kZXJfYXR0ZW50aW9uX21hc2sudW5zcXVlZXplKC0xKS5uZSgxKSUyQyUyMC0xMDApJTBBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIzJTIwbm90JTIwdXNlZCUyMGR1cmluZyUyMGZpbmUtdHVuaW5nJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwZGVsJTIwYmF0Y2glNUIlMjJkZWNvZGVyX2F0dGVudGlvbl9tYXNrJTIyJTVEJTBBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIzJTIwcm91bmQlMjBkb3duJTIwdGFyZ2V0JTIwbGVuZ3RocyUyMHRvJTIwbXVsdGlwbGUlMjBvZiUyMHJlZHVjdGlvbiUyMGZhY3RvciUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGlmJTIwbW9kZWwuY29uZmlnLnJlZHVjdGlvbl9mYWN0b3IlMjAlM0UlMjAxJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwdGFyZ2V0X2xlbmd0aHMlMjAlM0QlMjB0b3JjaC50ZW5zb3IoJTVCbGVuKGZlYXR1cmUlNUIlMjJpbnB1dF92YWx1ZXMlMjIlNUQpJTIwZm9yJTIwZmVhdHVyZSUyMGluJTIwbGFiZWxfZmVhdHVyZXMlNUQpJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwdGFyZ2V0X2xlbmd0aHMlMjAlM0QlMjB0YXJnZXRfbGVuZ3Rocy5uZXcoJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTVCbGVuZ3RoJTIwLSUyMGxlbmd0aCUyMCUyNSUyMG1vZGVsLmNvbmZpZy5yZWR1Y3Rpb25fZmFjdG9yJTIwZm9yJTIwbGVuZ3RoJTIwaW4lMjB0YXJnZXRfbGVuZ3RocyU1RCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCklMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBtYXhfbGVuZ3RoJTIwJTNEJTIwbWF4KHRhcmdldF9sZW5ndGhzKSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGJhdGNoJTVCJTIybGFiZWxzJTIyJTVEJTIwJTNEJTIwYmF0Y2glNUIlMjJsYWJlbHMlMjIlNUQlNUIlM0ElMkMlMjAlM0FtYXhfbGVuZ3RoJTVEJTBBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIzJTIwYWxzbyUyMGFkZCUyMGluJTIwdGhlJTIwc3BlYWtlciUyMGVtYmVkZGluZ3MlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBiYXRjaCU1QiUyMnNwZWFrZXJfZW1iZWRkaW5ncyUyMiU1RCUyMCUzRCUyMHRvcmNoLnRlbnNvcihzcGVha2VyX2ZlYXR1cmVzKSUwQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHJldHVybiUyMGJhdGNo",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> dataclasses <span class="hljs-keyword">import</span> dataclass
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span>, <span class="hljs-type">Dict</span>, <span class="hljs-type">List</span>, <span class="hljs-type">Union</span>


<span class="hljs-meta">&gt;&gt;&gt; </span>@dataclass
<span class="hljs-meta">... </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">TTSDataCollatorWithPadding</span>:
<span class="hljs-meta">... </span>    processor: <span class="hljs-type">Any</span>

<span class="hljs-meta">... </span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, features: <span class="hljs-type">List</span>[<span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Union</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], torch.Tensor]]]</span>) -&gt; <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, torch.Tensor]:
<span class="hljs-meta">... </span>        input_ids = [{<span class="hljs-string">&quot;input_ids&quot;</span>: feature[<span class="hljs-string">&quot;input_ids&quot;</span>]} <span class="hljs-keyword">for</span> feature <span class="hljs-keyword">in</span> features]
<span class="hljs-meta">... </span>        label_features = [{<span class="hljs-string">&quot;input_values&quot;</span>: feature[<span class="hljs-string">&quot;labels&quot;</span>]} <span class="hljs-keyword">for</span> feature <span class="hljs-keyword">in</span> features]
<span class="hljs-meta">... </span>        speaker_features = [feature[<span class="hljs-string">&quot;speaker_embeddings&quot;</span>] <span class="hljs-keyword">for</span> feature <span class="hljs-keyword">in</span> features]

<span class="hljs-meta">... </span>        <span class="hljs-comment"># collate the inputs and targets into a batch</span>
<span class="hljs-meta">... </span>        batch = processor.pad(input_ids=input_ids, labels=label_features, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">... </span>        <span class="hljs-comment"># replace padding with -100 to ignore loss correctly</span>
<span class="hljs-meta">... </span>        batch[<span class="hljs-string">&quot;labels&quot;</span>] = batch[<span class="hljs-string">&quot;labels&quot;</span>].masked_fill(batch.decoder_attention_mask.unsqueeze(-<span class="hljs-number">1</span>).ne(<span class="hljs-number">1</span>), -<span class="hljs-number">100</span>)

<span class="hljs-meta">... </span>        <span class="hljs-comment"># not used during fine-tuning</span>
<span class="hljs-meta">... </span>        <span class="hljs-keyword">del</span> batch[<span class="hljs-string">&quot;decoder_attention_mask&quot;</span>]

<span class="hljs-meta">... </span>        <span class="hljs-comment"># round down target lengths to multiple of reduction factor</span>
<span class="hljs-meta">... </span>        <span class="hljs-keyword">if</span> model.config.reduction_factor &gt; <span class="hljs-number">1</span>:
<span class="hljs-meta">... </span>            target_lengths = torch.tensor([<span class="hljs-built_in">len</span>(feature[<span class="hljs-string">&quot;input_values&quot;</span>]) <span class="hljs-keyword">for</span> feature <span class="hljs-keyword">in</span> label_features])
<span class="hljs-meta">... </span>            target_lengths = target_lengths.new(
<span class="hljs-meta">... </span>                [length - length % model.config.reduction_factor <span class="hljs-keyword">for</span> length <span class="hljs-keyword">in</span> target_lengths]
<span class="hljs-meta">... </span>            )
<span class="hljs-meta">... </span>            max_length = <span class="hljs-built_in">max</span>(target_lengths)
<span class="hljs-meta">... </span>            batch[<span class="hljs-string">&quot;labels&quot;</span>] = batch[<span class="hljs-string">&quot;labels&quot;</span>][:, :max_length]

<span class="hljs-meta">... </span>        <span class="hljs-comment"># also add in the speaker embeddings</span>
<span class="hljs-meta">... </span>        batch[<span class="hljs-string">&quot;speaker_embeddings&quot;</span>] = torch.tensor(speaker_features)

<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> batch`,wrap:!1}}),Ls=new o({props:{code:"ZGF0YV9jb2xsYXRvciUyMCUzRCUyMFRUU0RhdGFDb2xsYXRvcldpdGhQYWRkaW5nKHByb2Nlc3NvciUzRHByb2Nlc3Nvcik=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>data_collator = TTSDataCollatorWithPadding(processor=processor)',wrap:!1}}),Ds=new w({props:{title:"Train the model",local:"train-the-model",headingTag:"h2"}}),Os=new o({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFNwZWVjaFQ1Rm9yVGV4dFRvU3BlZWNoJTBBJTBBbW9kZWwlMjAlM0QlMjBTcGVlY2hUNUZvclRleHRUb1NwZWVjaC5mcm9tX3ByZXRyYWluZWQoY2hlY2twb2ludCk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SpeechT5ForTextToSpeech

<span class="hljs-meta">&gt;&gt;&gt; </span>model = SpeechT5ForTextToSpeech.from_pretrained(checkpoint)`,wrap:!1}}),tt=new o({props:{code:"bW9kZWwuY29uZmlnLnVzZV9jYWNoZSUyMCUzRCUyMEZhbHNl",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.use_cache = <span class="hljs-literal">False</span>',wrap:!1}}),et=new o({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFNlcTJTZXFUcmFpbmluZ0FyZ3VtZW50cyUwQSUwQXRyYWluaW5nX2FyZ3MlMjAlM0QlMjBTZXEyU2VxVHJhaW5pbmdBcmd1bWVudHMoJTBBJTIwJTIwJTIwJTIwb3V0cHV0X2RpciUzRCUyMnNwZWVjaHQ1X2ZpbmV0dW5lZF92b3hwb3B1bGlfbmwlMjIlMkMlMjAlMjAlMjMlMjBjaGFuZ2UlMjB0byUyMGElMjByZXBvJTIwbmFtZSUyMG9mJTIweW91ciUyMGNob2ljZSUwQSUyMCUyMCUyMCUyMHBlcl9kZXZpY2VfdHJhaW5fYmF0Y2hfc2l6ZSUzRDQlMkMlMEElMjAlMjAlMjAlMjBncmFkaWVudF9hY2N1bXVsYXRpb25fc3RlcHMlM0Q4JTJDJTBBJTIwJTIwJTIwJTIwbGVhcm5pbmdfcmF0ZSUzRDFlLTUlMkMlMEElMjAlMjAlMjAlMjB3YXJtdXBfc3RlcHMlM0Q1MDAlMkMlMEElMjAlMjAlMjAlMjBtYXhfc3RlcHMlM0Q0MDAwJTJDJTBBJTIwJTIwJTIwJTIwZ3JhZGllbnRfY2hlY2twb2ludGluZyUzRFRydWUlMkMlMEElMjAlMjAlMjAlMjBmcDE2JTNEVHJ1ZSUyQyUwQSUyMCUyMCUyMCUyMGV2YWx1YXRpb25fc3RyYXRlZ3klM0QlMjJzdGVwcyUyMiUyQyUwQSUyMCUyMCUyMCUyMHBlcl9kZXZpY2VfZXZhbF9iYXRjaF9zaXplJTNEMiUyQyUwQSUyMCUyMCUyMCUyMHNhdmVfc3RlcHMlM0QxMDAwJTJDJTBBJTIwJTIwJTIwJTIwZXZhbF9zdGVwcyUzRDEwMDAlMkMlMEElMjAlMjAlMjAlMjBsb2dnaW5nX3N0ZXBzJTNEMjUlMkMlMEElMjAlMjAlMjAlMjByZXBvcnRfdG8lM0QlNUIlMjJ0ZW5zb3Jib2FyZCUyMiU1RCUyQyUwQSUyMCUyMCUyMCUyMGxvYWRfYmVzdF9tb2RlbF9hdF9lbmQlM0RUcnVlJTJDJTBBJTIwJTIwJTIwJTIwZ3JlYXRlcl9pc19iZXR0ZXIlM0RGYWxzZSUyQyUwQSUyMCUyMCUyMCUyMGxhYmVsX25hbWVzJTNEJTVCJTIybGFiZWxzJTIyJTVEJTJDJTBBJTIwJTIwJTIwJTIwcHVzaF90b19odWIlM0RUcnVlJTJDJTBBKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Seq2SeqTrainingArguments

<span class="hljs-meta">&gt;&gt;&gt; </span>training_args = Seq2SeqTrainingArguments(
<span class="hljs-meta">... </span>    output_dir=<span class="hljs-string">&quot;speecht5_finetuned_voxpopuli_nl&quot;</span>,  <span class="hljs-comment"># change to a repo name of your choice</span>
<span class="hljs-meta">... </span>    per_device_train_batch_size=<span class="hljs-number">4</span>,
<span class="hljs-meta">... </span>    gradient_accumulation_steps=<span class="hljs-number">8</span>,
<span class="hljs-meta">... </span>    learning_rate=<span class="hljs-number">1e-5</span>,
<span class="hljs-meta">... </span>    warmup_steps=<span class="hljs-number">500</span>,
<span class="hljs-meta">... </span>    max_steps=<span class="hljs-number">4000</span>,
<span class="hljs-meta">... </span>    gradient_checkpointing=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    fp16=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    evaluation_strategy=<span class="hljs-string">&quot;steps&quot;</span>,
<span class="hljs-meta">... </span>    per_device_eval_batch_size=<span class="hljs-number">2</span>,
<span class="hljs-meta">... </span>    save_steps=<span class="hljs-number">1000</span>,
<span class="hljs-meta">... </span>    eval_steps=<span class="hljs-number">1000</span>,
<span class="hljs-meta">... </span>    logging_steps=<span class="hljs-number">25</span>,
<span class="hljs-meta">... </span>    report_to=[<span class="hljs-string">&quot;tensorboard&quot;</span>],
<span class="hljs-meta">... </span>    load_best_model_at_end=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    greater_is_better=<span class="hljs-literal">False</span>,
<span class="hljs-meta">... </span>    label_names=[<span class="hljs-string">&quot;labels&quot;</span>],
<span class="hljs-meta">... </span>    push_to_hub=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>)`,wrap:!1}}),nt=new o({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFNlcTJTZXFUcmFpbmVyJTBBJTBBdHJhaW5lciUyMCUzRCUyMFNlcTJTZXFUcmFpbmVyKCUwQSUyMCUyMCUyMCUyMGFyZ3MlM0R0cmFpbmluZ19hcmdzJTJDJTBBJTIwJTIwJTIwJTIwbW9kZWwlM0Rtb2RlbCUyQyUwQSUyMCUyMCUyMCUyMHRyYWluX2RhdGFzZXQlM0RkYXRhc2V0JTVCJTIydHJhaW4lMjIlNUQlMkMlMEElMjAlMjAlMjAlMjBldmFsX2RhdGFzZXQlM0RkYXRhc2V0JTVCJTIydGVzdCUyMiU1RCUyQyUwQSUyMCUyMCUyMCUyMGRhdGFfY29sbGF0b3IlM0RkYXRhX2NvbGxhdG9yJTJDJTBBJTIwJTIwJTIwJTIwdG9rZW5pemVyJTNEcHJvY2Vzc29yJTJDJTBBKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Seq2SeqTrainer

<span class="hljs-meta">&gt;&gt;&gt; </span>trainer = Seq2SeqTrainer(
<span class="hljs-meta">... </span>    args=training_args,
<span class="hljs-meta">... </span>    model=model,
<span class="hljs-meta">... </span>    train_dataset=dataset[<span class="hljs-string">&quot;train&quot;</span>],
<span class="hljs-meta">... </span>    eval_dataset=dataset[<span class="hljs-string">&quot;test&quot;</span>],
<span class="hljs-meta">... </span>    data_collator=data_collator,
<span class="hljs-meta">... </span>    tokenizer=processor,
<span class="hljs-meta">... </span>)`,wrap:!1}}),mt=new o({props:{code:"dHJhaW5lci50cmFpbigp",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>trainer.train()',wrap:!1}}),Mt=new o({props:{code:"cHJvY2Vzc29yLnNhdmVfcHJldHJhaW5lZCglMjJZT1VSX0FDQ09VTlRfTkFNRSUyRnNwZWVjaHQ1X2ZpbmV0dW5lZF92b3hwb3B1bGlfbmwlMjIp",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>processor.save_pretrained(<span class="hljs-string">&quot;YOUR_ACCOUNT_NAME/speecht5_finetuned_voxpopuli_nl&quot;</span>)',wrap:!1}}),jt=new o({props:{code:"dHJhaW5lci5wdXNoX3RvX2h1Yigp",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>trainer.push_to_hub()',wrap:!1}}),ht=new w({props:{title:"Inference",local:"inference",headingTag:"h2"}}),yt=new w({props:{title:"Inference with a pipeline",local:"inference-with-a-pipeline",headingTag:"h3"}}),ot=new o({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBcGlwZSUyMCUzRCUyMHBpcGVsaW5lKCUyMnRleHQtdG8tc3BlZWNoJTIyJTJDJTIwbW9kZWwlM0QlMjJZT1VSX0FDQ09VTlRfTkFNRSUyRnNwZWVjaHQ1X2ZpbmV0dW5lZF92b3hwb3B1bGlfbmwlMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>pipe = pipeline(<span class="hljs-string">&quot;text-to-speech&quot;</span>, model=<span class="hljs-string">&quot;YOUR_ACCOUNT_NAME/speecht5_finetuned_voxpopuli_nl&quot;</span>)`,wrap:!1}}),Tt=new o({props:{code:"dGV4dCUyMCUzRCUyMCUyMmhhbGxvJTIwYWxsZW1hYWwlMkMlMjBpayUyMHByYWF0JTIwbmVkZXJsYW5kcy4lMjBncm9ldGplcyUyMGFhbiUyMGllZGVyZWVuISUyMg==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;hallo allemaal, ik praat nederlands. groetjes aan iedereen!&quot;</span>',wrap:!1}}),Ut=new o({props:{code:"ZXhhbXBsZSUyMCUzRCUyMGRhdGFzZXQlNUIlMjJ0ZXN0JTIyJTVEJTVCMzA0JTVEJTBBc3BlYWtlcl9lbWJlZGRpbmdzJTIwJTNEJTIwdG9yY2gudGVuc29yKGV4YW1wbGUlNUIlMjJzcGVha2VyX2VtYmVkZGluZ3MlMjIlNUQpLnVuc3F1ZWV6ZSgwKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>example = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-number">304</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>speaker_embeddings = torch.tensor(example[<span class="hljs-string">&quot;speaker_embeddings&quot;</span>]).unsqueeze(<span class="hljs-number">0</span>)`,wrap:!1}}),dt=new o({props:{code:"Zm9yd2FyZF9wYXJhbXMlMjAlM0QlMjAlN0IlMjJzcGVha2VyX2VtYmVkZGluZ3MlMjIlM0ElMjBzcGVha2VyX2VtYmVkZGluZ3MlN0QlMEFvdXRwdXQlMjAlM0QlMjBwaXBlKHRleHQlMkMlMjBmb3J3YXJkX3BhcmFtcyUzRGZvcndhcmRfcGFyYW1zKSUwQW91dHB1dA==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>forward_params = {<span class="hljs-string">&quot;speaker_embeddings&quot;</span>: speaker_embeddings}
<span class="hljs-meta">&gt;&gt;&gt; </span>output = pipe(text, forward_params=forward_params)
<span class="hljs-meta">&gt;&gt;&gt; </span>output
{<span class="hljs-string">&#x27;audio&#x27;</span>: array([-<span class="hljs-number">6.82714235e-05</span>, -<span class="hljs-number">4.26525949e-04</span>,  <span class="hljs-number">1.06134125e-04</span>, ...,
        -<span class="hljs-number">1.22392643e-03</span>, -<span class="hljs-number">7.76011671e-04</span>,  <span class="hljs-number">3.29112721e-04</span>], dtype=float32),
 <span class="hljs-string">&#x27;sampling_rate&#x27;</span>: <span class="hljs-number">16000</span>}`,wrap:!1}}),ft=new o({props:{code:"ZnJvbSUyMElQeXRob24uZGlzcGxheSUyMGltcG9ydCUyMEF1ZGlvJTBBQXVkaW8ob3V0cHV0JTVCJ2F1ZGlvJyU1RCUyQyUyMHJhdGUlM0RvdXRwdXQlNUInc2FtcGxpbmdfcmF0ZSclNUQpJTIw",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> IPython.display <span class="hljs-keyword">import</span> Audio
<span class="hljs-meta">&gt;&gt;&gt; </span>Audio(output[<span class="hljs-string">&#x27;audio&#x27;</span>], rate=output[<span class="hljs-string">&#x27;sampling_rate&#x27;</span>]) `,wrap:!1}}),bt=new w({props:{title:"Run inference manually",local:"run-inference-manually",headingTag:"h3"}}),It=new o({props:{code:"bW9kZWwlMjAlM0QlMjBTcGVlY2hUNUZvclRleHRUb1NwZWVjaC5mcm9tX3ByZXRyYWluZWQoJTIyWU9VUl9BQ0NPVU5UJTJGc3BlZWNodDVfZmluZXR1bmVkX3ZveHBvcHVsaV9ubCUyMik=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model = SpeechT5ForTextToSpeech.from_pretrained(<span class="hljs-string">&quot;YOUR_ACCOUNT/speecht5_finetuned_voxpopuli_nl&quot;</span>)',wrap:!1}}),xt=new o({props:{code:"ZXhhbXBsZSUyMCUzRCUyMGRhdGFzZXQlNUIlMjJ0ZXN0JTIyJTVEJTVCMzA0JTVEJTBBc3BlYWtlcl9lbWJlZGRpbmdzJTIwJTNEJTIwdG9yY2gudGVuc29yKGV4YW1wbGUlNUIlMjJzcGVha2VyX2VtYmVkZGluZ3MlMjIlNUQpLnVuc3F1ZWV6ZSgwKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>example = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-number">304</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>speaker_embeddings = torch.tensor(example[<span class="hljs-string">&quot;speaker_embeddings&quot;</span>]).unsqueeze(<span class="hljs-number">0</span>)`,wrap:!1}}),Vt=new o({props:{code:"dGV4dCUyMCUzRCUyMCUyMmhhbGxvJTIwYWxsZW1hYWwlMkMlMjBpayUyMHByYWF0JTIwbmVkZXJsYW5kcy4lMjBncm9ldGplcyUyMGFhbiUyMGllZGVyZWVuISUyMiUwQWlucHV0cyUyMCUzRCUyMHByb2Nlc3Nvcih0ZXh0JTNEdGV4dCUyQyUyMHJldHVybl90ZW5zb3JzJTNEJTIycHQlMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;hallo allemaal, ik praat nederlands. groetjes aan iedereen!&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = processor(text=text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)`,wrap:!1}}),_t=new o({props:{code:"c3BlY3Ryb2dyYW0lMjAlM0QlMjBtb2RlbC5nZW5lcmF0ZV9zcGVlY2goaW5wdXRzJTVCJTIyaW5wdXRfaWRzJTIyJTVEJTJDJTIwc3BlYWtlcl9lbWJlZGRpbmdzKQ==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>spectrogram = model.generate_speech(inputs[<span class="hljs-string">&quot;input_ids&quot;</span>], speaker_embeddings)',wrap:!1}}),Wt=new o({props:{code:"cGx0LmZpZ3VyZSgpJTBBcGx0Lmltc2hvdyhzcGVjdHJvZ3JhbS5UKSUwQXBsdC5zaG93KCk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>plt.figure()
<span class="hljs-meta">&gt;&gt;&gt; </span>plt.imshow(spectrogram.T)
<span class="hljs-meta">&gt;&gt;&gt; </span>plt.show()`,wrap:!1}}),Rt=new o({props:{code:"d2l0aCUyMHRvcmNoLm5vX2dyYWQoKSUzQSUwQSUyMCUyMCUyMCUyMHNwZWVjaCUyMCUzRCUyMHZvY29kZXIoc3BlY3Ryb2dyYW0pJTBBJTBBZnJvbSUyMElQeXRob24uZGlzcGxheSUyMGltcG9ydCUyMEF1ZGlvJTBBJTBBQXVkaW8oc3BlZWNoLm51bXB5KCklMkMlMjByYXRlJTNEMTYwMDAp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    speech = vocoder(spectrogram)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> IPython.display <span class="hljs-keyword">import</span> Audio

<span class="hljs-meta">&gt;&gt;&gt; </span>Audio(speech.numpy(), rate=<span class="hljs-number">16000</span>)`,wrap:!1}}),{c(){T=p("meta"),I=a(),g=p("p"),u=a(),M(U.$$.fragment),J=a(),M(d.$$.fragment),Ht=a(),Z=p("p"),Z.innerHTML=Ma,At=a(),x=p("p"),x.innerHTML=ia,qt=a(),M(k.$$.fragment),Et=a(),V=p("p"),V.textContent=ja,St=a(),M(G.$$.fragment),Pt=a(),_=p("p"),_.innerHTML=ha,Lt=a(),B=p("p"),B.textContent=ya,Dt=a(),W=p("p"),W.textContent=ra,Kt=a(),v=p("ol"),v.innerHTML=oa,Ot=a(),R=p("p"),R.textContent=Ja,sl=a(),M(X.$$.fragment),tl=a(),Y=p("p"),Y.textContent=Ta,ll=a(),M(z.$$.fragment),el=a(),M(f.$$.fragment),al=a(),Q=p("p"),Q.textContent=ua,nl=a(),M(N.$$.fragment),pl=a(),M(F.$$.fragment),ml=a(),H=p("p"),H.innerHTML=Ua,cl=a(),A=p("p"),A.textContent=wa,Ml=a(),q=p("p"),q.textContent=da,il=a(),M(E.$$.fragment),jl=a(),S=p("p"),S.textContent=ga,hl=a(),M(P.$$.fragment),yl=a(),M(L.$$.fragment),rl=a(),D=p("p"),D.textContent=fa,ol=a(),M(K.$$.fragment),Jl=a(),M(O.$$.fragment),Tl=a(),ss=p("p"),ss.textContent=ba,ul=a(),M(ts.$$.fragment),Ul=a(),ls=p("p"),ls.innerHTML=Ca,wl=a(),es=p("p"),es.innerHTML=$a,dl=a(),as=p("p"),as.innerHTML=Ia,gl=a(),M(ns.$$.fragment),fl=a(),ps=p("p"),ps.textContent=Za,bl=a(),M(ms.$$.fragment),Cl=a(),cs=p("p"),cs.innerHTML=xa,$l=a(),M(Ms.$$.fragment),Il=a(),is=p("p"),is.textContent=ka,Zl=a(),M(js.$$.fragment),xl=a(),hs=p("p"),hs.textContent=Va,kl=a(),M(ys.$$.fragment),Vl=a(),rs=p("p"),rs.textContent=Ga,Gl=a(),M(os.$$.fragment),_l=a(),b=p("div"),b.innerHTML=_a,Bl=a(),Js=p("p"),Js.textContent=Ba,Wl=a(),M(Ts.$$.fragment),vl=a(),us=p("p"),us.textContent=Wa,Rl=a(),M(Us.$$.fragment),Xl=a(),ws=p("p"),ws.textContent=va,Yl=a(),M(ds.$$.fragment),zl=a(),gs=p("p"),gs.textContent=Ra,Ql=a(),fs=p("p"),fs.textContent=Xa,Nl=a(),M(bs.$$.fragment),Fl=a(),Cs=p("p"),Cs.innerHTML=Ya,Hl=a(),$s=p("p"),$s.innerHTML=za,Al=a(),M(Is.$$.fragment),ql=a(),Zs=p("p"),Zs.innerHTML=Qa,El=a(),xs=p("p"),xs.textContent=Na,Sl=a(),M(ks.$$.fragment),Pl=a(),Vs=p("p"),Vs.innerHTML=Fa,Ll=a(),M(Gs.$$.fragment),Dl=a(),_s=p("p"),_s.textContent=Ha,Kl=a(),M(Bs.$$.fragment),Ol=a(),Ws=p("p"),Ws.textContent=Aa,se=a(),M(vs.$$.fragment),te=a(),Rs=p("p"),Rs.textContent=qa,le=a(),M(Xs.$$.fragment),ee=a(),C=p("div"),C.innerHTML=Ea,ae=a(),Ys=p("p"),Ys.textContent=Sa,ne=a(),zs=p("p"),zs.textContent=Pa,pe=a(),M(Qs.$$.fragment),me=a(),Ns=p("p"),Ns.textContent=La,ce=a(),M(Fs.$$.fragment),Me=a(),Hs=p("p"),Hs.textContent=Da,ie=a(),M(As.$$.fragment),je=a(),M(qs.$$.fragment),he=a(),Es=p("p"),Es.innerHTML=Ka,ye=a(),M(Ss.$$.fragment),re=a(),Ps=p("p"),Ps.textContent=Oa,oe=a(),M(Ls.$$.fragment),Je=a(),M(Ds.$$.fragment),Te=a(),Ks=p("p"),Ks.textContent=sn,ue=a(),M(Os.$$.fragment),Ue=a(),st=p("p"),st.innerHTML=tn,we=a(),M(tt.$$.fragment),de=a(),lt=p("p"),lt.textContent=ln,ge=a(),M(et.$$.fragment),fe=a(),at=p("p"),at.innerHTML=en,be=a(),M(nt.$$.fragment),Ce=a(),pt=p("p"),pt.innerHTML=an,$e=a(),M(mt.$$.fragment),Ie=a(),ct=p("p"),ct.textContent=nn,Ze=a(),M(Mt.$$.fragment),xe=a(),it=p("p"),it.textContent=pn,ke=a(),M(jt.$$.fragment),Ve=a(),M(ht.$$.fragment),Ge=a(),M(yt.$$.fragment),_e=a(),rt=p("p"),rt.innerHTML=mn,Be=a(),M(ot.$$.fragment),We=a(),Jt=p("p"),Jt.textContent=cn,ve=a(),M(Tt.$$.fragment),Re=a(),ut=p("p"),ut.textContent=Mn,Xe=a(),M(Ut.$$.fragment),Ye=a(),wt=p("p"),wt.textContent=jn,ze=a(),M(dt.$$.fragment),Qe=a(),gt=p("p"),gt.textContent=hn,Ne=a(),M(ft.$$.fragment),Fe=a(),M(bt.$$.fragment),He=a(),Ct=p("p"),Ct.textContent=yn,Ae=a(),$t=p("p"),$t.textContent=rn,qe=a(),M(It.$$.fragment),Ee=a(),Zt=p("p"),Zt.textContent=on,Se=a(),M(xt.$$.fragment),Pe=a(),kt=p("p"),kt.textContent=Jn,Le=a(),M(Vt.$$.fragment),De=a(),Gt=p("p"),Gt.textContent=Tn,Ke=a(),M(_t.$$.fragment),Oe=a(),Bt=p("p"),Bt.textContent=un,sa=a(),M(Wt.$$.fragment),ta=a(),$=p("div"),$.innerHTML=Un,la=a(),vt=p("p"),vt.textContent=wn,ea=a(),M(Rt.$$.fragment),aa=a(),Xt=p("p"),Xt.textContent=dn,na=a(),Yt=p("p"),Yt.innerHTML=gn,pa=a(),zt=p("p"),zt.textContent=fn,ma=a(),Qt=p("p"),this.h()},l(s){const t=Vn("svelte-u9bgzb",document.head);T=m(t,"META",{name:!0,content:!0}),t.forEach(l),I=n(s),g=m(s,"P",{}),Cn(g).forEach(l),u=n(s),i(U.$$.fragment,s),J=n(s),i(d.$$.fragment,s),Ht=n(s),Z=m(s,"P",{"data-svelte-h":!0}),c(Z)!=="svelte-rmi4la"&&(Z.innerHTML=Ma),At=n(s),x=m(s,"P",{"data-svelte-h":!0}),c(x)!=="svelte-1aykzvz"&&(x.innerHTML=ia),qt=n(s),i(k.$$.fragment,s),Et=n(s),V=m(s,"P",{"data-svelte-h":!0}),c(V)!=="svelte-ra0w6l"&&(V.textContent=ja),St=n(s),i(G.$$.fragment,s),Pt=n(s),_=m(s,"P",{"data-svelte-h":!0}),c(_)!=="svelte-a1ytgq"&&(_.innerHTML=ha),Lt=n(s),B=m(s,"P",{"data-svelte-h":!0}),c(B)!=="svelte-1nt4djl"&&(B.textContent=ya),Dt=n(s),W=m(s,"P",{"data-svelte-h":!0}),c(W)!=="svelte-7of4fj"&&(W.textContent=ra),Kt=n(s),v=m(s,"OL",{"data-svelte-h":!0}),c(v)!=="svelte-12rhm17"&&(v.innerHTML=oa),Ot=n(s),R=m(s,"P",{"data-svelte-h":!0}),c(R)!=="svelte-1lya3k8"&&(R.textContent=Ja),sl=n(s),i(X.$$.fragment,s),tl=n(s),Y=m(s,"P",{"data-svelte-h":!0}),c(Y)!=="svelte-1emccfv"&&(Y.textContent=Ta),ll=n(s),i(z.$$.fragment,s),el=n(s),i(f.$$.fragment,s),al=n(s),Q=m(s,"P",{"data-svelte-h":!0}),c(Q)!=="svelte-1bh3yv"&&(Q.textContent=ua),nl=n(s),i(N.$$.fragment,s),pl=n(s),i(F.$$.fragment,s),ml=n(s),H=m(s,"P",{"data-svelte-h":!0}),c(H)!=="svelte-f5yuan"&&(H.innerHTML=Ua),cl=n(s),A=m(s,"P",{"data-svelte-h":!0}),c(A)!=="svelte-1dvaf3"&&(A.textContent=wa),Ml=n(s),q=m(s,"P",{"data-svelte-h":!0}),c(q)!=="svelte-qgyibd"&&(q.textContent=da),il=n(s),i(E.$$.fragment,s),jl=n(s),S=m(s,"P",{"data-svelte-h":!0}),c(S)!=="svelte-1ny3imp"&&(S.textContent=ga),hl=n(s),i(P.$$.fragment,s),yl=n(s),i(L.$$.fragment,s),rl=n(s),D=m(s,"P",{"data-svelte-h":!0}),c(D)!=="svelte-15j18f8"&&(D.textContent=fa),ol=n(s),i(K.$$.fragment,s),Jl=n(s),i(O.$$.fragment,s),Tl=n(s),ss=m(s,"P",{"data-svelte-h":!0}),c(ss)!=="svelte-1jdwjs"&&(ss.textContent=ba),ul=n(s),i(ts.$$.fragment,s),Ul=n(s),ls=m(s,"P",{"data-svelte-h":!0}),c(ls)!=="svelte-ey9i2l"&&(ls.innerHTML=Ca),wl=n(s),es=m(s,"P",{"data-svelte-h":!0}),c(es)!=="svelte-15t2vpd"&&(es.innerHTML=$a),dl=n(s),as=m(s,"P",{"data-svelte-h":!0}),c(as)!=="svelte-17l053z"&&(as.innerHTML=Ia),gl=n(s),i(ns.$$.fragment,s),fl=n(s),ps=m(s,"P",{"data-svelte-h":!0}),c(ps)!=="svelte-7cd0mn"&&(ps.textContent=Za),bl=n(s),i(ms.$$.fragment,s),Cl=n(s),cs=m(s,"P",{"data-svelte-h":!0}),c(cs)!=="svelte-6zshqz"&&(cs.innerHTML=xa),$l=n(s),i(Ms.$$.fragment,s),Il=n(s),is=m(s,"P",{"data-svelte-h":!0}),c(is)!=="svelte-4xoj0g"&&(is.textContent=ka),Zl=n(s),i(js.$$.fragment,s),xl=n(s),hs=m(s,"P",{"data-svelte-h":!0}),c(hs)!=="svelte-3caf6i"&&(hs.textContent=Va),kl=n(s),i(ys.$$.fragment,s),Vl=n(s),rs=m(s,"P",{"data-svelte-h":!0}),c(rs)!=="svelte-1o7diax"&&(rs.textContent=Ga),Gl=n(s),i(os.$$.fragment,s),_l=n(s),b=m(s,"DIV",{class:!0,"data-svelte-h":!0}),c(b)!=="svelte-1uufiik"&&(b.innerHTML=_a),Bl=n(s),Js=m(s,"P",{"data-svelte-h":!0}),c(Js)!=="svelte-opv2ww"&&(Js.textContent=Ba),Wl=n(s),i(Ts.$$.fragment,s),vl=n(s),us=m(s,"P",{"data-svelte-h":!0}),c(us)!=="svelte-ka87tm"&&(us.textContent=Wa),Rl=n(s),i(Us.$$.fragment,s),Xl=n(s),ws=m(s,"P",{"data-svelte-h":!0}),c(ws)!=="svelte-znmrzx"&&(ws.textContent=va),Yl=n(s),i(ds.$$.fragment,s),zl=n(s),gs=m(s,"P",{"data-svelte-h":!0}),c(gs)!=="svelte-k3vipx"&&(gs.textContent=Ra),Ql=n(s),fs=m(s,"P",{"data-svelte-h":!0}),c(fs)!=="svelte-1d04kus"&&(fs.textContent=Xa),Nl=n(s),i(bs.$$.fragment,s),Fl=n(s),Cs=m(s,"P",{"data-svelte-h":!0}),c(Cs)!=="svelte-j309dk"&&(Cs.innerHTML=Ya),Hl=n(s),$s=m(s,"P",{"data-svelte-h":!0}),c($s)!=="svelte-ndv2t"&&($s.innerHTML=za),Al=n(s),i(Is.$$.fragment,s),ql=n(s),Zs=m(s,"P",{"data-svelte-h":!0}),c(Zs)!=="svelte-apb4ow"&&(Zs.innerHTML=Qa),El=n(s),xs=m(s,"P",{"data-svelte-h":!0}),c(xs)!=="svelte-quil0c"&&(xs.textContent=Na),Sl=n(s),i(ks.$$.fragment,s),Pl=n(s),Vs=m(s,"P",{"data-svelte-h":!0}),c(Vs)!=="svelte-ztrdz3"&&(Vs.innerHTML=Fa),Ll=n(s),i(Gs.$$.fragment,s),Dl=n(s),_s=m(s,"P",{"data-svelte-h":!0}),c(_s)!=="svelte-1ofcpft"&&(_s.textContent=Ha),Kl=n(s),i(Bs.$$.fragment,s),Ol=n(s),Ws=m(s,"P",{"data-svelte-h":!0}),c(Ws)!=="svelte-uvfyrl"&&(Ws.textContent=Aa),se=n(s),i(vs.$$.fragment,s),te=n(s),Rs=m(s,"P",{"data-svelte-h":!0}),c(Rs)!=="svelte-1lo9u9i"&&(Rs.textContent=qa),le=n(s),i(Xs.$$.fragment,s),ee=n(s),C=m(s,"DIV",{class:!0,"data-svelte-h":!0}),c(C)!=="svelte-j4o1b8"&&(C.innerHTML=Ea),ae=n(s),Ys=m(s,"P",{"data-svelte-h":!0}),c(Ys)!=="svelte-k9hi9z"&&(Ys.textContent=Sa),ne=n(s),zs=m(s,"P",{"data-svelte-h":!0}),c(zs)!=="svelte-11leuny"&&(zs.textContent=Pa),pe=n(s),i(Qs.$$.fragment,s),me=n(s),Ns=m(s,"P",{"data-svelte-h":!0}),c(Ns)!=="svelte-74t3uf"&&(Ns.textContent=La),ce=n(s),i(Fs.$$.fragment,s),Me=n(s),Hs=m(s,"P",{"data-svelte-h":!0}),c(Hs)!=="svelte-1004op5"&&(Hs.textContent=Da),ie=n(s),i(As.$$.fragment,s),je=n(s),i(qs.$$.fragment,s),he=n(s),Es=m(s,"P",{"data-svelte-h":!0}),c(Es)!=="svelte-1hauqjj"&&(Es.innerHTML=Ka),ye=n(s),i(Ss.$$.fragment,s),re=n(s),Ps=m(s,"P",{"data-svelte-h":!0}),c(Ps)!=="svelte-v9y0s3"&&(Ps.textContent=Oa),oe=n(s),i(Ls.$$.fragment,s),Je=n(s),i(Ds.$$.fragment,s),Te=n(s),Ks=m(s,"P",{"data-svelte-h":!0}),c(Ks)!=="svelte-1h79xa5"&&(Ks.textContent=sn),ue=n(s),i(Os.$$.fragment,s),Ue=n(s),st=m(s,"P",{"data-svelte-h":!0}),c(st)!=="svelte-8uy7j3"&&(st.innerHTML=tn),we=n(s),i(tt.$$.fragment,s),de=n(s),lt=m(s,"P",{"data-svelte-h":!0}),c(lt)!=="svelte-1rpyirk"&&(lt.textContent=ln),ge=n(s),i(et.$$.fragment,s),fe=n(s),at=m(s,"P",{"data-svelte-h":!0}),c(at)!=="svelte-9zsgn1"&&(at.innerHTML=en),be=n(s),i(nt.$$.fragment,s),Ce=n(s),pt=m(s,"P",{"data-svelte-h":!0}),c(pt)!=="svelte-1vdfajj"&&(pt.innerHTML=an),$e=n(s),i(mt.$$.fragment,s),Ie=n(s),ct=m(s,"P",{"data-svelte-h":!0}),c(ct)!=="svelte-xqbyze"&&(ct.textContent=nn),Ze=n(s),i(Mt.$$.fragment,s),xe=n(s),it=m(s,"P",{"data-svelte-h":!0}),c(it)!=="svelte-hi04a9"&&(it.textContent=pn),ke=n(s),i(jt.$$.fragment,s),Ve=n(s),i(ht.$$.fragment,s),Ge=n(s),i(yt.$$.fragment,s),_e=n(s),rt=m(s,"P",{"data-svelte-h":!0}),c(rt)!=="svelte-1kcujue"&&(rt.innerHTML=mn),Be=n(s),i(ot.$$.fragment,s),We=n(s),Jt=m(s,"P",{"data-svelte-h":!0}),c(Jt)!=="svelte-tf7ztk"&&(Jt.textContent=cn),ve=n(s),i(Tt.$$.fragment,s),Re=n(s),ut=m(s,"P",{"data-svelte-h":!0}),c(ut)!=="svelte-1b8zaea"&&(ut.textContent=Mn),Xe=n(s),i(Ut.$$.fragment,s),Ye=n(s),wt=m(s,"P",{"data-svelte-h":!0}),c(wt)!=="svelte-tfg5aj"&&(wt.textContent=jn),ze=n(s),i(dt.$$.fragment,s),Qe=n(s),gt=m(s,"P",{"data-svelte-h":!0}),c(gt)!=="svelte-d5c4h7"&&(gt.textContent=hn),Ne=n(s),i(ft.$$.fragment,s),Fe=n(s),i(bt.$$.fragment,s),He=n(s),Ct=m(s,"P",{"data-svelte-h":!0}),c(Ct)!=="svelte-novmyg"&&(Ct.textContent=yn),Ae=n(s),$t=m(s,"P",{"data-svelte-h":!0}),c($t)!=="svelte-ab69fs"&&($t.textContent=rn),qe=n(s),i(It.$$.fragment,s),Ee=n(s),Zt=m(s,"P",{"data-svelte-h":!0}),c(Zt)!=="svelte-19h9xhe"&&(Zt.textContent=on),Se=n(s),i(xt.$$.fragment,s),Pe=n(s),kt=m(s,"P",{"data-svelte-h":!0}),c(kt)!=="svelte-1a5tbl"&&(kt.textContent=Jn),Le=n(s),i(Vt.$$.fragment,s),De=n(s),Gt=m(s,"P",{"data-svelte-h":!0}),c(Gt)!=="svelte-15ing5s"&&(Gt.textContent=Tn),Ke=n(s),i(_t.$$.fragment,s),Oe=n(s),Bt=m(s,"P",{"data-svelte-h":!0}),c(Bt)!=="svelte-w5s19i"&&(Bt.textContent=un),sa=n(s),i(Wt.$$.fragment,s),ta=n(s),$=m(s,"DIV",{class:!0,"data-svelte-h":!0}),c($)!=="svelte-16b2dt6"&&($.innerHTML=Un),la=n(s),vt=m(s,"P",{"data-svelte-h":!0}),c(vt)!=="svelte-mvuo4b"&&(vt.textContent=wn),ea=n(s),i(Rt.$$.fragment,s),aa=n(s),Xt=m(s,"P",{"data-svelte-h":!0}),c(Xt)!=="svelte-4cl4zf"&&(Xt.textContent=dn),na=n(s),Yt=m(s,"P",{"data-svelte-h":!0}),c(Yt)!=="svelte-1iqdltk"&&(Yt.innerHTML=gn),pa=n(s),zt=m(s,"P",{"data-svelte-h":!0}),c(zt)!=="svelte-fu3i14"&&(zt.textContent=fn),ma=n(s),Qt=m(s,"P",{}),Cn(Qt).forEach(l),this.h()},h(){Nt(T,"name","hf:doc:metadata"),Nt(T,"content",Rn),Nt(b,"class","flex justify-center"),Nt(C,"class","flex justify-center"),Nt($,"class","flex justify-center")},m(s,t){Gn(document.head,T),e(s,I,t),e(s,g,t),e(s,u,t),j(U,s,t),e(s,J,t),j(d,s,t),e(s,Ht,t),e(s,Z,t),e(s,At,t),e(s,x,t),e(s,qt,t),j(k,s,t),e(s,Et,t),e(s,V,t),e(s,St,t),j(G,s,t),e(s,Pt,t),e(s,_,t),e(s,Lt,t),e(s,B,t),e(s,Dt,t),e(s,W,t),e(s,Kt,t),e(s,v,t),e(s,Ot,t),e(s,R,t),e(s,sl,t),j(X,s,t),e(s,tl,t),e(s,Y,t),e(s,ll,t),j(z,s,t),e(s,el,t),j(f,s,t),e(s,al,t),e(s,Q,t),e(s,nl,t),j(N,s,t),e(s,pl,t),j(F,s,t),e(s,ml,t),e(s,H,t),e(s,cl,t),e(s,A,t),e(s,Ml,t),e(s,q,t),e(s,il,t),j(E,s,t),e(s,jl,t),e(s,S,t),e(s,hl,t),j(P,s,t),e(s,yl,t),j(L,s,t),e(s,rl,t),e(s,D,t),e(s,ol,t),j(K,s,t),e(s,Jl,t),j(O,s,t),e(s,Tl,t),e(s,ss,t),e(s,ul,t),j(ts,s,t),e(s,Ul,t),e(s,ls,t),e(s,wl,t),e(s,es,t),e(s,dl,t),e(s,as,t),e(s,gl,t),j(ns,s,t),e(s,fl,t),e(s,ps,t),e(s,bl,t),j(ms,s,t),e(s,Cl,t),e(s,cs,t),e(s,$l,t),j(Ms,s,t),e(s,Il,t),e(s,is,t),e(s,Zl,t),j(js,s,t),e(s,xl,t),e(s,hs,t),e(s,kl,t),j(ys,s,t),e(s,Vl,t),e(s,rs,t),e(s,Gl,t),j(os,s,t),e(s,_l,t),e(s,b,t),e(s,Bl,t),e(s,Js,t),e(s,Wl,t),j(Ts,s,t),e(s,vl,t),e(s,us,t),e(s,Rl,t),j(Us,s,t),e(s,Xl,t),e(s,ws,t),e(s,Yl,t),j(ds,s,t),e(s,zl,t),e(s,gs,t),e(s,Ql,t),e(s,fs,t),e(s,Nl,t),j(bs,s,t),e(s,Fl,t),e(s,Cs,t),e(s,Hl,t),e(s,$s,t),e(s,Al,t),j(Is,s,t),e(s,ql,t),e(s,Zs,t),e(s,El,t),e(s,xs,t),e(s,Sl,t),j(ks,s,t),e(s,Pl,t),e(s,Vs,t),e(s,Ll,t),j(Gs,s,t),e(s,Dl,t),e(s,_s,t),e(s,Kl,t),j(Bs,s,t),e(s,Ol,t),e(s,Ws,t),e(s,se,t),j(vs,s,t),e(s,te,t),e(s,Rs,t),e(s,le,t),j(Xs,s,t),e(s,ee,t),e(s,C,t),e(s,ae,t),e(s,Ys,t),e(s,ne,t),e(s,zs,t),e(s,pe,t),j(Qs,s,t),e(s,me,t),e(s,Ns,t),e(s,ce,t),j(Fs,s,t),e(s,Me,t),e(s,Hs,t),e(s,ie,t),j(As,s,t),e(s,je,t),j(qs,s,t),e(s,he,t),e(s,Es,t),e(s,ye,t),j(Ss,s,t),e(s,re,t),e(s,Ps,t),e(s,oe,t),j(Ls,s,t),e(s,Je,t),j(Ds,s,t),e(s,Te,t),e(s,Ks,t),e(s,ue,t),j(Os,s,t),e(s,Ue,t),e(s,st,t),e(s,we,t),j(tt,s,t),e(s,de,t),e(s,lt,t),e(s,ge,t),j(et,s,t),e(s,fe,t),e(s,at,t),e(s,be,t),j(nt,s,t),e(s,Ce,t),e(s,pt,t),e(s,$e,t),j(mt,s,t),e(s,Ie,t),e(s,ct,t),e(s,Ze,t),j(Mt,s,t),e(s,xe,t),e(s,it,t),e(s,ke,t),j(jt,s,t),e(s,Ve,t),j(ht,s,t),e(s,Ge,t),j(yt,s,t),e(s,_e,t),e(s,rt,t),e(s,Be,t),j(ot,s,t),e(s,We,t),e(s,Jt,t),e(s,ve,t),j(Tt,s,t),e(s,Re,t),e(s,ut,t),e(s,Xe,t),j(Ut,s,t),e(s,Ye,t),e(s,wt,t),e(s,ze,t),j(dt,s,t),e(s,Qe,t),e(s,gt,t),e(s,Ne,t),j(ft,s,t),e(s,Fe,t),j(bt,s,t),e(s,He,t),e(s,Ct,t),e(s,Ae,t),e(s,$t,t),e(s,qe,t),j(It,s,t),e(s,Ee,t),e(s,Zt,t),e(s,Se,t),j(xt,s,t),e(s,Pe,t),e(s,kt,t),e(s,Le,t),j(Vt,s,t),e(s,De,t),e(s,Gt,t),e(s,Ke,t),j(_t,s,t),e(s,Oe,t),e(s,Bt,t),e(s,sa,t),j(Wt,s,t),e(s,ta,t),e(s,$,t),e(s,la,t),e(s,vt,t),e(s,ea,t),j(Rt,s,t),e(s,aa,t),e(s,Xt,t),e(s,na,t),e(s,Yt,t),e(s,pa,t),e(s,zt,t),e(s,ma,t),e(s,Qt,t),ca=!0},p(s,[t]){const bn={};t&2&&(bn.$$scope={dirty:t,ctx:s}),f.$set(bn)},i(s){ca||(h(U.$$.fragment,s),h(d.$$.fragment,s),h(k.$$.fragment,s),h(G.$$.fragment,s),h(X.$$.fragment,s),h(z.$$.fragment,s),h(f.$$.fragment,s),h(N.$$.fragment,s),h(F.$$.fragment,s),h(E.$$.fragment,s),h(P.$$.fragment,s),h(L.$$.fragment,s),h(K.$$.fragment,s),h(O.$$.fragment,s),h(ts.$$.fragment,s),h(ns.$$.fragment,s),h(ms.$$.fragment,s),h(Ms.$$.fragment,s),h(js.$$.fragment,s),h(ys.$$.fragment,s),h(os.$$.fragment,s),h(Ts.$$.fragment,s),h(Us.$$.fragment,s),h(ds.$$.fragment,s),h(bs.$$.fragment,s),h(Is.$$.fragment,s),h(ks.$$.fragment,s),h(Gs.$$.fragment,s),h(Bs.$$.fragment,s),h(vs.$$.fragment,s),h(Xs.$$.fragment,s),h(Qs.$$.fragment,s),h(Fs.$$.fragment,s),h(As.$$.fragment,s),h(qs.$$.fragment,s),h(Ss.$$.fragment,s),h(Ls.$$.fragment,s),h(Ds.$$.fragment,s),h(Os.$$.fragment,s),h(tt.$$.fragment,s),h(et.$$.fragment,s),h(nt.$$.fragment,s),h(mt.$$.fragment,s),h(Mt.$$.fragment,s),h(jt.$$.fragment,s),h(ht.$$.fragment,s),h(yt.$$.fragment,s),h(ot.$$.fragment,s),h(Tt.$$.fragment,s),h(Ut.$$.fragment,s),h(dt.$$.fragment,s),h(ft.$$.fragment,s),h(bt.$$.fragment,s),h(It.$$.fragment,s),h(xt.$$.fragment,s),h(Vt.$$.fragment,s),h(_t.$$.fragment,s),h(Wt.$$.fragment,s),h(Rt.$$.fragment,s),ca=!0)},o(s){y(U.$$.fragment,s),y(d.$$.fragment,s),y(k.$$.fragment,s),y(G.$$.fragment,s),y(X.$$.fragment,s),y(z.$$.fragment,s),y(f.$$.fragment,s),y(N.$$.fragment,s),y(F.$$.fragment,s),y(E.$$.fragment,s),y(P.$$.fragment,s),y(L.$$.fragment,s),y(K.$$.fragment,s),y(O.$$.fragment,s),y(ts.$$.fragment,s),y(ns.$$.fragment,s),y(ms.$$.fragment,s),y(Ms.$$.fragment,s),y(js.$$.fragment,s),y(ys.$$.fragment,s),y(os.$$.fragment,s),y(Ts.$$.fragment,s),y(Us.$$.fragment,s),y(ds.$$.fragment,s),y(bs.$$.fragment,s),y(Is.$$.fragment,s),y(ks.$$.fragment,s),y(Gs.$$.fragment,s),y(Bs.$$.fragment,s),y(vs.$$.fragment,s),y(Xs.$$.fragment,s),y(Qs.$$.fragment,s),y(Fs.$$.fragment,s),y(As.$$.fragment,s),y(qs.$$.fragment,s),y(Ss.$$.fragment,s),y(Ls.$$.fragment,s),y(Ds.$$.fragment,s),y(Os.$$.fragment,s),y(tt.$$.fragment,s),y(et.$$.fragment,s),y(nt.$$.fragment,s),y(mt.$$.fragment,s),y(Mt.$$.fragment,s),y(jt.$$.fragment,s),y(ht.$$.fragment,s),y(yt.$$.fragment,s),y(ot.$$.fragment,s),y(Tt.$$.fragment,s),y(Ut.$$.fragment,s),y(dt.$$.fragment,s),y(ft.$$.fragment,s),y(bt.$$.fragment,s),y(It.$$.fragment,s),y(xt.$$.fragment,s),y(Vt.$$.fragment,s),y(_t.$$.fragment,s),y(Wt.$$.fragment,s),y(Rt.$$.fragment,s),ca=!1},d(s){s&&(l(I),l(g),l(u),l(J),l(Ht),l(Z),l(At),l(x),l(qt),l(Et),l(V),l(St),l(Pt),l(_),l(Lt),l(B),l(Dt),l(W),l(Kt),l(v),l(Ot),l(R),l(sl),l(tl),l(Y),l(ll),l(el),l(al),l(Q),l(nl),l(pl),l(ml),l(H),l(cl),l(A),l(Ml),l(q),l(il),l(jl),l(S),l(hl),l(yl),l(rl),l(D),l(ol),l(Jl),l(Tl),l(ss),l(ul),l(Ul),l(ls),l(wl),l(es),l(dl),l(as),l(gl),l(fl),l(ps),l(bl),l(Cl),l(cs),l($l),l(Il),l(is),l(Zl),l(xl),l(hs),l(kl),l(Vl),l(rs),l(Gl),l(_l),l(b),l(Bl),l(Js),l(Wl),l(vl),l(us),l(Rl),l(Xl),l(ws),l(Yl),l(zl),l(gs),l(Ql),l(fs),l(Nl),l(Fl),l(Cs),l(Hl),l($s),l(Al),l(ql),l(Zs),l(El),l(xs),l(Sl),l(Pl),l(Vs),l(Ll),l(Dl),l(_s),l(Kl),l(Ol),l(Ws),l(se),l(te),l(Rs),l(le),l(ee),l(C),l(ae),l(Ys),l(ne),l(zs),l(pe),l(me),l(Ns),l(ce),l(Me),l(Hs),l(ie),l(je),l(he),l(Es),l(ye),l(re),l(Ps),l(oe),l(Je),l(Te),l(Ks),l(ue),l(Ue),l(st),l(we),l(de),l(lt),l(ge),l(fe),l(at),l(be),l(Ce),l(pt),l($e),l(Ie),l(ct),l(Ze),l(xe),l(it),l(ke),l(Ve),l(Ge),l(_e),l(rt),l(Be),l(We),l(Jt),l(ve),l(Re),l(ut),l(Xe),l(Ye),l(wt),l(ze),l(Qe),l(gt),l(Ne),l(Fe),l(He),l(Ct),l(Ae),l($t),l(qe),l(Ee),l(Zt),l(Se),l(Pe),l(kt),l(Le),l(De),l(Gt),l(Ke),l(Oe),l(Bt),l(sa),l(ta),l($),l(la),l(vt),l(ea),l(aa),l(Xt),l(na),l(Yt),l(pa),l(zt),l(ma),l(Qt)),l(T),r(U,s),r(d,s),r(k,s),r(G,s),r(X,s),r(z,s),r(f,s),r(N,s),r(F,s),r(E,s),r(P,s),r(L,s),r(K,s),r(O,s),r(ts,s),r(ns,s),r(ms,s),r(Ms,s),r(js,s),r(ys,s),r(os,s),r(Ts,s),r(Us,s),r(ds,s),r(bs,s),r(Is,s),r(ks,s),r(Gs,s),r(Bs,s),r(vs,s),r(Xs,s),r(Qs,s),r(Fs,s),r(As,s),r(qs,s),r(Ss,s),r(Ls,s),r(Ds,s),r(Os,s),r(tt,s),r(et,s),r(nt,s),r(mt,s),r(Mt,s),r(jt,s),r(ht,s),r(yt,s),r(ot,s),r(Tt,s),r(Ut,s),r(dt,s),r(ft,s),r(bt,s),r(It,s),r(xt,s),r(Vt,s),r(_t,s),r(Wt,s),r(Rt,s)}}}const Rn='{"title":"Text to speech","local":"text-to-speech","sections":[{"title":"Load the dataset","local":"load-the-dataset","sections":[],"depth":2},{"title":"Preprocess the data","local":"preprocess-the-data","sections":[{"title":"Text cleanup for SpeechT5 tokenization","local":"text-cleanup-for-speecht5-tokenization","sections":[],"depth":3},{"title":"Speakers","local":"speakers","sections":[],"depth":3},{"title":"Speaker embeddings","local":"speaker-embeddings","sections":[],"depth":3},{"title":"Processing the dataset","local":"processing-the-dataset","sections":[],"depth":3},{"title":"Data collator","local":"data-collator","sections":[],"depth":3}],"depth":2},{"title":"Train the model","local":"train-the-model","sections":[],"depth":2},{"title":"Inference","local":"inference","sections":[{"title":"Inference with a pipeline","local":"inference-with-a-pipeline","sections":[],"depth":3},{"title":"Run inference manually","local":"run-inference-manually","sections":[],"depth":3}],"depth":2}],"depth":1}';function Xn(Ft){return In(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class An extends xn{constructor(T){super(),kn(this,T,Xn,vn,$n,{})}}export{An as component};
