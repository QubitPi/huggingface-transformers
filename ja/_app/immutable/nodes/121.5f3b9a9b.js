import{s as Cs,o as xs,n as Ot}from"../chunks/scheduler.9bc65507.js";import{S as Js,i as Us,g as s,s as a,r as o,A as js,h as r,f as l,c as i,j as vs,u as m,x as p,k as bs,y as Hs,a as n,v as d,d as c,t as u,w as M}from"../chunks/index.707bf1b6.js";import{T as Kt}from"../chunks/Tip.c2ecdbf4.js";import{C as g}from"../chunks/CodeBlock.54a9f38d.js";import{H as _}from"../chunks/Heading.342b1fa6.js";function As(w){let f,y='複数のGPUを搭載したマシンにアクセスできる場合、これらのアプローチは依然として有効です。さらに、<a href="perf_train_gpu_many">マルチGPUセクション</a>で説明されている追加の方法を活用できます。';return{c(){f=s("p"),f.innerHTML=y},l(h){f=r(h,"P",{"data-svelte-h":!0}),p(f)!=="svelte-1nsl7se"&&(f.innerHTML=y)},m(h,T){n(h,f,T)},p:Ot,d(h){h&&l(f)}}}function Ls(w){let f,y="<strong>注意</strong>: 小さなモデルと大きなバッチサイズを使用する場合、メモリの節約が行われますが、大きなモデルと小さなバッチサイズを使用する場合、メモリの使用量が増加します。";return{c(){f=s("p"),f.innerHTML=y},l(h){f=r(h,"P",{"data-svelte-h":!0}),p(f)!=="svelte-c0dci8"&&(f.innerHTML=y)},m(h,T){n(h,f,T)},p:Ot,d(h){h&&l(f)}}}function Ps(w){let f,y="勾配チェックポイントを使用することでメモリ効率が向上する場合がありますが、トレーニング速度は約20%遅くなることに注意してください。";return{c(){f=s("p"),f.textContent=y},l(h){f=r(h,"P",{"data-svelte-h":!0}),p(f)!=="svelte-ikztn8"&&(f.textContent=y)},m(h,T){n(h,f,T)},p:Ot,d(h){h&&l(f)}}}function Ws(w){let f,y="tf32は<code>tensor.to(dtype=torch.tf32)</code>を介して直接アクセスできません。これは内部のCUDAデータ型です。tf32データ型を使用するには、<code>torch&gt;=1.7</code>が必要です。";return{c(){f=s("p"),f.innerHTML=y},l(h){f=r(h,"P",{"data-svelte-h":!0}),p(f)!=="svelte-1jcfwwr"&&(f.innerHTML=y)},m(h,T){n(h,f,T)},p:Ot,d(h){h&&l(f)}}}function Gs(w){let f,y="PyTorchネイティブの<code>scaled_dot_product_attention</code>演算子は、<code>attention_mask</code>が提供されていない場合にのみFlash Attentionにディスパッチできます。",h,T,b="デフォルトでは、トレーニングモードでBetterTransformer統合はマスクサポートを削除し、バッチトレーニングにパディングマスクが必要ないトレーニングにしか使用できません。これは、例えばマスク言語モデリングや因果言語モデリングのような、バッチトレーニングにパディングマスクが不要なトレーニングの場合に該当します。BetterTransformerはパディングマスクが必要なタスクに対するモデルの微調整には適していません。";return{c(){f=s("p"),f.innerHTML=y,h=a(),T=s("p"),T.textContent=b},l($){f=r($,"P",{"data-svelte-h":!0}),p(f)!=="svelte-jtl7ra"&&(f.innerHTML=y),h=i($),T=r($,"P",{"data-svelte-h":!0}),p(T)!=="svelte-1xmi5y4"&&(T.textContent=b)},m($,v){n($,f,v),n($,h,v),n($,T,v)},p:Ot,d($){$&&(l(f),l(h),l(T))}}}function Zs(w){let f,y,h,T,b,$,v,ja='このガイドでは、メモリの利用効率を最適化し、トレーニングを高速化することで、モデルのトレーニング効率を向上させるために使用できる実用的なテクニックを紹介します。トレーニング中にGPUがどのように利用されるかを理解したい場合は、最初に「<a href="model_memory_anatomy">モデルトレーニングの解剖学</a>」のコンセプトガイドを参照してください。このガイドは実用的なテクニックに焦点を当てています。',el,C,tl,H,Ha="大規模なモデルをトレーニングする際、同時に考慮すべき2つの側面があります：",ll,A,Aa="<li>データのスループット/トレーニング時間</li> <li>モデルのパフォーマンス</li>",nl,L,La="スループット（サンプル/秒）を最大化することは、トレーニングコストを低減させます。これは一般的に、GPUをできるだけ効果的に活用し、GPUメモリを限界まで埋めることによって達成されます。希望するバッチサイズがGPUメモリの制限を超える場合、勾配蓄積などのメモリ最適化テクニックが役立ちます。",al,P,Pa="しかし、好みのバッチサイズがメモリに収まる場合、メモリを最適化するテクニックを適用する理由はありません。大きなバッチサイズを使用できるからといって、それを必ずしも使用すべきではありません。ハイパーパラメータの調整の一環として、どのバッチサイズが最良の結果を生み出すかを決定し、リソースを適切に最適化する必要があります。",il,W,Wa="このガイドでカバーされている方法とツールは、トレーニングプロセスに与える影響に基づいて分類できます：",sl,G,Ga='<thead><tr><th align="left">Method/tool</th> <th align="left">Improves training speed</th> <th align="left">Optimizes memory utilization</th></tr></thead> <tbody><tr><td align="left"><a href="#batch-size-choice">Batch size choice</a></td> <td align="left">Yes</td> <td align="left">Yes</td></tr> <tr><td align="left"><a href="#gradient-accumulation">Gradient accumulation</a></td> <td align="left">No</td> <td align="left">Yes</td></tr> <tr><td align="left"><a href="#gradient-checkpointing">Gradient checkpointing</a></td> <td align="left">No</td> <td align="left">Yes</td></tr> <tr><td align="left"><a href="#mixed-precision-training">Mixed precision training</a></td> <td align="left">Yes</td> <td align="left">(No)</td></tr> <tr><td align="left"><a href="#optimizer-choice">Optimizer choice</a></td> <td align="left">Yes</td> <td align="left">Yes</td></tr> <tr><td align="left"><a href="#data-preloading">Data preloading</a></td> <td align="left">Yes</td> <td align="left">No</td></tr> <tr><td align="left"><a href="#deepspeed-zero">DeepSpeed Zero</a></td> <td align="left">No</td> <td align="left">Yes</td></tr> <tr><td align="left"><a href="#using-torchcompile">torch.compile</a></td> <td align="left">Yes</td> <td align="left">No</td></tr></tbody>',rl,x,pl,Z,Za='これらのテクニックは、<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>でモデルをトレーニングしている場合や、純粋なPyTorchループを記述している場合の両方で利用できます。詳細な最適化の設定については、🤗 Accelerateを使用して<a href="#using--accelerate">これらの最適化を設定できます</a>。',fl,k,ka="これらの方法が十分な利益をもたらさない場合、以下のオプションを検討できます：",ol,Y,Ya='<li><a href="#efficient-software-prebuilds">効率的なソフトウェアプリビルドを備えたカスタムDockerコンテナの作成</a></li> <li><a href="#mixture-of-experts">Mixture of Experts（MoE）を使用するモデルを検討</a></li> <li><a href="#using-pytorch-native-attention">モデルをBetterTransformerに変換して、PyTorchネイティブのアテンションを活用</a></li>',ml,R,Ra='最後に、これらの方法がまだ十分でない場合、A100などのサーバーグレードGPUに切り替えても、さらなる改善が必要かもしれません。これらのアプローチは、マルチGPUセットアップでも有効であり、<a href="perf_train_gpu_many">マルチGPUセクション</a>で説明されている追加の並列化技術を活用できます。',dl,X,cl,B,Xa="最適なパフォーマンスを実現するために、適切なバッチサイズを特定することから始めましょう。2^Nのサイズのバッチサイズと入力/出力ニューロン数を使用することが推奨されています。通常、これは8の倍数ですが、使用するハードウェアとモデルのデータ型に依存することがあります。",ul,z,Ba='参考までに、NVIDIAの<a href="https://docs.nvidia.com/deeplearning/performance/dl-performance-fully-connected/index.html#input-features" rel="nofollow">入力/出力ニューロン数の推奨事項</a>と<a href="https://docs.nvidia.com/deeplearning/performance/dl-performance-fully-connected/index.html#batch-size" rel="nofollow">バッチサイズ</a>を確認してください（これらはGEMM（一般的な行列乗算）に関与します）。',Ml,F,za='<a href="https://docs.nvidia.com/deeplearning/performance/dl-performance-matrix-multiplication/index.html#requirements-tc" rel="nofollow">Tensor Core要件</a>では、データ型とハードウェアに基づいて乗数が定義されています。たとえば、fp16データ型の場合、64の倍数を使用することが推奨されます（A100 GPUの場合を除く）。',hl,I,Fa='小さなパラメータの場合、<a href="https://docs.nvidia.com/deeplearning/performance/dl-performance-matrix-multiplication/index.html#dim-quantization" rel="nofollow">次元量子化効果</a>も考慮してください。これはタイリングが行われ、適切な乗数が大幅な高速化をもたらす場合があります。',Tl,V,_l,E,Ia="<strong>勾配蓄積</strong>メソッドは、GPUのメモリ容量の制約によって課せられる制限を超えた効果的なバッチサイズを実現するために、勾配を小さな増分で計算することを目的としています。このアプローチでは、モデルを順方向および逆方向に小さなバッチで反復的に計算し、その過程で勾配を蓄積します。十分な数の勾配が蓄積されたら、モデルの最適化ステップを実行します。勾配蓄積を使用することで、GPUのメモリ容量による制約を超えて<strong>効果的なバッチサイズ</strong>を増やすことができますが、勾配蓄積によって導入される追加の順方向および逆方向の計算はトレーニングプロセスを遅くする可能性があることに注意が必要です。",yl,q,Va="<code>TrainingArguments</code>に<code>gradient_accumulation_steps</code>引数を追加することで、勾配蓄積を有効にすることができます：",$l,N,gl,Q,Ea="上記の例では、効果的なバッチサイズは4になります。",wl,D,qa='また、トレーニングループを完全に制御するために🤗 Accelerateを使用することもできます。🤗 Accelerateの例は、<a href="#using--accelerate">このガイドの後半にある</a>で見つけることができます。',vl,S,Na="できるだけGPUの使用率を最大限にすることが推奨されていますが、高い勾配蓄積ステップ数はトレーニングの遅延をより顕著にすることがあります。以下の例を考えてみましょう。<code>per_device_train_batch_size=4</code>の場合、勾配蓄積を使用しないとGPUの制限に達します。バッチサイズ64でトレーニングしたい場合、<code>per_device_train_batch_size</code>を1に設定し、<code>gradient_accumulation_steps</code>を64に設定しないでください。代わりに、<code>per_device_train_batch_size=4</code>を保持し、<code>gradient_accumulation_steps=16</code>を設定します。これにより、同じ効果的なバッチサイズが得られ、利用可能なGPUリソースが効果的に活用されます。",bl,K,Qa='詳細な情報については、<a href="https://github.com/huggingface/transformers/issues/14608#issuecomment-1004392537" rel="nofollow">RTX-3090用のバッチサイズと勾配蓄積のベンチマーク</a>および<a href="https://github.com/huggingface/transformers/issues/15026#issuecomment-1005033957" rel="nofollow">A100用のバッチサイズと勾配蓄積のベンチマーク</a>を参照してください。',Cl,O,xl,ee,Da="一部の大きなモデルは、バッチサイズを1に設定し、勾配蓄積を使用している場合でもメモリの問題に直面することがあります。これは、メモリストレージが必要な他のコンポーネントも存在するためです。",Jl,te,Sa="前向きパスからのすべてのアクティベーションを保存して、逆向きパスで勾配を計算すると、かなりのメモリオーバーヘッドが発生します。逆向きパスで必要なときにアクティベーションを破棄して再計算する代替アプローチは、計算オーバーヘッドが大幅に増加し、トレーニングプロセスが遅くなります。",Ul,le,Ka='<strong>勾配チェックポイント</strong>は、これらの2つのアプローチの折衷案を提供し、計算グラフ全体で戦略的に選択されたアクティベーションのみを保存するため、勾配を再計算する必要があるアクティベーションの一部だけを節約します。勾配チェックポイントの詳細については、<a href="https://medium.com/tensorflow/fitting-larger-networks-into-memory-583e3c758ff9" rel="nofollow">この素晴らしい記事</a>を参照してください。',jl,ne,Oa='<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>で勾配チェックポイントを有効にするには、<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a>に対応するフラグを渡します：',Hl,ae,Al,ie,ei='代替手段として、🤗 Accelerateを使用することもできます - 🤗 Accelerateの例は<a href="#using--accelerate">このガイドのさらに後ろにあります</a>。',Ll,J,Pl,se,Wl,re,ti="<strong>混合精度トレーニング</strong>は、モデルのトレーニングの計算効率を最適化する技術で、特定の変数に対して低精度の数値フォーマットを利用します。従来、ほとんどのモデルは変数を表現し処理するために32ビット浮動小数点精度（fp32またはfloat32）を使用しています。しかし、すべての変数が正確な結果を得るためにこの高精度のレベルを必要としない場合があります。一部の変数の精度を16ビット浮動小数点（fp16またはfloat16）などのより低い数値フォーマットに変更することで、計算を高速化できます。このアプローチでは、一部の計算は半精度で行われ、一部はまだ完全な精度で行われるため、このアプローチは混合精度トレーニングと呼ばれています。",Gl,pe,li='最も一般的に混合精度トレーニングは、fp16（float16）データ型を使用して実現されますが、一部のGPUアーキテクチャ（アンペアアーキテクチャなど）ではbf16およびtf32（CUDA内部データ型）データ型も提供されています。これらのデータ型の違いについて詳しく知りたい場合は、<a href="https://developer.nvidia.com/blog/accelerating-ai-training-with-tf32-tensor-cores/" rel="nofollow">NVIDIAのブログ</a>を確認してください。',Zl,fe,kl,oe,ni=`混合精度トレーニングの主な利点は、半精度（fp16）でアクティベーションを保存することから得られます。
勾配も半精度で計算されますが、最適化ステップでは再び完全精度に変換されるため、ここではメモリは保存されません。
混合精度トレーニングは計算速度を向上させる一方、特に小さなバッチサイズの場合、より多くのGPUメモリを使用することがあります。
これは、モデルがGPU上に16ビットおよび32ビット精度の両方で存在するためです（GPU上の元のモデルの1.5倍）。`,Yl,me,ai="混合精度トレーニングを有効にするには、<code>fp16</code>フラグを<code>True</code>に設定します：",Rl,de,Xl,ce,ii='🤗 Accelerateを使用する場合、🤗 Accelerateの例は<a href="#using--accelerate">このガイドのさらに後ろにあります</a>。',Bl,ue,zl,Me,si="Ampereまたはそれ以降のハードウェアにアクセスできる場合、混合精度トレーニングと評価にbf16を使用できます。bf16はfp16よりも精度が劣りますが、はるかに大きな動的範囲を持っています。fp16では、持つことができる最大の数は <code>65535</code> であり、それを超える数値はオーバーフローを引き起こします。一方、bf16の数値は <code>3.39e+38</code> のように大きく、これはfp32とほぼ同じです - どちらも数値範囲に8ビットを使用しているためです。",Fl,he,ri="BF16を有効にするには、🤗 Trainerで以下のように設定します：",Il,Te,Vl,_e,El,ye,pi="アンペアハードウェアは、tf32という特別なデータ型を使用します。これは、fp32と同じ数値範囲（8ビット）を持っていますが、23ビットの精度ではなく、10ビットの精度（fp16と同じ）を持ち、合計で19ビットしか使用しません。これは通常のfp32トレーニングおよび推論コードを使用し、tf32サポートを有効にすることで、最大3倍のスループットの向上が得られる点で「魔法のよう」です。行う必要があるのは、次のコードを追加するだけです：",ql,$e,Nl,ge,fi="使用されているGPUがアンペアシリーズであると仮定し、CUDAは可能な限りtf32を使用するように自動的に切り替えます。",Ql,we,oi='<a href="https://developer.nvidia.com/blog/accelerating-ai-training-with-tf32-tensor-cores/" rel="nofollow">NVIDIAの研究によれば</a>、ほとんどの機械学習トレーニングワークロードはtf32トレーニングとfp32トレーニングで同じ難解度と収束を示します。すでにfp16またはbf16混合精度を使用している場合、スループットの向上に役立つこともあります。',Dl,ve,mi="🤗 Trainerでこのモードを有効にすることができます：",Sl,be,Kl,U,Ol,Ce,di=`tf32と他の精度に関する詳細な情報については、以下のベンチマークを参照してください：
<a href="https://github.com/huggingface/transformers/issues/14608#issuecomment-1004390803" rel="nofollow">RTX-3090</a>および
<a href="https://github.com/huggingface/transformers/issues/15026#issuecomment-1004543189" rel="nofollow">A100</a>。`,en,xe,tn,Je,ci='transformersでFlash Attention 2統合を使用することで、トレーニングのスループットを向上させることができます。Flash Attention 2モジュールを含むモデルの読み込み方法については、<a href="./perf_infer_gpu_one#Flash-Attention-2">single GPU section</a>の適切なセクションを確認して詳細を学びましょう。',ln,Ue,nn,je,ui='Transformerモデルをトレーニングするために最も一般的に使用されるオプティマイザはAdamまたはAdamW（重み減衰を伴うAdam）です。Adamは前回の勾配の移動平均を保存することで収束を達成しますが、モデルパラメータの数のオーダーの追加メモリフットプリントを追加します。これを解消するために、代替オプティマイザを使用できます。たとえば、<a href="https://github.com/NVIDIA/apex" rel="nofollow">NVIDIA/apex</a>がインストールされている場合、<code>adamw_apex_fused</code>はすべてのサポートされているAdamWオプティマイザの中で最も高速なトレーニング体験を提供します。',an,He,Mi='<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>は、直接使用できるさまざまなオプティマイザを統合しており、<code>adamw_hf</code>、<code>adamw_torch</code>、<code>adamw_torch_fused</code>、<code>adamw_apex_fused</code>、<code>adamw_anyprecision</code>、<code>adafactor</code>、または<code>adamw_bnb_8bit</code>が含まれています。サードパーティの実装を介してさらに多くのオプティマイザを追加できます。',sn,Ae,hi="AdamWオプティマイザの代替手段について詳しく見てみましょう：",rn,Le,Ti='<li><a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>で使用可能な<code>adafactor</code></li> <li>Trainerで使用可能な<code>adamw_bnb_8bit</code>は、デモンストレーション用に以下でサードパーティの統合が提供されています。</li>',pn,Pe,_i="比較のため、3Bパラメータモデル（例：「google-t5/t5-3b」）の場合：",fn,We,yi="<li>標準のAdamWオプティマイザは、各パラメータに8バイトを使用するため、24GBのGPUメモリが必要です（8 * 3 =&gt; 24GB）。</li> <li>Adafactorオプティマイザは12GB以上必要です。各パラメータにわずか4バイト以上を使用するため、4 * 3と少し余分になります。</li> <li>8ビットのBNB量子化オプティマイザは、すべてのオプティマイザの状態が量子化されている場合、わずか6GBしか使用しません。</li>",on,Ge,mn,Ze,$i="Adafactorは、重み行列の各要素のために前回の平均を保存しません。代わりに、（行ごとと列ごとの平均の合計など）集",dn,ke,cn,Ye,gi="他のアプローチ（勾配蓄積、勾配チェックポイント、混合精度トレーニング）と組み合わせることで、スループットを維持しながら最大3倍の向上が見られることがあります！ただし、前述のように、Adafactorの収束性はAdamよりも悪いことがあります。",un,Re,Mn,Xe,wi="Adafactorのようにオプティマイザの状態を集約する代わりに、8ビットのAdamは完全な状態を保持し、それを量子化します。量子化とは、状態を低い精度で保存し、最適化のためだけに非量子化することを意味します。これは混合精度トレーニングの背後にあるアイデアと似ています。",hn,Be,vi='<code>adamw_bnb_8bit</code>を使用するには、単に<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a>で<code>optim=&quot;adamw_bnb_8bit&quot;</code>を設定するだけです：',Tn,ze,_n,Fe,bi="ただし、デモンストレーション目的で8ビットオプティマイザをサードパーティの実装を使用することもできます。これを統合する方法を確認するためです。",yn,Ie,Ci='まず、8ビットAdamオプティマイザを実装した<code>bitsandbytes</code>ライブラリをインストールするために、GitHub <a href="https://github.com/TimDettmers/bitsandbytes" rel="nofollow">リポジトリ</a>内のインストールガイドに従ってください。',$n,Ve,xi="次に、オプティマイザを初期化する必要があります。これには2つのステップが含まれます：",gn,Ee,Ji="<li>まず、モデルのパラメータを2つのグループに分けます - 重み減衰を適用するべきグループと、適用すべきでないグループです。通常、バイアスとレイヤー正規化パラメータは重み減衰されません。</li> <li>次に、以前に使用したAdamWオプティマイザと同じパラメータを使用するために、いくつかの引数の調整を行います。</li>",wn,qe,vn,Ne,Ui="最後に、カスタムオプティマイザを<code>Trainer</code>に引数として渡します：",bn,Qe,Cn,De,ji="他のアプローチ（勾配蓄積、勾配チェックポイント、混合精度トレーニング）と組み合わせることで、Adafactorの使用と同等以上の3倍のメモリ改善およびわずかに高いスループットを期待できます。",xn,Se,Jn,Ke,Hi='pytorch-nightlyは、多くの小さな特徴テンソルがある状況のオプティマイザを大幅に高速化するはずの<code>torch.optim._multi_tensor</code>を導入しました。これは最終的にはデフォルトになるはずですが、それを早く試してみたい場合は、このGitHub <a href="https://github.com/huggingface/transformers/issues/9965" rel="nofollow">issue</a>をご覧ください。',Un,Oe,jn,et,Ai="優れたトレーニング速度に到達するための重要な要件の1つは、GPUが処理できる最大速度でデータを供給できる能力です。デフォルトではすべてがメインプロセスで行われ、データをディスクから十分速く読み取ることができない場合、GPUのアンダーユーティリゼーションを引き起こすボトルネックが発生する可能性があります。ボトルネックを減らすために、以下の引数を設定します：",Hn,tt,Li="<li><code>DataLoader(pin_memory=True, ...)</code> - データをCPUのピンメモリに事前読み込みし、通常、CPUからGPUメモリへの転送がはるかに高速化されます。</li> <li><code>DataLoader(num_workers=4, ...)</code> - データをより速く事前読み込みするために複数のワーカーを生成します。トレーニング中にGPUの利用状況の統計情報を確認し、100％から遠い場合、ワーカーの数を増やす実験を行ってください。もちろん、問題は他の場所にあるかもしれませんので、多くのワーカーが必ずしも性能向上につながるわけではありません。</li>",An,lt,Pi='<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>を使用する場合、対応する<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a>は<code>dataloader_pin_memory</code>（デフォルトでは<code>True</code>）および<code>dataloader_num_workers</code>（デフォルトは<code>0</code>）です。',Ln,nt,Pn,at,Wi=`DeepSpeedは、🤗 Transformersと🤗 Accelerateと統合されたオープンソースのディープラーニング最適化ライブラリです。
大規模なディープラーニングトレーニングの効率とスケーラビリティを向上させるために設計されたさまざまな機能と最適化を提供します。`,Wn,it,Gi='モデルが単一のGPUに収まり、小さなバッチサイズを収めるスペースがある場合、DeepSpeedを使用する必要はありません。それはむしろ遅くなります。ただし、モデルが単一のGPUに収まらない場合、または小さなバッチを収めることができない場合、DeepSpeed ZeRO + CPU OffloadまたはNVMe Offloadを利用できます。この場合、<a href="main_classes/deepspeed#installation">ライブラリを別途インストール</a>し、設定ファイルを作成し、DeepSpeedを起動するためのガイドをフォローする必要があります：',Gn,st,Zi='<li><a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>とのDeepSpeed統合の詳細ガイドについては、<a href="main_classes/deepspeed">該当するドキュメンテーション</a>を確認してください。特に、<a href="main_classes/deepspeed#deployment-with-one-gpu">単一GPU用のデプロイメント</a>に関するセクションです。DeepSpeedをノートブックで使用するにはいくつかの調整が必要ですので、<a href="main_classes/deepspeed#deployment-in-notebooks">該当するガイド</a>もご覧ください。</li> <li>🤗 Accelerateを使用する場合は、<a href="https://huggingface.co/docs/accelerate/en/usage_guides/deepspeed" rel="nofollow">🤗 Accelerate DeepSpeedガイド</a>を参照してください。</li>',Zn,rt,kn,pt,ki="PyTorch 2.0は新しいコンパイル関数を導入しました。これは既存のPyTorchコードを変更する必要はありませんが、1行のコードを追加することでコードを最適化できます：<code>model = torch.compile(model)</code>。",Yn,ft,Yi='<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>を使用する場合、<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a>内の<code>torch_compile</code>オプションを渡すだけです：',Rn,ot,Xn,mt,Ri=`<code>torch.compile</code>は、既存のPyTorchプログラムからグラフを自動的に作成するためにPythonのフレーム評価APIを使用します。グラフをキャプチャした後、異なるバックエンドを展開して最適化されたエンジンに変換できます。
詳細およびベンチマークについては、<a href="https://pytorch.org/get-started/pytorch-2.0/" rel="nofollow">PyTorchドキュメント</a>を参照してください。`,Bn,dt,Xi="<code>torch.compile</code>には、オプションの依存関係を持つ成長中のバックエンドのリストがあり、<code>torchdynamo.list_backends()</code>を呼び出して確認できます。最も一般的に使用される一部のバックエンドは次のとおりです。",zn,ct,Bi="<strong>デバッグ用バックエンド</strong>：",Fn,ut,zi="<li><code>dynamo.optimize(&quot;eager&quot;)</code> - 抽出されたGraphModuleを実行するためにPyTorchを使用します。これはTorchDynamoの問題をデバッグする際に非常に役立ちます。</li> <li><code>dynamo.optimize(&quot;aot_eager&quot;)</code> - コンパイラーを使用しないAotAutogradを使用してAotAutogradの抽出されたフォワードおよびバックワードグラフに対して単にPyTorch eagerを使用します。これはデバッグに役立ち、高速化は期待できません。</li>",In,Mt,Fi="<strong>トレーニングおよび推論バックエンド</strong>：",Vn,ht,Ii='<li><code>dynamo.optimize(&quot;inductor&quot;)</code> - TorchInductorバックエンドを使用し、AotAutogradおよびcudagraphsを活用してコード生成されたTritonカーネルを使用します <a href="https://dev-discuss.pytorch.org/t/torchinductor-a-pytorch-native-compiler-with-define-by-run-ir-and-symbolic-shapes/747" rel="nofollow">詳細はこちら</a></li> <li><code>dynamo.optimize(&quot;nvfuser&quot;)</code> -  nvFuser with TorchScriptを使用します。 <a href="https://dev-discuss.pytorch.org/t/tracing-with-primitives-update-1-nvfuser-and-its-primitives/593" rel="nofollow">詳細はこちら</a></li> <li><code>dynamo.optimize(&quot;aot_nvfuser&quot;)</code> -  nvFuser with AotAutogradを使用します。 <a href="https://dev-discuss.pytorch.org/t/tracing-with-primitives-update-1-nvfuser-and-its-primitives/593" rel="nofollow">詳細はこちら</a></li> <li><code>dynamo.optimize(&quot;aot_cudagraphs&quot;)</code> - AotAutogradを使用してcudagraphsを使用します。 <a href="https://github.com/pytorch/torchdynamo/pull/757" rel="nofollow">詳細はこちら</a></li>',En,Tt,Vi="<strong>推論専用バックエンド</strong>：",qn,_t,Ei='<li><code>dynamo.optimize(&quot;ofi&quot;)</code> - Torchscriptの<code>optimize_for_inference</code>を使用します。 <a href="https://pytorch.org/docs/stable/generated/torch.jit.optimize_for_inference.html" rel="nofollow">詳細はこちら</a></li> <li><code>dynamo.optimize(&quot;fx2trt&quot;)</code> - Nvidia TensorRTを使用した推論の最適化にNvidia TensorRTを使用します。 <a href="https://pytorch.org/TensorRT/tutorials/getting_started_with_fx_path.html" rel="nofollow">詳細はこちら</a></li> <li><code>dynamo.optimize(&quot;onnxrt&quot;)</code> - CPU/GPUでの推論にONNX Runtimeを使用します。 <a href="https://onnxruntime.ai/" rel="nofollow">詳細はこちら</a></li> <li><code>dynamo.optimize(&quot;ipex&quot;)</code> - CPUでの推論にIPEXを使用します。 <a href="https://github.com/intel/intel-extension-for-pytorch" rel="nofollow">詳細はこちら</a></li>',Nn,yt,qi='🤗 Transformersを使用した<code>torch.compile</code>の使用例については、この<a href="https://www.philschmid.de/getting-started-pytorch-2-0-transformers" rel="nofollow">ブログ記事</a>をご覧ください。',Qn,$t,Dn,gt,Ni='<a href="https://huggingface.co/docs/accelerate/index" rel="nofollow">🤗 Accelerate</a>を使用すると、上記の方法を使用しながらトレーニングループを完全に制御でき、基本的には純粋なPyTorchでループを書くことができます。',Sn,wt,Qi='次に、<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a>内で方法を組み合わせた場合を想',Kn,vt,On,bt,Di="🤗 Accelerateを使用した完全なトレーニングループの例は、ほんの数行のコードです：",ea,Ct,ta,xt,Si=`まず、データセットを<a href="https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader" rel="nofollow"><code>DataLoader</code></a>でラップします。
次に、モデルの<a href="/docs/transformers/main/ja/main_classes/model#transformers.PreTrainedModel.gradient_checkpointing_enable">gradient_checkpointing_enable()</a>メソッドを呼び出すことで勾配チェックポイントを有効にできます。
<a href="https://huggingface.co/docs/accelerate/package_reference/accelerator#accelerate.Accelerator" rel="nofollow"><code>Accelerator</code></a>を初期化する際に、混合精度トレーニングを使用するかどうかを<a href="https://huggingface.co/docs/accelerate/package_reference/accelerator#accelerate.Accelerator.prepare" rel="nofollow"><code>prepare</code></a>の呼び出しで指定し、複数のGPUを使用する場合、<code>prepare</code>の間にデータローダーもワーカー間で分散されます。同じ<a href="#8-bit-adam">8ビットオプティマイザ</a>を前の例から使用します。`,la,Jt,Ki="最後に、主要なトレーニングループを追加できます。<code>backward</code>の呼び出しは🤗 Accelerateによって処理されることに注意してください。また、勾配の蓄積がどのように機能するかも確認できます。損失を正規化しているため、蓄積の最後に平均を得て、十分なステップがあると最適化が実行されます。",na,Ut,Oi='これらの最適化技術を🤗 Accelerateを使用して実装するのは、わずかなコード行で行うことができ、トレーニングループの柔軟性が向上します。すべての機能の詳細については、<a href="https://huggingface.co/docs/accelerate/index" rel="nofollow">Accelerateのドキュメント</a>を参照してください。',aa,jt,ia,Ht,es='PyTorchの<a href="https://pytorch.org/get-started/locally/#start-locally" rel="nofollow">pipとcondaビルド</a>は、PyTorchを実行するのに十分なcudaツールキットで事前にビルドされていますが、cuda拡張をビルドする必要がある場合には不十分です。',sa,At,ts=`時折、追加の努力が必要な場合があります。たとえば、事前にコンパイルされていない<code>apex</code>などのライブラリを使用している場合です。また、システム全体で適切なcudaツールキットをインストールする方法を見つけることが難しい場合もあります。
これらのシナリオに対処するために、PyTorchとNVIDIAはcuda拡張がすでに事前にビルドされているNGC dockerコンテナの新しいバージョンをリリースしました。プログラムをインストールするだけで、そのまま実行できます。`,ra,Lt,ls=`このアプローチは、PyTorchのソースを調整したり、新しいカスタマイズされたビルドを作成したりしたい場合にも役立ちます。
欲しいdockerイメージバージョンを見つけるには、まず<a href="https://docs.nvidia.com/deeplearning/frameworks/pytorch-release-notes/" rel="nofollow">PyTorchのリリースノート</a>から始め、最新の月次リリースのいずれかを選択します。希望のリリースのリリースノートに移動し、環境のコンポーネントが必要なものと一致していることを確認します（NVIDIA Driverの要件も含む！）、その文書の一番上に行き、対応するNGCページに移動します。なぜかわからない場合は、<a href="https://ngc.nvidia.com/catalog/containers/nvidia:pytorch" rel="nofollow">すべてのPyTorch NGCイメージのインデックス</a>です。`,pa,Pt,ns="次に、dockerイメージをダウンロードして展開する手順に従います。",fa,Wt,oa,Gt,as="最近の論文によれば、Transformerモデルに専門家の混合（MoE）を統合することで、トレーニング速度が4〜5倍向上し、推論も高速化されることが報告されています。",ma,Zt,is="より多くのパラメータがより良いパフォーマンスにつながることがわかっているため、この技術はトレーニングコストを増やすことなくパラメータの数を桁違いに増やすことを可能にします。",da,kt,ss="このアプローチでは、他のFFN層の代わりにMoE層が配置され、各専門家をトークンの位置に応じてバランスよくトレーニングするゲート関数で構成されます。",ca,Yt,rs='<img src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/perf-moe-transformer.png" alt="MoE Transformer 2x block"/>',ua,Rt,ps='（出典: <a href="https://ai.googleblog.com/2021/12/more-efficient-in-context-learning-with.html" rel="nofollow">GLAM</a>）',Ma,Xt,fs="このアプローチの主な欠点は、GPUメモリをほぼ桁違いに多く必要とすることです。メモリ要件がはるかに大きいことがそのまま反映されます。より高いメモリ要件を克服する方法については、さまざまな蒸留およびアプローチが提案されています。",ha,Bt,os="ただし、直接のトレードオフがあります。数人の専門家を使用してベースモデルを2〜3倍小さくすることで、5倍小さなモデルにし、トレーニング速度を適度に向上させ、メモリ要件を適度に増やすことができます。",Ta,zt,ms="関連するほとんどの論文および実装はTensorflow/TPUを中心に構築されています。",_a,Ft,ds='<li><a href="https://arxiv.org/abs/2006.16668" rel="nofollow">GShard: Conditional Computation and Automatic Shardingを活用した巨大モデルのスケーリング</a></li> <li><a href="https://arxiv.org/abs/2101.03961" rel="nofollow">Switch Transformers: シンプルで効率的なスパース性を備えたトリリオンパラメータモデルへのスケーリング</a></li> <li><a href="https://ai.googleblog.com/2021/12/more-efficient-in-context-learning-with.html" rel="nofollow">GLaM: Generalist Language Model (GLaM)</a></li>',ya,It,cs='PytorchにはDeepSpeedが構築したものもあります: <a href="https://arxiv.org/abs/2201.05596" rel="nofollow">DeepSpeed-MoE: Advancing Mixture-of-Experts Inference and Training to Power Next-Generation AI Scale</a>、<a href="https://www.deepspeed.ai/tutorials/mixture-of-experts/" rel="nofollow">Mixture of Experts</a> - ブログ記事: <a href="https://www.microsoft.com/en-us/research/blog/deepspeed-powers-8x-larger-moe-model-training-with-high-performance/" rel="nofollow">1</a>、<a href="https://www.microsoft.com/en-us/research/publication/scalable-and-efficient-moe-training-for-multitask-multilingual-models/" rel="nofollow">2</a>、大規模なTransformerベースの自然言語生成モデルの具体的な展開については、<a href="https://www.deepspeed.ai/2021/12/09/deepspeed-moe-nlg.html" rel="nofollow">ブログ記事</a>、<a href="https://github.com/microsoft/Megatron-DeepSpeed/tree/moe-training" rel="nofollow">Megatron-Deepspeedブランチ</a>を参照してください。',$a,Vt,ga,Et,us='PyTorch 2.0では、ネイティブの<a href="https://pytorch.org/docs/master/generated/torch.nn.functional.scaled_dot_product_attention.html" rel="nofollow"><code>torch.nn.functional.scaled_dot_product_attention</code></a>（SDPA）がリリースされ、<a href="https://arxiv.org/abs/2112.05682" rel="nofollow">メモリ効率の高いアテンション</a>や<a href="https://arxiv.org/abs/2205.14135" rel="nofollow">フラッシュアテンション</a>などの融合されたGPUカーネルの使用を可能にします。',wa,qt,Ms='<a href="https://github.com/huggingface/optimum" rel="nofollow"><code>optimum</code></a>パッケージをインストールした後、関連する内部モジュールを置き換えて、PyTorchのネイティブアテンションを使用できます。以下のように設定します：',va,Nt,ba,Qt,hs="変換後、通常通りモデルをトレーニングしてください。",Ca,j,xa,Dt,Ts='SDPAを使用したアクセラレーションとメモリの節約について詳しく知りたい場合は、この<a href="https://pytorch.org/blog/out-of-the-box-acceleration/" rel="nofollow">ブログ記事</a>をチェックしてください。',Ja,St,Ua;return b=new _({props:{title:"Methods and tools for efficient training on a single GPU",local:"methods-and-tools-for-efficient-training-on-a-single-gpu",headingTag:"h1"}}),C=new Kt({props:{$$slots:{default:[As]},$$scope:{ctx:w}}}),x=new Kt({props:{$$slots:{default:[Ls]},$$scope:{ctx:w}}}),X=new _({props:{title:"Batch size choice",local:"batch-size-choice",headingTag:"h2"}}),V=new _({props:{title:"Gradient Accumulation",local:"gradient-accumulation",headingTag:"h2"}}),N=new g({props:{code:"dHJhaW5pbmdfYXJncyUyMCUzRCUyMFRyYWluaW5nQXJndW1lbnRzKHBlcl9kZXZpY2VfdHJhaW5fYmF0Y2hfc2l6ZSUzRDElMkMlMjBncmFkaWVudF9hY2N1bXVsYXRpb25fc3RlcHMlM0Q0JTJDJTIwKipkZWZhdWx0X2FyZ3Mp",highlighted:'training_args = TrainingArguments(per_device_train_batch_size=<span class="hljs-number">1</span>, gradient_accumulation_steps=<span class="hljs-number">4</span>, **default_args)',wrap:!1}}),O=new _({props:{title:"Gradient Checkpointing",local:"gradient-checkpointing",headingTag:"h2"}}),ae=new g({props:{code:"dHJhaW5pbmdfYXJncyUyMCUzRCUyMFRyYWluaW5nQXJndW1lbnRzKCUwQSUyMCUyMCUyMCUyMHBlcl9kZXZpY2VfdHJhaW5fYmF0Y2hfc2l6ZSUzRDElMkMlMjBncmFkaWVudF9hY2N1bXVsYXRpb25fc3RlcHMlM0Q0JTJDJTIwZ3JhZGllbnRfY2hlY2twb2ludGluZyUzRFRydWUlMkMlMjAqKmRlZmF1bHRfYXJncyUwQSk=",highlighted:`training_args = TrainingArguments(
    per_device_train_batch_size=<span class="hljs-number">1</span>, gradient_accumulation_steps=<span class="hljs-number">4</span>, gradient_checkpointing=<span class="hljs-literal">True</span>, **default_args
)`,wrap:!1}}),J=new Kt({props:{$$slots:{default:[Ps]},$$scope:{ctx:w}}}),se=new _({props:{title:"Mixed precision training",local:"mixed-precision-training",headingTag:"h2"}}),fe=new _({props:{title:"fp16",local:"fp16",headingTag:"h3"}}),de=new g({props:{code:"dHJhaW5pbmdfYXJncyUyMCUzRCUyMFRyYWluaW5nQXJndW1lbnRzKHBlcl9kZXZpY2VfdHJhaW5fYmF0Y2hfc2l6ZSUzRDQlMkMlMjBmcDE2JTNEVHJ1ZSUyQyUyMCoqZGVmYXVsdF9hcmdzKQ==",highlighted:'training_args = TrainingArguments(per_device_train_batch_size=<span class="hljs-number">4</span>, fp16=<span class="hljs-literal">True</span>, **default_args)',wrap:!1}}),ue=new _({props:{title:"BF16",local:"bf16",headingTag:"h3"}}),Te=new g({props:{code:"dHJhaW5pbmdfYXJncyUyMCUzRCUyMFRyYWluaW5nQXJndW1lbnRzKGJmMTYlM0RUcnVlJTJDJTIwKipkZWZhdWx0X2FyZ3Mp",highlighted:'training_args = TrainingArguments(bf16=<span class="hljs-literal">True</span>, **default_args)',wrap:!1}}),_e=new _({props:{title:"TF32",local:"tf32",headingTag:"h3"}}),$e=new g({props:{code:"aW1wb3J0JTIwdG9yY2glMEF0b3JjaC5iYWNrZW5kcy5jdWRhLm1hdG11bC5hbGxvd190ZjMyJTIwJTNEJTIwVHJ1ZSUwQXRvcmNoLmJhY2tlbmRzLmN1ZG5uLmFsbG93X3RmMzIlMjAlM0QlMjBUcnVl",highlighted:`<span class="hljs-keyword">import</span> torch
torch.backends.cuda.matmul.allow_tf32 = <span class="hljs-literal">True</span>
torch.backends.cudnn.allow_tf32 = <span class="hljs-literal">True</span>`,wrap:!1}}),be=new g({props:{code:"VHJhaW5pbmdBcmd1bWVudHModGYzMiUzRFRydWUlMkMlMjAqKmRlZmF1bHRfYXJncyk=",highlighted:'TrainingArguments(tf32=<span class="hljs-literal">True</span>, **default_args)',wrap:!1}}),U=new Kt({props:{$$slots:{default:[Ws]},$$scope:{ctx:w}}}),xe=new _({props:{title:"Flash Attention 2",local:"flash-attention-2",headingTag:"h2"}}),Ue=new _({props:{title:"オプティマイザの選択",local:"オプティマイザの選択",headingTag:"h2"}}),Ge=new _({props:{title:"Adafactor",local:"adafactor",headingTag:"h3"}}),ke=new g({props:{code:"dHJhaW5pbmdfYXJncyUyMCUzRCUyMFRyYWluaW5nQXJndW1lbnRzKHBlcl9kZXZpY2VfdHJhaW5fYmF0Y2hfc2l6ZSUzRDQlMkMlMjBvcHRpbSUzRCUyMmFkYWZhY3RvciUyMiUyQyUyMCoqZGVmYXVsdF9hcmdzKQ==",highlighted:'training_args = TrainingArguments(per_device_train_batch_size=<span class="hljs-number">4</span>, optim=<span class="hljs-string">&quot;adafactor&quot;</span>, **default_args)',wrap:!1}}),Re=new _({props:{title:"8ビット Adam",local:"8ビット-adam",headingTag:"h3"}}),ze=new g({props:{code:"dHJhaW5pbmdfYXJncyUyMCUzRCUyMFRyYWluaW5nQXJndW1lbnRzKHBlcl9kZXZpY2VfdHJhaW5fYmF0Y2hfc2l6ZSUzRDQlMkMlMjBvcHRpbSUzRCUyMmFkYW13X2JuYl84Yml0JTIyJTJDJTIwKipkZWZhdWx0X2FyZ3Mp",highlighted:'training_args = TrainingArguments(per_device_train_batch_size=<span class="hljs-number">4</span>, optim=<span class="hljs-string">&quot;adamw_bnb_8bit&quot;</span>, **default_args)',wrap:!1}}),qe=new g({props:{code:"aW1wb3J0JTIwYml0c2FuZGJ5dGVzJTIwYXMlMjBibmIlMEFmcm9tJTIwdG9yY2glMjBpbXBvcnQlMjBubiUwQWZyb20lMjB0cmFuc2Zvcm1lcnMudHJhaW5lcl9wdF91dGlscyUyMGltcG9ydCUyMGdldF9wYXJhbWV0ZXJfbmFtZXMlMEElMEF0cmFpbmluZ19hcmdzJTIwJTNEJTIwVHJhaW5pbmdBcmd1bWVudHMocGVyX2RldmljZV90cmFpbl9iYXRjaF9zaXplJTNENCUyQyUyMCoqZGVmYXVsdF9hcmdzKSUwQSUwQWRlY2F5X3BhcmFtZXRlcnMlMjAlM0QlMjBnZXRfcGFyYW1ldGVyX25hbWVzKG1vZGVsJTJDJTIwJTVCbm4uTGF5ZXJOb3JtJTVEKSUwQWRlY2F5X3BhcmFtZXRlcnMlMjAlM0QlMjAlNUJuYW1lJTIwZm9yJTIwbmFtZSUyMGluJTIwZGVjYXlfcGFyYW1ldGVycyUyMGlmJTIwJTIyYmlhcyUyMiUyMG5vdCUyMGluJTIwbmFtZSU1RCUwQW9wdGltaXplcl9ncm91cGVkX3BhcmFtZXRlcnMlMjAlM0QlMjAlNUIlMEElMjAlMjAlMjAlMjAlN0IlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjJwYXJhbXMlMjIlM0ElMjAlNUJwJTIwZm9yJTIwbiUyQyUyMHAlMjBpbiUyMG1vZGVsLm5hbWVkX3BhcmFtZXRlcnMoKSUyMGlmJTIwbiUyMGluJTIwZGVjYXlfcGFyYW1ldGVycyU1RCUyQyUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMndlaWdodF9kZWNheSUyMiUzQSUyMHRyYWluaW5nX2FyZ3Mud2VpZ2h0X2RlY2F5JTJDJTBBJTIwJTIwJTIwJTIwJTdEJTJDJTBBJTIwJTIwJTIwJTIwJTdCJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIycGFyYW1zJTIyJTNBJTIwJTVCcCUyMGZvciUyMG4lMkMlMjBwJTIwaW4lMjBtb2RlbC5uYW1lZF9wYXJhbWV0ZXJzKCklMjBpZiUyMG4lMjBub3QlMjBpbiUyMGRlY2F5X3BhcmFtZXRlcnMlNUQlMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjJ3ZWlnaHRfZGVjYXklMjIlM0ElMjAwLjAlMkMlMEElMjAlMjAlMjAlMjAlN0QlMkMlMEElNUQlMEElMEFvcHRpbWl6ZXJfa3dhcmdzJTIwJTNEJTIwJTdCJTBBJTIwJTIwJTIwJTIwJTIyYmV0YXMlMjIlM0ElMjAodHJhaW5pbmdfYXJncy5hZGFtX2JldGExJTJDJTIwdHJhaW5pbmdfYXJncy5hZGFtX2JldGEyKSUyQyUwQSUyMCUyMCUyMCUyMCUyMmVwcyUyMiUzQSUyMHRyYWluaW5nX2FyZ3MuYWRhbV9lcHNpbG9uJTJDJTBBJTdEJTBBb3B0aW1pemVyX2t3YXJncyU1QiUyMmxyJTIyJTVEJTIwJTNEJTIwdHJhaW5pbmdfYXJncy5sZWFybmluZ19yYXRlJTBBYWRhbV9ibmJfb3B0aW0lMjAlM0QlMjBibmIub3B0aW0uQWRhbThiaXQoJTBBJTIwJTIwJTIwJTIwb3B0aW1pemVyX2dyb3VwZWRfcGFyYW1ldGVycyUyQyUwQSUyMCUyMCUyMCUyMGJldGFzJTNEKHRyYWluaW5nX2FyZ3MuYWRhbV9iZXRhMSUyQyUyMHRyYWluaW5nX2FyZ3MuYWRhbV9iZXRhMiklMkMlMEElMjAlMjAlMjAlMjBlcHMlM0R0cmFpbmluZ19hcmdzLmFkYW1fZXBzaWxvbiUyQyUwQSUyMCUyMCUyMCUyMGxyJTNEdHJhaW5pbmdfYXJncy5sZWFybmluZ19yYXRlJTJDJTBBKQ==",highlighted:`<span class="hljs-keyword">import</span> bitsandbytes <span class="hljs-keyword">as</span> bnb
<span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn
<span class="hljs-keyword">from</span> transformers.trainer_pt_utils <span class="hljs-keyword">import</span> get_parameter_names

training_args = TrainingArguments(per_device_train_batch_size=<span class="hljs-number">4</span>, **default_args)

decay_parameters = get_parameter_names(model, [nn.LayerNorm])
decay_parameters = [name <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> decay_parameters <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;bias&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> name]
optimizer_grouped_parameters = [
    {
        <span class="hljs-string">&quot;params&quot;</span>: [p <span class="hljs-keyword">for</span> n, p <span class="hljs-keyword">in</span> model.named_parameters() <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> decay_parameters],
        <span class="hljs-string">&quot;weight_decay&quot;</span>: training_args.weight_decay,
    },
    {
        <span class="hljs-string">&quot;params&quot;</span>: [p <span class="hljs-keyword">for</span> n, p <span class="hljs-keyword">in</span> model.named_parameters() <span class="hljs-keyword">if</span> n <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> decay_parameters],
        <span class="hljs-string">&quot;weight_decay&quot;</span>: <span class="hljs-number">0.0</span>,
    },
]

optimizer_kwargs = {
    <span class="hljs-string">&quot;betas&quot;</span>: (training_args.adam_beta1, training_args.adam_beta2),
    <span class="hljs-string">&quot;eps&quot;</span>: training_args.adam_epsilon,
}
optimizer_kwargs[<span class="hljs-string">&quot;lr&quot;</span>] = training_args.learning_rate
adam_bnb_optim = bnb.optim.Adam8bit(
    optimizer_grouped_parameters,
    betas=(training_args.adam_beta1, training_args.adam_beta2),
    eps=training_args.adam_epsilon,
    lr=training_args.learning_rate,
)`,wrap:!1}}),Qe=new g({props:{code:"dHJhaW5lciUyMCUzRCUyMFRyYWluZXIobW9kZWwlM0Rtb2RlbCUyQyUyMGFyZ3MlM0R0cmFpbmluZ19hcmdzJTJDJTIwdHJhaW5fZGF0YXNldCUzRGRzJTJDJTIwb3B0aW1pemVycyUzRChhZGFtX2JuYl9vcHRpbSUyQyUyME5vbmUpKQ==",highlighted:'trainer = Trainer(model=model, args=training_args, train_dataset=ds, optimizers=(adam_bnb_optim, <span class="hljs-literal">None</span>))',wrap:!1}}),Se=new _({props:{title:"multi_tensor",local:"multitensor",headingTag:"h3"}}),Oe=new _({props:{title:"データの事前読み込み",local:"データの事前読み込み",headingTag:"h2"}}),nt=new _({props:{title:"DeepSpeed ZeRO",local:"deepspeed-zero",headingTag:"h2"}}),rt=new _({props:{title:"torch.compileの使用",local:"torchcompileの使用",headingTag:"h2"}}),ot=new g({props:{code:"dHJhaW5pbmdfYXJncyUyMCUzRCUyMFRyYWluaW5nQXJndW1lbnRzKHRvcmNoX2NvbXBpbGUlM0RUcnVlJTJDJTIwKipkZWZhdWx0X2FyZ3Mp",highlighted:'training_args = TrainingArguments(torch_compile=<span class="hljs-literal">True</span>, **default_args)',wrap:!1}}),$t=new _({props:{title:"Using 🤗 Accelerate",local:"using--accelerate",headingTag:"h2"}}),vt=new g({props:{code:"dHJhaW5pbmdfYXJncyUyMCUzRCUyMFRyYWluaW5nQXJndW1lbnRzKCUwQSUyMCUyMCUyMCUyMHBlcl9kZXZpY2VfdHJhaW5fYmF0Y2hfc2l6ZSUzRDElMkMlMEElMjAlMjAlMjAlMjBncmFkaWVudF9hY2N1bXVsYXRpb25fc3RlcHMlM0Q0JTJDJTBBJTIwJTIwJTIwJTIwZ3JhZGllbnRfY2hlY2twb2ludGluZyUzRFRydWUlMkMlMEElMjAlMjAlMjAlMjBmcDE2JTNEVHJ1ZSUyQyUwQSUyMCUyMCUyMCUyMCoqZGVmYXVsdF9hcmdzJTJDJTBBKQ==",highlighted:`training_args = TrainingArguments(
    per_device_train_batch_size=<span class="hljs-number">1</span>,
    gradient_accumulation_steps=<span class="hljs-number">4</span>,
    gradient_checkpointing=<span class="hljs-literal">True</span>,
    fp16=<span class="hljs-literal">True</span>,
    **default_args,
)`,wrap:!1}}),Ct=new g({props:{code:"ZnJvbSUyMGFjY2VsZXJhdGUlMjBpbXBvcnQlMjBBY2NlbGVyYXRvciUwQWZyb20lMjB0b3JjaC51dGlscy5kYXRhLmRhdGFsb2FkZXIlMjBpbXBvcnQlMjBEYXRhTG9hZGVyJTBBJTBBZGF0YWxvYWRlciUyMCUzRCUyMERhdGFMb2FkZXIoZHMlMkMlMjBiYXRjaF9zaXplJTNEdHJhaW5pbmdfYXJncy5wZXJfZGV2aWNlX3RyYWluX2JhdGNoX3NpemUpJTBBJTBBaWYlMjB0cmFpbmluZ19hcmdzLmdyYWRpZW50X2NoZWNrcG9pbnRpbmclM0ElMEElMjAlMjAlMjAlMjBtb2RlbC5ncmFkaWVudF9jaGVja3BvaW50aW5nX2VuYWJsZSgpJTBBJTBBYWNjZWxlcmF0b3IlMjAlM0QlMjBBY2NlbGVyYXRvcihmcDE2JTNEdHJhaW5pbmdfYXJncy5mcDE2KSUwQW1vZGVsJTJDJTIwb3B0aW1pemVyJTJDJTIwZGF0YWxvYWRlciUyMCUzRCUyMGFjY2VsZXJhdG9yLnByZXBhcmUobW9kZWwlMkMlMjBhZGFtX2JuYl9vcHRpbSUyQyUyMGRhdGFsb2FkZXIpJTBBJTBBbW9kZWwudHJhaW4oKSUwQWZvciUyMHN0ZXAlMkMlMjBiYXRjaCUyMGluJTIwZW51bWVyYXRlKGRhdGFsb2FkZXIlMkMlMjBzdGFydCUzRDEpJTNBJTBBJTIwJTIwJTIwJTIwbG9zcyUyMCUzRCUyMG1vZGVsKCoqYmF0Y2gpLmxvc3MlMEElMjAlMjAlMjAlMjBsb3NzJTIwJTNEJTIwbG9zcyUyMCUyRiUyMHRyYWluaW5nX2FyZ3MuZ3JhZGllbnRfYWNjdW11bGF0aW9uX3N0ZXBzJTBBJTIwJTIwJTIwJTIwYWNjZWxlcmF0b3IuYmFja3dhcmQobG9zcyklMEElMjAlMjAlMjAlMjBpZiUyMHN0ZXAlMjAlMjUlMjB0cmFpbmluZ19hcmdzLmdyYWRpZW50X2FjY3VtdWxhdGlvbl9zdGVwcyUyMCUzRCUzRCUyMDAlM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBvcHRpbWl6ZXIuc3RlcCgpJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwb3B0aW1pemVyLnplcm9fZ3JhZCgp",highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator
<span class="hljs-keyword">from</span> torch.utils.data.dataloader <span class="hljs-keyword">import</span> DataLoader

dataloader = DataLoader(ds, batch_size=training_args.per_device_train_batch_size)

<span class="hljs-keyword">if</span> training_args.gradient_checkpointing:
    model.gradient_checkpointing_enable()

accelerator = Accelerator(fp16=training_args.fp16)
model, optimizer, dataloader = accelerator.prepare(model, adam_bnb_optim, dataloader)

model.train()
<span class="hljs-keyword">for</span> step, batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dataloader, start=<span class="hljs-number">1</span>):
    loss = model(**batch).loss
    loss = loss / training_args.gradient_accumulation_steps
    accelerator.backward(loss)
    <span class="hljs-keyword">if</span> step % training_args.gradient_accumulation_steps == <span class="hljs-number">0</span>:
        optimizer.step()
        optimizer.zero_grad()`,wrap:!1}}),jt=new _({props:{title:"Efficient Software Prebuilds",local:"efficient-software-prebuilds",headingTag:"h2"}}),Wt=new _({props:{title:"Mixture of Experts",local:"mixture-of-experts",headingTag:"h2"}}),Vt=new _({props:{title:"PyTorchネイティブアテンションとFlash Attentionの使用",local:"pytorchネイティブアテンションとflash-attentionの使用",headingTag:"h2"}}),Nt=new g({props:{code:"bW9kZWwlMjAlM0QlMjBtb2RlbC50b19iZXR0ZXJ0cmFuc2Zvcm1lcigp",highlighted:"model = model.to_bettertransformer()",wrap:!1}}),j=new Kt({props:{warning:!0,$$slots:{default:[Gs]},$$scope:{ctx:w}}}),{c(){f=s("meta"),y=a(),h=s("p"),T=a(),o(b.$$.fragment),$=a(),v=s("p"),v.innerHTML=ja,el=a(),o(C.$$.fragment),tl=a(),H=s("p"),H.textContent=Ha,ll=a(),A=s("ul"),A.innerHTML=Aa,nl=a(),L=s("p"),L.textContent=La,al=a(),P=s("p"),P.textContent=Pa,il=a(),W=s("p"),W.textContent=Wa,sl=a(),G=s("table"),G.innerHTML=Ga,rl=a(),o(x.$$.fragment),pl=a(),Z=s("p"),Z.innerHTML=Za,fl=a(),k=s("p"),k.textContent=ka,ol=a(),Y=s("ul"),Y.innerHTML=Ya,ml=a(),R=s("p"),R.innerHTML=Ra,dl=a(),o(X.$$.fragment),cl=a(),B=s("p"),B.textContent=Xa,ul=a(),z=s("p"),z.innerHTML=Ba,Ml=a(),F=s("p"),F.innerHTML=za,hl=a(),I=s("p"),I.innerHTML=Fa,Tl=a(),o(V.$$.fragment),_l=a(),E=s("p"),E.innerHTML=Ia,yl=a(),q=s("p"),q.innerHTML=Va,$l=a(),o(N.$$.fragment),gl=a(),Q=s("p"),Q.textContent=Ea,wl=a(),D=s("p"),D.innerHTML=qa,vl=a(),S=s("p"),S.innerHTML=Na,bl=a(),K=s("p"),K.innerHTML=Qa,Cl=a(),o(O.$$.fragment),xl=a(),ee=s("p"),ee.textContent=Da,Jl=a(),te=s("p"),te.textContent=Sa,Ul=a(),le=s("p"),le.innerHTML=Ka,jl=a(),ne=s("p"),ne.innerHTML=Oa,Hl=a(),o(ae.$$.fragment),Al=a(),ie=s("p"),ie.innerHTML=ei,Ll=a(),o(J.$$.fragment),Pl=a(),o(se.$$.fragment),Wl=a(),re=s("p"),re.innerHTML=ti,Gl=a(),pe=s("p"),pe.innerHTML=li,Zl=a(),o(fe.$$.fragment),kl=a(),oe=s("p"),oe.textContent=ni,Yl=a(),me=s("p"),me.innerHTML=ai,Rl=a(),o(de.$$.fragment),Xl=a(),ce=s("p"),ce.innerHTML=ii,Bl=a(),o(ue.$$.fragment),zl=a(),Me=s("p"),Me.innerHTML=si,Fl=a(),he=s("p"),he.textContent=ri,Il=a(),o(Te.$$.fragment),Vl=a(),o(_e.$$.fragment),El=a(),ye=s("p"),ye.textContent=pi,ql=a(),o($e.$$.fragment),Nl=a(),ge=s("p"),ge.textContent=fi,Ql=a(),we=s("p"),we.innerHTML=oi,Dl=a(),ve=s("p"),ve.textContent=mi,Sl=a(),o(be.$$.fragment),Kl=a(),o(U.$$.fragment),Ol=a(),Ce=s("p"),Ce.innerHTML=di,en=a(),o(xe.$$.fragment),tn=a(),Je=s("p"),Je.innerHTML=ci,ln=a(),o(Ue.$$.fragment),nn=a(),je=s("p"),je.innerHTML=ui,an=a(),He=s("p"),He.innerHTML=Mi,sn=a(),Ae=s("p"),Ae.textContent=hi,rn=a(),Le=s("ol"),Le.innerHTML=Ti,pn=a(),Pe=s("p"),Pe.textContent=_i,fn=a(),We=s("ul"),We.innerHTML=yi,on=a(),o(Ge.$$.fragment),mn=a(),Ze=s("p"),Ze.textContent=$i,dn=a(),o(ke.$$.fragment),cn=a(),Ye=s("p"),Ye.textContent=gi,un=a(),o(Re.$$.fragment),Mn=a(),Xe=s("p"),Xe.textContent=wi,hn=a(),Be=s("p"),Be.innerHTML=vi,Tn=a(),o(ze.$$.fragment),_n=a(),Fe=s("p"),Fe.textContent=bi,yn=a(),Ie=s("p"),Ie.innerHTML=Ci,$n=a(),Ve=s("p"),Ve.textContent=xi,gn=a(),Ee=s("ul"),Ee.innerHTML=Ji,wn=a(),o(qe.$$.fragment),vn=a(),Ne=s("p"),Ne.innerHTML=Ui,bn=a(),o(Qe.$$.fragment),Cn=a(),De=s("p"),De.textContent=ji,xn=a(),o(Se.$$.fragment),Jn=a(),Ke=s("p"),Ke.innerHTML=Hi,Un=a(),o(Oe.$$.fragment),jn=a(),et=s("p"),et.textContent=Ai,Hn=a(),tt=s("ul"),tt.innerHTML=Li,An=a(),lt=s("p"),lt.innerHTML=Pi,Ln=a(),o(nt.$$.fragment),Pn=a(),at=s("p"),at.textContent=Wi,Wn=a(),it=s("p"),it.innerHTML=Gi,Gn=a(),st=s("ul"),st.innerHTML=Zi,Zn=a(),o(rt.$$.fragment),kn=a(),pt=s("p"),pt.innerHTML=ki,Yn=a(),ft=s("p"),ft.innerHTML=Yi,Rn=a(),o(ot.$$.fragment),Xn=a(),mt=s("p"),mt.innerHTML=Ri,Bn=a(),dt=s("p"),dt.innerHTML=Xi,zn=a(),ct=s("p"),ct.innerHTML=Bi,Fn=a(),ut=s("ul"),ut.innerHTML=zi,In=a(),Mt=s("p"),Mt.innerHTML=Fi,Vn=a(),ht=s("ul"),ht.innerHTML=Ii,En=a(),Tt=s("p"),Tt.innerHTML=Vi,qn=a(),_t=s("ul"),_t.innerHTML=Ei,Nn=a(),yt=s("p"),yt.innerHTML=qi,Qn=a(),o($t.$$.fragment),Dn=a(),gt=s("p"),gt.innerHTML=Ni,Sn=a(),wt=s("p"),wt.innerHTML=Qi,Kn=a(),o(vt.$$.fragment),On=a(),bt=s("p"),bt.textContent=Di,ea=a(),o(Ct.$$.fragment),ta=a(),xt=s("p"),xt.innerHTML=Si,la=a(),Jt=s("p"),Jt.innerHTML=Ki,na=a(),Ut=s("p"),Ut.innerHTML=Oi,aa=a(),o(jt.$$.fragment),ia=a(),Ht=s("p"),Ht.innerHTML=es,sa=a(),At=s("p"),At.innerHTML=ts,ra=a(),Lt=s("p"),Lt.innerHTML=ls,pa=a(),Pt=s("p"),Pt.textContent=ns,fa=a(),o(Wt.$$.fragment),oa=a(),Gt=s("p"),Gt.textContent=as,ma=a(),Zt=s("p"),Zt.textContent=is,da=a(),kt=s("p"),kt.textContent=ss,ca=a(),Yt=s("p"),Yt.innerHTML=rs,ua=a(),Rt=s("p"),Rt.innerHTML=ps,Ma=a(),Xt=s("p"),Xt.textContent=fs,ha=a(),Bt=s("p"),Bt.textContent=os,Ta=a(),zt=s("p"),zt.textContent=ms,_a=a(),Ft=s("ul"),Ft.innerHTML=ds,ya=a(),It=s("p"),It.innerHTML=cs,$a=a(),o(Vt.$$.fragment),ga=a(),Et=s("p"),Et.innerHTML=us,wa=a(),qt=s("p"),qt.innerHTML=Ms,va=a(),o(Nt.$$.fragment),ba=a(),Qt=s("p"),Qt.textContent=hs,Ca=a(),o(j.$$.fragment),xa=a(),Dt=s("p"),Dt.innerHTML=Ts,Ja=a(),St=s("p"),this.h()},l(e){const t=js("svelte-u9bgzb",document.head);f=r(t,"META",{name:!0,content:!0}),t.forEach(l),y=i(e),h=r(e,"P",{}),vs(h).forEach(l),T=i(e),m(b.$$.fragment,e),$=i(e),v=r(e,"P",{"data-svelte-h":!0}),p(v)!=="svelte-k02x5i"&&(v.innerHTML=ja),el=i(e),m(C.$$.fragment,e),tl=i(e),H=r(e,"P",{"data-svelte-h":!0}),p(H)!=="svelte-18gk7gt"&&(H.textContent=Ha),ll=i(e),A=r(e,"UL",{"data-svelte-h":!0}),p(A)!=="svelte-pupck1"&&(A.innerHTML=Aa),nl=i(e),L=r(e,"P",{"data-svelte-h":!0}),p(L)!=="svelte-9irtmi"&&(L.textContent=La),al=i(e),P=r(e,"P",{"data-svelte-h":!0}),p(P)!=="svelte-ywr1ov"&&(P.textContent=Pa),il=i(e),W=r(e,"P",{"data-svelte-h":!0}),p(W)!=="svelte-1qgkfco"&&(W.textContent=Wa),sl=i(e),G=r(e,"TABLE",{"data-svelte-h":!0}),p(G)!=="svelte-15stut3"&&(G.innerHTML=Ga),rl=i(e),m(x.$$.fragment,e),pl=i(e),Z=r(e,"P",{"data-svelte-h":!0}),p(Z)!=="svelte-1o1wech"&&(Z.innerHTML=Za),fl=i(e),k=r(e,"P",{"data-svelte-h":!0}),p(k)!=="svelte-zc6frt"&&(k.textContent=ka),ol=i(e),Y=r(e,"UL",{"data-svelte-h":!0}),p(Y)!=="svelte-1fxm4r5"&&(Y.innerHTML=Ya),ml=i(e),R=r(e,"P",{"data-svelte-h":!0}),p(R)!=="svelte-18ex8lv"&&(R.innerHTML=Ra),dl=i(e),m(X.$$.fragment,e),cl=i(e),B=r(e,"P",{"data-svelte-h":!0}),p(B)!=="svelte-1ep3egc"&&(B.textContent=Xa),ul=i(e),z=r(e,"P",{"data-svelte-h":!0}),p(z)!=="svelte-1imqchv"&&(z.innerHTML=Ba),Ml=i(e),F=r(e,"P",{"data-svelte-h":!0}),p(F)!=="svelte-1mms5jd"&&(F.innerHTML=za),hl=i(e),I=r(e,"P",{"data-svelte-h":!0}),p(I)!=="svelte-1ookwoa"&&(I.innerHTML=Fa),Tl=i(e),m(V.$$.fragment,e),_l=i(e),E=r(e,"P",{"data-svelte-h":!0}),p(E)!=="svelte-ifjve0"&&(E.innerHTML=Ia),yl=i(e),q=r(e,"P",{"data-svelte-h":!0}),p(q)!=="svelte-1foml29"&&(q.innerHTML=Va),$l=i(e),m(N.$$.fragment,e),gl=i(e),Q=r(e,"P",{"data-svelte-h":!0}),p(Q)!=="svelte-8ouv6l"&&(Q.textContent=Ea),wl=i(e),D=r(e,"P",{"data-svelte-h":!0}),p(D)!=="svelte-m0l2ac"&&(D.innerHTML=qa),vl=i(e),S=r(e,"P",{"data-svelte-h":!0}),p(S)!=="svelte-13niisf"&&(S.innerHTML=Na),bl=i(e),K=r(e,"P",{"data-svelte-h":!0}),p(K)!=="svelte-jp0awm"&&(K.innerHTML=Qa),Cl=i(e),m(O.$$.fragment,e),xl=i(e),ee=r(e,"P",{"data-svelte-h":!0}),p(ee)!=="svelte-1fw4x79"&&(ee.textContent=Da),Jl=i(e),te=r(e,"P",{"data-svelte-h":!0}),p(te)!=="svelte-2bylru"&&(te.textContent=Sa),Ul=i(e),le=r(e,"P",{"data-svelte-h":!0}),p(le)!=="svelte-1j6wmin"&&(le.innerHTML=Ka),jl=i(e),ne=r(e,"P",{"data-svelte-h":!0}),p(ne)!=="svelte-1n8df5e"&&(ne.innerHTML=Oa),Hl=i(e),m(ae.$$.fragment,e),Al=i(e),ie=r(e,"P",{"data-svelte-h":!0}),p(ie)!=="svelte-by3q3p"&&(ie.innerHTML=ei),Ll=i(e),m(J.$$.fragment,e),Pl=i(e),m(se.$$.fragment,e),Wl=i(e),re=r(e,"P",{"data-svelte-h":!0}),p(re)!=="svelte-1d7tl2l"&&(re.innerHTML=ti),Gl=i(e),pe=r(e,"P",{"data-svelte-h":!0}),p(pe)!=="svelte-4eqc5v"&&(pe.innerHTML=li),Zl=i(e),m(fe.$$.fragment,e),kl=i(e),oe=r(e,"P",{"data-svelte-h":!0}),p(oe)!=="svelte-1e97kks"&&(oe.textContent=ni),Yl=i(e),me=r(e,"P",{"data-svelte-h":!0}),p(me)!=="svelte-10ri2ca"&&(me.innerHTML=ai),Rl=i(e),m(de.$$.fragment,e),Xl=i(e),ce=r(e,"P",{"data-svelte-h":!0}),p(ce)!=="svelte-uyx6zr"&&(ce.innerHTML=ii),Bl=i(e),m(ue.$$.fragment,e),zl=i(e),Me=r(e,"P",{"data-svelte-h":!0}),p(Me)!=="svelte-1qc91q5"&&(Me.innerHTML=si),Fl=i(e),he=r(e,"P",{"data-svelte-h":!0}),p(he)!=="svelte-t6m6fq"&&(he.textContent=ri),Il=i(e),m(Te.$$.fragment,e),Vl=i(e),m(_e.$$.fragment,e),El=i(e),ye=r(e,"P",{"data-svelte-h":!0}),p(ye)!=="svelte-1hgxabb"&&(ye.textContent=pi),ql=i(e),m($e.$$.fragment,e),Nl=i(e),ge=r(e,"P",{"data-svelte-h":!0}),p(ge)!=="svelte-1koehj7"&&(ge.textContent=fi),Ql=i(e),we=r(e,"P",{"data-svelte-h":!0}),p(we)!=="svelte-xe5ycj"&&(we.innerHTML=oi),Dl=i(e),ve=r(e,"P",{"data-svelte-h":!0}),p(ve)!=="svelte-1kd56hw"&&(ve.textContent=mi),Sl=i(e),m(be.$$.fragment,e),Kl=i(e),m(U.$$.fragment,e),Ol=i(e),Ce=r(e,"P",{"data-svelte-h":!0}),p(Ce)!=="svelte-wtxltw"&&(Ce.innerHTML=di),en=i(e),m(xe.$$.fragment,e),tn=i(e),Je=r(e,"P",{"data-svelte-h":!0}),p(Je)!=="svelte-1i5qhxo"&&(Je.innerHTML=ci),ln=i(e),m(Ue.$$.fragment,e),nn=i(e),je=r(e,"P",{"data-svelte-h":!0}),p(je)!=="svelte-pt2p5b"&&(je.innerHTML=ui),an=i(e),He=r(e,"P",{"data-svelte-h":!0}),p(He)!=="svelte-tq15p9"&&(He.innerHTML=Mi),sn=i(e),Ae=r(e,"P",{"data-svelte-h":!0}),p(Ae)!=="svelte-unz8w6"&&(Ae.textContent=hi),rn=i(e),Le=r(e,"OL",{"data-svelte-h":!0}),p(Le)!=="svelte-1av0h01"&&(Le.innerHTML=Ti),pn=i(e),Pe=r(e,"P",{"data-svelte-h":!0}),p(Pe)!=="svelte-16xszgl"&&(Pe.textContent=_i),fn=i(e),We=r(e,"UL",{"data-svelte-h":!0}),p(We)!=="svelte-1tr89lp"&&(We.innerHTML=yi),on=i(e),m(Ge.$$.fragment,e),mn=i(e),Ze=r(e,"P",{"data-svelte-h":!0}),p(Ze)!=="svelte-1na9opy"&&(Ze.textContent=$i),dn=i(e),m(ke.$$.fragment,e),cn=i(e),Ye=r(e,"P",{"data-svelte-h":!0}),p(Ye)!=="svelte-ot90ae"&&(Ye.textContent=gi),un=i(e),m(Re.$$.fragment,e),Mn=i(e),Xe=r(e,"P",{"data-svelte-h":!0}),p(Xe)!=="svelte-1n2yn9a"&&(Xe.textContent=wi),hn=i(e),Be=r(e,"P",{"data-svelte-h":!0}),p(Be)!=="svelte-1c0tqjc"&&(Be.innerHTML=vi),Tn=i(e),m(ze.$$.fragment,e),_n=i(e),Fe=r(e,"P",{"data-svelte-h":!0}),p(Fe)!=="svelte-uv0o3g"&&(Fe.textContent=bi),yn=i(e),Ie=r(e,"P",{"data-svelte-h":!0}),p(Ie)!=="svelte-12gpe4y"&&(Ie.innerHTML=Ci),$n=i(e),Ve=r(e,"P",{"data-svelte-h":!0}),p(Ve)!=="svelte-1ouayv8"&&(Ve.textContent=xi),gn=i(e),Ee=r(e,"UL",{"data-svelte-h":!0}),p(Ee)!=="svelte-1jugoaz"&&(Ee.innerHTML=Ji),wn=i(e),m(qe.$$.fragment,e),vn=i(e),Ne=r(e,"P",{"data-svelte-h":!0}),p(Ne)!=="svelte-48cykl"&&(Ne.innerHTML=Ui),bn=i(e),m(Qe.$$.fragment,e),Cn=i(e),De=r(e,"P",{"data-svelte-h":!0}),p(De)!=="svelte-82ny90"&&(De.textContent=ji),xn=i(e),m(Se.$$.fragment,e),Jn=i(e),Ke=r(e,"P",{"data-svelte-h":!0}),p(Ke)!=="svelte-v3lmlq"&&(Ke.innerHTML=Hi),Un=i(e),m(Oe.$$.fragment,e),jn=i(e),et=r(e,"P",{"data-svelte-h":!0}),p(et)!=="svelte-1xdhw1g"&&(et.textContent=Ai),Hn=i(e),tt=r(e,"UL",{"data-svelte-h":!0}),p(tt)!=="svelte-7b8il1"&&(tt.innerHTML=Li),An=i(e),lt=r(e,"P",{"data-svelte-h":!0}),p(lt)!=="svelte-1s8ljz0"&&(lt.innerHTML=Pi),Ln=i(e),m(nt.$$.fragment,e),Pn=i(e),at=r(e,"P",{"data-svelte-h":!0}),p(at)!=="svelte-aij7zj"&&(at.textContent=Wi),Wn=i(e),it=r(e,"P",{"data-svelte-h":!0}),p(it)!=="svelte-1tywb69"&&(it.innerHTML=Gi),Gn=i(e),st=r(e,"UL",{"data-svelte-h":!0}),p(st)!=="svelte-g45fvb"&&(st.innerHTML=Zi),Zn=i(e),m(rt.$$.fragment,e),kn=i(e),pt=r(e,"P",{"data-svelte-h":!0}),p(pt)!=="svelte-xr8xlj"&&(pt.innerHTML=ki),Yn=i(e),ft=r(e,"P",{"data-svelte-h":!0}),p(ft)!=="svelte-1dbpxgd"&&(ft.innerHTML=Yi),Rn=i(e),m(ot.$$.fragment,e),Xn=i(e),mt=r(e,"P",{"data-svelte-h":!0}),p(mt)!=="svelte-1cj89dz"&&(mt.innerHTML=Ri),Bn=i(e),dt=r(e,"P",{"data-svelte-h":!0}),p(dt)!=="svelte-e5q7a9"&&(dt.innerHTML=Xi),zn=i(e),ct=r(e,"P",{"data-svelte-h":!0}),p(ct)!=="svelte-149ggw9"&&(ct.innerHTML=Bi),Fn=i(e),ut=r(e,"UL",{"data-svelte-h":!0}),p(ut)!=="svelte-6q8w84"&&(ut.innerHTML=zi),In=i(e),Mt=r(e,"P",{"data-svelte-h":!0}),p(Mt)!=="svelte-6wtx5m"&&(Mt.innerHTML=Fi),Vn=i(e),ht=r(e,"UL",{"data-svelte-h":!0}),p(ht)!=="svelte-1t13fyu"&&(ht.innerHTML=Ii),En=i(e),Tt=r(e,"P",{"data-svelte-h":!0}),p(Tt)!=="svelte-tv6t1d"&&(Tt.innerHTML=Vi),qn=i(e),_t=r(e,"UL",{"data-svelte-h":!0}),p(_t)!=="svelte-1krl93p"&&(_t.innerHTML=Ei),Nn=i(e),yt=r(e,"P",{"data-svelte-h":!0}),p(yt)!=="svelte-1rxdgxs"&&(yt.innerHTML=qi),Qn=i(e),m($t.$$.fragment,e),Dn=i(e),gt=r(e,"P",{"data-svelte-h":!0}),p(gt)!=="svelte-3tqgab"&&(gt.innerHTML=Ni),Sn=i(e),wt=r(e,"P",{"data-svelte-h":!0}),p(wt)!=="svelte-5qbq1w"&&(wt.innerHTML=Qi),Kn=i(e),m(vt.$$.fragment,e),On=i(e),bt=r(e,"P",{"data-svelte-h":!0}),p(bt)!=="svelte-1r2dmgq"&&(bt.textContent=Di),ea=i(e),m(Ct.$$.fragment,e),ta=i(e),xt=r(e,"P",{"data-svelte-h":!0}),p(xt)!=="svelte-1nsouje"&&(xt.innerHTML=Si),la=i(e),Jt=r(e,"P",{"data-svelte-h":!0}),p(Jt)!=="svelte-cao2h0"&&(Jt.innerHTML=Ki),na=i(e),Ut=r(e,"P",{"data-svelte-h":!0}),p(Ut)!=="svelte-1uft8il"&&(Ut.innerHTML=Oi),aa=i(e),m(jt.$$.fragment,e),ia=i(e),Ht=r(e,"P",{"data-svelte-h":!0}),p(Ht)!=="svelte-1cr1g15"&&(Ht.innerHTML=es),sa=i(e),At=r(e,"P",{"data-svelte-h":!0}),p(At)!=="svelte-169k3x1"&&(At.innerHTML=ts),ra=i(e),Lt=r(e,"P",{"data-svelte-h":!0}),p(Lt)!=="svelte-65rqup"&&(Lt.innerHTML=ls),pa=i(e),Pt=r(e,"P",{"data-svelte-h":!0}),p(Pt)!=="svelte-luq6fk"&&(Pt.textContent=ns),fa=i(e),m(Wt.$$.fragment,e),oa=i(e),Gt=r(e,"P",{"data-svelte-h":!0}),p(Gt)!=="svelte-1lgqt5g"&&(Gt.textContent=as),ma=i(e),Zt=r(e,"P",{"data-svelte-h":!0}),p(Zt)!=="svelte-uz76xz"&&(Zt.textContent=is),da=i(e),kt=r(e,"P",{"data-svelte-h":!0}),p(kt)!=="svelte-glgxug"&&(kt.textContent=ss),ca=i(e),Yt=r(e,"P",{"data-svelte-h":!0}),p(Yt)!=="svelte-tdgts9"&&(Yt.innerHTML=rs),ua=i(e),Rt=r(e,"P",{"data-svelte-h":!0}),p(Rt)!=="svelte-lb51d"&&(Rt.innerHTML=ps),Ma=i(e),Xt=r(e,"P",{"data-svelte-h":!0}),p(Xt)!=="svelte-1q30eph"&&(Xt.textContent=fs),ha=i(e),Bt=r(e,"P",{"data-svelte-h":!0}),p(Bt)!=="svelte-e7veyf"&&(Bt.textContent=os),Ta=i(e),zt=r(e,"P",{"data-svelte-h":!0}),p(zt)!=="svelte-e7ipwf"&&(zt.textContent=ms),_a=i(e),Ft=r(e,"UL",{"data-svelte-h":!0}),p(Ft)!=="svelte-ucyzca"&&(Ft.innerHTML=ds),ya=i(e),It=r(e,"P",{"data-svelte-h":!0}),p(It)!=="svelte-4ne8r6"&&(It.innerHTML=cs),$a=i(e),m(Vt.$$.fragment,e),ga=i(e),Et=r(e,"P",{"data-svelte-h":!0}),p(Et)!=="svelte-1g7sxuw"&&(Et.innerHTML=us),wa=i(e),qt=r(e,"P",{"data-svelte-h":!0}),p(qt)!=="svelte-1adxvvm"&&(qt.innerHTML=Ms),va=i(e),m(Nt.$$.fragment,e),ba=i(e),Qt=r(e,"P",{"data-svelte-h":!0}),p(Qt)!=="svelte-ys2vq0"&&(Qt.textContent=hs),Ca=i(e),m(j.$$.fragment,e),xa=i(e),Dt=r(e,"P",{"data-svelte-h":!0}),p(Dt)!=="svelte-1i4pbv"&&(Dt.innerHTML=Ts),Ja=i(e),St=r(e,"P",{}),vs(St).forEach(l),this.h()},h(){bs(f,"name","hf:doc:metadata"),bs(f,"content",ks)},m(e,t){Hs(document.head,f),n(e,y,t),n(e,h,t),n(e,T,t),d(b,e,t),n(e,$,t),n(e,v,t),n(e,el,t),d(C,e,t),n(e,tl,t),n(e,H,t),n(e,ll,t),n(e,A,t),n(e,nl,t),n(e,L,t),n(e,al,t),n(e,P,t),n(e,il,t),n(e,W,t),n(e,sl,t),n(e,G,t),n(e,rl,t),d(x,e,t),n(e,pl,t),n(e,Z,t),n(e,fl,t),n(e,k,t),n(e,ol,t),n(e,Y,t),n(e,ml,t),n(e,R,t),n(e,dl,t),d(X,e,t),n(e,cl,t),n(e,B,t),n(e,ul,t),n(e,z,t),n(e,Ml,t),n(e,F,t),n(e,hl,t),n(e,I,t),n(e,Tl,t),d(V,e,t),n(e,_l,t),n(e,E,t),n(e,yl,t),n(e,q,t),n(e,$l,t),d(N,e,t),n(e,gl,t),n(e,Q,t),n(e,wl,t),n(e,D,t),n(e,vl,t),n(e,S,t),n(e,bl,t),n(e,K,t),n(e,Cl,t),d(O,e,t),n(e,xl,t),n(e,ee,t),n(e,Jl,t),n(e,te,t),n(e,Ul,t),n(e,le,t),n(e,jl,t),n(e,ne,t),n(e,Hl,t),d(ae,e,t),n(e,Al,t),n(e,ie,t),n(e,Ll,t),d(J,e,t),n(e,Pl,t),d(se,e,t),n(e,Wl,t),n(e,re,t),n(e,Gl,t),n(e,pe,t),n(e,Zl,t),d(fe,e,t),n(e,kl,t),n(e,oe,t),n(e,Yl,t),n(e,me,t),n(e,Rl,t),d(de,e,t),n(e,Xl,t),n(e,ce,t),n(e,Bl,t),d(ue,e,t),n(e,zl,t),n(e,Me,t),n(e,Fl,t),n(e,he,t),n(e,Il,t),d(Te,e,t),n(e,Vl,t),d(_e,e,t),n(e,El,t),n(e,ye,t),n(e,ql,t),d($e,e,t),n(e,Nl,t),n(e,ge,t),n(e,Ql,t),n(e,we,t),n(e,Dl,t),n(e,ve,t),n(e,Sl,t),d(be,e,t),n(e,Kl,t),d(U,e,t),n(e,Ol,t),n(e,Ce,t),n(e,en,t),d(xe,e,t),n(e,tn,t),n(e,Je,t),n(e,ln,t),d(Ue,e,t),n(e,nn,t),n(e,je,t),n(e,an,t),n(e,He,t),n(e,sn,t),n(e,Ae,t),n(e,rn,t),n(e,Le,t),n(e,pn,t),n(e,Pe,t),n(e,fn,t),n(e,We,t),n(e,on,t),d(Ge,e,t),n(e,mn,t),n(e,Ze,t),n(e,dn,t),d(ke,e,t),n(e,cn,t),n(e,Ye,t),n(e,un,t),d(Re,e,t),n(e,Mn,t),n(e,Xe,t),n(e,hn,t),n(e,Be,t),n(e,Tn,t),d(ze,e,t),n(e,_n,t),n(e,Fe,t),n(e,yn,t),n(e,Ie,t),n(e,$n,t),n(e,Ve,t),n(e,gn,t),n(e,Ee,t),n(e,wn,t),d(qe,e,t),n(e,vn,t),n(e,Ne,t),n(e,bn,t),d(Qe,e,t),n(e,Cn,t),n(e,De,t),n(e,xn,t),d(Se,e,t),n(e,Jn,t),n(e,Ke,t),n(e,Un,t),d(Oe,e,t),n(e,jn,t),n(e,et,t),n(e,Hn,t),n(e,tt,t),n(e,An,t),n(e,lt,t),n(e,Ln,t),d(nt,e,t),n(e,Pn,t),n(e,at,t),n(e,Wn,t),n(e,it,t),n(e,Gn,t),n(e,st,t),n(e,Zn,t),d(rt,e,t),n(e,kn,t),n(e,pt,t),n(e,Yn,t),n(e,ft,t),n(e,Rn,t),d(ot,e,t),n(e,Xn,t),n(e,mt,t),n(e,Bn,t),n(e,dt,t),n(e,zn,t),n(e,ct,t),n(e,Fn,t),n(e,ut,t),n(e,In,t),n(e,Mt,t),n(e,Vn,t),n(e,ht,t),n(e,En,t),n(e,Tt,t),n(e,qn,t),n(e,_t,t),n(e,Nn,t),n(e,yt,t),n(e,Qn,t),d($t,e,t),n(e,Dn,t),n(e,gt,t),n(e,Sn,t),n(e,wt,t),n(e,Kn,t),d(vt,e,t),n(e,On,t),n(e,bt,t),n(e,ea,t),d(Ct,e,t),n(e,ta,t),n(e,xt,t),n(e,la,t),n(e,Jt,t),n(e,na,t),n(e,Ut,t),n(e,aa,t),d(jt,e,t),n(e,ia,t),n(e,Ht,t),n(e,sa,t),n(e,At,t),n(e,ra,t),n(e,Lt,t),n(e,pa,t),n(e,Pt,t),n(e,fa,t),d(Wt,e,t),n(e,oa,t),n(e,Gt,t),n(e,ma,t),n(e,Zt,t),n(e,da,t),n(e,kt,t),n(e,ca,t),n(e,Yt,t),n(e,ua,t),n(e,Rt,t),n(e,Ma,t),n(e,Xt,t),n(e,ha,t),n(e,Bt,t),n(e,Ta,t),n(e,zt,t),n(e,_a,t),n(e,Ft,t),n(e,ya,t),n(e,It,t),n(e,$a,t),d(Vt,e,t),n(e,ga,t),n(e,Et,t),n(e,wa,t),n(e,qt,t),n(e,va,t),d(Nt,e,t),n(e,ba,t),n(e,Qt,t),n(e,Ca,t),d(j,e,t),n(e,xa,t),n(e,Dt,t),n(e,Ja,t),n(e,St,t),Ua=!0},p(e,[t]){const _s={};t&2&&(_s.$$scope={dirty:t,ctx:e}),C.$set(_s);const ys={};t&2&&(ys.$$scope={dirty:t,ctx:e}),x.$set(ys);const $s={};t&2&&($s.$$scope={dirty:t,ctx:e}),J.$set($s);const gs={};t&2&&(gs.$$scope={dirty:t,ctx:e}),U.$set(gs);const ws={};t&2&&(ws.$$scope={dirty:t,ctx:e}),j.$set(ws)},i(e){Ua||(c(b.$$.fragment,e),c(C.$$.fragment,e),c(x.$$.fragment,e),c(X.$$.fragment,e),c(V.$$.fragment,e),c(N.$$.fragment,e),c(O.$$.fragment,e),c(ae.$$.fragment,e),c(J.$$.fragment,e),c(se.$$.fragment,e),c(fe.$$.fragment,e),c(de.$$.fragment,e),c(ue.$$.fragment,e),c(Te.$$.fragment,e),c(_e.$$.fragment,e),c($e.$$.fragment,e),c(be.$$.fragment,e),c(U.$$.fragment,e),c(xe.$$.fragment,e),c(Ue.$$.fragment,e),c(Ge.$$.fragment,e),c(ke.$$.fragment,e),c(Re.$$.fragment,e),c(ze.$$.fragment,e),c(qe.$$.fragment,e),c(Qe.$$.fragment,e),c(Se.$$.fragment,e),c(Oe.$$.fragment,e),c(nt.$$.fragment,e),c(rt.$$.fragment,e),c(ot.$$.fragment,e),c($t.$$.fragment,e),c(vt.$$.fragment,e),c(Ct.$$.fragment,e),c(jt.$$.fragment,e),c(Wt.$$.fragment,e),c(Vt.$$.fragment,e),c(Nt.$$.fragment,e),c(j.$$.fragment,e),Ua=!0)},o(e){u(b.$$.fragment,e),u(C.$$.fragment,e),u(x.$$.fragment,e),u(X.$$.fragment,e),u(V.$$.fragment,e),u(N.$$.fragment,e),u(O.$$.fragment,e),u(ae.$$.fragment,e),u(J.$$.fragment,e),u(se.$$.fragment,e),u(fe.$$.fragment,e),u(de.$$.fragment,e),u(ue.$$.fragment,e),u(Te.$$.fragment,e),u(_e.$$.fragment,e),u($e.$$.fragment,e),u(be.$$.fragment,e),u(U.$$.fragment,e),u(xe.$$.fragment,e),u(Ue.$$.fragment,e),u(Ge.$$.fragment,e),u(ke.$$.fragment,e),u(Re.$$.fragment,e),u(ze.$$.fragment,e),u(qe.$$.fragment,e),u(Qe.$$.fragment,e),u(Se.$$.fragment,e),u(Oe.$$.fragment,e),u(nt.$$.fragment,e),u(rt.$$.fragment,e),u(ot.$$.fragment,e),u($t.$$.fragment,e),u(vt.$$.fragment,e),u(Ct.$$.fragment,e),u(jt.$$.fragment,e),u(Wt.$$.fragment,e),u(Vt.$$.fragment,e),u(Nt.$$.fragment,e),u(j.$$.fragment,e),Ua=!1},d(e){e&&(l(y),l(h),l(T),l($),l(v),l(el),l(tl),l(H),l(ll),l(A),l(nl),l(L),l(al),l(P),l(il),l(W),l(sl),l(G),l(rl),l(pl),l(Z),l(fl),l(k),l(ol),l(Y),l(ml),l(R),l(dl),l(cl),l(B),l(ul),l(z),l(Ml),l(F),l(hl),l(I),l(Tl),l(_l),l(E),l(yl),l(q),l($l),l(gl),l(Q),l(wl),l(D),l(vl),l(S),l(bl),l(K),l(Cl),l(xl),l(ee),l(Jl),l(te),l(Ul),l(le),l(jl),l(ne),l(Hl),l(Al),l(ie),l(Ll),l(Pl),l(Wl),l(re),l(Gl),l(pe),l(Zl),l(kl),l(oe),l(Yl),l(me),l(Rl),l(Xl),l(ce),l(Bl),l(zl),l(Me),l(Fl),l(he),l(Il),l(Vl),l(El),l(ye),l(ql),l(Nl),l(ge),l(Ql),l(we),l(Dl),l(ve),l(Sl),l(Kl),l(Ol),l(Ce),l(en),l(tn),l(Je),l(ln),l(nn),l(je),l(an),l(He),l(sn),l(Ae),l(rn),l(Le),l(pn),l(Pe),l(fn),l(We),l(on),l(mn),l(Ze),l(dn),l(cn),l(Ye),l(un),l(Mn),l(Xe),l(hn),l(Be),l(Tn),l(_n),l(Fe),l(yn),l(Ie),l($n),l(Ve),l(gn),l(Ee),l(wn),l(vn),l(Ne),l(bn),l(Cn),l(De),l(xn),l(Jn),l(Ke),l(Un),l(jn),l(et),l(Hn),l(tt),l(An),l(lt),l(Ln),l(Pn),l(at),l(Wn),l(it),l(Gn),l(st),l(Zn),l(kn),l(pt),l(Yn),l(ft),l(Rn),l(Xn),l(mt),l(Bn),l(dt),l(zn),l(ct),l(Fn),l(ut),l(In),l(Mt),l(Vn),l(ht),l(En),l(Tt),l(qn),l(_t),l(Nn),l(yt),l(Qn),l(Dn),l(gt),l(Sn),l(wt),l(Kn),l(On),l(bt),l(ea),l(ta),l(xt),l(la),l(Jt),l(na),l(Ut),l(aa),l(ia),l(Ht),l(sa),l(At),l(ra),l(Lt),l(pa),l(Pt),l(fa),l(oa),l(Gt),l(ma),l(Zt),l(da),l(kt),l(ca),l(Yt),l(ua),l(Rt),l(Ma),l(Xt),l(ha),l(Bt),l(Ta),l(zt),l(_a),l(Ft),l(ya),l(It),l($a),l(ga),l(Et),l(wa),l(qt),l(va),l(ba),l(Qt),l(Ca),l(xa),l(Dt),l(Ja),l(St)),l(f),M(b,e),M(C,e),M(x,e),M(X,e),M(V,e),M(N,e),M(O,e),M(ae,e),M(J,e),M(se,e),M(fe,e),M(de,e),M(ue,e),M(Te,e),M(_e,e),M($e,e),M(be,e),M(U,e),M(xe,e),M(Ue,e),M(Ge,e),M(ke,e),M(Re,e),M(ze,e),M(qe,e),M(Qe,e),M(Se,e),M(Oe,e),M(nt,e),M(rt,e),M(ot,e),M($t,e),M(vt,e),M(Ct,e),M(jt,e),M(Wt,e),M(Vt,e),M(Nt,e),M(j,e)}}}const ks='{"title":"Methods and tools for efficient training on a single GPU","local":"methods-and-tools-for-efficient-training-on-a-single-gpu","sections":[{"title":"Batch size choice","local":"batch-size-choice","sections":[],"depth":2},{"title":"Gradient Accumulation","local":"gradient-accumulation","sections":[],"depth":2},{"title":"Gradient Checkpointing","local":"gradient-checkpointing","sections":[],"depth":2},{"title":"Mixed precision training","local":"mixed-precision-training","sections":[{"title":"fp16","local":"fp16","sections":[],"depth":3},{"title":"BF16","local":"bf16","sections":[],"depth":3},{"title":"TF32","local":"tf32","sections":[],"depth":3}],"depth":2},{"title":"Flash Attention 2","local":"flash-attention-2","sections":[],"depth":2},{"title":"オプティマイザの選択","local":"オプティマイザの選択","sections":[{"title":"Adafactor","local":"adafactor","sections":[],"depth":3},{"title":"8ビット Adam","local":"8ビット-adam","sections":[],"depth":3},{"title":"multi_tensor","local":"multitensor","sections":[],"depth":3}],"depth":2},{"title":"データの事前読み込み","local":"データの事前読み込み","sections":[],"depth":2},{"title":"DeepSpeed ZeRO","local":"deepspeed-zero","sections":[],"depth":2},{"title":"torch.compileの使用","local":"torchcompileの使用","sections":[],"depth":2},{"title":"Using 🤗 Accelerate","local":"using--accelerate","sections":[],"depth":2},{"title":"Efficient Software Prebuilds","local":"efficient-software-prebuilds","sections":[],"depth":2},{"title":"Mixture of Experts","local":"mixture-of-experts","sections":[],"depth":2},{"title":"PyTorchネイティブアテンションとFlash Attentionの使用","local":"pytorchネイティブアテンションとflash-attentionの使用","sections":[],"depth":2}],"depth":1}';function Ys(w){return xs(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Is extends Js{constructor(f){super(),Us(this,f,Ys,Zs,Cs,{})}}export{Is as component};
