import{s as se,n as ie,o as oe}from"../chunks/scheduler.9bc65507.js";import{S as re,i as pe,g as i,s as n,r as Q,A as fe,h as o,f as l,c as s,j as V,u as W,x as r,k as Z,y as ce,a,v as ee,d as te,t as le,w as ae}from"../chunks/index.707bf1b6.js";import{H as ne}from"../chunks/Heading.342b1fa6.js";function me(j){let p,y,w,$,f,L,c,q="🤗 Transformersは、次のような目的で構築された意見を持つライブラリです：",g,m,R="<li>大規模なTransformersモデルを使用、研究、または拡張したい機械学習研究者および教育者。</li> <li>これらのモデルを微調整したり、本番環境で提供したり、またはその両方を行いたい実務家。</li> <li>与えられた機械学習タスクを解決するために、事前トレーニングされたモデルをダウンロードして使用したいエンジニア。</li>",H,u,J="このライブラリは、2つの強力な目標を持って設計されました：",b,h,N=`<li><p>できるだけ簡単かつ高速に使用できるようにすること：</p> <ul><li>ユーザー向けの抽象化を限りなく少なくし、実際、ほとんどの場合、抽象化はありません。
各モデルを使用するために必要な3つの標準クラスだけが存在します：<a href="main_classes/configuration">構成</a>、
<a href="main_classes/model">モデル</a>、および前処理クラス（NLP用の<a href="main_classes/tokenizer">トークナイザ</a>、ビジョン用の<a href="main_classes/image_processor">イメージプロセッサ</a>、
オーディオ用の<a href="main_classes/feature_extractor">特徴抽出器</a>、およびマルチモーダル入力用の<a href="main_classes/processors">プロセッサ</a>）。</li> <li>これらのクラスは、共通の<code>from_pretrained()</code>メソッドを使用して、事前トレーニング済みのインスタンスから簡単かつ統一された方法で初期化できます。このメソッドは、事前トレーニング済みのチェックポイントから関連するクラスのインスタンスと関連データ（構成のハイパーパラメータ、トークナイザの語彙、モデルの重み）をダウンロード（必要な場合はキャッシュ）して読み込みます。これらの基本クラスの上に、ライブラリは2つのAPIを提供しています：[パイプライン]は、特定のタスクでモデルをすばやく推論に使用するためのものであり、<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>はPyTorchモデルを迅速にトレーニングまたは微調整するためのものです（すべてのTensorFlowモデルは<code>Keras.fit</code>と互換性があります）。</li> <li>その結果、このライブラリはニューラルネットワークのモジュラーツールボックスではありません。ライブラリを拡張または構築したい場合は、通常のPython、PyTorch、TensorFlow、Kerasモジュールを使用し、ライブラリの基本クラスから継承してモデルの読み込みと保存などの機能を再利用するだけです。モデルのコーディング哲学について詳しく知りたい場合は、<a href="https://huggingface.co/blog/transformers-design-philosophy" rel="nofollow">Repeat Yourself</a>ブログ投稿をチェックしてみてください。</li></ul></li> <li><p>オリジナルのモデルにできるだけ近い性能を持つ最新のモデルを提供すること：</p> <ul><li>各アーキテクチャに対して、公式な著者から提供された結果を再現する少なくとも1つの例を提供します。</li> <li>コードは通常、可能な限り元のコードベースに近いものであり、これはPyTorchコードがTensorFlowコードに変換されることから生じ、逆もまた然りです。</li></ul></li>`,z,_,O="その他のいくつかの目標：",A,d,X="<li><p>モデルの内部をできるだけ一貫して公開すること：</p> <ul><li>フルな隠れ状態と注意の重みにアクセスできる単一のAPIを提供します。</li> <li>前処理クラスと基本モデルのAPIは標準化され、簡単にモデル間を切り替えることができます。</li></ul></li> <li><p>これらのモデルの微調整と調査のための有望なツールを主観的に選定すること：</p> <ul><li>語彙と埋め込みに新しいトークンを追加するための簡単で一貫した方法。</li> <li>Transformerヘッドをマスクおよびプルーンするための簡単な方法。</li></ul></li> <li><p>PyTorch、TensorFlow 2.0、およびFlaxの間を簡単に切り替えて、1つのフレームワークでトレーニングし、別のフレームワークで推論を行うことを可能にすること。</p></li>",F,x,k,T,Y="このライブラリは、各モデルについて次の3つのタイプのクラスを中心に構築されています：",U,v,B='<li><strong>モデルクラス</strong>は、ライブラリで提供される事前トレーニング済みの重みと互換性のあるPyTorchモデル（<a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a>）、Kerasモデル（<a href="https://www.tensorflow.org/api_docs/python/tf/keras/Model" rel="nofollow">tf.keras.Model</a>）またはJAX/Flaxモデル（<a href="https://flax.readthedocs.io/en/latest/api_reference/flax.linen/module.html" rel="nofollow">flax.linen.Module</a>）を使用できます。</li> <li><strong>構成クラス</strong>は、モデルを構築するために必要なハイパーパラメータを格納します（層の数や隠れ層のサイズなど）。これらを自分でインスタンス化する必要はありません。特に、変更を加えずに事前トレーニング済みモデルを使用している場合、モデルを作成すると自動的に構成がインスタンス化されるようになります（これはモデルの一部です）。</li> <li><strong>前処理クラス</strong>は、生データをモデルが受け入れる形式に変換します。<a href="main_classes/tokenizer">トークナイザ</a>は各モデルの語彙を保存し、文字列をトークン埋め込みのインデックスのリストにエンコードおよびデコードするためのメソッドを提供します。<a href="main_classes/image_processor">イメージプロセッサ</a>はビジョン入力を前処理し、<a href="main_classes/feature_extractor">特徴抽出器</a>はオーディオ入力を前処理し、<a href="main_classes/processors">プロセッサ</a>はマルチモーダル入力を処理します。</li>',E,P,D="これらのすべてのクラスは、事前トレーニング済みのインスタンスからインスタンス化し、ローカルに保存し、Hubで共有することができる3つのメソッドを使用しています：",I,C,G='<li><code>from_pretrained()</code>は、ライブラリ自体によって提供される（<a href="https://huggingface.co/models" rel="nofollow">モデルハブ</a>でサポートされているモデルがあります）か、ユーザーによってローカルに保存された（またはサーバーに保存された）事前トレーニング済みバージョンからモデル、構成、前処理クラスをインスタンス化するためのメソッドです。</li> <li><code>save_pretrained()</code>は、モデル、構成、前処理クラスをローカルに保存し、<code>from_pretrained()</code>を使用して再読み込みできるようにします。</li> <li><code>push_to_hub()</code>は、モデル、構成、前処理クラスをHubに共有し、誰でも簡単にアクセスできるようにします。</li>',K,M,S;return f=new ne({props:{title:"Philosophy",local:"philosophy",headingTag:"h1"}}),x=new ne({props:{title:"Main concepts",local:"main-concepts",headingTag:"h2"}}),{c(){p=i("meta"),y=n(),w=i("p"),$=n(),Q(f.$$.fragment),L=n(),c=i("p"),c.textContent=q,g=n(),m=i("ul"),m.innerHTML=R,H=n(),u=i("p"),u.textContent=J,b=n(),h=i("ol"),h.innerHTML=N,z=n(),_=i("p"),_.textContent=O,A=n(),d=i("ul"),d.innerHTML=X,F=n(),Q(x.$$.fragment),k=n(),T=i("p"),T.textContent=Y,U=n(),v=i("ul"),v.innerHTML=B,E=n(),P=i("p"),P.textContent=D,I=n(),C=i("ul"),C.innerHTML=G,K=n(),M=i("p"),this.h()},l(e){const t=fe("svelte-u9bgzb",document.head);p=o(t,"META",{name:!0,content:!0}),t.forEach(l),y=s(e),w=o(e,"P",{}),V(w).forEach(l),$=s(e),W(f.$$.fragment,e),L=s(e),c=o(e,"P",{"data-svelte-h":!0}),r(c)!=="svelte-1ogl32y"&&(c.textContent=q),g=s(e),m=o(e,"UL",{"data-svelte-h":!0}),r(m)!=="svelte-1dl6tsa"&&(m.innerHTML=R),H=s(e),u=o(e,"P",{"data-svelte-h":!0}),r(u)!=="svelte-ufid5u"&&(u.textContent=J),b=s(e),h=o(e,"OL",{"data-svelte-h":!0}),r(h)!=="svelte-1c48ghg"&&(h.innerHTML=N),z=s(e),_=o(e,"P",{"data-svelte-h":!0}),r(_)!=="svelte-lp0ec4"&&(_.textContent=O),A=s(e),d=o(e,"UL",{"data-svelte-h":!0}),r(d)!=="svelte-c53gem"&&(d.innerHTML=X),F=s(e),W(x.$$.fragment,e),k=s(e),T=o(e,"P",{"data-svelte-h":!0}),r(T)!=="svelte-r7czx8"&&(T.textContent=Y),U=s(e),v=o(e,"UL",{"data-svelte-h":!0}),r(v)!=="svelte-zlq7x5"&&(v.innerHTML=B),E=s(e),P=o(e,"P",{"data-svelte-h":!0}),r(P)!=="svelte-1puecbn"&&(P.textContent=D),I=s(e),C=o(e,"UL",{"data-svelte-h":!0}),r(C)!=="svelte-z832o1"&&(C.innerHTML=G),K=s(e),M=o(e,"P",{}),V(M).forEach(l),this.h()},h(){Z(p,"name","hf:doc:metadata"),Z(p,"content",ue)},m(e,t){ce(document.head,p),a(e,y,t),a(e,w,t),a(e,$,t),ee(f,e,t),a(e,L,t),a(e,c,t),a(e,g,t),a(e,m,t),a(e,H,t),a(e,u,t),a(e,b,t),a(e,h,t),a(e,z,t),a(e,_,t),a(e,A,t),a(e,d,t),a(e,F,t),ee(x,e,t),a(e,k,t),a(e,T,t),a(e,U,t),a(e,v,t),a(e,E,t),a(e,P,t),a(e,I,t),a(e,C,t),a(e,K,t),a(e,M,t),S=!0},p:ie,i(e){S||(te(f.$$.fragment,e),te(x.$$.fragment,e),S=!0)},o(e){le(f.$$.fragment,e),le(x.$$.fragment,e),S=!1},d(e){e&&(l(y),l(w),l($),l(L),l(c),l(g),l(m),l(H),l(u),l(b),l(h),l(z),l(_),l(A),l(d),l(F),l(k),l(T),l(U),l(v),l(E),l(P),l(I),l(C),l(K),l(M)),l(p),ae(f,e),ae(x,e)}}}const ue='{"title":"Philosophy","local":"philosophy","sections":[{"title":"Main concepts","local":"main-concepts","sections":[],"depth":2}],"depth":1}';function he(j){return oe(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Te extends re{constructor(p){super(),pe(this,p,he,me,se,{})}}export{Te as component};
