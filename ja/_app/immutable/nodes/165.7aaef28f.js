import{s as Na,n as Qa,o as Xa}from"../chunks/scheduler.9bc65507.js";import{S as Ka,i as Ra,g as p,s as e,r as m,m as Yt,H as Ft,A as Ya,h as i,f as a,c as l,j as ks,u,x as o,n as Ot,B as sa,k as ta,y as Cs,a as n,v as r,d as c,t as h,w as g}from"../chunks/index.707bf1b6.js";import{Y as aa}from"../chunks/Youtube.e1129c6f.js";import{C as M}from"../chunks/CodeBlock.54a9f38d.js";import{D as Fa}from"../chunks/DocNotebookDropdown.41f65cb5.js";import{H as f}from"../chunks/Heading.342b1fa6.js";function Oa(ea){let j,_s,Is,Ps,J,zs,T,Ls,d,la="このページでは、トークナイゼーションについて詳しく見ていきます。",Hs,v,Es,b,pa='<a href="preprocessing">前処理のチュートリアル</a>で見たように、テキストをトークン化することは、それを単語またはサブワードに分割し、それらをルックアップテーブルを介してIDに変換することです。単語またはサブワードをIDに変換することは簡単ですので、この要約ではテキストを単語またはサブワードに分割する（つまり、テキストをトークナイズする）ことに焦点を当てます。具体的には、🤗 Transformersで使用される3つの主要なトークナイザ、<a href="#byte-pair-encoding">Byte-Pair Encoding（BPE）</a>、<a href="#wordpiece">WordPiece</a>、および<a href="#sentencepiece">SentencePiece</a>を見て、どのモデルがどのトークナイザタイプを使用しているかの例を示します。',Ss,w,ia='各モデルページでは、事前トレーニング済みモデルがどのトークナイザタイプを使用しているかを知るために、関連するトークナイザのドキュメントを確認できます。例えば、<a href="/docs/transformers/main/ja/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>を見ると、モデルが<a href="#wordpiece">WordPiece</a>を使用していることがわかります。',Bs,$,Ds,x,oa="テキストをより小さなチャンクに分割することは、見かけ以上に難しいタスクであり、複数の方法があります。例えば、次の文を考えてみましょう。「“Don’t you love 🤗 Transformers? We sure do.“」",As,I,Zs,U,ma="このテキストをトークン化する簡単な方法は、スペースで分割することです。これにより、以下のようになります：",Gs,k,Vs,C,ua="これは合理的な第一歩ですが、トークン “Transformers?” と “do.” を見ると、句読点が単語 “Transformer” と “do” に結合されていることがわかり、これは最適ではありません。句読点を考慮に入れるべきで、モデルが単語とそれに続く可能性のあるすべての句読点記号の異なる表現を学ばなければならないことを避けるべきです。これにより、モデルが学ばなければならない表現の数が爆発的に増加します。句読点を考慮に入れた場合、例文のトークン化は次のようになります：",Ws,_,Ns,P,ra="ただし、単語「“Don’t”」をトークン化する方法に関しては、不利な側面があります。 「“Don’t”」は「“do not”」を表しているため、「[“Do”, “n’t”]」としてトークン化する方が適しています。ここから事柄が複雑になり、各モデルが独自のトークナイザータイプを持つ理由の一部でもあります。テキストをトークン化するために適用するルールに応じて、同じテキストに対して異なるトークナイズされた出力が生成されます。事前トレーニング済みモデルは、トレーニングデータをトークナイズするのに使用されたルールと同じルールでトークナイズされた入力を提供する場合にのみ正常に機能します。",Qs,z,ca='<a href="https://spacy.io/" rel="nofollow">spaCy</a>と<a href="http://www.statmt.org/moses/?n=Development.GetStarted" rel="nofollow">Moses</a>は、2つの人気のあるルールベースのトークナイザーです。これらを私たちの例に適用すると、<em>spaCy</em>と<em>Moses</em>は次のような出力を生成します：',Xs,L,Ks,H,ha='空白と句読点のトークン化、およびルールベースのトークン化が使用されていることがわかります。空白と句読点のトークン化、およびルールベースのトークン化は、文を単語に分割することをゆるやかに定義される単語トークン化の例です。テキストをより小さなチャンクに分割するための最も直感的な方法である一方、このトークン化方法は大規模なテキストコーパスに対して問題を引き起こすことがあります。この場合、空白と句読点のトークン化は通常、非常に大きな語彙（すべての一意な単語とトークンのセット）を生成します。例えば、<a href="model_doc/transformerxl">Transformer XL</a>は空白と句読点のトークン化を使用しており、語彙サイズは267,735です！',Rs,E,ga="このような大きな語彙サイズは、モデルに非常に大きな埋め込み行列を入力および出力レイヤーとして持たせることを強制し、メモリおよび時間の複雑さの増加を引き起こします。一般的に、トランスフォーマーモデルは、特に単一の言語で事前トレーニングされた場合、50,000を超える語彙サイズを持つことはほとんどありません。",Ys,S,ya="したがって、シンプルな空白と句読点のトークン化が不十分な場合、なぜ単に文字単位でトークン化しないのかという疑問が生じますか？",Fs,B,Os,D,Ma="文字単位のトークン化は非常にシンプルであり、メモリと時間の複雑さを大幅に削減できますが、モデルに意味のある入力表現を学習させることが非常に難しくなります。たとえば、文字「“t”」のための意味のあるコンテキスト独立の表現を学習することは、単語「“today”」のためのコンテキスト独立の表現を学習するよりもはるかに難しいです。そのため、文字単位のトークン化はしばしばパフォーマンスの低下を伴います。したがって、トランスフォーマーモデルは単語レベルと文字レベルのトークン化のハイブリッドである<strong>サブワード</strong>トークン化を使用して、両方の世界の利点を活かします。",st,A,tt,Z,at,G,ja="サブワードトークン化アルゴリズムは、頻繁に使用される単語をより小さなサブワードに分割すべきではないが、珍しい単語は意味のあるサブワードに分解されるという原則に依存しています。たとえば、「“annoyingly”」は珍しい単語と見なされ、その単語は「“annoying”」と「“ly”」に分解されるかもしれません。独立した「“annoying”」と「“ly”」はより頻繁に現れますが、「“annoyingly”」の意味は「“annoying”」と「“ly”」の合成的な意味によって保持されます。これは特にトルコ語などの結合言語で役立ちます。ここではサブワードを連結して（ほぼ）任意の長い複雑な単語を形成できます。",nt,V,qa='サブワードトークン化により、モデルは合理的な語彙サイズを持つことができ、意味のあるコンテキスト独立の表現を学習できます。さらに、サブワードトークン化により、モデルは以前に見たことのない単語を処理し、それらを既知のサブワードに分解することができます。例えば、<a href="/docs/transformers/main/ja/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>は<code>&quot;I have a new GPU!&quot;</code>を以下のようにトークン化します：',et,W,lt,N,fa="「uncased」モデルを考慮しているため、まず文を小文字に変換しました。トークナイザの語彙に「[“i”, “have”, “a”, “new”]」という単語が存在することがわかりますが、「“gpu”」という単語は存在しません。したがって、トークナイザは「“gpu”」を既知のサブワード「[“gp”、“##u”]」に分割します。ここで「”##“」は、トークンのデコードまたはトークナイゼーションの逆転のために、トークンの前の部分にスペースなしで接続する必要があることを意味します。",pt,Q,Ja="別の例として、<code>XLNetTokenizer</code>は以下のように以前のサンプルテキストをトークン化します：",it,X,ot,K,Ta='これらの「▁」の意味については、<a href="#sentencepiece">SentencePiece</a>を見るときに詳しく説明します。ご覧の通り、「Transformers」という珍しい単語は、より頻繁に現れるサブワード「Transform」と「ers」に分割されています。',mt,R,da="さて、異なるサブワードトークン化アルゴリズムがどのように動作するかを見てみましょう。これらのトークナイゼーションアルゴリズムはすべて、通常は対応するモデルがトレーニングされるコーパスで行われる形式のトレーニングに依存しています。",ut,$s,rt,Y,ct,F,va='Byte-Pair Encoding（BPE）は、<a href="https://arxiv.org/abs/1508.07909" rel="nofollow">Neural Machine Translation of Rare Words with Subword Units（Sennrich et al., 2015）</a>で導入されました。BPEは、トレーニングデータを単語に分割するプリトークナイザに依存しています。プリトークナイゼーションは、空白のトークナイゼーションなど、非常に単純なものであることがあります。例えば、<a href="model_doc/gpt2">GPT-2</a>、<a href="model_doc/roberta">RoBERTa</a>です。より高度なプリトークナイゼーションには、ルールベースのトークナイゼーション（<a href="model_doc/xlm">XLM</a>、<a href="model_doc/flaubert">FlauBERT</a>などが大部分の言語にMosesを使用）や、<a href="model_doc/gpt">GPT</a>（Spacyとftfyを使用してトレーニングコーパス内の各単語の頻度を数える）などが含まれます。',ht,O,ba="プリトークナイゼーションの後、一意の単語セットが作成され、各単語がトレーニングデータで出現した頻度が決定されます。次に、BPEはベース語彙を作成し、ベース語彙の二つのシンボルから新しいシンボルを形成するためのマージルールを学習します。このプロセスは、語彙が所望の語彙サイズに達するまで続けられます。なお、所望の語彙サイズはトークナイザをトレーニングする前に定義するハイパーパラメータであることに注意してください。",gt,ss,wa="例として、プリトークナイゼーションの後、次のセットの単語とその出現頻度が決定されたと仮定しましょう：",yt,ts,Mt,as,$a="したがって、ベース語彙は「[“b”, “g”, “h”, “n”, “p”, “s”, “u”]」です。すべての単語をベース語彙のシンボルに分割すると、次のようになります：",jt,ns,qt,es,xa="その後、BPEは可能なすべてのシンボルペアの頻度を数え、最も頻繁に発生するシンボルペアを選択します。上記の例では、<code>&quot;h&quot;</code>の後に<code>&quot;u&quot;</code>が15回（<code>&quot;hug&quot;</code>の10回、<code>&quot;hugs&quot;</code>の5回）出現します。しかし、最も頻繁なシンボルペアは、合計で20回（<code>&quot;u&quot;</code>の10回、<code>&quot;g&quot;</code>の5回、<code>&quot;u&quot;</code>の5回）出現する<code>&quot;u&quot;</code>の後に<code>&quot;g&quot;</code>が続くシンボルペアです。したがって、トークナイザが最初に学習するマージルールは、<code>&quot;u&quot;</code>の後に<code>&quot;g&quot;</code>が続くすべての<code>&quot;u&quot;</code>シンボルを一緒にグループ化することです。次に、<code>&quot;ug&quot;</code>が語彙に追加されます。単語のセットは次になります：",ft,ls,Jt,ps,Ia="次に、BPEは次に最も一般的なシンボルペアを識別します。それは「“u”」に続いて「“n”」で、16回出現します。したがって、「“u”」と「“n”」は「“un”」に結合され、語彙に追加されます。次に最も頻度の高いシンボルペアは、「“h”」に続いて「“ug”」で、15回出現します。再びペアが結合され、「hug」が語彙に追加できます。",Tt,is,Ua="この段階では、語彙は<code>[&quot;b&quot;, &quot;g&quot;, &quot;h&quot;, &quot;n&quot;, &quot;p&quot;, &quot;s&quot;, &quot;u&quot;, &quot;ug&quot;, &quot;un&quot;, &quot;hug&quot;]</code>であり、一意の単語のセットは以下のように表されます：",dt,os,vt,ms,ka="前提として、Byte-Pair Encoding（BPE）のトレーニングがこの段階で停止すると、学習されたマージルールが新しい単語に適用されます（新しい単語にはベースボキャブラリに含まれていないシンボルが含まれていない限り）。 例えば、単語 “bug” は [“b”, “ug”] としてトークン化されますが、“mug” はベースボキャブラリに “m” シンボルが含まれていないため、[”<unk>”, “ug”] としてトークン化されます。 一般的に、“m” のような単一の文字は、トレーニングデータには通常、各文字の少なくとも1つの出現が含まれているため、”<unk>” シンボルに置き換えられることはありませんが、絵文字のような非常に特殊な文字の場合には発生する可能性があります。",bt,us,Ca='前述のように、ボキャブラリサイズ、すなわちベースボキャブラリサイズ + マージの回数は選択するハイパーパラメータです。 例えば、<a href="model_doc/gpt">GPT</a> はベース文字が478文字で、40,000回のマージ後にトレーニングを停止したため、ボキャブラリサイズは40,478です。',wt,rs,$t,cs,_a='すべてのUnicode文字をベース文字と考えると、すべての可能なベース文字が含まれるかもしれないベースボキャブラリはかなり大きくなることがあります。 <a href="https://cdn.openai.com/better-language-models/language_models_are_unsupervised_multitask_learners.pdf" rel="nofollow">GPT-2</a> は、ベースボキャブラリを256バイトにする賢いトリックとしてバイトをベースボキャブラリとして使用し、すべてのベース文字がボキャブラリに含まれるようにしています。 パンクチュエーションを扱うためのいくつかの追加ルールを備えたGPT2のトークナイザは、&lt;unk&gt; シンボルを必要とせずにすべてのテキストをトークン化できます。 <a href="model_doc/gpt">GPT-2</a> は50,257のボキャブラリサイズを持っており、これは256バイトのベーストークン、特別なテキストの終了を示すトークン、および50,000回のマージで学習したシンボルに対応しています。',xt,hs,It,gs,Pa='WordPieceは、<a href="model_doc/bert">BERT</a>、<a href="model_doc/distilbert">DistilBERT</a>、および<a href="model_doc/electra">Electra</a>で使用されるサブワードトークナイゼーションアルゴリズムです。 このアルゴリズムは、<a href="https://static.googleusercontent.com/media/research.google.com/ja//pubs/archive/37842.pdf" rel="nofollow">Japanese and Korean Voice Search (Schuster et al., 2012)</a> で概説されており、BPEに非常に似ています。 WordPieceは最も頻繁なシンボルペアを選択するのではなく、トレーニングデータに追加した場合にトレーニングデータの尤度を最大化するシンボルペアを選択します。',Ut,ys,za="これは具体的にはどういう意味ですか？前の例を参照すると、トレーニングデータの尤度を最大化することは、そのシンボルペアの確率をその最初のシンボルに続く2番目のシンボルの確率で割ったものが、すべてのシンボルペアの中で最も大きい場合に該当するシンボルペアを見つけることに等しいです。 たとえば、“u” の後に “g” が続く場合、他のどのシンボルペアよりも “ug” の確率を “u”、“g” で割った確率が高ければ、それらのシンボルは結合されます。直感的に言えば、WordPieceは2つのシンボルを結合することによって失われるものを評価し、それがそれに値するかどうかを確認する点でBPEとはわずかに異なります。",kt,Ms,Ct,js,La='Unigramは、<a href="https://arxiv.org/pdf/1804.10959.pdf" rel="nofollow">Subword Regularization: Improving Neural Network Translation Models with Multiple Subword Candidates (Kudo, 2018)</a> で導入されたサブワードトークナイゼーションアルゴリズムです。 BPEやWordPieceとは異なり、Unigramはベースボキャブラリを多数のシンボルで初期化し、各シンボルを削減してより小さなボキャブラリを取得します。 ベースボキャブラリは、事前にトークン化されたすべての単語と最も一般的な部分文字列に対応する可能性があります。 Unigramはtransformersのモデルの直接の使用には適していませんが、<a href="#sentencepiece">SentencePiece</a>と組み合わせて使用されます。',_t,qs,Ha="各トレーニングステップで、Unigramアルゴリズムは現在のボキャブラリとユニグラム言語モデルを使用してトレーニングデータ上の損失（通常は対数尤度として定義）を定義します。その後、ボキャブラリ内の各シンボルについて、そのシンボルがボキャブラリから削除された場合に全体の損失がどれだけ増加するかを計算します。 Unigramは、損失の増加が最も低いp（通常は10％または20％）パーセントのシンボルを削除します。つまり、トレーニングデータ全体の損失に最も影響を与えない、最も損失の少ないシンボルを削除します。 このプロセスは、ボキャブラリが望ましいサイズに達するまで繰り返されます。 Unigramアルゴリズムは常にベース文字を保持するため、任意の単語をトークン化できます。",Pt,fs,Ea="Unigramはマージルールに基づいていないため（BPEとWordPieceとは対照的に）、トレーニング後の新しいテキストのトークン化にはいくつかの方法があります。例として、トレーニングされたUnigramトークナイザが持つボキャブラリが次のような場合：",zt,Js,Lt,Ts,Sa="<code>&quot;hugs&quot;</code>は、<code>[&quot;hug&quot;, &quot;s&quot;]</code>、<code>[&quot;h&quot;, &quot;ug&quot;, &quot;s&quot;]</code>、または<code>[&quot;h&quot;, &quot;u&quot;, &quot;g&quot;, &quot;s&quot;]</code>のようにトークン化できます。では、どれを選択すべきでしょうか？ Unigramは、トレーニングコーパス内の各トークンの確率を保存し、トレーニング後に各可能なトークン化の確率を計算できるようにします。このアルゴリズムは実際には最も可能性の高いトークン化を選択しますが、確率に従って可能なトークン化をサンプリングするオプションも提供します。",Ht,y,na,Et,Za='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>x</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">x_{1}, \\dots, x_{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',St,Bt,Ga='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',Dt,At,Va='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S(x_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>',Zt,Gt,Wa=`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="script">L</mi><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>S</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\\mathcal{L} = -\\sum_{i=1}^{N} \\log \\left ( \\sum_{x \\in S(x_{i})} p(x) \\right )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathcal">L</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1
c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,
-36,557 l0,84c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,
949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9
c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,
-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189
l0,-92c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,
-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.809em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.516em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,
63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5
c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,9
c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664
c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11
c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17
c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558
l0,-144c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,
-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span>`,Vt,xs,Wt,ds,Nt,vs,Ba='これまでに説明したすべてのトークン化アルゴリズムには同じ問題があります。それは、入力テキストが単語を区切るためにスペースを使用していると仮定しているということです。しかし、すべての言語が単語を区切るためにスペースを使用しているわけではありません。この問題を一般的に解決するための1つの方法は、言語固有の前トークナイザーを使用することです（例：<a href="model_doc/xlm">XLM</a>は特定の中国語、日本語、およびタイ語の前トークナイザーを使用しています）。より一般的にこの問題を解決するために、<a href="https://arxiv.org/pdf/1808.06226.pdf" rel="nofollow">SentencePiece：ニューラルテキスト処理のためのシンプルで言語非依存のサブワードトークナイザーおよびデトークナイザー（Kudo et al.、2018）</a> は、入力を生の入力ストリームとして扱い、スペースを使用する文字のセットに含めます。それからBPEまたはunigramアルゴリズムを使用して適切な語彙を構築します。',Qt,bs,Da="たとえば、<code>XLNetTokenizer</code>はSentencePieceを使用しており、そのために前述の例で<code>&quot;▁&quot;</code>文字が語彙に含まれていました。SentencePieceを使用したデコードは非常に簡単で、すべてのトークンを単純に連結し、<code>&quot;▁&quot;</code>はスペースに置換されます。",Xt,ws,Aa='ライブラリ内のすべてのtransformersモデルは、SentencePieceをunigramと組み合わせて使用します。SentencePieceを使用するモデルの例には、<a href="model_doc/albert">ALBERT</a>、<a href="model_doc/xlnet">XLNet</a>、<a href="model_doc/marian">Marian</a>、および<a href="model_doc/t5">T5</a>があります。',Kt,Us,Rt;return J=new f({props:{title:"Summary of the tokenizers",local:"summary-of-the-tokenizers",headingTag:"h1"}}),T=new Fa({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Mixed",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/ja/tokenizer_summary.ipynb"},{label:"PyTorch",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/ja/pytorch/tokenizer_summary.ipynb"},{label:"TensorFlow",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/ja/tensorflow/tokenizer_summary.ipynb"},{label:"Mixed",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/ja/tokenizer_summary.ipynb"},{label:"PyTorch",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/ja/pytorch/tokenizer_summary.ipynb"},{label:"TensorFlow",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/ja/tensorflow/tokenizer_summary.ipynb"}]}}),v=new aa({props:{id:"VFp38yj8h3A"}}),$=new f({props:{title:"Introduction",local:"introduction",headingTag:"h2"}}),I=new aa({props:{id:"nhJxYji1aho"}}),k=new M({props:{code:"JTVCJTIyRG9uJ3QlMjIlMkMlMjAlMjJ5b3UlMjIlMkMlMjAlMjJsb3ZlJTIyJTJDJTIwJTIyJUYwJTlGJUE0JTk3JTIyJTJDJTIwJTIyVHJhbnNmb3JtZXJzJTNGJTIyJTJDJTIwJTIyV2UlMjIlMkMlMjAlMjJzdXJlJTIyJTJDJTIwJTIyZG8uJTIyJTVE",highlighted:'<span class="hljs-selector-attr">[<span class="hljs-string">&quot;Don&#x27;t&quot;</span>, <span class="hljs-string">&quot;you&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>, <span class="hljs-string">&quot;🤗&quot;</span>, <span class="hljs-string">&quot;Transformers?&quot;</span>, <span class="hljs-string">&quot;We&quot;</span>, <span class="hljs-string">&quot;sure&quot;</span>, <span class="hljs-string">&quot;do.&quot;</span>]</span>',wrap:!1}}),_=new M({props:{code:"JTVCJTIyRG9uJTIyJTJDJTIwJTIyJyUyMiUyQyUyMCUyMnQlMjIlMkMlMjAlMjJ5b3UlMjIlMkMlMjAlMjJsb3ZlJTIyJTJDJTIwJTIyJUYwJTlGJUE0JTk3JTIyJTJDJTIwJTIyVHJhbnNmb3JtZXJzJTIyJTJDJTIwJTIyJTNGJTIyJTJDJTIwJTIyV2UlMjIlMkMlMjAlMjJzdXJlJTIyJTJDJTIwJTIyZG8lMjIlMkMlMjAlMjIuJTIyJTVE",highlighted:'<span class="hljs-selector-attr">[<span class="hljs-string">&quot;Don&quot;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;you&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>, <span class="hljs-string">&quot;🤗&quot;</span>, <span class="hljs-string">&quot;Transformers&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;We&quot;</span>, <span class="hljs-string">&quot;sure&quot;</span>, <span class="hljs-string">&quot;do&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>]</span>',wrap:!1}}),L=new M({props:{code:"JTVCJTIyRG8lMjIlMkMlMjAlMjJuJ3QlMjIlMkMlMjAlMjJ5b3UlMjIlMkMlMjAlMjJsb3ZlJTIyJTJDJTIwJTIyJUYwJTlGJUE0JTk3JTIyJTJDJTIwJTIyVHJhbnNmb3JtZXJzJTIyJTJDJTIwJTIyJTNGJTIyJTJDJTIwJTIyV2UlMjIlMkMlMjAlMjJzdXJlJTIyJTJDJTIwJTIyZG8lMjIlMkMlMjAlMjIuJTIyJTVE",highlighted:'<span class="hljs-selector-attr">[<span class="hljs-string">&quot;Do&quot;</span>, <span class="hljs-string">&quot;n&#x27;t&quot;</span>, <span class="hljs-string">&quot;you&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>, <span class="hljs-string">&quot;🤗&quot;</span>, <span class="hljs-string">&quot;Transformers&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;We&quot;</span>, <span class="hljs-string">&quot;sure&quot;</span>, <span class="hljs-string">&quot;do&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>]</span>',wrap:!1}}),B=new aa({props:{id:"ssLq_EK2jLE"}}),A=new f({props:{title:"Subword tokenization",local:"subword-tokenization",headingTag:"h2"}}),Z=new aa({props:{id:"zHvTiHr506c"}}),W=new M({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEJlcnRUb2tlbml6ZXIlMEElMEF0b2tlbml6ZXIlMjAlM0QlMjBCZXJ0VG9rZW5pemVyLmZyb21fcHJldHJhaW5lZCglMjJnb29nbGUtYmVydCUyRmJlcnQtYmFzZS11bmNhc2VkJTIyKSUwQXRva2VuaXplci50b2tlbml6ZSglMjJJJTIwaGF2ZSUyMGElMjBuZXclMjBHUFUhJTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.tokenize(<span class="hljs-string">&quot;I have a new GPU!&quot;</span>)
[<span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;have&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;new&quot;</span>, <span class="hljs-string">&quot;gp&quot;</span>, <span class="hljs-string">&quot;##u&quot;</span>, <span class="hljs-string">&quot;!&quot;</span>]`,wrap:!1}}),X=new M({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFhMTmV0VG9rZW5pemVyJTBBJTBBdG9rZW5pemVyJTIwJTNEJTIwWExOZXRUb2tlbml6ZXIuZnJvbV9wcmV0cmFpbmVkKCUyMnhsbmV0JTJGeGxuZXQtYmFzZS1jYXNlZCUyMiklMEF0b2tlbml6ZXIudG9rZW5pemUoJTIyRG9uJ3QlMjB5b3UlMjBsb3ZlJTIwJUYwJTlGJUE0JTk3JTIwVHJhbnNmb3JtZXJzJTNGJTIwV2UlMjBzdXJlJTIwZG8uJTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> XLNetTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = XLNetTokenizer.from_pretrained(<span class="hljs-string">&quot;xlnet/xlnet-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.tokenize(<span class="hljs-string">&quot;Don&#x27;t you love 🤗 Transformers? We sure do.&quot;</span>)
[<span class="hljs-string">&quot;▁Don&quot;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;▁you&quot;</span>, <span class="hljs-string">&quot;▁love&quot;</span>, <span class="hljs-string">&quot;▁&quot;</span>, <span class="hljs-string">&quot;🤗&quot;</span>, <span class="hljs-string">&quot;▁&quot;</span>, <span class="hljs-string">&quot;Transform&quot;</span>, <span class="hljs-string">&quot;ers&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;▁We&quot;</span>, <span class="hljs-string">&quot;▁sure&quot;</span>, <span class="hljs-string">&quot;▁do&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>]`,wrap:!1}}),Y=new f({props:{title:"Byte-Pair Encoding（BPE）",local:"byte-pair-encodingbpe",headingTag:"h3"}}),ts=new M({props:{code:"KCUyMmh1ZyUyMiUyQyUyMDEwKSUyQyUyMCglMjJwdWclMjIlMkMlMjA1KSUyQyUyMCglMjJwdW4lMjIlMkMlMjAxMiklMkMlMjAoJTIyYnVuJTIyJTJDJTIwNCklMkMlMjAoJTIyaHVncyUyMiUyQyUyMDUp",highlighted:'(<span class="hljs-string">&quot;hug&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;pug&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;pun&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">12</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;bun&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;hugs&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span>)',wrap:!1}}),ns=new M({props:{code:"KCUyMmglMjIlMjAlMjJ1JTIyJTIwJTIyZyUyMiUyQyUyMDEwKSUyQyUyMCglMjJwJTIyJTIwJTIydSUyMiUyMCUyMmclMjIlMkMlMjA1KSUyQyUyMCglMjJwJTIyJTIwJTIydSUyMiUyMCUyMm4lMjIlMkMlMjAxMiklMkMlMjAoJTIyYiUyMiUyMCUyMnUlMjIlMjAlMjJuJTIyJTJDJTIwNCklMkMlMjAoJTIyaCUyMiUyMCUyMnUlMjIlMjAlMjJnJTIyJTIwJTIycyUyMiUyQyUyMDUp",highlighted:'(<span class="hljs-string">&quot;h&quot;</span> <span class="hljs-string">&quot;u&quot;</span> <span class="hljs-string">&quot;g&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;u&quot;</span> <span class="hljs-string">&quot;g&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;u&quot;</span> <span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">12</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-string">&quot;u&quot;</span> <span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;h&quot;</span> <span class="hljs-string">&quot;u&quot;</span> <span class="hljs-string">&quot;g&quot;</span> <span class="hljs-string">&quot;s&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span>)',wrap:!1}}),ls=new M({props:{code:"KCUyMmglMjIlMjAlMjJ1ZyUyMiUyQyUyMDEwKSUyQyUyMCglMjJwJTIyJTIwJTIydWclMjIlMkMlMjA1KSUyQyUyMCglMjJwJTIyJTIwJTIydSUyMiUyMCUyMm4lMjIlMkMlMjAxMiklMkMlMjAoJTIyYiUyMiUyMCUyMnUlMjIlMjAlMjJuJTIyJTJDJTIwNCklMkMlMjAoJTIyaCUyMiUyMCUyMnVnJTIyJTIwJTIycyUyMiUyQyUyMDUp",highlighted:'(<span class="hljs-string">&quot;h&quot;</span> <span class="hljs-string">&quot;ug&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;ug&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;u&quot;</span> <span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">12</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-string">&quot;u&quot;</span> <span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;h&quot;</span> <span class="hljs-string">&quot;ug&quot;</span> <span class="hljs-string">&quot;s&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span>)',wrap:!1}}),os=new M({props:{code:"KCUyMmh1ZyUyMiUyQyUyMDEwKSUyQyUyMCglMjJwJTIyJTIwJTIydWclMjIlMkMlMjA1KSUyQyUyMCglMjJwJTIyJTIwJTIydW4lMjIlMkMlMjAxMiklMkMlMjAoJTIyYiUyMiUyMCUyMnVuJTIyJTJDJTIwNCklMkMlMjAoJTIyaHVnJTIyJTIwJTIycyUyMiUyQyUyMDUp",highlighted:'(<span class="hljs-string">&quot;hug&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;ug&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;un&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">12</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-string">&quot;un&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;hug&quot;</span> <span class="hljs-string">&quot;s&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span>)',wrap:!1}}),rs=new f({props:{title:"Byte-level BPE",local:"byte-level-bpe",headingTag:"h4"}}),hs=new f({props:{title:"WordPiece",local:"wordpiece",headingTag:"h3"}}),Ms=new f({props:{title:"Unigram",local:"unigram",headingTag:"h3"}}),Js=new M({props:{code:"JTVCJTIyYiUyMiUyQyUyMCUyMmclMjIlMkMlMjAlMjJoJTIyJTJDJTIwJTIybiUyMiUyQyUyMCUyMnAlMjIlMkMlMjAlMjJzJTIyJTJDJTIwJTIydSUyMiUyQyUyMCUyMnVnJTIyJTJDJTIwJTIydW4lMjIlMkMlMjAlMjJodWclMjIlNUQlMkM=",highlighted:'<span class="hljs-selector-attr">[<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;ug&quot;</span>, <span class="hljs-string">&quot;un&quot;</span>, <span class="hljs-string">&quot;hug&quot;</span>]</span>,',wrap:!1}}),ds=new f({props:{title:"SentencePiece",local:"sentencepiece",headingTag:"h3"}}),{c(){j=p("meta"),_s=e(),Is=p("p"),Ps=e(),m(J.$$.fragment),zs=e(),m(T.$$.fragment),Ls=e(),d=p("p"),d.textContent=la,Hs=e(),m(v.$$.fragment),Es=e(),b=p("p"),b.innerHTML=pa,Ss=e(),w=p("p"),w.innerHTML=ia,Bs=e(),m($.$$.fragment),Ds=e(),x=p("p"),x.textContent=oa,As=e(),m(I.$$.fragment),Zs=e(),U=p("p"),U.textContent=ma,Gs=e(),m(k.$$.fragment),Vs=e(),C=p("p"),C.textContent=ua,Ws=e(),m(_.$$.fragment),Ns=e(),P=p("p"),P.textContent=ra,Qs=e(),z=p("p"),z.innerHTML=ca,Xs=e(),m(L.$$.fragment),Ks=e(),H=p("p"),H.innerHTML=ha,Rs=e(),E=p("p"),E.textContent=ga,Ys=e(),S=p("p"),S.textContent=ya,Fs=e(),m(B.$$.fragment),Os=e(),D=p("p"),D.innerHTML=Ma,st=e(),m(A.$$.fragment),tt=e(),m(Z.$$.fragment),at=e(),G=p("p"),G.textContent=ja,nt=e(),V=p("p"),V.innerHTML=qa,et=e(),m(W.$$.fragment),lt=e(),N=p("p"),N.textContent=fa,pt=e(),Q=p("p"),Q.innerHTML=Ja,it=e(),m(X.$$.fragment),ot=e(),K=p("p"),K.innerHTML=Ta,mt=e(),R=p("p"),R.textContent=da,ut=e(),$s=p("a"),rt=e(),m(Y.$$.fragment),ct=e(),F=p("p"),F.innerHTML=va,ht=e(),O=p("p"),O.textContent=ba,gt=e(),ss=p("p"),ss.textContent=wa,yt=e(),m(ts.$$.fragment),Mt=e(),as=p("p"),as.textContent=$a,jt=e(),m(ns.$$.fragment),qt=e(),es=p("p"),es.innerHTML=xa,ft=e(),m(ls.$$.fragment),Jt=e(),ps=p("p"),ps.textContent=Ia,Tt=e(),is=p("p"),is.innerHTML=Ua,dt=e(),m(os.$$.fragment),vt=e(),ms=p("p"),ms.textContent=ka,bt=e(),us=p("p"),us.innerHTML=Ca,wt=e(),m(rs.$$.fragment),$t=e(),cs=p("p"),cs.innerHTML=_a,xt=e(),m(hs.$$.fragment),It=e(),gs=p("p"),gs.innerHTML=Pa,Ut=e(),ys=p("p"),ys.textContent=za,kt=e(),m(Ms.$$.fragment),Ct=e(),js=p("p"),js.innerHTML=La,_t=e(),qs=p("p"),qs.textContent=Ha,Pt=e(),fs=p("p"),fs.textContent=Ea,zt=e(),m(Js.$$.fragment),Lt=e(),Ts=p("p"),Ts.innerHTML=Sa,Ht=e(),y=p("p"),na=Yt("これらの確率は、トークナイザーがトレーニングに使用する損失によって定義されます。トレーニングデータが単語"),Et=new Ft(!1),St=Yt(" で構成され、単語"),Bt=new Ft(!1),Dt=Yt(" のすべての可能なトークン化のセットが"),At=new Ft(!1),Zt=Yt(` と定義される場合、全体の損失は次のように定義されます。
`),Gt=new Ft(!1),Vt=e(),xs=p("a"),Wt=e(),m(ds.$$.fragment),Nt=e(),vs=p("p"),vs.innerHTML=Ba,Qt=e(),bs=p("p"),bs.innerHTML=Da,Xt=e(),ws=p("p"),ws.innerHTML=Aa,Kt=e(),Us=p("p"),this.h()},l(s){const t=Ya("svelte-u9bgzb",document.head);j=i(t,"META",{name:!0,content:!0}),t.forEach(a),_s=l(s),Is=i(s,"P",{}),ks(Is).forEach(a),Ps=l(s),u(J.$$.fragment,s),zs=l(s),u(T.$$.fragment,s),Ls=l(s),d=i(s,"P",{"data-svelte-h":!0}),o(d)!=="svelte-1d6pyyh"&&(d.textContent=la),Hs=l(s),u(v.$$.fragment,s),Es=l(s),b=i(s,"P",{"data-svelte-h":!0}),o(b)!=="svelte-4j4peq"&&(b.innerHTML=pa),Ss=l(s),w=i(s,"P",{"data-svelte-h":!0}),o(w)!=="svelte-mzxk5z"&&(w.innerHTML=ia),Bs=l(s),u($.$$.fragment,s),Ds=l(s),x=i(s,"P",{"data-svelte-h":!0}),o(x)!=="svelte-55y976"&&(x.textContent=oa),As=l(s),u(I.$$.fragment,s),Zs=l(s),U=i(s,"P",{"data-svelte-h":!0}),o(U)!=="svelte-16pnngh"&&(U.textContent=ma),Gs=l(s),u(k.$$.fragment,s),Vs=l(s),C=i(s,"P",{"data-svelte-h":!0}),o(C)!=="svelte-w1iij2"&&(C.textContent=ua),Ws=l(s),u(_.$$.fragment,s),Ns=l(s),P=i(s,"P",{"data-svelte-h":!0}),o(P)!=="svelte-1hqp6eb"&&(P.textContent=ra),Qs=l(s),z=i(s,"P",{"data-svelte-h":!0}),o(z)!=="svelte-z8fnbl"&&(z.innerHTML=ca),Xs=l(s),u(L.$$.fragment,s),Ks=l(s),H=i(s,"P",{"data-svelte-h":!0}),o(H)!=="svelte-498jyo"&&(H.innerHTML=ha),Rs=l(s),E=i(s,"P",{"data-svelte-h":!0}),o(E)!=="svelte-1kkkls5"&&(E.textContent=ga),Ys=l(s),S=i(s,"P",{"data-svelte-h":!0}),o(S)!=="svelte-1nl5m8g"&&(S.textContent=ya),Fs=l(s),u(B.$$.fragment,s),Os=l(s),D=i(s,"P",{"data-svelte-h":!0}),o(D)!=="svelte-1xre7p7"&&(D.innerHTML=Ma),st=l(s),u(A.$$.fragment,s),tt=l(s),u(Z.$$.fragment,s),at=l(s),G=i(s,"P",{"data-svelte-h":!0}),o(G)!=="svelte-1hcvub0"&&(G.textContent=ja),nt=l(s),V=i(s,"P",{"data-svelte-h":!0}),o(V)!=="svelte-8v7ct6"&&(V.innerHTML=qa),et=l(s),u(W.$$.fragment,s),lt=l(s),N=i(s,"P",{"data-svelte-h":!0}),o(N)!=="svelte-16et9m7"&&(N.textContent=fa),pt=l(s),Q=i(s,"P",{"data-svelte-h":!0}),o(Q)!=="svelte-wp0289"&&(Q.innerHTML=Ja),it=l(s),u(X.$$.fragment,s),ot=l(s),K=i(s,"P",{"data-svelte-h":!0}),o(K)!=="svelte-1vnbgql"&&(K.innerHTML=Ta),mt=l(s),R=i(s,"P",{"data-svelte-h":!0}),o(R)!=="svelte-8jf10g"&&(R.textContent=da),ut=l(s),$s=i(s,"A",{id:!0}),ks($s).forEach(a),rt=l(s),u(Y.$$.fragment,s),ct=l(s),F=i(s,"P",{"data-svelte-h":!0}),o(F)!=="svelte-ho4j2x"&&(F.innerHTML=va),ht=l(s),O=i(s,"P",{"data-svelte-h":!0}),o(O)!=="svelte-1qbgugk"&&(O.textContent=ba),gt=l(s),ss=i(s,"P",{"data-svelte-h":!0}),o(ss)!=="svelte-161wprb"&&(ss.textContent=wa),yt=l(s),u(ts.$$.fragment,s),Mt=l(s),as=i(s,"P",{"data-svelte-h":!0}),o(as)!=="svelte-16oi8b4"&&(as.textContent=$a),jt=l(s),u(ns.$$.fragment,s),qt=l(s),es=i(s,"P",{"data-svelte-h":!0}),o(es)!=="svelte-17dxb5r"&&(es.innerHTML=xa),ft=l(s),u(ls.$$.fragment,s),Jt=l(s),ps=i(s,"P",{"data-svelte-h":!0}),o(ps)!=="svelte-2aq0hl"&&(ps.textContent=Ia),Tt=l(s),is=i(s,"P",{"data-svelte-h":!0}),o(is)!=="svelte-18kfe3j"&&(is.innerHTML=Ua),dt=l(s),u(os.$$.fragment,s),vt=l(s),ms=i(s,"P",{"data-svelte-h":!0}),o(ms)!=="svelte-1dxsk3r"&&(ms.textContent=ka),bt=l(s),us=i(s,"P",{"data-svelte-h":!0}),o(us)!=="svelte-ib0zvp"&&(us.innerHTML=Ca),wt=l(s),u(rs.$$.fragment,s),$t=l(s),cs=i(s,"P",{"data-svelte-h":!0}),o(cs)!=="svelte-d7xxou"&&(cs.innerHTML=_a),xt=l(s),u(hs.$$.fragment,s),It=l(s),gs=i(s,"P",{"data-svelte-h":!0}),o(gs)!=="svelte-17y2lu3"&&(gs.innerHTML=Pa),Ut=l(s),ys=i(s,"P",{"data-svelte-h":!0}),o(ys)!=="svelte-1svmf1w"&&(ys.textContent=za),kt=l(s),u(Ms.$$.fragment,s),Ct=l(s),js=i(s,"P",{"data-svelte-h":!0}),o(js)!=="svelte-1h6za2"&&(js.innerHTML=La),_t=l(s),qs=i(s,"P",{"data-svelte-h":!0}),o(qs)!=="svelte-1vxh39l"&&(qs.textContent=Ha),Pt=l(s),fs=i(s,"P",{"data-svelte-h":!0}),o(fs)!=="svelte-omiamo"&&(fs.textContent=Ea),zt=l(s),u(Js.$$.fragment,s),Lt=l(s),Ts=i(s,"P",{"data-svelte-h":!0}),o(Ts)!=="svelte-yio45g"&&(Ts.innerHTML=Sa),Ht=l(s),y=i(s,"P",{});var q=ks(y);na=Ot(q,"これらの確率は、トークナイザーがトレーニングに使用する損失によって定義されます。トレーニングデータが単語"),Et=sa(q,!1),St=Ot(q," で構成され、単語"),Bt=sa(q,!1),Dt=Ot(q," のすべての可能なトークン化のセットが"),At=sa(q,!1),Zt=Ot(q,` と定義される場合、全体の損失は次のように定義されます。
`),Gt=sa(q,!1),q.forEach(a),Vt=l(s),xs=i(s,"A",{id:!0}),ks(xs).forEach(a),Wt=l(s),u(ds.$$.fragment,s),Nt=l(s),vs=i(s,"P",{"data-svelte-h":!0}),o(vs)!=="svelte-10a1a3s"&&(vs.innerHTML=Ba),Qt=l(s),bs=i(s,"P",{"data-svelte-h":!0}),o(bs)!=="svelte-birmy3"&&(bs.innerHTML=Da),Xt=l(s),ws=i(s,"P",{"data-svelte-h":!0}),o(ws)!=="svelte-1jgcywe"&&(ws.innerHTML=Aa),Kt=l(s),Us=i(s,"P",{}),ks(Us).forEach(a),this.h()},h(){ta(j,"name","hf:doc:metadata"),ta(j,"content",sn),ta($s,"id","byte-pair-encoding"),Et.a=St,Bt.a=Dt,At.a=Zt,Gt.a=null,ta(xs,"id","sentencepiece")},m(s,t){Cs(document.head,j),n(s,_s,t),n(s,Is,t),n(s,Ps,t),r(J,s,t),n(s,zs,t),r(T,s,t),n(s,Ls,t),n(s,d,t),n(s,Hs,t),r(v,s,t),n(s,Es,t),n(s,b,t),n(s,Ss,t),n(s,w,t),n(s,Bs,t),r($,s,t),n(s,Ds,t),n(s,x,t),n(s,As,t),r(I,s,t),n(s,Zs,t),n(s,U,t),n(s,Gs,t),r(k,s,t),n(s,Vs,t),n(s,C,t),n(s,Ws,t),r(_,s,t),n(s,Ns,t),n(s,P,t),n(s,Qs,t),n(s,z,t),n(s,Xs,t),r(L,s,t),n(s,Ks,t),n(s,H,t),n(s,Rs,t),n(s,E,t),n(s,Ys,t),n(s,S,t),n(s,Fs,t),r(B,s,t),n(s,Os,t),n(s,D,t),n(s,st,t),r(A,s,t),n(s,tt,t),r(Z,s,t),n(s,at,t),n(s,G,t),n(s,nt,t),n(s,V,t),n(s,et,t),r(W,s,t),n(s,lt,t),n(s,N,t),n(s,pt,t),n(s,Q,t),n(s,it,t),r(X,s,t),n(s,ot,t),n(s,K,t),n(s,mt,t),n(s,R,t),n(s,ut,t),n(s,$s,t),n(s,rt,t),r(Y,s,t),n(s,ct,t),n(s,F,t),n(s,ht,t),n(s,O,t),n(s,gt,t),n(s,ss,t),n(s,yt,t),r(ts,s,t),n(s,Mt,t),n(s,as,t),n(s,jt,t),r(ns,s,t),n(s,qt,t),n(s,es,t),n(s,ft,t),r(ls,s,t),n(s,Jt,t),n(s,ps,t),n(s,Tt,t),n(s,is,t),n(s,dt,t),r(os,s,t),n(s,vt,t),n(s,ms,t),n(s,bt,t),n(s,us,t),n(s,wt,t),r(rs,s,t),n(s,$t,t),n(s,cs,t),n(s,xt,t),r(hs,s,t),n(s,It,t),n(s,gs,t),n(s,Ut,t),n(s,ys,t),n(s,kt,t),r(Ms,s,t),n(s,Ct,t),n(s,js,t),n(s,_t,t),n(s,qs,t),n(s,Pt,t),n(s,fs,t),n(s,zt,t),r(Js,s,t),n(s,Lt,t),n(s,Ts,t),n(s,Ht,t),n(s,y,t),Cs(y,na),Et.m(Za,y),Cs(y,St),Bt.m(Ga,y),Cs(y,Dt),At.m(Va,y),Cs(y,Zt),Gt.m(Wa,y),n(s,Vt,t),n(s,xs,t),n(s,Wt,t),r(ds,s,t),n(s,Nt,t),n(s,vs,t),n(s,Qt,t),n(s,bs,t),n(s,Xt,t),n(s,ws,t),n(s,Kt,t),n(s,Us,t),Rt=!0},p:Qa,i(s){Rt||(c(J.$$.fragment,s),c(T.$$.fragment,s),c(v.$$.fragment,s),c($.$$.fragment,s),c(I.$$.fragment,s),c(k.$$.fragment,s),c(_.$$.fragment,s),c(L.$$.fragment,s),c(B.$$.fragment,s),c(A.$$.fragment,s),c(Z.$$.fragment,s),c(W.$$.fragment,s),c(X.$$.fragment,s),c(Y.$$.fragment,s),c(ts.$$.fragment,s),c(ns.$$.fragment,s),c(ls.$$.fragment,s),c(os.$$.fragment,s),c(rs.$$.fragment,s),c(hs.$$.fragment,s),c(Ms.$$.fragment,s),c(Js.$$.fragment,s),c(ds.$$.fragment,s),Rt=!0)},o(s){h(J.$$.fragment,s),h(T.$$.fragment,s),h(v.$$.fragment,s),h($.$$.fragment,s),h(I.$$.fragment,s),h(k.$$.fragment,s),h(_.$$.fragment,s),h(L.$$.fragment,s),h(B.$$.fragment,s),h(A.$$.fragment,s),h(Z.$$.fragment,s),h(W.$$.fragment,s),h(X.$$.fragment,s),h(Y.$$.fragment,s),h(ts.$$.fragment,s),h(ns.$$.fragment,s),h(ls.$$.fragment,s),h(os.$$.fragment,s),h(rs.$$.fragment,s),h(hs.$$.fragment,s),h(Ms.$$.fragment,s),h(Js.$$.fragment,s),h(ds.$$.fragment,s),Rt=!1},d(s){s&&(a(_s),a(Is),a(Ps),a(zs),a(Ls),a(d),a(Hs),a(Es),a(b),a(Ss),a(w),a(Bs),a(Ds),a(x),a(As),a(Zs),a(U),a(Gs),a(Vs),a(C),a(Ws),a(Ns),a(P),a(Qs),a(z),a(Xs),a(Ks),a(H),a(Rs),a(E),a(Ys),a(S),a(Fs),a(Os),a(D),a(st),a(tt),a(at),a(G),a(nt),a(V),a(et),a(lt),a(N),a(pt),a(Q),a(it),a(ot),a(K),a(mt),a(R),a(ut),a($s),a(rt),a(ct),a(F),a(ht),a(O),a(gt),a(ss),a(yt),a(Mt),a(as),a(jt),a(qt),a(es),a(ft),a(Jt),a(ps),a(Tt),a(is),a(dt),a(vt),a(ms),a(bt),a(us),a(wt),a($t),a(cs),a(xt),a(It),a(gs),a(Ut),a(ys),a(kt),a(Ct),a(js),a(_t),a(qs),a(Pt),a(fs),a(zt),a(Lt),a(Ts),a(Ht),a(y),a(Vt),a(xs),a(Wt),a(Nt),a(vs),a(Qt),a(bs),a(Xt),a(ws),a(Kt),a(Us)),a(j),g(J,s),g(T,s),g(v,s),g($,s),g(I,s),g(k,s),g(_,s),g(L,s),g(B,s),g(A,s),g(Z,s),g(W,s),g(X,s),g(Y,s),g(ts,s),g(ns,s),g(ls,s),g(os,s),g(rs,s),g(hs,s),g(Ms,s),g(Js,s),g(ds,s)}}}const sn='{"title":"Summary of the tokenizers","local":"summary-of-the-tokenizers","sections":[{"title":"Introduction","local":"introduction","sections":[],"depth":2},{"title":"Subword tokenization","local":"subword-tokenization","sections":[{"title":"Byte-Pair Encoding（BPE）","local":"byte-pair-encodingbpe","sections":[{"title":"Byte-level BPE","local":"byte-level-bpe","sections":[],"depth":4}],"depth":3},{"title":"WordPiece","local":"wordpiece","sections":[],"depth":3},{"title":"Unigram","local":"unigram","sections":[],"depth":3},{"title":"SentencePiece","local":"sentencepiece","sections":[],"depth":3}],"depth":2}],"depth":1}';function tn(ea){return Xa(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class mn extends Ka{constructor(j){super(),Ra(this,j,tn,Oa,Na,{})}}export{mn as component};
