import{s as wa,o as xa,n as F}from"../chunks/scheduler.9bc65507.js";import{S as Aa,i as Ma,g as i,s as r,r as c,A as ka,h as m,f as o,c as n,j as w,u as g,x as b,k as x,y as t,a as d,v as f,d as u,t as h,w as $}from"../chunks/index.707bf1b6.js";import{T as jn}from"../chunks/Tip.c2ecdbf4.js";import{D as A}from"../chunks/Docstring.17db21ae.js";import{C as Lt}from"../chunks/CodeBlock.54a9f38d.js";import{E as jt}from"../chunks/ExampleCodeBlock.4f515aa9.js";import{H as P}from"../chunks/Heading.342b1fa6.js";function Ia(k){let l,T=`Transformers Agents は実験的な API であり、いつでも変更される可能性があります。エージェントから返される結果
API または基礎となるモデルは変更される傾向があるため、変更される可能性があります。`;return{c(){l=i("p"),l.textContent=T},l(_){l=m(_,"P",{"data-svelte-h":!0}),b(l)!=="svelte-1j35sfa"&&(l.textContent=T)},m(_,p){d(_,l,p)},p:F,d(_){_&&o(l)}}}function Ca(k){let l,T="Example:",_,p,v;return p=new Lt({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEhmQWdlbnQlMEElMEFhZ2VudCUyMCUzRCUyMEhmQWdlbnQoJTIyaHR0cHMlM0ElMkYlMkZhcGktaW5mZXJlbmNlLmh1Z2dpbmdmYWNlLmNvJTJGbW9kZWxzJTJGYmlnY29kZSUyRnN0YXJjb2RlciUyMiklMEFhZ2VudC5ydW4oJTIySXMlMjB0aGUlMjBmb2xsb3dpbmclMjAlNjB0ZXh0JTYwJTIwKGluJTIwU3BhbmlzaCklMjBwb3NpdGl2ZSUyMG9yJTIwbmVnYXRpdmUlM0YlMjIlMkMlMjB0ZXh0JTNEJTIyJUMyJUExRXN0ZSUyMGVzJTIwdW4lMjBBUEklMjBtdXklMjBhZ3JhZGFibGUhJTIyKQ==",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> HfAgent

agent = HfAgent(<span class="hljs-string">&quot;https://api-inference.huggingface.co/models/bigcode/starcoder&quot;</span>)
agent.run(<span class="hljs-string">&quot;Is the following \`text\` (in Spanish) positive or negative?&quot;</span>, text=<span class="hljs-string">&quot;¡Este es un API muy agradable!&quot;</span>)`,wrap:!1}}),{c(){l=i("p"),l.textContent=T,_=r(),c(p.$$.fragment)},l(a){l=m(a,"P",{"data-svelte-h":!0}),b(l)!=="svelte-11lpom8"&&(l.textContent=T),_=n(a),g(p.$$.fragment,a)},m(a,y){d(a,l,y),d(a,_,y),f(p,a,y),v=!0},p:F,i(a){v||(u(p.$$.fragment,a),v=!0)},o(a){h(p.$$.fragment,a),v=!1},d(a){a&&(o(l),o(_)),$(p,a)}}}function Pa(k){let l,T="Example:",_,p,v;return p=new Lt({props:{code:"aW1wb3J0JTIwdG9yY2glMEFmcm9tJTIwdHJhbnNmb3JtZXJzJTIwaW1wb3J0JTIwQXV0b01vZGVsRm9yQ2F1c2FsTE0lMkMlMjBBdXRvVG9rZW5pemVyJTJDJTIwTG9jYWxBZ2VudCUwQSUwQWNoZWNrcG9pbnQlMjAlM0QlMjAlMjJiaWdjb2RlJTJGc3RhcmNvZGVyJTIyJTBBbW9kZWwlMjAlM0QlMjBBdXRvTW9kZWxGb3JDYXVzYWxMTS5mcm9tX3ByZXRyYWluZWQoY2hlY2twb2ludCUyQyUyMGRldmljZV9tYXAlM0QlMjJhdXRvJTIyJTJDJTIwdG9yY2hfZHR5cGUlM0R0b3JjaC5iZmxvYXQxNiklMEF0b2tlbml6ZXIlMjAlM0QlMjBBdXRvVG9rZW5pemVyLmZyb21fcHJldHJhaW5lZChjaGVja3BvaW50KSUwQSUwQWFnZW50JTIwJTNEJTIwTG9jYWxBZ2VudChtb2RlbCUyQyUyMHRva2VuaXplciklMEFhZ2VudC5ydW4oJTIyRHJhdyUyMG1lJTIwYSUyMHBpY3R1cmUlMjBvZiUyMHJpdmVycyUyMGFuZCUyMGxha2VzLiUyMik=",highlighted:`<span class="hljs-keyword">import</span> torch
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForCausalLM, AutoTokenizer, LocalAgent

checkpoint = <span class="hljs-string">&quot;bigcode/starcoder&quot;</span>
model = AutoModelForCausalLM.from_pretrained(checkpoint, device_map=<span class="hljs-string">&quot;auto&quot;</span>, torch_dtype=torch.bfloat16)
tokenizer = AutoTokenizer.from_pretrained(checkpoint)

agent = LocalAgent(model, tokenizer)
agent.run(<span class="hljs-string">&quot;Draw me a picture of rivers and lakes.&quot;</span>)`,wrap:!1}}),{c(){l=i("p"),l.textContent=T,_=r(),c(p.$$.fragment)},l(a){l=m(a,"P",{"data-svelte-h":!0}),b(l)!=="svelte-11lpom8"&&(l.textContent=T),_=n(a),g(p.$$.fragment,a)},m(a,y){d(a,l,y),d(a,_,y),f(p,a,y),v=!0},p:F,i(a){v||(u(p.$$.fragment,a),v=!0)},o(a){h(p.$$.fragment,a),v=!1},d(a){a&&(o(l),o(_)),$(p,a)}}}function Ha(k){let l,T="Example:",_,p,v;return p=new Lt({props:{code:"aW1wb3J0JTIwdG9yY2glMEFmcm9tJTIwdHJhbnNmb3JtZXJzJTIwaW1wb3J0JTIwTG9jYWxBZ2VudCUwQSUwQWFnZW50JTIwJTNEJTIwTG9jYWxBZ2VudC5mcm9tX3ByZXRyYWluZWQoJTIyYmlnY29kZSUyRnN0YXJjb2RlciUyMiUyQyUyMGRldmljZV9tYXAlM0QlMjJhdXRvJTIyJTJDJTIwdG9yY2hfZHR5cGUlM0R0b3JjaC5iZmxvYXQxNiklMEFhZ2VudC5ydW4oJTIyRHJhdyUyMG1lJTIwYSUyMHBpY3R1cmUlMjBvZiUyMHJpdmVycyUyMGFuZCUyMGxha2VzLiUyMik=",highlighted:`<span class="hljs-keyword">import</span> torch
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> LocalAgent

agent = LocalAgent.from_pretrained(<span class="hljs-string">&quot;bigcode/starcoder&quot;</span>, device_map=<span class="hljs-string">&quot;auto&quot;</span>, torch_dtype=torch.bfloat16)
agent.run(<span class="hljs-string">&quot;Draw me a picture of rivers and lakes.&quot;</span>)`,wrap:!1}}),{c(){l=i("p"),l.textContent=T,_=r(),c(p.$$.fragment)},l(a){l=m(a,"P",{"data-svelte-h":!0}),b(l)!=="svelte-11lpom8"&&(l.textContent=T),_=n(a),g(p.$$.fragment,a)},m(a,y){d(a,l,y),d(a,_,y),f(p,a,y),v=!0},p:F,i(a){v||(u(p.$$.fragment,a),v=!0)},o(a){h(p.$$.fragment,a),v=!1},d(a){a&&(o(l),o(_)),$(p,a)}}}function ja(k){let l,T=`The openAI models are used in generation mode, so even for the <code>chat()</code> API, it’s better to use models like
<code>&quot;text-davinci-003&quot;</code> over the chat-GPT variant. Proper support for chat-GPT models will come in a next version.`;return{c(){l=i("p"),l.innerHTML=T},l(_){l=m(_,"P",{"data-svelte-h":!0}),b(l)!=="svelte-3idp4e"&&(l.innerHTML=T)},m(_,p){d(_,l,p)},p:F,d(_){_&&o(l)}}}function La(k){let l,T="Example:",_,p,v;return p=new Lt({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyME9wZW5BaUFnZW50JTBBJTBBYWdlbnQlMjAlM0QlMjBPcGVuQWlBZ2VudChtb2RlbCUzRCUyMnRleHQtZGF2aW5jaS0wMDMlMjIlMkMlMjBhcGlfa2V5JTNEeHh4KSUwQWFnZW50LnJ1biglMjJJcyUyMHRoZSUyMGZvbGxvd2luZyUyMCU2MHRleHQlNjAlMjAoaW4lMjBTcGFuaXNoKSUyMHBvc2l0aXZlJTIwb3IlMjBuZWdhdGl2ZSUzRiUyMiUyQyUyMHRleHQlM0QlMjIlQzIlQTFFc3RlJTIwZXMlMjB1biUyMEFQSSUyMG11eSUyMGFncmFkYWJsZSElMjIp",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> OpenAiAgent

agent = OpenAiAgent(model=<span class="hljs-string">&quot;text-davinci-003&quot;</span>, api_key=xxx)
agent.run(<span class="hljs-string">&quot;Is the following \`text\` (in Spanish) positive or negative?&quot;</span>, text=<span class="hljs-string">&quot;¡Este es un API muy agradable!&quot;</span>)`,wrap:!1}}),{c(){l=i("p"),l.textContent=T,_=r(),c(p.$$.fragment)},l(a){l=m(a,"P",{"data-svelte-h":!0}),b(l)!=="svelte-11lpom8"&&(l.textContent=T),_=n(a),g(p.$$.fragment,a)},m(a,y){d(a,l,y),d(a,_,y),f(p,a,y),v=!0},p:F,i(a){v||(u(p.$$.fragment,a),v=!0)},o(a){h(p.$$.fragment,a),v=!1},d(a){a&&(o(l),o(_)),$(p,a)}}}function Ja(k){let l,T=`The openAI models are used in generation mode, so even for the <code>chat()</code> API, it’s better to use models like
<code>&quot;text-davinci-003&quot;</code> over the chat-GPT variant. Proper support for chat-GPT models will come in a next version.`;return{c(){l=i("p"),l.innerHTML=T},l(_){l=m(_,"P",{"data-svelte-h":!0}),b(l)!=="svelte-3idp4e"&&(l.innerHTML=T)},m(_,p){d(_,l,p)},p:F,d(_){_&&o(l)}}}function Ua(k){let l,T="Example:",_,p,v;return p=new Lt({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF6dXJlT3BlbkFpQWdlbnQlMEElMEFhZ2VudCUyMCUzRCUyMEF6dXJlQWlBZ2VudChkZXBsb3ltZW50X2lkJTNEJTIyRGF2aW5jaS0wMDMlMjIlMkMlMjBhcGlfa2V5JTNEeHh4JTJDJTIwcmVzb3VyY2VfbmFtZSUzRHl5eSklMEFhZ2VudC5ydW4oJTIySXMlMjB0aGUlMjBmb2xsb3dpbmclMjAlNjB0ZXh0JTYwJTIwKGluJTIwU3BhbmlzaCklMjBwb3NpdGl2ZSUyMG9yJTIwbmVnYXRpdmUlM0YlMjIlMkMlMjB0ZXh0JTNEJTIyJUMyJUExRXN0ZSUyMGVzJTIwdW4lMjBBUEklMjBtdXklMjBhZ3JhZGFibGUhJTIyKQ==",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AzureOpenAiAgent

agent = AzureAiAgent(deployment_id=<span class="hljs-string">&quot;Davinci-003&quot;</span>, api_key=xxx, resource_name=yyy)
agent.run(<span class="hljs-string">&quot;Is the following \`text\` (in Spanish) positive or negative?&quot;</span>, text=<span class="hljs-string">&quot;¡Este es un API muy agradable!&quot;</span>)`,wrap:!1}}),{c(){l=i("p"),l.textContent=T,_=r(),c(p.$$.fragment)},l(a){l=m(a,"P",{"data-svelte-h":!0}),b(l)!=="svelte-11lpom8"&&(l.textContent=T),_=n(a),g(p.$$.fragment,a)},m(a,y){d(a,l,y),d(a,_,y),f(p,a,y),v=!0},p:F,i(a){v||(u(p.$$.fragment,a),v=!0)},o(a){h(p.$$.fragment,a),v=!1},d(a){a&&(o(l),o(_)),$(p,a)}}}function qa(k){let l,T="Example:",_,p,v;return p=new Lt({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEhmQWdlbnQlMEElMEFhZ2VudCUyMCUzRCUyMEhmQWdlbnQoJTIyaHR0cHMlM0ElMkYlMkZhcGktaW5mZXJlbmNlLmh1Z2dpbmdmYWNlLmNvJTJGbW9kZWxzJTJGYmlnY29kZSUyRnN0YXJjb2RlciUyMiklMEFhZ2VudC5jaGF0KCUyMkRyYXclMjBtZSUyMGElMjBwaWN0dXJlJTIwb2YlMjByaXZlcnMlMjBhbmQlMjBsYWtlcyUyMiklMEElMEFhZ2VudC5jaGF0KCUyMlRyYW5zZm9ybSUyMHRoZSUyMHBpY3R1cmUlMjBzbyUyMHRoYXQlMjB0aGVyZSUyMGlzJTIwYSUyMHJvY2slMjBpbiUyMHRoZXJlJTIyKQ==",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> HfAgent

agent = HfAgent(<span class="hljs-string">&quot;https://api-inference.huggingface.co/models/bigcode/starcoder&quot;</span>)
agent.chat(<span class="hljs-string">&quot;Draw me a picture of rivers and lakes&quot;</span>)

agent.chat(<span class="hljs-string">&quot;Transform the picture so that there is a rock in there&quot;</span>)`,wrap:!1}}),{c(){l=i("p"),l.textContent=T,_=r(),c(p.$$.fragment)},l(a){l=m(a,"P",{"data-svelte-h":!0}),b(l)!=="svelte-11lpom8"&&(l.textContent=T),_=n(a),g(p.$$.fragment,a)},m(a,y){d(a,l,y),d(a,_,y),f(p,a,y),v=!0},p:F,i(a){v||(u(p.$$.fragment,a),v=!0)},o(a){h(p.$$.fragment,a),v=!1},d(a){a&&(o(l),o(_)),$(p,a)}}}function Ea(k){let l,T="Example:",_,p,v;return p=new Lt({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEhmQWdlbnQlMEElMEFhZ2VudCUyMCUzRCUyMEhmQWdlbnQoJTIyaHR0cHMlM0ElMkYlMkZhcGktaW5mZXJlbmNlLmh1Z2dpbmdmYWNlLmNvJTJGbW9kZWxzJTJGYmlnY29kZSUyRnN0YXJjb2RlciUyMiklMEFhZ2VudC5ydW4oJTIyRHJhdyUyMG1lJTIwYSUyMHBpY3R1cmUlMjBvZiUyMHJpdmVycyUyMGFuZCUyMGxha2VzJTIyKQ==",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> HfAgent

agent = HfAgent(<span class="hljs-string">&quot;https://api-inference.huggingface.co/models/bigcode/starcoder&quot;</span>)
agent.run(<span class="hljs-string">&quot;Draw me a picture of rivers and lakes&quot;</span>)`,wrap:!1}}),{c(){l=i("p"),l.textContent=T,_=r(),c(p.$$.fragment)},l(a){l=m(a,"P",{"data-svelte-h":!0}),b(l)!=="svelte-11lpom8"&&(l.textContent=T),_=n(a),g(p.$$.fragment,a)},m(a,y){d(a,l,y),d(a,_,y),f(p,a,y),v=!0},p:F,i(a){v||(u(p.$$.fragment,a),v=!0)},o(a){h(p.$$.fragment,a),v=!1},d(a){a&&(o(l),o(_)),$(p,a)}}}function Za(k){let l,T,_,p,v,a,y,yo,Pe,Ln=`エージェントとツールの詳細については、<a href="../transformers_agents">入門ガイド</a> を必ずお読みください。このページ
基礎となるクラスの API ドキュメントが含まれています。`,To,He,wo,je,Jn='私たちは 3 種類のエージェントを提供します。<a href="/docs/transformers/main/ja/main_classes/agent#transformers.HfAgent">HfAgent</a> はオープンソース モデルの推論エンドポイントを使用し、<a href="/docs/transformers/main/ja/main_classes/agent#transformers.LocalAgent">LocalAgent</a> は選択したモデルをローカルで使用し、<a href="/docs/transformers/main/ja/main_classes/agent#transformers.OpenAiAgent">OpenAiAgent</a> は OpenAI クローズド モデルを使用します。',xo,Le,Ao,Q,Je,br,Jt,Un="Agent that uses an inference endpoint to generate code.",vr,re,Mo,Ue,ko,L,qe,yr,Ut,qn="Agent that uses a local model and tokenizer to generate code.",Tr,ne,wr,N,Ee,xr,qt,En="Convenience method to build a <code>LocalAgent</code> from a pretrained checkpoint.",Ar,ae,Io,Ze,Co,J,We,Mr,Et,Zn="Agent that uses the openai API to generate code.",kr,se,Ir,le,Po,Re,Ho,U,Qe,Cr,Zt,Wn=`Agent that uses Azure OpenAI to generate code. See the <a href="https://learn.microsoft.com/en-us/azure/cognitive-services/openai/" rel="nofollow">official
documentation</a> to learn how to deploy an openAI
model on Azure`,Pr,ie,Hr,me,jo,ze,Lo,H,Ge,jr,Wt,Rn="Base class for all agents which contains the main API methods.",Lr,D,Ve,Jr,Rt,Qn="Sends a new request to the agent in a chat. Will use the previous ones in its history.",Ur,de,qr,B,Ne,Er,Qt,zn="Sends a request to the agent.",Zr,pe,Wr,ce,De,Rr,zt,Gn='Clears the history of prior calls to <a href="/docs/transformers/main/ja/main_classes/agent#transformers.Agent.chat">chat()</a>.',Jo,Be,Uo,Ye,qo,S,Fe,Qr,Gt,Vn="Main function to quickly load a tool, be it on the Hub or in the Transformers library.",Eo,Se,Zo,M,Xe,zr,Vt,Nn=`A base class for the functions used by the agent. Subclass this and implement the <code>__call__</code> method as well as the
following class attributes:`,Gr,Nt,Dn=`<li><strong>description</strong> (<code>str</code>) — A short description of what your tool does, the inputs it expects and the output(s) it
will return. For instance ‘This is a tool that downloads a file from a <code>url</code>. It takes the <code>url</code> as input, and
returns the text contained in the file’.</li> <li><strong>name</strong> (<code>str</code>) — A performative name that will be used for your tool in the prompt to the agent. For instance
<code>&quot;text-classifier&quot;</code> or <code>&quot;image_generator&quot;</code>.</li> <li><strong>inputs</strong> (<code>List[str]</code>) — The list of modalities expected for the inputs (in the same order as in the call).
Modalitiies should be <code>&quot;text&quot;</code>, <code>&quot;image&quot;</code> or <code>&quot;audio&quot;</code>. This is only used by <code>launch_gradio_demo</code> or to make a
nice space from your tool.</li> <li><strong>outputs</strong> (<code>List[str]</code>) — The list of modalities returned but the tool (in the same order as the return of the
call method). Modalitiies should be <code>&quot;text&quot;</code>, <code>&quot;image&quot;</code> or <code>&quot;audio&quot;</code>. This is only used by <code>launch_gradio_demo</code>
or to make a nice space from your tool.</li>`,Vr,Dt,Bn=`You can also override the method <a href="/docs/transformers/main/ja/main_classes/agent#transformers.Tool.setup">setup()</a> if your tool as an expensive operation to perform before being
usable (such as loading a model). <a href="/docs/transformers/main/ja/main_classes/agent#transformers.Tool.setup">setup()</a> will be called the first time you use your tool, but not at
instantiation.`,Nr,ge,Oe,Dr,Bt,Yn='Creates a <a href="/docs/transformers/main/ja/main_classes/agent#transformers.Tool">Tool</a> from a gradio tool.',Br,fe,Ke,Yr,Yt,Fn="Loads a tool defined on the Hub.",Fr,ue,et,Sr,Ft,Sn="Upload the tool to the Hub.",Xr,R,tt,Or,St,Xn=`Saves the relevant code files for your tool so it can be pushed to the Hub. This will copy the code of your
tool in <code>output_dir</code> as well as autogenerate:`,Kr,Xt,On=`<li>a config file named <code>tool_config.json</code></li> <li>an <code>app.py</code> file so that your tool can be converted to a space</li> <li>a <code>requirements.txt</code> containing the names of the module used by your tool (as detected when inspecting its
code)</li>`,en,Ot,Kn="You should only use this method to save tools that are defined in a separate module (not <code>__main__</code>).",tn,he,ot,on,Kt,ea=`Overwrite this method here for any operation that is expensive and needs to be executed before you start using
your tool. Such as loading a big model.`,Wo,rt,Ro,I,nt,rn,eo,ta=`A <a href="/docs/transformers/main/ja/main_classes/agent#transformers.Tool">Tool</a> tailored towards Transformer models. On top of the class attributes of the base class <a href="/docs/transformers/main/ja/main_classes/agent#transformers.Tool">Tool</a>, you will
need to specify:`,nn,to,oa=`<li><strong>model_class</strong> (<code>type</code>) — The class to use to load the model in this tool.</li> <li><strong>default_checkpoint</strong> (<code>str</code>) — The default checkpoint that should be used when the user doesn’t specify one.</li> <li><strong>pre_processor_class</strong> (<code>type</code>, <em>optional</em>, defaults to <a href="/docs/transformers/main/ja/model_doc/auto#transformers.AutoProcessor">AutoProcessor</a>) — The class to use to load the
pre-processor</li> <li><strong>post_processor_class</strong> (<code>type</code>, <em>optional</em>, defaults to <a href="/docs/transformers/main/ja/model_doc/auto#transformers.AutoProcessor">AutoProcessor</a>) — The class to use to load the
post-processor (when different from the pre-processor).</li>`,an,$e,at,sn,oo,ra="Uses the <code>post_processor</code> to decode the model output.",ln,_e,st,mn,ro,na="Uses the <code>pre_processor</code> to prepare the inputs for the <code>model</code>.",dn,be,lt,pn,no,aa="Sends the inputs through the <code>model</code>.",cn,ve,it,gn,ao,sa="Instantiates the <code>pre_processor</code>, <code>model</code> and <code>post_processor</code> if necessary.",Qo,mt,zo,q,dt,fn,so,la='A <a href="/docs/transformers/main/ja/main_classes/agent#transformers.Tool">Tool</a> that will make requests to an inference endpoint.',un,ye,pt,hn,lo,ia=`You can override this method in your custom class of <a href="/docs/transformers/main/ja/main_classes/agent#transformers.RemoteTool">RemoteTool</a> to apply some custom post-processing of the
outputs of the endpoint.`,$n,Y,ct,_n,io,ma=`Prepare the inputs received for the HTTP client sending data to the endpoint. Positional arguments will be
matched with the signature of the <code>tool_class</code> if it was provided at instantation. Images will be encoded into
bytes.`,bn,mo,da='You can override this method in your custom class of <a href="/docs/transformers/main/ja/main_classes/agent#transformers.RemoteTool">RemoteTool</a>.',Go,gt,Vo,X,ft,vn,po,pa=`Launches a gradio demo for a tool. The corresponding tool class needs to properly implement the class attributes
<code>inputs</code> and <code>outputs</code>.`,No,ut,Do,ht,ca=`エージェントはツール間であらゆる種類のオブジェクトを処理できます。ツールは完全にマルチモーダルであるため、受け取りと返品が可能です
テキスト、画像、オーディオ、ビデオなどのタイプ。ツール間の互換性を高めるためだけでなく、
これらの戻り値を ipython (jupyter、colab、ipython ノートブックなど) で正しくレンダリングするには、ラッパー クラスを実装します。
このタイプの周り。`,Bo,$t,ga=`ラップされたオブジェクトは最初と同じように動作し続けるはずです。テキストオブジェクトは依然として文字列または画像として動作する必要があります
オブジェクトは依然として <code>PIL.Image</code> として動作するはずです。`,Yo,_t,fa="これらのタイプには、次の 3 つの特定の目的があります。",Fo,bt,ua=`<li>型に対して <code>to_raw</code> を呼び出すと、基になるオブジェクトが返されるはずです</li> <li>型に対して <code>to_string</code> を呼び出すと、オブジェクトを文字列として返す必要があります。<code>AgentText</code> の場合は文字列になる可能性があります。
ただし、他のインスタンスのオブジェクトのシリアル化されたバージョンのパスになります。</li> <li>ipython カーネルで表示すると、オブジェクトが正しく表示されるはずです</li>`,So,vt,Xo,O,yt,yn,co,ha="Text type returned by the agent. Behaves as a string.",Oo,Tt,Ko,E,wt,Tn,go,$a="Image type returned by the agent. Behaves as a PIL.Image.",wn,Te,xt,xn,fo,_a="Returns the “raw” version of that object. In the case of an AgentImage, it is a PIL.Image.",An,we,At,Mn,uo,ba=`Returns the stringified version of that object. In the case of an AgentImage, it is a path to the serialized
version of the image.`,er,Mt,tr,Z,kt,kn,ho,va="Audio type returned by the agent.",In,xe,It,Cn,$o,ya="Returns the “raw” version of that object. It is a <code>torch.Tensor</code> object.",Pn,Ae,Ct,Hn,_o,Ta=`Returns the stringified version of that object. In the case of an AgentAudio, it is a path to the serialized
version of the audio.`,or,vo,rr;return v=new P({props:{title:"エージェントとツール",local:"エージェントとツール",headingTag:"h1"}}),y=new jn({props:{warning:!0,$$slots:{default:[Ia]},$$scope:{ctx:k}}}),He=new P({props:{title:"エージェント",local:"エージェント",headingTag:"h2"}}),Le=new P({props:{title:"HfAgent",local:"transformers.HfAgent",headingTag:"h3"}}),Je=new A({props:{name:"class transformers.HfAgent",anchor:"transformers.HfAgent",parameters:[{name:"url_endpoint",val:""},{name:"token",val:" = None"},{name:"chat_prompt_template",val:" = None"},{name:"run_prompt_template",val:" = None"},{name:"additional_tools",val:" = None"}],parametersDescription:[{anchor:"transformers.HfAgent.url_endpoint",description:`<strong>url_endpoint</strong> (<code>str</code>) &#x2014;
The name of the url endpoint to use.`,name:"url_endpoint"},{anchor:"transformers.HfAgent.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If unset, will use the token generated when
running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"token"},{anchor:"transformers.HfAgent.chat_prompt_template",description:`<strong>chat_prompt_template</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Pass along your own prompt if you want to override the default template for the <code>chat</code> method. Can be the
actual prompt template or a repo ID (on the Hugging Face Hub). The prompt should be in a file named
<code>chat_prompt_template.txt</code> in this repo in this case.`,name:"chat_prompt_template"},{anchor:"transformers.HfAgent.run_prompt_template",description:`<strong>run_prompt_template</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Pass along your own prompt if you want to override the default template for the <code>run</code> method. Can be the
actual prompt template or a repo ID (on the Hugging Face Hub). The prompt should be in a file named
<code>run_prompt_template.txt</code> in this repo in this case.`,name:"run_prompt_template"},{anchor:"transformers.HfAgent.additional_tools",description:`<strong>additional_tools</strong> (<a href="/docs/transformers/main/ja/main_classes/agent#transformers.Tool">Tool</a>, list of tools or dictionary with tool values, <em>optional</em>) &#x2014;
Any additional tools to include on top of the default ones. If you pass along a tool with the same name as
one of the default tools, that default tool will be overridden.`,name:"additional_tools"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/agents.py#L595"}}),re=new jt({props:{anchor:"transformers.HfAgent.example",$$slots:{default:[Ca]},$$scope:{ctx:k}}}),Ue=new P({props:{title:"LocalAgent",local:"transformers.LocalAgent",headingTag:"h3"}}),qe=new A({props:{name:"class transformers.LocalAgent",anchor:"transformers.LocalAgent",parameters:[{name:"model",val:""},{name:"tokenizer",val:""},{name:"chat_prompt_template",val:" = None"},{name:"run_prompt_template",val:" = None"},{name:"additional_tools",val:" = None"}],parametersDescription:[{anchor:"transformers.LocalAgent.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/ja/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a>) &#x2014;
The model to use for the agent.`,name:"model"},{anchor:"transformers.LocalAgent.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/ja/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer to use for the agent.`,name:"tokenizer"},{anchor:"transformers.LocalAgent.chat_prompt_template",description:`<strong>chat_prompt_template</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Pass along your own prompt if you want to override the default template for the <code>chat</code> method. Can be the
actual prompt template or a repo ID (on the Hugging Face Hub). The prompt should be in a file named
<code>chat_prompt_template.txt</code> in this repo in this case.`,name:"chat_prompt_template"},{anchor:"transformers.LocalAgent.run_prompt_template",description:`<strong>run_prompt_template</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Pass along your own prompt if you want to override the default template for the <code>run</code> method. Can be the
actual prompt template or a repo ID (on the Hugging Face Hub). The prompt should be in a file named
<code>run_prompt_template.txt</code> in this repo in this case.`,name:"run_prompt_template"},{anchor:"transformers.LocalAgent.additional_tools",description:`<strong>additional_tools</strong> (<a href="/docs/transformers/main/ja/main_classes/agent#transformers.Tool">Tool</a>, list of tools or dictionary with tool values, <em>optional</em>) &#x2014;
Any additional tools to include on top of the default ones. If you pass along a tool with the same name as
one of the default tools, that default tool will be overridden.`,name:"additional_tools"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/agents.py#L666"}}),ne=new jt({props:{anchor:"transformers.LocalAgent.example",$$slots:{default:[Pa]},$$scope:{ctx:k}}}),Ee=new A({props:{name:"from_pretrained",anchor:"transformers.LocalAgent.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.LocalAgent.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of a repo on the Hub or a local path to a folder containing both model and tokenizer.`,name:"pretrained_model_name_or_path"},{anchor:"transformers.LocalAgent.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
Keyword arguments passed along to <a href="/docs/transformers/main/ja/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a>.`,name:"kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/agents.py#L711"}}),ae=new jt({props:{anchor:"transformers.LocalAgent.from_pretrained.example",$$slots:{default:[Ha]},$$scope:{ctx:k}}}),Ze=new P({props:{title:"OpenAiAgent",local:"transformers.OpenAiAgent",headingTag:"h3"}}),We=new A({props:{name:"class transformers.OpenAiAgent",anchor:"transformers.OpenAiAgent",parameters:[{name:"model",val:" = 'text-davinci-003'"},{name:"api_key",val:" = None"},{name:"chat_prompt_template",val:" = None"},{name:"run_prompt_template",val:" = None"},{name:"additional_tools",val:" = None"}],parametersDescription:[{anchor:"transformers.OpenAiAgent.model",description:`<strong>model</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;text-davinci-003&quot;</code>) &#x2014;
The name of the OpenAI model to use.`,name:"model"},{anchor:"transformers.OpenAiAgent.api_key",description:`<strong>api_key</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The API key to use. If unset, will look for the environment variable <code>&quot;OPENAI_API_KEY&quot;</code>.`,name:"api_key"},{anchor:"transformers.OpenAiAgent.chat_prompt_template",description:`<strong>chat_prompt_template</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Pass along your own prompt if you want to override the default template for the <code>chat</code> method. Can be the
actual prompt template or a repo ID (on the Hugging Face Hub). The prompt should be in a file named
<code>chat_prompt_template.txt</code> in this repo in this case.`,name:"chat_prompt_template"},{anchor:"transformers.OpenAiAgent.run_prompt_template",description:`<strong>run_prompt_template</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Pass along your own prompt if you want to override the default template for the <code>run</code> method. Can be the
actual prompt template or a repo ID (on the Hugging Face Hub). The prompt should be in a file named
<code>run_prompt_template.txt</code> in this repo in this case.`,name:"run_prompt_template"},{anchor:"transformers.OpenAiAgent.additional_tools",description:`<strong>additional_tools</strong> (<a href="/docs/transformers/main/ja/main_classes/agent#transformers.Tool">Tool</a>, list of tools or dictionary with tool values, <em>optional</em>) &#x2014;
Any additional tools to include on top of the default ones. If you pass along a tool with the same name as
one of the default tools, that default tool will be overridden.`,name:"additional_tools"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/agents.py#L371"}}),se=new jn({props:{warning:!0,$$slots:{default:[ja]},$$scope:{ctx:k}}}),le=new jt({props:{anchor:"transformers.OpenAiAgent.example",$$slots:{default:[La]},$$scope:{ctx:k}}}),Re=new P({props:{title:"AzureOpenAiAgent",local:"transformers.AzureOpenAiAgent",headingTag:"h3"}}),Qe=new A({props:{name:"class transformers.AzureOpenAiAgent",anchor:"transformers.AzureOpenAiAgent",parameters:[{name:"deployment_id",val:""},{name:"api_key",val:" = None"},{name:"resource_name",val:" = None"},{name:"api_version",val:" = '2022-12-01'"},{name:"is_chat_model",val:" = None"},{name:"chat_prompt_template",val:" = None"},{name:"run_prompt_template",val:" = None"},{name:"additional_tools",val:" = None"}],parametersDescription:[{anchor:"transformers.AzureOpenAiAgent.deployment_id",description:`<strong>deployment_id</strong> (<code>str</code>) &#x2014;
The name of the deployed Azure openAI model to use.`,name:"deployment_id"},{anchor:"transformers.AzureOpenAiAgent.api_key",description:`<strong>api_key</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The API key to use. If unset, will look for the environment variable <code>&quot;AZURE_OPENAI_API_KEY&quot;</code>.`,name:"api_key"},{anchor:"transformers.AzureOpenAiAgent.resource_name",description:`<strong>resource_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The name of your Azure OpenAI Resource. If unset, will look for the environment variable
<code>&quot;AZURE_OPENAI_RESOURCE_NAME&quot;</code>.`,name:"resource_name"},{anchor:"transformers.AzureOpenAiAgent.api_version",description:`<strong>api_version</strong> (<code>str</code>, <em>optional</em>, default to <code>&quot;2022-12-01&quot;</code>) &#x2014;
The API version to use for this agent.`,name:"api_version"},{anchor:"transformers.AzureOpenAiAgent.is_chat_mode",description:`<strong>is_chat_mode</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether you are using a completion model or a chat model (see note above, chat models won&#x2019;t be as
efficient). Will default to <code>gpt</code> being in the <code>deployment_id</code> or not.`,name:"is_chat_mode"},{anchor:"transformers.AzureOpenAiAgent.chat_prompt_template",description:`<strong>chat_prompt_template</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Pass along your own prompt if you want to override the default template for the <code>chat</code> method. Can be the
actual prompt template or a repo ID (on the Hugging Face Hub). The prompt should be in a file named
<code>chat_prompt_template.txt</code> in this repo in this case.`,name:"chat_prompt_template"},{anchor:"transformers.AzureOpenAiAgent.run_prompt_template",description:`<strong>run_prompt_template</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Pass along your own prompt if you want to override the default template for the <code>run</code> method. Can be the
actual prompt template or a repo ID (on the Hugging Face Hub). The prompt should be in a file named
<code>run_prompt_template.txt</code> in this repo in this case.`,name:"run_prompt_template"},{anchor:"transformers.AzureOpenAiAgent.additional_tools",description:`<strong>additional_tools</strong> (<a href="/docs/transformers/main/ja/main_classes/agent#transformers.Tool">Tool</a>, list of tools or dictionary with tool values, <em>optional</em>) &#x2014;
Any additional tools to include on top of the default ones. If you pass along a tool with the same name as
one of the default tools, that default tool will be overridden.`,name:"additional_tools"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/agents.py#L469"}}),ie=new jn({props:{warning:!0,$$slots:{default:[Ja]},$$scope:{ctx:k}}}),me=new jt({props:{anchor:"transformers.AzureOpenAiAgent.example",$$slots:{default:[Ua]},$$scope:{ctx:k}}}),ze=new P({props:{title:"Agent",local:"transformers.Agent",headingTag:"h3"}}),Ge=new A({props:{name:"class transformers.Agent",anchor:"transformers.Agent",parameters:[{name:"chat_prompt_template",val:" = None"},{name:"run_prompt_template",val:" = None"},{name:"additional_tools",val:" = None"}],parametersDescription:[{anchor:"transformers.Agent.chat_prompt_template",description:`<strong>chat_prompt_template</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Pass along your own prompt if you want to override the default template for the <code>chat</code> method. Can be the
actual prompt template or a repo ID (on the Hugging Face Hub). The prompt should be in a file named
<code>chat_prompt_template.txt</code> in this repo in this case.`,name:"chat_prompt_template"},{anchor:"transformers.Agent.run_prompt_template",description:`<strong>run_prompt_template</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Pass along your own prompt if you want to override the default template for the <code>run</code> method. Can be the
actual prompt template or a repo ID (on the Hugging Face Hub). The prompt should be in a file named
<code>run_prompt_template.txt</code> in this repo in this case.`,name:"run_prompt_template"},{anchor:"transformers.Agent.additional_tools",description:`<strong>additional_tools</strong> (<a href="/docs/transformers/main/ja/main_classes/agent#transformers.Tool">Tool</a>, list of tools or dictionary with tool values, <em>optional</em>) &#x2014;
Any additional tools to include on top of the default ones. If you pass along a tool with the same name as
one of the default tools, that default tool will be overridden.`,name:"additional_tools"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/agents.py#L196"}}),Ve=new A({props:{name:"chat",anchor:"transformers.Agent.chat",parameters:[{name:"task",val:""},{name:"return_code",val:" = False"},{name:"remote",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.Agent.chat.task",description:"<strong>task</strong> (<code>str</code>) &#x2014; The task to perform",name:"task"},{anchor:"transformers.Agent.chat.return_code",description:`<strong>return_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to just return code and not evaluate it.`,name:"return_code"},{anchor:"transformers.Agent.chat.remote",description:`<strong>remote</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to use remote tools (inference endpoints) instead of local ones.`,name:"remote"},{anchor:"transformers.Agent.chat.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Any keyword argument to send to the agent when evaluating the code.`,name:"kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/agents.py#L268"}}),de=new jt({props:{anchor:"transformers.Agent.chat.example",$$slots:{default:[qa]},$$scope:{ctx:k}}}),Ne=new A({props:{name:"run",anchor:"transformers.Agent.run",parameters:[{name:"task",val:""},{name:"return_code",val:" = False"},{name:"remote",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.Agent.run.task",description:"<strong>task</strong> (<code>str</code>) &#x2014; The task to perform",name:"task"},{anchor:"transformers.Agent.run.return_code",description:`<strong>return_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to just return code and not evaluate it.`,name:"return_code"},{anchor:"transformers.Agent.run.remote",description:`<strong>remote</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to use remote tools (inference endpoints) instead of local ones.`,name:"remote"},{anchor:"transformers.Agent.run.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Any keyword argument to send to the agent when evaluating the code.`,name:"kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/agents.py#L325"}}),pe=new jt({props:{anchor:"transformers.Agent.run.example",$$slots:{default:[Ea]},$$scope:{ctx:k}}}),De=new A({props:{name:"prepare_for_new_chat",anchor:"transformers.Agent.prepare_for_new_chat",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/agents.py#L310"}}),Be=new P({props:{title:"Tools",local:"tools",headingTag:"h2"}}),Ye=new P({props:{title:"load_tool",local:"transformers.load_tool",headingTag:"h3"}}),Fe=new A({props:{name:"transformers.load_tool",anchor:"transformers.load_tool",parameters:[{name:"task_or_repo_id",val:""},{name:"model_repo_id",val:" = None"},{name:"remote",val:" = False"},{name:"token",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.load_tool.task_or_repo_id",description:`<strong>task_or_repo_id</strong> (<code>str</code>) &#x2014;
The task for which to load the tool or a repo ID of a tool on the Hub. Tasks implemented in Transformers
are:</p>
<ul>
<li><code>&quot;document-question-answering&quot;</code></li>
<li><code>&quot;image-captioning&quot;</code></li>
<li><code>&quot;image-question-answering&quot;</code></li>
<li><code>&quot;image-segmentation&quot;</code></li>
<li><code>&quot;speech-to-text&quot;</code></li>
<li><code>&quot;summarization&quot;</code></li>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;text-question-answering&quot;</code></li>
<li><code>&quot;text-to-speech&quot;</code></li>
<li><code>&quot;translation&quot;</code></li>
</ul>`,name:"task_or_repo_id"},{anchor:"transformers.load_tool.model_repo_id",description:`<strong>model_repo_id</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Use this argument to use a different model than the default one for the tool you selected.`,name:"model_repo_id"},{anchor:"transformers.load_tool.remote",description:`<strong>remote</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use your tool by downloading the model or (if it is available) with an inference endpoint.`,name:"remote"},{anchor:"transformers.load_tool.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The token to identify you on hf.co. If unset, will use the token generated when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"token"},{anchor:"transformers.load_tool.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Additional keyword arguments that will be split in two: all arguments relevant to the Hub (such as
<code>cache_dir</code>, <code>revision</code>, <code>subfolder</code>) will be used when downloading the files for your tool, and the others
will be passed along to its init.`,name:"kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/base.py#L629"}}),Se=new P({props:{title:"Tool",local:"transformers.Tool",headingTag:"h3"}}),Xe=new A({props:{name:"class transformers.Tool",anchor:"transformers.Tool",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/base.py#L82"}}),Oe=new A({props:{name:"from_gradio",anchor:"transformers.Tool.from_gradio",parameters:[{name:"gradio_tool",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/base.py#L333"}}),Ke=new A({props:{name:"from_hub",anchor:"transformers.Tool.from_hub",parameters:[{name:"repo_id",val:": str"},{name:"model_repo_id",val:": Optional = None"},{name:"token",val:": Optional = None"},{name:"remote",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.Tool.from_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The name of the repo on the Hub where your tool is defined.`,name:"repo_id"},{anchor:"transformers.Tool.from_hub.model_repo_id",description:`<strong>model_repo_id</strong> (<code>str</code>, <em>optional</em>) &#x2014;
If your tool uses a model and you want to use a different model than the default, you can pass a second
repo ID or an endpoint url to this argument.`,name:"model_repo_id"},{anchor:"transformers.Tool.from_hub.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The token to identify you on hf.co. If unset, will use the token generated when running
<code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"token"},{anchor:"transformers.Tool.from_hub.remote",description:`<strong>remote</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use your tool by downloading the model or (if it is available) with an inference endpoint.`,name:"remote"},{anchor:"transformers.Tool.from_hub.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Additional keyword arguments that will be split in two: all arguments relevant to the Hub (such as
<code>cache_dir</code>, <code>revision</code>, <code>subfolder</code>) will be used when downloading the files for your tool, and the
others will be passed along to its init.`,name:"kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/base.py#L177"}}),et=new A({props:{name:"push_to_hub",anchor:"transformers.Tool.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"commit_message",val:": str = 'Upload tool'"},{name:"private",val:": Optional = None"},{name:"token",val:": Union = None"},{name:"create_pr",val:": bool = False"}],parametersDescription:[{anchor:"transformers.Tool.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The name of the repository you want to push your tool to. It should contain your organization name when
pushing to a given organization.`,name:"repo_id"},{anchor:"transformers.Tool.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;Upload tool&quot;</code>) &#x2014;
Message to commit while pushing.`,name:"commit_message"},{anchor:"transformers.Tool.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private.`,name:"private"},{anchor:"transformers.Tool.push_to_hub.token",description:`<strong>token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If unset, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"token"},{anchor:"transformers.Tool.push_to_hub.create_pr",description:`<strong>create_pr</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to create a PR with the uploaded files or directly commit.`,name:"create_pr"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/base.py#L289"}}),tt=new A({props:{name:"save",anchor:"transformers.Tool.save",parameters:[{name:"output_dir",val:""}],parametersDescription:[{anchor:"transformers.Tool.save.output_dir",description:"<strong>output_dir</strong> (<code>str</code>) &#x2014; The folder in which you want to save your tool.",name:"output_dir"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/base.py#L123"}}),ot=new A({props:{name:"setup",anchor:"transformers.Tool.setup",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/base.py#L116"}}),rt=new P({props:{title:"PipelineTool",local:"transformers.PipelineTool",headingTag:"h3"}}),nt=new A({props:{name:"class transformers.PipelineTool",anchor:"transformers.PipelineTool",parameters:[{name:"model",val:" = None"},{name:"pre_processor",val:" = None"},{name:"post_processor",val:" = None"},{name:"device",val:" = None"},{name:"device_map",val:" = None"},{name:"model_kwargs",val:" = None"},{name:"token",val:" = None"},{name:"**hub_kwargs",val:""}],parametersDescription:[{anchor:"transformers.PipelineTool.model",description:`<strong>model</strong> (<code>str</code> or <a href="/docs/transformers/main/ja/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a>, <em>optional</em>) &#x2014;
The name of the checkpoint to use for the model, or the instantiated model. If unset, will default to the
value of the class attribute <code>default_checkpoint</code>.`,name:"model"},{anchor:"transformers.PipelineTool.pre_processor",description:`<strong>pre_processor</strong> (<code>str</code> or <code>Any</code>, <em>optional</em>) &#x2014;
The name of the checkpoint to use for the pre-processor, or the instantiated pre-processor (can be a
tokenizer, an image processor, a feature extractor or a processor). Will default to the value of <code>model</code> if
unset.`,name:"pre_processor"},{anchor:"transformers.PipelineTool.post_processor",description:`<strong>post_processor</strong> (<code>str</code> or <code>Any</code>, <em>optional</em>) &#x2014;
The name of the checkpoint to use for the post-processor, or the instantiated pre-processor (can be a
tokenizer, an image processor, a feature extractor or a processor). Will default to the <code>pre_processor</code> if
unset.`,name:"post_processor"},{anchor:"transformers.PipelineTool.device",description:`<strong>device</strong> (<code>int</code>, <code>str</code> or <code>torch.device</code>, <em>optional</em>) &#x2014;
The device on which to execute the model. Will default to any accelerator available (GPU, MPS etc&#x2026;), the
CPU otherwise.`,name:"device"},{anchor:"transformers.PipelineTool.device_map",description:`<strong>device_map</strong> (<code>str</code> or <code>dict</code>, <em>optional</em>) &#x2014;
If passed along, will be used to instantiate the model.`,name:"device_map"},{anchor:"transformers.PipelineTool.model_kwargs",description:`<strong>model_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Any keyword argument to send to the model instantiation.`,name:"model_kwargs"},{anchor:"transformers.PipelineTool.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If unset, will use the token generated when
running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"token"},{anchor:"transformers.PipelineTool.hub_kwargs",description:`<strong>hub_kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Any additional keyword argument to send to the methods that will load the data from the Hub.`,name:"hub_kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/base.py#L436"}}),at=new A({props:{name:"decode",anchor:"transformers.PipelineTool.decode",parameters:[{name:"outputs",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/base.py#L555"}}),st=new A({props:{name:"encode",anchor:"transformers.PipelineTool.encode",parameters:[{name:"raw_inputs",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/base.py#L542"}}),lt=new A({props:{name:"forward",anchor:"transformers.PipelineTool.forward",parameters:[{name:"inputs",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/base.py#L548"}}),it=new A({props:{name:"setup",anchor:"transformers.PipelineTool.setup",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/base.py#L516"}}),mt=new P({props:{title:"RemoteTool",local:"transformers.RemoteTool",headingTag:"h3"}}),dt=new A({props:{name:"class transformers.RemoteTool",anchor:"transformers.RemoteTool",parameters:[{name:"endpoint_url",val:" = None"},{name:"token",val:" = None"},{name:"tool_class",val:" = None"}],parametersDescription:[{anchor:"transformers.RemoteTool.endpoint_url",description:`<strong>endpoint_url</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The url of the endpoint to use.`,name:"endpoint_url"},{anchor:"transformers.RemoteTool.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If unset, will use the token generated when
running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"token"},{anchor:"transformers.RemoteTool.tool_class",description:`<strong>tool_class</strong> (<code>type</code>, <em>optional</em>) &#x2014;
The corresponding <code>tool_class</code> if this is a remote version of an existing tool. Will help determine when
the output should be converted to another type (like images).`,name:"tool_class"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/base.py#L349"}}),pt=new A({props:{name:"extract_outputs",anchor:"transformers.RemoteTool.extract_outputs",parameters:[{name:"outputs",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/base.py#L412"}}),ct=new A({props:{name:"prepare_inputs",anchor:"transformers.RemoteTool.prepare_inputs",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/base.py#L369"}}),gt=new P({props:{title:"launch_gradio_demo",local:"transformers.launch_gradio_demo",headingTag:"h3"}}),ft=new A({props:{name:"transformers.launch_gradio_demo",anchor:"transformers.launch_gradio_demo",parameters:[{name:"tool_class",val:": Tool"}],parametersDescription:[{anchor:"transformers.launch_gradio_demo.tool_class",description:"<strong>tool_class</strong> (<code>type</code>) &#x2014; The class of the tool for which to launch the demo.",name:"tool_class"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/base.py#L576"}}),ut=new P({props:{title:"エージェントの種類",local:"エージェントの種類",headingTag:"h2"}}),vt=new P({props:{title:"AgentText",local:"transformers.tools.agent_types.AgentText",headingTag:"h3"}}),yt=new A({props:{name:"class transformers.tools.agent_types.AgentText",anchor:"transformers.tools.agent_types.AgentText",parameters:[{name:"value",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/agent_types.py#L71"}}),Tt=new P({props:{title:"AgentImage",local:"transformers.tools.agent_types.AgentImage",headingTag:"h3"}}),wt=new A({props:{name:"class transformers.tools.agent_types.AgentImage",anchor:"transformers.tools.agent_types.AgentImage",parameters:[{name:"value",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/agent_types.py#L83"}}),xt=new A({props:{name:"to_raw",anchor:"transformers.tools.agent_types.AgentImage.to_raw",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/agent_types.py#L115"}}),At=new A({props:{name:"to_string",anchor:"transformers.tools.agent_types.AgentImage.to_string",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/agent_types.py#L126"}}),Mt=new P({props:{title:"AgentAudio",local:"transformers.tools.agent_types.AgentAudio",headingTag:"h3"}}),kt=new A({props:{name:"class transformers.tools.agent_types.AgentAudio",anchor:"transformers.tools.agent_types.AgentAudio",parameters:[{name:"value",val:""},{name:"samplerate",val:" = 16000"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/agent_types.py#L155"}}),It=new A({props:{name:"to_raw",anchor:"transformers.tools.agent_types.AgentAudio.to_raw",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/agent_types.py#L186"}}),Ct=new A({props:{name:"to_string",anchor:"transformers.tools.agent_types.AgentAudio.to_string",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tools/agent_types.py#L198"}}),{c(){l=i("meta"),T=r(),_=i("p"),p=r(),c(v.$$.fragment),a=r(),c(y.$$.fragment),yo=r(),Pe=i("p"),Pe.innerHTML=Ln,To=r(),c(He.$$.fragment),wo=r(),je=i("p"),je.innerHTML=Jn,xo=r(),c(Le.$$.fragment),Ao=r(),Q=i("div"),c(Je.$$.fragment),br=r(),Jt=i("p"),Jt.textContent=Un,vr=r(),c(re.$$.fragment),Mo=r(),c(Ue.$$.fragment),ko=r(),L=i("div"),c(qe.$$.fragment),yr=r(),Ut=i("p"),Ut.textContent=qn,Tr=r(),c(ne.$$.fragment),wr=r(),N=i("div"),c(Ee.$$.fragment),xr=r(),qt=i("p"),qt.innerHTML=En,Ar=r(),c(ae.$$.fragment),Io=r(),c(Ze.$$.fragment),Co=r(),J=i("div"),c(We.$$.fragment),Mr=r(),Et=i("p"),Et.textContent=Zn,kr=r(),c(se.$$.fragment),Ir=r(),c(le.$$.fragment),Po=r(),c(Re.$$.fragment),Ho=r(),U=i("div"),c(Qe.$$.fragment),Cr=r(),Zt=i("p"),Zt.innerHTML=Wn,Pr=r(),c(ie.$$.fragment),Hr=r(),c(me.$$.fragment),jo=r(),c(ze.$$.fragment),Lo=r(),H=i("div"),c(Ge.$$.fragment),jr=r(),Wt=i("p"),Wt.textContent=Rn,Lr=r(),D=i("div"),c(Ve.$$.fragment),Jr=r(),Rt=i("p"),Rt.textContent=Qn,Ur=r(),c(de.$$.fragment),qr=r(),B=i("div"),c(Ne.$$.fragment),Er=r(),Qt=i("p"),Qt.textContent=zn,Zr=r(),c(pe.$$.fragment),Wr=r(),ce=i("div"),c(De.$$.fragment),Rr=r(),zt=i("p"),zt.innerHTML=Gn,Jo=r(),c(Be.$$.fragment),Uo=r(),c(Ye.$$.fragment),qo=r(),S=i("div"),c(Fe.$$.fragment),Qr=r(),Gt=i("p"),Gt.textContent=Vn,Eo=r(),c(Se.$$.fragment),Zo=r(),M=i("div"),c(Xe.$$.fragment),zr=r(),Vt=i("p"),Vt.innerHTML=Nn,Gr=r(),Nt=i("ul"),Nt.innerHTML=Dn,Vr=r(),Dt=i("p"),Dt.innerHTML=Bn,Nr=r(),ge=i("div"),c(Oe.$$.fragment),Dr=r(),Bt=i("p"),Bt.innerHTML=Yn,Br=r(),fe=i("div"),c(Ke.$$.fragment),Yr=r(),Yt=i("p"),Yt.textContent=Fn,Fr=r(),ue=i("div"),c(et.$$.fragment),Sr=r(),Ft=i("p"),Ft.textContent=Sn,Xr=r(),R=i("div"),c(tt.$$.fragment),Or=r(),St=i("p"),St.innerHTML=Xn,Kr=r(),Xt=i("ul"),Xt.innerHTML=On,en=r(),Ot=i("p"),Ot.innerHTML=Kn,tn=r(),he=i("div"),c(ot.$$.fragment),on=r(),Kt=i("p"),Kt.textContent=ea,Wo=r(),c(rt.$$.fragment),Ro=r(),I=i("div"),c(nt.$$.fragment),rn=r(),eo=i("p"),eo.innerHTML=ta,nn=r(),to=i("ul"),to.innerHTML=oa,an=r(),$e=i("div"),c(at.$$.fragment),sn=r(),oo=i("p"),oo.innerHTML=ra,ln=r(),_e=i("div"),c(st.$$.fragment),mn=r(),ro=i("p"),ro.innerHTML=na,dn=r(),be=i("div"),c(lt.$$.fragment),pn=r(),no=i("p"),no.innerHTML=aa,cn=r(),ve=i("div"),c(it.$$.fragment),gn=r(),ao=i("p"),ao.innerHTML=sa,Qo=r(),c(mt.$$.fragment),zo=r(),q=i("div"),c(dt.$$.fragment),fn=r(),so=i("p"),so.innerHTML=la,un=r(),ye=i("div"),c(pt.$$.fragment),hn=r(),lo=i("p"),lo.innerHTML=ia,$n=r(),Y=i("div"),c(ct.$$.fragment),_n=r(),io=i("p"),io.innerHTML=ma,bn=r(),mo=i("p"),mo.innerHTML=da,Go=r(),c(gt.$$.fragment),Vo=r(),X=i("div"),c(ft.$$.fragment),vn=r(),po=i("p"),po.innerHTML=pa,No=r(),c(ut.$$.fragment),Do=r(),ht=i("p"),ht.textContent=ca,Bo=r(),$t=i("p"),$t.innerHTML=ga,Yo=r(),_t=i("p"),_t.textContent=fa,Fo=r(),bt=i("ul"),bt.innerHTML=ua,So=r(),c(vt.$$.fragment),Xo=r(),O=i("div"),c(yt.$$.fragment),yn=r(),co=i("p"),co.textContent=ha,Oo=r(),c(Tt.$$.fragment),Ko=r(),E=i("div"),c(wt.$$.fragment),Tn=r(),go=i("p"),go.textContent=$a,wn=r(),Te=i("div"),c(xt.$$.fragment),xn=r(),fo=i("p"),fo.textContent=_a,An=r(),we=i("div"),c(At.$$.fragment),Mn=r(),uo=i("p"),uo.textContent=ba,er=r(),c(Mt.$$.fragment),tr=r(),Z=i("div"),c(kt.$$.fragment),kn=r(),ho=i("p"),ho.textContent=va,In=r(),xe=i("div"),c(It.$$.fragment),Cn=r(),$o=i("p"),$o.innerHTML=ya,Pn=r(),Ae=i("div"),c(Ct.$$.fragment),Hn=r(),_o=i("p"),_o.textContent=Ta,or=r(),vo=i("p"),this.h()},l(e){const s=ka("svelte-u9bgzb",document.head);l=m(s,"META",{name:!0,content:!0}),s.forEach(o),T=n(e),_=m(e,"P",{}),w(_).forEach(o),p=n(e),g(v.$$.fragment,e),a=n(e),g(y.$$.fragment,e),yo=n(e),Pe=m(e,"P",{"data-svelte-h":!0}),b(Pe)!=="svelte-s8k95"&&(Pe.innerHTML=Ln),To=n(e),g(He.$$.fragment,e),wo=n(e),je=m(e,"P",{"data-svelte-h":!0}),b(je)!=="svelte-96vrar"&&(je.innerHTML=Jn),xo=n(e),g(Le.$$.fragment,e),Ao=n(e),Q=m(e,"DIV",{class:!0});var K=w(Q);g(Je.$$.fragment,K),br=n(K),Jt=m(K,"P",{"data-svelte-h":!0}),b(Jt)!=="svelte-1uej11q"&&(Jt.textContent=Un),vr=n(K),g(re.$$.fragment,K),K.forEach(o),Mo=n(e),g(Ue.$$.fragment,e),ko=n(e),L=m(e,"DIV",{class:!0});var z=w(L);g(qe.$$.fragment,z),yr=n(z),Ut=m(z,"P",{"data-svelte-h":!0}),b(Ut)!=="svelte-1q3iegi"&&(Ut.textContent=qn),Tr=n(z),g(ne.$$.fragment,z),wr=n(z),N=m(z,"DIV",{class:!0});var ee=w(N);g(Ee.$$.fragment,ee),xr=n(ee),qt=m(ee,"P",{"data-svelte-h":!0}),b(qt)!=="svelte-1qh3hl2"&&(qt.innerHTML=En),Ar=n(ee),g(ae.$$.fragment,ee),ee.forEach(o),z.forEach(o),Io=n(e),g(Ze.$$.fragment,e),Co=n(e),J=m(e,"DIV",{class:!0});var G=w(J);g(We.$$.fragment,G),Mr=n(G),Et=m(G,"P",{"data-svelte-h":!0}),b(Et)!=="svelte-182hy5g"&&(Et.textContent=Zn),kr=n(G),g(se.$$.fragment,G),Ir=n(G),g(le.$$.fragment,G),G.forEach(o),Po=n(e),g(Re.$$.fragment,e),Ho=n(e),U=m(e,"DIV",{class:!0});var V=w(U);g(Qe.$$.fragment,V),Cr=n(V),Zt=m(V,"P",{"data-svelte-h":!0}),b(Zt)!=="svelte-1eoncpw"&&(Zt.innerHTML=Wn),Pr=n(V),g(ie.$$.fragment,V),Hr=n(V),g(me.$$.fragment,V),V.forEach(o),jo=n(e),g(ze.$$.fragment,e),Lo=n(e),H=m(e,"DIV",{class:!0});var W=w(H);g(Ge.$$.fragment,W),jr=n(W),Wt=m(W,"P",{"data-svelte-h":!0}),b(Wt)!=="svelte-1phtukb"&&(Wt.textContent=Rn),Lr=n(W),D=m(W,"DIV",{class:!0});var te=w(D);g(Ve.$$.fragment,te),Jr=n(te),Rt=m(te,"P",{"data-svelte-h":!0}),b(Rt)!=="svelte-1s1qxmr"&&(Rt.textContent=Qn),Ur=n(te),g(de.$$.fragment,te),te.forEach(o),qr=n(W),B=m(W,"DIV",{class:!0});var oe=w(B);g(Ne.$$.fragment,oe),Er=n(oe),Qt=m(oe,"P",{"data-svelte-h":!0}),b(Qt)!=="svelte-1685qxi"&&(Qt.textContent=zn),Zr=n(oe),g(pe.$$.fragment,oe),oe.forEach(o),Wr=n(W),ce=m(W,"DIV",{class:!0});var Pt=w(ce);g(De.$$.fragment,Pt),Rr=n(Pt),zt=m(Pt,"P",{"data-svelte-h":!0}),b(zt)!=="svelte-tet68c"&&(zt.innerHTML=Gn),Pt.forEach(o),W.forEach(o),Jo=n(e),g(Be.$$.fragment,e),Uo=n(e),g(Ye.$$.fragment,e),qo=n(e),S=m(e,"DIV",{class:!0});var Ht=w(S);g(Fe.$$.fragment,Ht),Qr=n(Ht),Gt=m(Ht,"P",{"data-svelte-h":!0}),b(Gt)!=="svelte-16uh3p8"&&(Gt.textContent=Vn),Ht.forEach(o),Eo=n(e),g(Se.$$.fragment,e),Zo=n(e),M=m(e,"DIV",{class:!0});var C=w(M);g(Xe.$$.fragment,C),zr=n(C),Vt=m(C,"P",{"data-svelte-h":!0}),b(Vt)!=="svelte-cca4c5"&&(Vt.innerHTML=Nn),Gr=n(C),Nt=m(C,"UL",{"data-svelte-h":!0}),b(Nt)!=="svelte-1lb1si5"&&(Nt.innerHTML=Dn),Vr=n(C),Dt=m(C,"P",{"data-svelte-h":!0}),b(Dt)!=="svelte-narlai"&&(Dt.innerHTML=Bn),Nr=n(C),ge=m(C,"DIV",{class:!0});var nr=w(ge);g(Oe.$$.fragment,nr),Dr=n(nr),Bt=m(nr,"P",{"data-svelte-h":!0}),b(Bt)!=="svelte-1ja6g59"&&(Bt.innerHTML=Yn),nr.forEach(o),Br=n(C),fe=m(C,"DIV",{class:!0});var ar=w(fe);g(Ke.$$.fragment,ar),Yr=n(ar),Yt=m(ar,"P",{"data-svelte-h":!0}),b(Yt)!=="svelte-yy7b2c"&&(Yt.textContent=Fn),ar.forEach(o),Fr=n(C),ue=m(C,"DIV",{class:!0});var sr=w(ue);g(et.$$.fragment,sr),Sr=n(sr),Ft=m(sr,"P",{"data-svelte-h":!0}),b(Ft)!=="svelte-1u3gku9"&&(Ft.textContent=Sn),sr.forEach(o),Xr=n(C),R=m(C,"DIV",{class:!0});var Me=w(R);g(tt.$$.fragment,Me),Or=n(Me),St=m(Me,"P",{"data-svelte-h":!0}),b(St)!=="svelte-19evuwa"&&(St.innerHTML=Xn),Kr=n(Me),Xt=m(Me,"UL",{"data-svelte-h":!0}),b(Xt)!=="svelte-15of9ze"&&(Xt.innerHTML=On),en=n(Me),Ot=m(Me,"P",{"data-svelte-h":!0}),b(Ot)!=="svelte-msa4ge"&&(Ot.innerHTML=Kn),Me.forEach(o),tn=n(C),he=m(C,"DIV",{class:!0});var lr=w(he);g(ot.$$.fragment,lr),on=n(lr),Kt=m(lr,"P",{"data-svelte-h":!0}),b(Kt)!=="svelte-63kthh"&&(Kt.textContent=ea),lr.forEach(o),C.forEach(o),Wo=n(e),g(rt.$$.fragment,e),Ro=n(e),I=m(e,"DIV",{class:!0});var j=w(I);g(nt.$$.fragment,j),rn=n(j),eo=m(j,"P",{"data-svelte-h":!0}),b(eo)!=="svelte-k9e719"&&(eo.innerHTML=ta),nn=n(j),to=m(j,"UL",{"data-svelte-h":!0}),b(to)!=="svelte-p9ec18"&&(to.innerHTML=oa),an=n(j),$e=m(j,"DIV",{class:!0});var ir=w($e);g(at.$$.fragment,ir),sn=n(ir),oo=m(ir,"P",{"data-svelte-h":!0}),b(oo)!=="svelte-zkjq4t"&&(oo.innerHTML=ra),ir.forEach(o),ln=n(j),_e=m(j,"DIV",{class:!0});var mr=w(_e);g(st.$$.fragment,mr),mn=n(mr),ro=m(mr,"P",{"data-svelte-h":!0}),b(ro)!=="svelte-1vxzk80"&&(ro.innerHTML=na),mr.forEach(o),dn=n(j),be=m(j,"DIV",{class:!0});var dr=w(be);g(lt.$$.fragment,dr),pn=n(dr),no=m(dr,"P",{"data-svelte-h":!0}),b(no)!=="svelte-1qgsi13"&&(no.innerHTML=aa),dr.forEach(o),cn=n(j),ve=m(j,"DIV",{class:!0});var pr=w(ve);g(it.$$.fragment,pr),gn=n(pr),ao=m(pr,"P",{"data-svelte-h":!0}),b(ao)!=="svelte-1ojxz66"&&(ao.innerHTML=sa),pr.forEach(o),j.forEach(o),Qo=n(e),g(mt.$$.fragment,e),zo=n(e),q=m(e,"DIV",{class:!0});var ke=w(q);g(dt.$$.fragment,ke),fn=n(ke),so=m(ke,"P",{"data-svelte-h":!0}),b(so)!=="svelte-1s0mqjq"&&(so.innerHTML=la),un=n(ke),ye=m(ke,"DIV",{class:!0});var cr=w(ye);g(pt.$$.fragment,cr),hn=n(cr),lo=m(cr,"P",{"data-svelte-h":!0}),b(lo)!=="svelte-su22mv"&&(lo.innerHTML=ia),cr.forEach(o),$n=n(ke),Y=m(ke,"DIV",{class:!0});var bo=w(Y);g(ct.$$.fragment,bo),_n=n(bo),io=m(bo,"P",{"data-svelte-h":!0}),b(io)!=="svelte-14yhe1"&&(io.innerHTML=ma),bn=n(bo),mo=m(bo,"P",{"data-svelte-h":!0}),b(mo)!=="svelte-1jtsaoc"&&(mo.innerHTML=da),bo.forEach(o),ke.forEach(o),Go=n(e),g(gt.$$.fragment,e),Vo=n(e),X=m(e,"DIV",{class:!0});var gr=w(X);g(ft.$$.fragment,gr),vn=n(gr),po=m(gr,"P",{"data-svelte-h":!0}),b(po)!=="svelte-78dinl"&&(po.innerHTML=pa),gr.forEach(o),No=n(e),g(ut.$$.fragment,e),Do=n(e),ht=m(e,"P",{"data-svelte-h":!0}),b(ht)!=="svelte-14vr92g"&&(ht.textContent=ca),Bo=n(e),$t=m(e,"P",{"data-svelte-h":!0}),b($t)!=="svelte-1ozzq59"&&($t.innerHTML=ga),Yo=n(e),_t=m(e,"P",{"data-svelte-h":!0}),b(_t)!=="svelte-1ffo2vr"&&(_t.textContent=fa),Fo=n(e),bt=m(e,"UL",{"data-svelte-h":!0}),b(bt)!=="svelte-wzs2d2"&&(bt.innerHTML=ua),So=n(e),g(vt.$$.fragment,e),Xo=n(e),O=m(e,"DIV",{class:!0});var fr=w(O);g(yt.$$.fragment,fr),yn=n(fr),co=m(fr,"P",{"data-svelte-h":!0}),b(co)!=="svelte-57fhj7"&&(co.textContent=ha),fr.forEach(o),Oo=n(e),g(Tt.$$.fragment,e),Ko=n(e),E=m(e,"DIV",{class:!0});var Ie=w(E);g(wt.$$.fragment,Ie),Tn=n(Ie),go=m(Ie,"P",{"data-svelte-h":!0}),b(go)!=="svelte-1hsb0qs"&&(go.textContent=$a),wn=n(Ie),Te=m(Ie,"DIV",{class:!0});var ur=w(Te);g(xt.$$.fragment,ur),xn=n(ur),fo=m(ur,"P",{"data-svelte-h":!0}),b(fo)!=="svelte-ybie7i"&&(fo.textContent=_a),ur.forEach(o),An=n(Ie),we=m(Ie,"DIV",{class:!0});var hr=w(we);g(At.$$.fragment,hr),Mn=n(hr),uo=m(hr,"P",{"data-svelte-h":!0}),b(uo)!=="svelte-chc6sp"&&(uo.textContent=ba),hr.forEach(o),Ie.forEach(o),er=n(e),g(Mt.$$.fragment,e),tr=n(e),Z=m(e,"DIV",{class:!0});var Ce=w(Z);g(kt.$$.fragment,Ce),kn=n(Ce),ho=m(Ce,"P",{"data-svelte-h":!0}),b(ho)!=="svelte-ckiqb6"&&(ho.textContent=va),In=n(Ce),xe=m(Ce,"DIV",{class:!0});var $r=w(xe);g(It.$$.fragment,$r),Cn=n($r),$o=m($r,"P",{"data-svelte-h":!0}),b($o)!=="svelte-10rnn1x"&&($o.innerHTML=ya),$r.forEach(o),Pn=n(Ce),Ae=m(Ce,"DIV",{class:!0});var _r=w(Ae);g(Ct.$$.fragment,_r),Hn=n(_r),_o=m(_r,"P",{"data-svelte-h":!0}),b(_o)!=="svelte-1xu9o93"&&(_o.textContent=Ta),_r.forEach(o),Ce.forEach(o),or=n(e),vo=m(e,"P",{}),w(vo).forEach(o),this.h()},h(){x(l,"name","hf:doc:metadata"),x(l,"content",Wa),x(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,s){t(document.head,l),d(e,T,s),d(e,_,s),d(e,p,s),f(v,e,s),d(e,a,s),f(y,e,s),d(e,yo,s),d(e,Pe,s),d(e,To,s),f(He,e,s),d(e,wo,s),d(e,je,s),d(e,xo,s),f(Le,e,s),d(e,Ao,s),d(e,Q,s),f(Je,Q,null),t(Q,br),t(Q,Jt),t(Q,vr),f(re,Q,null),d(e,Mo,s),f(Ue,e,s),d(e,ko,s),d(e,L,s),f(qe,L,null),t(L,yr),t(L,Ut),t(L,Tr),f(ne,L,null),t(L,wr),t(L,N),f(Ee,N,null),t(N,xr),t(N,qt),t(N,Ar),f(ae,N,null),d(e,Io,s),f(Ze,e,s),d(e,Co,s),d(e,J,s),f(We,J,null),t(J,Mr),t(J,Et),t(J,kr),f(se,J,null),t(J,Ir),f(le,J,null),d(e,Po,s),f(Re,e,s),d(e,Ho,s),d(e,U,s),f(Qe,U,null),t(U,Cr),t(U,Zt),t(U,Pr),f(ie,U,null),t(U,Hr),f(me,U,null),d(e,jo,s),f(ze,e,s),d(e,Lo,s),d(e,H,s),f(Ge,H,null),t(H,jr),t(H,Wt),t(H,Lr),t(H,D),f(Ve,D,null),t(D,Jr),t(D,Rt),t(D,Ur),f(de,D,null),t(H,qr),t(H,B),f(Ne,B,null),t(B,Er),t(B,Qt),t(B,Zr),f(pe,B,null),t(H,Wr),t(H,ce),f(De,ce,null),t(ce,Rr),t(ce,zt),d(e,Jo,s),f(Be,e,s),d(e,Uo,s),f(Ye,e,s),d(e,qo,s),d(e,S,s),f(Fe,S,null),t(S,Qr),t(S,Gt),d(e,Eo,s),f(Se,e,s),d(e,Zo,s),d(e,M,s),f(Xe,M,null),t(M,zr),t(M,Vt),t(M,Gr),t(M,Nt),t(M,Vr),t(M,Dt),t(M,Nr),t(M,ge),f(Oe,ge,null),t(ge,Dr),t(ge,Bt),t(M,Br),t(M,fe),f(Ke,fe,null),t(fe,Yr),t(fe,Yt),t(M,Fr),t(M,ue),f(et,ue,null),t(ue,Sr),t(ue,Ft),t(M,Xr),t(M,R),f(tt,R,null),t(R,Or),t(R,St),t(R,Kr),t(R,Xt),t(R,en),t(R,Ot),t(M,tn),t(M,he),f(ot,he,null),t(he,on),t(he,Kt),d(e,Wo,s),f(rt,e,s),d(e,Ro,s),d(e,I,s),f(nt,I,null),t(I,rn),t(I,eo),t(I,nn),t(I,to),t(I,an),t(I,$e),f(at,$e,null),t($e,sn),t($e,oo),t(I,ln),t(I,_e),f(st,_e,null),t(_e,mn),t(_e,ro),t(I,dn),t(I,be),f(lt,be,null),t(be,pn),t(be,no),t(I,cn),t(I,ve),f(it,ve,null),t(ve,gn),t(ve,ao),d(e,Qo,s),f(mt,e,s),d(e,zo,s),d(e,q,s),f(dt,q,null),t(q,fn),t(q,so),t(q,un),t(q,ye),f(pt,ye,null),t(ye,hn),t(ye,lo),t(q,$n),t(q,Y),f(ct,Y,null),t(Y,_n),t(Y,io),t(Y,bn),t(Y,mo),d(e,Go,s),f(gt,e,s),d(e,Vo,s),d(e,X,s),f(ft,X,null),t(X,vn),t(X,po),d(e,No,s),f(ut,e,s),d(e,Do,s),d(e,ht,s),d(e,Bo,s),d(e,$t,s),d(e,Yo,s),d(e,_t,s),d(e,Fo,s),d(e,bt,s),d(e,So,s),f(vt,e,s),d(e,Xo,s),d(e,O,s),f(yt,O,null),t(O,yn),t(O,co),d(e,Oo,s),f(Tt,e,s),d(e,Ko,s),d(e,E,s),f(wt,E,null),t(E,Tn),t(E,go),t(E,wn),t(E,Te),f(xt,Te,null),t(Te,xn),t(Te,fo),t(E,An),t(E,we),f(At,we,null),t(we,Mn),t(we,uo),d(e,er,s),f(Mt,e,s),d(e,tr,s),d(e,Z,s),f(kt,Z,null),t(Z,kn),t(Z,ho),t(Z,In),t(Z,xe),f(It,xe,null),t(xe,Cn),t(xe,$o),t(Z,Pn),t(Z,Ae),f(Ct,Ae,null),t(Ae,Hn),t(Ae,_o),d(e,or,s),d(e,vo,s),rr=!0},p(e,[s]){const K={};s&2&&(K.$$scope={dirty:s,ctx:e}),y.$set(K);const z={};s&2&&(z.$$scope={dirty:s,ctx:e}),re.$set(z);const ee={};s&2&&(ee.$$scope={dirty:s,ctx:e}),ne.$set(ee);const G={};s&2&&(G.$$scope={dirty:s,ctx:e}),ae.$set(G);const V={};s&2&&(V.$$scope={dirty:s,ctx:e}),se.$set(V);const W={};s&2&&(W.$$scope={dirty:s,ctx:e}),le.$set(W);const te={};s&2&&(te.$$scope={dirty:s,ctx:e}),ie.$set(te);const oe={};s&2&&(oe.$$scope={dirty:s,ctx:e}),me.$set(oe);const Pt={};s&2&&(Pt.$$scope={dirty:s,ctx:e}),de.$set(Pt);const Ht={};s&2&&(Ht.$$scope={dirty:s,ctx:e}),pe.$set(Ht)},i(e){rr||(u(v.$$.fragment,e),u(y.$$.fragment,e),u(He.$$.fragment,e),u(Le.$$.fragment,e),u(Je.$$.fragment,e),u(re.$$.fragment,e),u(Ue.$$.fragment,e),u(qe.$$.fragment,e),u(ne.$$.fragment,e),u(Ee.$$.fragment,e),u(ae.$$.fragment,e),u(Ze.$$.fragment,e),u(We.$$.fragment,e),u(se.$$.fragment,e),u(le.$$.fragment,e),u(Re.$$.fragment,e),u(Qe.$$.fragment,e),u(ie.$$.fragment,e),u(me.$$.fragment,e),u(ze.$$.fragment,e),u(Ge.$$.fragment,e),u(Ve.$$.fragment,e),u(de.$$.fragment,e),u(Ne.$$.fragment,e),u(pe.$$.fragment,e),u(De.$$.fragment,e),u(Be.$$.fragment,e),u(Ye.$$.fragment,e),u(Fe.$$.fragment,e),u(Se.$$.fragment,e),u(Xe.$$.fragment,e),u(Oe.$$.fragment,e),u(Ke.$$.fragment,e),u(et.$$.fragment,e),u(tt.$$.fragment,e),u(ot.$$.fragment,e),u(rt.$$.fragment,e),u(nt.$$.fragment,e),u(at.$$.fragment,e),u(st.$$.fragment,e),u(lt.$$.fragment,e),u(it.$$.fragment,e),u(mt.$$.fragment,e),u(dt.$$.fragment,e),u(pt.$$.fragment,e),u(ct.$$.fragment,e),u(gt.$$.fragment,e),u(ft.$$.fragment,e),u(ut.$$.fragment,e),u(vt.$$.fragment,e),u(yt.$$.fragment,e),u(Tt.$$.fragment,e),u(wt.$$.fragment,e),u(xt.$$.fragment,e),u(At.$$.fragment,e),u(Mt.$$.fragment,e),u(kt.$$.fragment,e),u(It.$$.fragment,e),u(Ct.$$.fragment,e),rr=!0)},o(e){h(v.$$.fragment,e),h(y.$$.fragment,e),h(He.$$.fragment,e),h(Le.$$.fragment,e),h(Je.$$.fragment,e),h(re.$$.fragment,e),h(Ue.$$.fragment,e),h(qe.$$.fragment,e),h(ne.$$.fragment,e),h(Ee.$$.fragment,e),h(ae.$$.fragment,e),h(Ze.$$.fragment,e),h(We.$$.fragment,e),h(se.$$.fragment,e),h(le.$$.fragment,e),h(Re.$$.fragment,e),h(Qe.$$.fragment,e),h(ie.$$.fragment,e),h(me.$$.fragment,e),h(ze.$$.fragment,e),h(Ge.$$.fragment,e),h(Ve.$$.fragment,e),h(de.$$.fragment,e),h(Ne.$$.fragment,e),h(pe.$$.fragment,e),h(De.$$.fragment,e),h(Be.$$.fragment,e),h(Ye.$$.fragment,e),h(Fe.$$.fragment,e),h(Se.$$.fragment,e),h(Xe.$$.fragment,e),h(Oe.$$.fragment,e),h(Ke.$$.fragment,e),h(et.$$.fragment,e),h(tt.$$.fragment,e),h(ot.$$.fragment,e),h(rt.$$.fragment,e),h(nt.$$.fragment,e),h(at.$$.fragment,e),h(st.$$.fragment,e),h(lt.$$.fragment,e),h(it.$$.fragment,e),h(mt.$$.fragment,e),h(dt.$$.fragment,e),h(pt.$$.fragment,e),h(ct.$$.fragment,e),h(gt.$$.fragment,e),h(ft.$$.fragment,e),h(ut.$$.fragment,e),h(vt.$$.fragment,e),h(yt.$$.fragment,e),h(Tt.$$.fragment,e),h(wt.$$.fragment,e),h(xt.$$.fragment,e),h(At.$$.fragment,e),h(Mt.$$.fragment,e),h(kt.$$.fragment,e),h(It.$$.fragment,e),h(Ct.$$.fragment,e),rr=!1},d(e){e&&(o(T),o(_),o(p),o(a),o(yo),o(Pe),o(To),o(wo),o(je),o(xo),o(Ao),o(Q),o(Mo),o(ko),o(L),o(Io),o(Co),o(J),o(Po),o(Ho),o(U),o(jo),o(Lo),o(H),o(Jo),o(Uo),o(qo),o(S),o(Eo),o(Zo),o(M),o(Wo),o(Ro),o(I),o(Qo),o(zo),o(q),o(Go),o(Vo),o(X),o(No),o(Do),o(ht),o(Bo),o($t),o(Yo),o(_t),o(Fo),o(bt),o(So),o(Xo),o(O),o(Oo),o(Ko),o(E),o(er),o(tr),o(Z),o(or),o(vo)),o(l),$(v,e),$(y,e),$(He,e),$(Le,e),$(Je),$(re),$(Ue,e),$(qe),$(ne),$(Ee),$(ae),$(Ze,e),$(We),$(se),$(le),$(Re,e),$(Qe),$(ie),$(me),$(ze,e),$(Ge),$(Ve),$(de),$(Ne),$(pe),$(De),$(Be,e),$(Ye,e),$(Fe),$(Se,e),$(Xe),$(Oe),$(Ke),$(et),$(tt),$(ot),$(rt,e),$(nt),$(at),$(st),$(lt),$(it),$(mt,e),$(dt),$(pt),$(ct),$(gt,e),$(ft),$(ut,e),$(vt,e),$(yt),$(Tt,e),$(wt),$(xt),$(At),$(Mt,e),$(kt),$(It),$(Ct)}}}const Wa='{"title":"エージェントとツール","local":"エージェントとツール","sections":[{"title":"エージェント","local":"エージェント","sections":[{"title":"HfAgent","local":"transformers.HfAgent","sections":[],"depth":3},{"title":"LocalAgent","local":"transformers.LocalAgent","sections":[],"depth":3},{"title":"OpenAiAgent","local":"transformers.OpenAiAgent","sections":[],"depth":3},{"title":"AzureOpenAiAgent","local":"transformers.AzureOpenAiAgent","sections":[],"depth":3},{"title":"Agent","local":"transformers.Agent","sections":[],"depth":3}],"depth":2},{"title":"Tools","local":"tools","sections":[{"title":"load_tool","local":"transformers.load_tool","sections":[],"depth":3},{"title":"Tool","local":"transformers.Tool","sections":[],"depth":3},{"title":"PipelineTool","local":"transformers.PipelineTool","sections":[],"depth":3},{"title":"RemoteTool","local":"transformers.RemoteTool","sections":[],"depth":3},{"title":"launch_gradio_demo","local":"transformers.launch_gradio_demo","sections":[],"depth":3}],"depth":2},{"title":"エージェントの種類","local":"エージェントの種類","sections":[{"title":"AgentText","local":"transformers.tools.agent_types.AgentText","sections":[],"depth":3},{"title":"AgentImage","local":"transformers.tools.agent_types.AgentImage","sections":[],"depth":3},{"title":"AgentAudio","local":"transformers.tools.agent_types.AgentAudio","sections":[],"depth":3}],"depth":2}],"depth":1}';function Ra(k){return xa(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ya extends Aa{constructor(l){super(),Ma(this,l,Ra,Za,wa,{})}}export{Ya as component};
