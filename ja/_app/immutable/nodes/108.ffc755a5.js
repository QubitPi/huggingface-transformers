import{s as Dt,f as se,n as At,o as yt}from"../chunks/scheduler.9bc65507.js";import{S as Vt,i as Gt,g as n,s as i,r as f,A as Nt,h as m,f as l,c as a,j as oe,u as d,x as o,k as s,l as pe,y as St,a as r,v as p,d as c,t as T,w as $}from"../chunks/index.707bf1b6.js";import{H as u}from"../chunks/Heading.342b1fa6.js";function It(nt){let L,ce,fe,Te,E,$e,P,mt='2017年に導入されて以来、<a href="https://arxiv.org/abs/1706.03762" rel="nofollow">元のTransformer</a>モデルは、自然言語処理（NLP）のタスクを超える多くの新しいエキサイティングなモデルをインスパイアしました。<a href="https://huggingface.co/blog/deep-learning-with-proteins" rel="nofollow">タンパク質の折りたたまれた構造を予測</a>するモデル、<a href="https://huggingface.co/blog/train-decision-transformers" rel="nofollow">チーターを走らせるためのトレーニング</a>するモデル、そして<a href="https://huggingface.co/blog/time-series-transformers" rel="nofollow">時系列予測</a>のためのモデルなどがあります。Transformerのさまざまなバリアントが利用可能ですが、大局を見落とすことがあります。これらのすべてのモデルに共通するのは、元のTransformerアーキテクチャに基づいていることです。一部のモデルはエンコーダまたはデコーダのみを使用し、他のモデルは両方を使用します。これは、Transformerファミリー内のモデルの高レベルの違いをカテゴライズし、調査するための有用な分類法を提供し、以前に出会ったことのないTransformerを理解するのに役立ちます。',ue,H,ot='元のTransformerモデルに慣れていないか、リフレッシュが必要な場合は、Hugging Faceコースの<a href="https://huggingface.co/course/chapter1/4?fw=pt" rel="nofollow">Transformerの動作原理</a>章をチェックしてください。',he,M,ft=`<iframe width="560" height="315" src="https://www.youtube.com/embed/H39Z_720T5s" title="YouTubeビデオプレーヤー" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope;
    picture-in-picture" allowfullscreen=""></iframe>`,ge,F,we,h,dt,_e,b,ve,x,st='長い間、畳み込みネットワーク（CNN）はコンピュータビジョンのタスクにおいて支配的なパラダイムでしたが、<a href="https://arxiv.org/abs/2010.11929" rel="nofollow">ビジョンTransformer</a>はそのスケーラビリティと効率性を示しました。それでも、一部のCNNの最高の特性、特に特定のタスクにとっては非常に強力な翻訳不変性など、一部のTransformerはアーキテクチャに畳み込みを組み込んでいます。<a href="model_doc/convnext">ConvNeXt</a>は、畳み込みを現代化するためにTransformerから設計の選択肢を取り入れ、例えば、ConvNeXtは画像をパッチに分割するために重なり合わないスライディングウィンドウと、グローバル受容野を増加させるための大きなカーネルを使用します。ConvNeXtは、メモリ効率を向上させ、パフォーマンスを向上させるためにいくつかのレイヤーデザインの選択肢も提供し、Transformerと競合的になります！',Le,C,Me,R,pt='<a href="model_doc/vit">ビジョン トランスフォーマー（ViT）</a> は、畳み込みを使用しないコンピュータビジョンタスクの扉を開けました。ViT は標準のトランスフォーマーエンコーダーを使用しますが、画像を扱う方法が主要なブレークスルーでした。画像を固定サイズのパッチに分割し、それらをトークンのように使用して埋め込みを作成します。ViT は、当時のCNNと競争力のある結果を示すためにトランスフォーマーの効率的なアーキテクチャを活用しましたが、トレーニングに必要なリソースが少なくて済みました。ViT に続いて、セグメンテーションや検出などの密なビジョンタスクを処理できる他のビジョンモデルも登場しました。',Ee,B,ct='これらのモデルの1つが<a href="model_doc/swin">Swin</a> トランスフォーマーです。Swin トランスフォーマーは、より小さなサイズのパッチから階層的な特徴マップ（CNNのようで ViT とは異なります）を構築し、深層のパッチと隣接するパッチとマージします。注意はローカルウィンドウ内でのみ計算され、ウィンドウは注意のレイヤー間でシフトされ、モデルがより良く学習するのをサポートする接続を作成します。Swin トランスフォーマーは階層的な特徴マップを生成できるため、セグメンテーションや検出などの密な予測タスクに適しています。<a href="model_doc/segformer">SegFormer</a> も階層的な特徴マップを構築するためにトランスフォーマーエンコーダーを使用しますが、すべての特徴マップを組み合わせて予測するためにシンプルなマルチレイヤーパーセプトロン（MLP）デコーダーを追加します。',Pe,D,Tt='BeIT および ViTMAE などの他のビジョンモデルは、BERTの事前トレーニング目標からインスピレーションを得ました。<a href="model_doc/beit">BeIT</a> は <em>masked image modeling (MIM)</em> によって事前トレーニングされています。画像パッチはランダムにマスクされ、画像も視覚トークンにトークン化されます。BeIT はマスクされたパッチに対応する視覚トークンを予測するようにトレーニングされます。<a href="model_doc/vitmae">ViTMAE</a> も似たような事前トレーニング目標を持っており、視覚トークンの代わりにピクセルを予測する必要があります。異例なのは画像パッチの75%がマスクされていることです！デコーダーはマスクされたトークンとエンコードされたパッチからピクセルを再構築します。事前トレーニングの後、デコーダーは捨てられ、エンコーダーはダウンストリームのタスクで使用できる状態です。',He,A,Fe,y,$t='デコーダーのみのビジョンモデルは珍しいです。なぜなら、ほとんどのビジョンモデルは画像表現を学ぶためにエンコーダーを使用するからです。しかし、画像生成などのユースケースでは、デコーダーは自然な適応です。これは、GPT-2などのテキスト生成モデルから見てきたように、<a href="model_doc/imagegpt">ImageGPT</a> でも同様のアーキテクチャを使用しますが、シーケンス内の次のトークンを予測する代わりに、画像内の次のピクセルを予測します。画像生成に加えて、ImageGPT は画像分類のためにもファインチューニングできます。',be,V,xe,G,ut='ビジョンモデルは一般的にエンコーダー（バックボーンとも呼ばれます）を使用して重要な画像特徴を抽出し、それをトランスフォーマーデコーダーに渡すために使用します。<a href="model_doc/detr">DETR</a> は事前トレーニング済みのバックボーンを持っていますが、オブジェクト検出のために完全なトランスフォーマーエンコーダーデコーダーアーキテクチャも使用しています。エンコーダーは画像表現を学び、デコーダー内のオブジェクトクエリ（各オブジェクトクエリは画像内の領域またはオブジェクトに焦点を当てた学習された埋め込みです）と組み合わせます。DETR は各オブジェクトクエリに対する境界ボックスの座標とクラスラベルを予測します。',Ce,N,Re,g,ht,Be,S,De,I,gt='<a href="model_doc/bert">BERT</a> はエンコーダー専用のTransformerで、入力の一部のトークンをランダムにマスクして他のトークンを見ないようにしています。これにより、トークンをマスクした文脈に基づいてマスクされたトークンを予測することが事前トレーニングの目標です。これにより、BERTは入力のより深いかつ豊かな表現を学習するのに左右の文脈を完全に活用できます。しかし、BERTの事前トレーニング戦略にはまだ改善の余地がありました。<a href="model_doc/roberta">RoBERTa</a> は、トレーニングを長時間行い、より大きなバッチでトレーニングし、事前処理中に一度だけでなく各エポックでトークンをランダムにマスクし、次文予測の目標を削除する新しい事前トレーニングレシピを導入することでこれを改善しました。',Ae,W,wt='性能を向上させる主要な戦略はモデルのサイズを増やすことですが、大規模なモデルのトレーニングは計算コストがかかります。計算コストを削減する方法の1つは、<a href="model_doc/distilbert">DistilBERT</a> のような小さなモデルを使用することです。DistilBERTは<a href="https://arxiv.org/abs/1503.02531" rel="nofollow">知識蒸留</a> - 圧縮技術 - を使用して、BERTのほぼすべての言語理解機能を保持しながら、より小さなバージョンを作成します。',ye,k,_t='しかし、ほとんどのTransformerモデルは引き続きより多くのパラメータに焦点を当て、トレーニング効率を向上させる新しいモデルが登場しています。<a href="model_doc/albert">ALBERT</a> は、2つの方法でパラメータの数を減らすことによってメモリ消費量を削減します。大きな語彙埋め込みを2つの小さな行列に分割し、レイヤーがパラメータを共有できるようにします。<a href="model_doc/deberta">DeBERTa</a> は、単語とその位置を2つのベクトルで別々にエンコードする解かれた注意機構を追加しました。注意はこれらの別々のベクトルから計算されます。単語と位置の埋め込みが含まれる単一のベクトルではなく、<a href="model_doc/longformer">Longformer</a> は、特に長いシーケンス長のドキュメントを処理するために注意をより効率的にすることに焦点を当てました。固定されたウィンドウサイズの周りの各トークンから計算されるローカルウィンドウ付き注意（特定のタスクトークン（分類のための <code>[CLS]</code> など）のみのためのグローバルな注意を含む）の組み合わせを使用して、完全な注意行列ではなく疎な注意行列を作成します。',Ve,O,Ge,j,vt='<a href="model_doc/gpt2">GPT-2</a>は、シーケンス内の次の単語を予測するデコーダー専用のTransformerです。モデルは先を見ることができないようにトークンを右にマスクし、“のぞき見”を防ぎます。大量のテキストを事前トレーニングしたことにより、GPT-2はテキスト生成が非常に得意で、テキストが正確であることがあるにしても、時折正確ではないことがあります。しかし、GPT-2にはBERTの事前トレーニングからの双方向コンテキストが不足しており、特定のタスクには適していませんでした。<a href="model_doc/xlnet">XLNET</a>は、双方向に学習できる順列言語モデリング目標（PLM）を使用することで、BERTとGPT-2の事前トレーニング目標のベストを組み合わせています。',Ne,J,Lt='GPT-2の後、言語モデルはさらに大きく成長し、今では<em>大規模言語モデル（LLM）</em>として知られています。大規模なデータセットで事前トレーニングされれば、LLMはほぼゼロショット学習を示すことがあります。<a href="model_doc/gptj">GPT-J</a>は、6Bのパラメータを持つLLMで、400Bのトークンでトレーニングされています。GPT-Jには<a href="model_doc/opt">OPT</a>が続き、そのうち最大のモデルは175Bで、180Bのトークンでトレーニングされています。同じ時期に<a href="model_doc/bloom">BLOOM</a>がリリースされ、このファミリーの最大のモデルは176Bのパラメータを持ち、46の言語と13のプログラミング言語で366Bのトークンでトレーニングされています。',Se,q,Ie,z,Mt='<a href="model_doc/bart">BART</a>は、元のTransformerアーキテクチャを保持していますが、事前トレーニング目標を<em>テキスト補完</em>の破損に変更しています。一部のテキストスパンは単一の<code>mask</code>トークンで置換されます。デコーダーは破損していないトークンを予測し（未来のトークンはマスクされます）、エンコーダーの隠れた状態を使用して予測を補助します。<a href="model_doc/pegasus">Pegasus</a>はBARTに似ていますが、Pegasusはテキストスパンの代わりに文全体をマスクします。マスクされた言語モデリングに加えて、Pegasusはギャップ文生成（GSG）によって事前トレーニングされています。GSGの目標は、文書に重要な文をマスクし、それらを<code>mask</code>トークンで置換することです。デコーダーは残りの文から出力を生成しなければなりません。<a href="model_doc/t5">T5</a>は、すべてのNLPタスクを特定のプレフィックスを使用してテキスト対テキストの問題に変換するよりユニークなモデルです。たとえば、プレフィックス<code>Summarize:</code>は要約タスクを示します。T5は教師ありトレーニング（GLUEとSuperGLUE）と自己教師ありトレーニング（トークンの15％をランダムにサンプルしドロップアウト）によって事前トレーニングされています。',We,X,ke,w,Et,Oe,Y,je,Q,Pt='<a href="model_doc/wav2vec2">Wav2Vec2</a> は、生のオーディオ波形から直接音声表現を学習するためのTransformerエンコーダーを使用します。これは、対照的なタスクで事前学習され、一連の偽の表現から真の音声表現を特定します。 <a href="model_doc/hubert">HuBERT</a> はWav2Vec2に似ていますが、異なるトレーニングプロセスを持っています。ターゲットラベルは、類似したオーディオセグメントがクラスタに割り当てられ、これが隠れユニットになるクラスタリングステップによって作成されます。隠れユニットは埋め込みにマップされ、予測を行います。',Je,U,qe,Z,Ht='<a href="model_doc/speech_to_text">Speech2Text</a> は、自動音声認識（ASR）および音声翻訳のために設計された音声モデルです。このモデルは、オーディオ波形から抽出されたログメルフィルターバンクフィーチャーを受け入れ、事前トレーニングされた自己回帰的にトランスクリプトまたは翻訳を生成します。 <a href="model_doc/whisper">Whisper</a> もASRモデルですが、他の多くの音声モデルとは異なり、✨ ラベル付き ✨ オーディオトランスクリプションデータを大量に事前に学習して、ゼロショットパフォーマンスを実現します。データセットの大部分には非英語の言語も含まれており、Whisperは低リソース言語にも使用できます。構造的には、WhisperはSpeech2Textに似ています。オーディオ信号はエンコーダーによってエンコードされたログメルスペクトログラムに変換されます。デコーダーはエンコーダーの隠れ状態と前のトークンからトランスクリプトを自己回帰的に生成します。',ze,K,Xe,_,Ft,Ye,ee,Qe,te,bt='<a href="model_doc/visual_bert">VisualBERT</a> は、BERTの後にリリースされたビジョン言語タスク向けのマルチモーダルモデルです。これはBERTと事前トレーニングされた物体検出システムを組み合わせ、画像特徴をビジュアル埋め込みに抽出し、テキスト埋め込みと一緒にBERTに渡します。VisualBERTは非マスクテキストを基にしたマスクテキストを予測し、テキストが画像と整合しているかどうかも予測する必要があります。ViTがリリースされた際、<a href="model_doc/vilt">ViLT</a> は画像埋め込みを取得するためにこの方法を採用しました。画像埋め込みはテキスト埋め込みと共に共同で処理されます。それから、ViLTは画像テキストマッチング、マスク言語モデリング、および全単語マスキングによる事前トレーニングが行われます。',Ue,le,xt='<a href="model_doc/clip">CLIP</a> は異なるアプローチを取り、(<code>画像</code>、<code>テキスト</code>) のペア予測を行います。画像エンコーダー（ViT）とテキストエンコーダー（Transformer）は、(<code>画像</code>、<code>テキスト</code>) ペアデータセット上で共同トレーニングされ、(<code>画像</code>、<code>テキスト</code>) ペアの画像とテキストの埋め込みの類似性を最大化します。事前トレーニング後、CLIPを使用して画像からテキストを予測したり、その逆を行うことができます。<a href="model_doc/owlvit">OWL-ViT</a> は、ゼロショット物体検出のバックボーンとしてCLIPを使用しています。事前トレーニング後、物体検出ヘッドが追加され、(<code>クラス</code>、<code>バウンディングボックス</code>) ペアに対するセット予測が行われます。',Ze,re,Ke,ie,Ct='光学文字認識（OCR）は、通常、画像を理解しテキストを生成するために複数のコンポーネントが関与するテキスト認識タスクです。 <a href="model_doc/trocr">TrOCR</a> は、エンドツーエンドのTransformerを使用してこのプロセスを簡略化します。エンコーダーは画像を固定サイズのパッチとして処理するためのViTスタイルのモデルであり、デコーダーはエンコーダーの隠れ状態を受け入れ、テキストを自己回帰的に生成します。<a href="model_doc/donut">Donut</a> はOCRベースのアプローチに依存しないより一般的なビジュアルドキュメント理解モデルで、エンコーダーとしてSwin Transformer、デコーダーとして多言語BARTを使用します。 Donutは画像とテキストの注釈に基づいて次の単語を予測することにより、テキストを読むために事前トレーニングされます。デコーダーはプロンプトを与えられたトークンシーケンスを生成します。プロンプトは各ダウンストリームタスクごとに特別なトークンを使用して表現されます。例えば、ドキュメントの解析には<code>解析</code>トークンがあり、エンコーダーの隠れ状態と組み合わされてドキュメントを構造化された出力フォーマット（JSON）に解析します。',et,ae,tt,v,Rt,lt,ne,rt,me,Bt='意思決定と軌跡トランスフォーマーは、状態、アクション、報酬をシーケンスモデリングの問題として捉えます。 <a href="model_doc/decision_transformer">Decision Transformer</a> は、リターン・トゥ・ゴー、過去の状態、およびアクションに基づいて将来の希望リターンにつながるアクションの系列を生成します。最後の <em>K</em> タイムステップでは、3つのモダリティそれぞれがトークン埋め込みに変換され、将来のアクショントークンを予測するためにGPTのようなモデルによって処理されます。<a href="model_doc/trajectory_transformer">Trajectory Transformer</a> も状態、アクション、報酬をトークン化し、GPTアーキテクチャで処理します。報酬調整に焦点を当てたDecision Transformerとは異なり、Trajectory Transformerはビームサーチを使用して将来のアクションを生成します。',it,de,at;return E=new u({props:{title:"The Transformer model family",local:"the-transformer-model-family",headingTag:"h1"}}),F=new u({props:{title:"Computer vision",local:"computer-vision",headingTag:"h2"}}),b=new u({props:{title:"Convolutional network",local:"convolutional-network",headingTag:"h3"}}),C=new u({props:{title:"Encoder",local:"cv-encoder",headingTag:"h3"}}),A=new u({props:{title:"Decoder",local:"cv-decoder",headingTag:"h3"}}),V=new u({props:{title:"Encoder-decoder",local:"cv-encoder-decoder",headingTag:"h3"}}),N=new u({props:{title:"Natural lanaguage processing",local:"natural-lanaguage-processing",headingTag:"h2"}}),S=new u({props:{title:"Encoder",local:"nlp-encoder",headingTag:"h3"}}),O=new u({props:{title:"Decoder",local:"nlp-decoder",headingTag:"h3"}}),q=new u({props:{title:"Encoder-decoder",local:"nlp-encoder-decoder",headingTag:"h3"}}),X=new u({props:{title:"Audio",local:"audio",headingTag:"h2"}}),Y=new u({props:{title:"Encoder",local:"audio-encoder",headingTag:"h3"}}),U=new u({props:{title:"Encoder-decoder",local:"audio-encoder-decoder",headingTag:"h3"}}),K=new u({props:{title:"Multimodal",local:"multimodal",headingTag:"h2"}}),ee=new u({props:{title:"Encoder",local:"mm-encoder",headingTag:"h3"}}),re=new u({props:{title:"Encoder-decoder",local:"mm-encoder-decoder",headingTag:"h3"}}),ae=new u({props:{title:"Reinforcement learning",local:"reinforcement-learning",headingTag:"h2"}}),ne=new u({props:{title:"Decoder",local:"rl-decoder",headingTag:"h3"}}),{c(){L=n("meta"),ce=i(),fe=n("p"),Te=i(),f(E.$$.fragment),$e=i(),P=n("p"),P.innerHTML=mt,ue=i(),H=n("p"),H.innerHTML=ot,he=i(),M=n("div"),M.innerHTML=ft,ge=i(),f(F.$$.fragment),we=i(),h=n("iframe"),_e=i(),f(b.$$.fragment),ve=i(),x=n("p"),x.innerHTML=st,Le=i(),f(C.$$.fragment),Me=i(),R=n("p"),R.innerHTML=pt,Ee=i(),B=n("p"),B.innerHTML=ct,Pe=i(),D=n("p"),D.innerHTML=Tt,He=i(),f(A.$$.fragment),Fe=i(),y=n("p"),y.innerHTML=$t,be=i(),f(V.$$.fragment),xe=i(),G=n("p"),G.innerHTML=ut,Ce=i(),f(N.$$.fragment),Re=i(),g=n("iframe"),Be=i(),f(S.$$.fragment),De=i(),I=n("p"),I.innerHTML=gt,Ae=i(),W=n("p"),W.innerHTML=wt,ye=i(),k=n("p"),k.innerHTML=_t,Ve=i(),f(O.$$.fragment),Ge=i(),j=n("p"),j.innerHTML=vt,Ne=i(),J=n("p"),J.innerHTML=Lt,Se=i(),f(q.$$.fragment),Ie=i(),z=n("p"),z.innerHTML=Mt,We=i(),f(X.$$.fragment),ke=i(),w=n("iframe"),Oe=i(),f(Y.$$.fragment),je=i(),Q=n("p"),Q.innerHTML=Pt,Je=i(),f(U.$$.fragment),qe=i(),Z=n("p"),Z.innerHTML=Ht,ze=i(),f(K.$$.fragment),Xe=i(),_=n("iframe"),Ye=i(),f(ee.$$.fragment),Qe=i(),te=n("p"),te.innerHTML=bt,Ue=i(),le=n("p"),le.innerHTML=xt,Ze=i(),f(re.$$.fragment),Ke=i(),ie=n("p"),ie.innerHTML=Ct,et=i(),f(ae.$$.fragment),tt=i(),v=n("iframe"),lt=i(),f(ne.$$.fragment),rt=i(),me=n("p"),me.innerHTML=Bt,it=i(),de=n("p"),this.h()},l(e){const t=Nt("svelte-u9bgzb",document.head);L=m(t,"META",{name:!0,content:!0}),t.forEach(l),ce=a(e),fe=m(e,"P",{}),oe(fe).forEach(l),Te=a(e),d(E.$$.fragment,e),$e=a(e),P=m(e,"P",{"data-svelte-h":!0}),o(P)!=="svelte-e3ces5"&&(P.innerHTML=mt),ue=a(e),H=m(e,"P",{"data-svelte-h":!0}),o(H)!=="svelte-1mfey8v"&&(H.innerHTML=ot),he=a(e),M=m(e,"DIV",{align:!0,"data-svelte-h":!0}),o(M)!=="svelte-16suatz"&&(M.innerHTML=ft),ge=a(e),d(F.$$.fragment,e),we=a(e),h=m(e,"IFRAME",{style:!0,width:!0,height:!0,src:!0}),oe(h).forEach(l),_e=a(e),d(b.$$.fragment,e),ve=a(e),x=m(e,"P",{"data-svelte-h":!0}),o(x)!=="svelte-18dhd4u"&&(x.innerHTML=st),Le=a(e),d(C.$$.fragment,e),Me=a(e),R=m(e,"P",{"data-svelte-h":!0}),o(R)!=="svelte-14fg17l"&&(R.innerHTML=pt),Ee=a(e),B=m(e,"P",{"data-svelte-h":!0}),o(B)!=="svelte-1qcq7al"&&(B.innerHTML=ct),Pe=a(e),D=m(e,"P",{"data-svelte-h":!0}),o(D)!=="svelte-462s93"&&(D.innerHTML=Tt),He=a(e),d(A.$$.fragment,e),Fe=a(e),y=m(e,"P",{"data-svelte-h":!0}),o(y)!=="svelte-93g2tv"&&(y.innerHTML=$t),be=a(e),d(V.$$.fragment,e),xe=a(e),G=m(e,"P",{"data-svelte-h":!0}),o(G)!=="svelte-1x9wsp2"&&(G.innerHTML=ut),Ce=a(e),d(N.$$.fragment,e),Re=a(e),g=m(e,"IFRAME",{style:!0,width:!0,height:!0,src:!0}),oe(g).forEach(l),Be=a(e),d(S.$$.fragment,e),De=a(e),I=m(e,"P",{"data-svelte-h":!0}),o(I)!=="svelte-1atf23x"&&(I.innerHTML=gt),Ae=a(e),W=m(e,"P",{"data-svelte-h":!0}),o(W)!=="svelte-1voxrdi"&&(W.innerHTML=wt),ye=a(e),k=m(e,"P",{"data-svelte-h":!0}),o(k)!=="svelte-losx4s"&&(k.innerHTML=_t),Ve=a(e),d(O.$$.fragment,e),Ge=a(e),j=m(e,"P",{"data-svelte-h":!0}),o(j)!=="svelte-16a5l86"&&(j.innerHTML=vt),Ne=a(e),J=m(e,"P",{"data-svelte-h":!0}),o(J)!=="svelte-v24w24"&&(J.innerHTML=Lt),Se=a(e),d(q.$$.fragment,e),Ie=a(e),z=m(e,"P",{"data-svelte-h":!0}),o(z)!=="svelte-tqv9ic"&&(z.innerHTML=Mt),We=a(e),d(X.$$.fragment,e),ke=a(e),w=m(e,"IFRAME",{style:!0,width:!0,height:!0,src:!0}),oe(w).forEach(l),Oe=a(e),d(Y.$$.fragment,e),je=a(e),Q=m(e,"P",{"data-svelte-h":!0}),o(Q)!=="svelte-1aj6w23"&&(Q.innerHTML=Pt),Je=a(e),d(U.$$.fragment,e),qe=a(e),Z=m(e,"P",{"data-svelte-h":!0}),o(Z)!=="svelte-1enfi4z"&&(Z.innerHTML=Ht),ze=a(e),d(K.$$.fragment,e),Xe=a(e),_=m(e,"IFRAME",{style:!0,width:!0,height:!0,src:!0}),oe(_).forEach(l),Ye=a(e),d(ee.$$.fragment,e),Qe=a(e),te=m(e,"P",{"data-svelte-h":!0}),o(te)!=="svelte-14k3ms"&&(te.innerHTML=bt),Ue=a(e),le=m(e,"P",{"data-svelte-h":!0}),o(le)!=="svelte-q0khbi"&&(le.innerHTML=xt),Ze=a(e),d(re.$$.fragment,e),Ke=a(e),ie=m(e,"P",{"data-svelte-h":!0}),o(ie)!=="svelte-1bky6ly"&&(ie.innerHTML=Ct),et=a(e),d(ae.$$.fragment,e),tt=a(e),v=m(e,"IFRAME",{style:!0,width:!0,height:!0,src:!0}),oe(v).forEach(l),lt=a(e),d(ne.$$.fragment,e),rt=a(e),me=m(e,"P",{"data-svelte-h":!0}),o(me)!=="svelte-l2jgab"&&(me.innerHTML=Bt),it=a(e),de=m(e,"P",{}),oe(de).forEach(l),this.h()},h(){s(L,"name","hf:doc:metadata"),s(L,"content",Wt),s(M,"align","center"),pe(h,"border","1px solid rgba(0, 0, 0, 0.1)"),s(h,"width","1000"),s(h,"height","450"),se(h.src,dt="https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Ffile%2FacQBpeFBVvrDUlzFlkejoz%2FModelscape-timeline%3Fnode-id%3D0%253A1%26t%3Dm0zJ7m2BQ9oe0WtO-1")||s(h,"src",dt),h.allowFullscreen="",pe(g,"border","1px solid rgba(0, 0, 0, 0.1)"),s(g,"width","1000"),s(g,"height","450"),se(g.src,ht="https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Ffile%2FUhbQAZDlpYW5XEpdFy6GoG%2Fnlp-model-timeline%3Fnode-id%3D0%253A1%26t%3D4mZMr4r1vDEYGJ50-1")||s(g,"src",ht),g.allowFullscreen="",pe(w,"border","1px solid rgba(0, 0, 0, 0.1)"),s(w,"width","1000"),s(w,"height","450"),se(w.src,Et="https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Ffile%2Fvrchl8jDV9YwNVPWu2W0kK%2Fspeech-and-audio-model-timeline%3Fnode-id%3D0%253A1%26t%3DmM4H8pPMuK23rClL-1")||s(w,"src",Et),w.allowFullscreen="",pe(_,"border","1px solid rgba(0, 0, 0, 0.1)"),s(_,"width","1000"),s(_,"height","450"),se(_.src,Ft="https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Ffile%2FcX125FQHXJS2gxeICiY93p%2Fmultimodal%3Fnode-id%3D0%253A1%26t%3DhPQwdx3HFPWJWnVf-1")||s(_,"src",Ft),_.allowFullscreen="",pe(v,"border","1px solid rgba(0, 0, 0, 0.1)"),s(v,"width","1000"),s(v,"height","450"),se(v.src,Rt="https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Ffile%2FiB3Y6RvWYki7ZuKO6tNgZq%2Freinforcement-learning%3Fnode-id%3D0%253A1%26t%3DhPQwdx3HFPWJWnVf-1")||s(v,"src",Rt),v.allowFullscreen=""},m(e,t){St(document.head,L),r(e,ce,t),r(e,fe,t),r(e,Te,t),p(E,e,t),r(e,$e,t),r(e,P,t),r(e,ue,t),r(e,H,t),r(e,he,t),r(e,M,t),r(e,ge,t),p(F,e,t),r(e,we,t),r(e,h,t),r(e,_e,t),p(b,e,t),r(e,ve,t),r(e,x,t),r(e,Le,t),p(C,e,t),r(e,Me,t),r(e,R,t),r(e,Ee,t),r(e,B,t),r(e,Pe,t),r(e,D,t),r(e,He,t),p(A,e,t),r(e,Fe,t),r(e,y,t),r(e,be,t),p(V,e,t),r(e,xe,t),r(e,G,t),r(e,Ce,t),p(N,e,t),r(e,Re,t),r(e,g,t),r(e,Be,t),p(S,e,t),r(e,De,t),r(e,I,t),r(e,Ae,t),r(e,W,t),r(e,ye,t),r(e,k,t),r(e,Ve,t),p(O,e,t),r(e,Ge,t),r(e,j,t),r(e,Ne,t),r(e,J,t),r(e,Se,t),p(q,e,t),r(e,Ie,t),r(e,z,t),r(e,We,t),p(X,e,t),r(e,ke,t),r(e,w,t),r(e,Oe,t),p(Y,e,t),r(e,je,t),r(e,Q,t),r(e,Je,t),p(U,e,t),r(e,qe,t),r(e,Z,t),r(e,ze,t),p(K,e,t),r(e,Xe,t),r(e,_,t),r(e,Ye,t),p(ee,e,t),r(e,Qe,t),r(e,te,t),r(e,Ue,t),r(e,le,t),r(e,Ze,t),p(re,e,t),r(e,Ke,t),r(e,ie,t),r(e,et,t),p(ae,e,t),r(e,tt,t),r(e,v,t),r(e,lt,t),p(ne,e,t),r(e,rt,t),r(e,me,t),r(e,it,t),r(e,de,t),at=!0},p:At,i(e){at||(c(E.$$.fragment,e),c(F.$$.fragment,e),c(b.$$.fragment,e),c(C.$$.fragment,e),c(A.$$.fragment,e),c(V.$$.fragment,e),c(N.$$.fragment,e),c(S.$$.fragment,e),c(O.$$.fragment,e),c(q.$$.fragment,e),c(X.$$.fragment,e),c(Y.$$.fragment,e),c(U.$$.fragment,e),c(K.$$.fragment,e),c(ee.$$.fragment,e),c(re.$$.fragment,e),c(ae.$$.fragment,e),c(ne.$$.fragment,e),at=!0)},o(e){T(E.$$.fragment,e),T(F.$$.fragment,e),T(b.$$.fragment,e),T(C.$$.fragment,e),T(A.$$.fragment,e),T(V.$$.fragment,e),T(N.$$.fragment,e),T(S.$$.fragment,e),T(O.$$.fragment,e),T(q.$$.fragment,e),T(X.$$.fragment,e),T(Y.$$.fragment,e),T(U.$$.fragment,e),T(K.$$.fragment,e),T(ee.$$.fragment,e),T(re.$$.fragment,e),T(ae.$$.fragment,e),T(ne.$$.fragment,e),at=!1},d(e){e&&(l(ce),l(fe),l(Te),l($e),l(P),l(ue),l(H),l(he),l(M),l(ge),l(we),l(h),l(_e),l(ve),l(x),l(Le),l(Me),l(R),l(Ee),l(B),l(Pe),l(D),l(He),l(Fe),l(y),l(be),l(xe),l(G),l(Ce),l(Re),l(g),l(Be),l(De),l(I),l(Ae),l(W),l(ye),l(k),l(Ve),l(Ge),l(j),l(Ne),l(J),l(Se),l(Ie),l(z),l(We),l(ke),l(w),l(Oe),l(je),l(Q),l(Je),l(qe),l(Z),l(ze),l(Xe),l(_),l(Ye),l(Qe),l(te),l(Ue),l(le),l(Ze),l(Ke),l(ie),l(et),l(tt),l(v),l(lt),l(rt),l(me),l(it),l(de)),l(L),$(E,e),$(F,e),$(b,e),$(C,e),$(A,e),$(V,e),$(N,e),$(S,e),$(O,e),$(q,e),$(X,e),$(Y,e),$(U,e),$(K,e),$(ee,e),$(re,e),$(ae,e),$(ne,e)}}}const Wt='{"title":"The Transformer model family","local":"the-transformer-model-family","sections":[{"title":"Computer vision","local":"computer-vision","sections":[{"title":"Convolutional network","local":"convolutional-network","sections":[],"depth":3},{"title":"Encoder","local":"cv-encoder","sections":[],"depth":3},{"title":"Decoder","local":"cv-decoder","sections":[],"depth":3},{"title":"Encoder-decoder","local":"cv-encoder-decoder","sections":[],"depth":3}],"depth":2},{"title":"Natural lanaguage processing","local":"natural-lanaguage-processing","sections":[{"title":"Encoder","local":"nlp-encoder","sections":[],"depth":3},{"title":"Decoder","local":"nlp-decoder","sections":[],"depth":3},{"title":"Encoder-decoder","local":"nlp-encoder-decoder","sections":[],"depth":3}],"depth":2},{"title":"Audio","local":"audio","sections":[{"title":"Encoder","local":"audio-encoder","sections":[],"depth":3},{"title":"Encoder-decoder","local":"audio-encoder-decoder","sections":[],"depth":3}],"depth":2},{"title":"Multimodal","local":"multimodal","sections":[{"title":"Encoder","local":"mm-encoder","sections":[],"depth":3},{"title":"Encoder-decoder","local":"mm-encoder-decoder","sections":[],"depth":3}],"depth":2},{"title":"Reinforcement learning","local":"reinforcement-learning","sections":[{"title":"Decoder","local":"rl-decoder","sections":[],"depth":3}],"depth":2}],"depth":1}';function kt(nt){return yt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class qt extends Vt{constructor(L){super(),Gt(this,L,kt,It,Dt,{})}}export{qt as component};
