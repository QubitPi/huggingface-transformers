import{s as no,o as lo,n as er}from"../chunks/scheduler.9bc65507.js";import{S as io,i as mo,g as n,s as a,r as p,A as co,h as l,f as t,c as o,j as x,u as f,x as m,k as $,y as s,a as i,v as u,d as h,t as g,w as _}from"../chunks/index.707bf1b6.js";import{T as oa}from"../chunks/Tip.c2ecdbf4.js";import{D as M}from"../chunks/Docstring.17db21ae.js";import{C as rr}from"../chunks/CodeBlock.54a9f38d.js";import{E as na}from"../chunks/ExampleCodeBlock.4f515aa9.js";import{H as pe}from"../chunks/Heading.342b1fa6.js";function po(J){let d,P=`This class method is simply calling the feature extractor
<a href="/docs/transformers/main/ja/main_classes/feature_extractor#transformers.FeatureExtractionMixin.from_pretrained">from_pretrained()</a>, image processor
<a href="/docs/transformers/main/ja/main_classes/image_processor#transformers.ImageProcessingMixin">ImageProcessingMixin</a> and the tokenizer
<code>~tokenization_utils_base.PreTrainedTokenizer.from_pretrained</code> methods. Please refer to the docstrings of the
methods above for more information.`;return{c(){d=n("p"),d.innerHTML=P},l(v){d=l(v,"P",{"data-svelte-h":!0}),m(d)!=="svelte-1u99syj"&&(d.innerHTML=P)},m(v,b){i(v,d,b)},p:er,d(v){v&&t(d)}}}function fo(J){let d,P="Examples:",v,b,T;return b=new rr({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Qcm9jZXNzb3IlMEElMEFwcm9jZXNzb3IlMjAlM0QlMjBBdXRvUHJvY2Vzc29yLmZyb21fcHJldHJhaW5lZCglMjJnb29nbGUtYmVydCUyRmJlcnQtYmFzZS1jYXNlZCUyMiklMEElMEElMjMlMjBQdXNoJTIwdGhlJTIwcHJvY2Vzc29yJTIwdG8lMjB5b3VyJTIwbmFtZXNwYWNlJTIwd2l0aCUyMHRoZSUyMG5hbWUlMjAlMjJteS1maW5ldHVuZWQtYmVydCUyMi4lMEFwcm9jZXNzb3IucHVzaF90b19odWIoJTIybXktZmluZXR1bmVkLWJlcnQlMjIpJTBBJTBBJTIzJTIwUHVzaCUyMHRoZSUyMHByb2Nlc3NvciUyMHRvJTIwYW4lMjBvcmdhbml6YXRpb24lMjB3aXRoJTIwdGhlJTIwbmFtZSUyMCUyMm15LWZpbmV0dW5lZC1iZXJ0JTIyLiUwQXByb2Nlc3Nvci5wdXNoX3RvX2h1YiglMjJodWdnaW5nZmFjZSUyRm15LWZpbmV0dW5lZC1iZXJ0JTIyKQ==",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the processor to your namespace with the name &quot;my-finetuned-bert&quot;.</span>
processor.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the processor to an organization with the name &quot;my-finetuned-bert&quot;.</span>
processor.push_to_hub(<span class="hljs-string">&quot;huggingface/my-finetuned-bert&quot;</span>)`,wrap:!1}}),{c(){d=n("p"),d.textContent=P,v=a(),p(b.$$.fragment)},l(c){d=l(c,"P",{"data-svelte-h":!0}),m(d)!=="svelte-kvfsh7"&&(d.textContent=P),v=o(c),f(b.$$.fragment,c)},m(c,j){i(c,d,j),i(c,v,j),u(b,c,j),T=!0},p:er,i(c){T||(h(b.$$.fragment,c),T=!0)},o(c){g(b.$$.fragment,c),T=!1},d(c){c&&(t(d),t(v)),_(b,c)}}}function uo(J){let d,P="This API is experimental and may have some slight breaking changes in the next releases.";return{c(){d=n("p"),d.textContent=P},l(v){d=l(v,"P",{"data-svelte-h":!0}),m(d)!=="svelte-15rpg4"&&(d.textContent=P)},m(v,b){i(v,d,b)},p:er,d(v){v&&t(d)}}}function ho(J){let d,P=`This class method is simply calling <a href="/docs/transformers/main/ja/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/ja/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a>. Please refer to the docstrings of the
methods above for more information.`;return{c(){d=n("p"),d.innerHTML=P},l(v){d=l(v,"P",{"data-svelte-h":!0}),m(d)!=="svelte-3qu6we"&&(d.innerHTML=P)},m(v,b){i(v,d,b)},p:er,d(v){v&&t(d)}}}function go(J){let d,P="Examples:",v,b,T;return b=new rr({props:{code:"aW1wb3J0JTIwdGVuc29yZmxvd19kYXRhc2V0cyUyMGFzJTIwdGZkcyUwQSUwQWRhdGFzZXQlMjAlM0QlMjB0ZmRzLmxvYWQoJTIyc3F1YWQlMjIpJTBBJTBBdHJhaW5pbmdfZXhhbXBsZXMlMjAlM0QlMjBnZXRfZXhhbXBsZXNfZnJvbV9kYXRhc2V0KGRhdGFzZXQlMkMlMjBldmFsdWF0ZSUzREZhbHNlKSUwQWV2YWx1YXRpb25fZXhhbXBsZXMlMjAlM0QlMjBnZXRfZXhhbXBsZXNfZnJvbV9kYXRhc2V0KGRhdGFzZXQlMkMlMjBldmFsdWF0ZSUzRFRydWUp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow_datasets <span class="hljs-keyword">as</span> tfds

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = tfds.load(<span class="hljs-string">&quot;squad&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>training_examples = get_examples_from_dataset(dataset, evaluate=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>evaluation_examples = get_examples_from_dataset(dataset, evaluate=<span class="hljs-literal">True</span>)`,wrap:!1}}),{c(){d=n("p"),d.textContent=P,v=a(),p(b.$$.fragment)},l(c){d=l(c,"P",{"data-svelte-h":!0}),m(d)!=="svelte-kvfsh7"&&(d.textContent=P),v=o(c),f(b.$$.fragment,c)},m(c,j){i(c,d,j),i(c,v,j),u(b,c,j),T=!0},p:er,i(c){T||(h(b.$$.fragment,c),T=!0)},o(c){g(b.$$.fragment,c),T=!1},d(c){c&&(t(d),t(v)),_(b,c)}}}function _o(J){let d,P="Example:",v,b,T;return b=new rr({props:{code:"cHJvY2Vzc29yJTIwJTNEJTIwU3F1YWRWMlByb2Nlc3NvcigpJTBBZXhhbXBsZXMlMjAlM0QlMjBwcm9jZXNzb3IuZ2V0X2Rldl9leGFtcGxlcyhkYXRhX2RpciklMEElMEFmZWF0dXJlcyUyMCUzRCUyMHNxdWFkX2NvbnZlcnRfZXhhbXBsZXNfdG9fZmVhdHVyZXMoJTBBJTIwJTIwJTIwJTIwZXhhbXBsZXMlM0RleGFtcGxlcyUyQyUwQSUyMCUyMCUyMCUyMHRva2VuaXplciUzRHRva2VuaXplciUyQyUwQSUyMCUyMCUyMCUyMG1heF9zZXFfbGVuZ3RoJTNEYXJncy5tYXhfc2VxX2xlbmd0aCUyQyUwQSUyMCUyMCUyMCUyMGRvY19zdHJpZGUlM0RhcmdzLmRvY19zdHJpZGUlMkMlMEElMjAlMjAlMjAlMjBtYXhfcXVlcnlfbGVuZ3RoJTNEYXJncy5tYXhfcXVlcnlfbGVuZ3RoJTJDJTBBJTIwJTIwJTIwJTIwaXNfdHJhaW5pbmclM0Rub3QlMjBldmFsdWF0ZSUyQyUwQSk=",highlighted:`processor = SquadV2Processor()
examples = processor.get_dev_examples(data_dir)

features = squad_convert_examples_to_features(
    examples=examples,
    tokenizer=tokenizer,
    max_seq_length=args.max_seq_length,
    doc_stride=args.doc_stride,
    max_query_length=args.max_query_length,
    is_training=<span class="hljs-keyword">not</span> evaluate,
)`,wrap:!1}}),{c(){d=n("p"),d.textContent=P,v=a(),p(b.$$.fragment)},l(c){d=l(c,"P",{"data-svelte-h":!0}),m(d)!=="svelte-11lpom8"&&(d.textContent=P),v=o(c),f(b.$$.fragment,c)},m(c,j){i(c,d,j),i(c,v,j),u(b,c,j),T=!0},p:er,i(c){T||(h(b.$$.fragment,c),T=!0)},o(c){g(b.$$.fragment,c),T=!1},d(c){c&&(t(d),t(v)),_(b,c)}}}function vo(J){let d,P,v,b,T,c,j,la="Transformers ライブラリでは、プロセッサは 2 つの異なる意味を持ちます。",sr,fe,ia=`<li><a href="../model_doc/wav2vec2">Wav2Vec2</a> などのマルチモーダル モデルの入力を前処理するオブジェクト (音声とテキスト)
または <a href="../model_doc/clip">CLIP</a> (テキストとビジョン)</li> <li>古いバージョンのライブラリで GLUE または SQUAD のデータを前処理するために使用されていたオブジェクトは非推奨になりました。</li>`,ar,ue,or,he,ma=`マルチモーダル モデルでは、オブジェクトが複数のモダリティ (テキスト、
視覚と音声）。これは、2 つ以上の処理オブジェクトをグループ化するプロセッサーと呼ばれるオブジェクトによって処理されます。
トークナイザー (テキスト モダリティ用)、画像プロセッサー (視覚用)、特徴抽出器 (オーディオ用) など。`,nr,ge,da="これらのプロセッサは、保存およびロード機能を実装する次の基本クラスを継承します。",lr,y,_e,ns,yt,ca="This is a mixin used to provide saving/loading functionality for all processor classes.",ls,D,ve,is,Mt,pa="Instantiates a type of <code>~processing_utils.ProcessingMixin</code> from a Python dictionary of parameters.",ms,Z,be,ds,wt,fa="Instantiate a processor associated with a pretrained model.",cs,F,ps,R,xe,fs,Pt,ua=`From a <code>pretrained_model_name_or_path</code>, resolve to a dictionary of parameters, to be used for instantiating a
processor of type <code>~processing_utils.ProcessingMixin</code> using <code>from_args_and_dict</code>.`,us,q,$e,hs,Tt,ha="Upload the processor files to the 🤗 Model Hub.",gs,G,_s,V,ye,vs,Ct,ga=`Register this class with a given auto class. This should only be used for custom feature extractors as the ones
in the library are already mapped with <code>AutoProcessor</code>.`,bs,W,xs,z,Me,$s,jt,_a=`Saves the attributes of this processor (feature extractor, tokenizer…) in the specified directory so that it
can be reloaded using the <a href="/docs/transformers/main/ja/main_classes/processors#transformers.ProcessorMixin.from_pretrained">from_pretrained()</a> method.`,ys,Y,Ms,A,we,ws,It,va="Serializes this instance to a Python dictionary.",Ps,O,Pe,Ts,Xt,ba="Save this instance to a JSON file.",Cs,K,Te,js,Jt,xa="Serializes this instance to a JSON string.",ir,Ce,mr,je,$a=`すべてのプロセッサは、同じアーキテクチャに従っています。
<a href="/docs/transformers/main/ja/main_classes/processors#transformers.DataProcessor">DataProcessor</a>。プロセッサは次のリストを返します。
<a href="/docs/transformers/main/ja/main_classes/processors#transformers.InputExample">InputExample</a>。これら
<a href="/docs/transformers/main/ja/main_classes/processors#transformers.InputExample">InputExample</a> は次のように変換できます。
<code>~data.processors.utils.Input features</code> をモデルにフィードします。`,dr,C,Ie,Is,Ut,ya="Base class for data converters for sequence classification data sets.",Xs,ee,Xe,Js,kt,Ma='Gets a collection of <a href="/docs/transformers/main/ja/main_classes/processors#transformers.InputExample">InputExample</a> for the dev set.',Us,te,Je,ks,Lt,wa="Gets an example from a dict with tensorflow tensors.",Ls,re,Ue,Zs,Zt,Pa="Gets the list of labels for this data set.",qs,se,ke,Vs,qt,Ta='Gets a collection of <a href="/docs/transformers/main/ja/main_classes/processors#transformers.InputExample">InputExample</a> for the test set.',zs,ae,Le,Es,Vt,Ca='Gets a collection of <a href="/docs/transformers/main/ja/main_classes/processors#transformers.InputExample">InputExample</a> for the train set.',Hs,oe,Ze,Qs,zt,ja=`Some tensorflow_datasets datasets are not formatted the same way the GLUE datasets are. This method converts
examples to the correct format.`,cr,U,qe,Ns,Et,Ia="A single training/test example for simple sequence classification.",Bs,ne,Ve,Ss,Ht,Xa="Serializes this instance to a JSON string.",pr,k,ze,Ds,Qt,Ja="A single set of features of data. Property names are the same names as the corresponding inputs to a model.",Fs,le,Ee,Rs,Nt,Ua="Serializes this instance to a JSON string.",fr,He,ur,Qe,ka=`<a href="https://gluebenchmark.com/" rel="nofollow">一般言語理解評価 (GLUE)</a> は、
既存の NLU タスクの多様なセットにわたるモデルのパフォーマンス。紙と同時発売された <a href="https://openreview.net/pdf?id=rJ4km2R5t7" rel="nofollow">GLUE: A
自然言語理解のためのマルチタスクベンチマークおよび分析プラットフォーム</a>`,hr,Ne,La=`このライブラリは、MRPC、MNLI、MNLI (不一致)、CoLA、SST2、STSB、
QQP、QNLI、RTE、WNLI。`,gr,Be,Za="それらのプロセッサは次のとおりです。",_r,Se,qa="<li><code>~data.processors.utils.MrpcProcessor</code></li> <li><code>~data.processors.utils.MnliProcessor</code></li> <li><code>~data.processors.utils.MnliMismatchedProcessor</code></li> <li><code>~data.processors.utils.Sst2Processor</code></li> <li><code>~data.processors.utils.StsbProcessor</code></li> <li><code>~data.processors.utils.QqpProcessor</code></li> <li><code>~data.processors.utils.QnliProcessor</code></li> <li><code>~data.processors.utils.RteProcessor</code></li> <li><code>~data.processors.utils.WnliProcessor</code></li>",vr,De,Va=`さらに、次のメソッドを使用して、データ ファイルから値をロードし、それらをリストに変換することができます。
<a href="/docs/transformers/main/ja/main_classes/processors#transformers.InputExample">InputExample</a>。`,br,Q,Fe,Gs,Bt,za="Loads a data file into a list of <code>InputFeatures</code>",xr,Re,$r,Ge,Ea=`<a href="https://www.nyu.edu/projects/bowman/xnli/" rel="nofollow">クロスリンガル NLI コーパス (XNLI)</a> は、
言語を超えたテキスト表現の品質。 XNLI は、<a href="http://www.nyu.edu/projects/bowman/multinli/" rel="nofollow"><em>MultiNLI</em></a> に基づくクラウドソースのデータセットです。テキストのペアには、15 個のテキスト含意アノテーションがラベル付けされています。
さまざまな言語 (英語などの高リソース言語とスワヒリ語などの低リソース言語の両方を含む)。`,yr,We,Ha='論文 <a href="https://arxiv.org/abs/1809.05053" rel="nofollow">XNLI: Evaluating Cross-lingual Sentence Representations</a> と同時にリリースされました。',Mr,Ye,Qa="このライブラリは、XNLI データをロードするプロセッサをホストします。",wr,Ae,Na="<li><code>~data.processors.utils.XnliProcessor</code></li>",Pr,Oe,Ba="テストセットにはゴールドラベルが付いているため、評価はテストセットで行われますのでご了承ください。",Tr,Ke,Sa='これらのプロセッサを使用する例は、<a href="https://github.com/huggingface/transformers/tree/main/examples/pytorch/text-classification/run_xnli.py" rel="nofollow">run_xnli.py</a> スクリプトに示されています。',Cr,et,jr,tt,Da=`<a href="https://rajpurkar.github.io/SQuAD-explorer//" rel="nofollow">The Stanford Question Answering Dataset (SQuAD)</a> は、次のベンチマークです。
質問応答に関するモデルのパフォーマンスを評価します。 v1.1 と v2.0 の 2 つのバージョンが利用可能です。最初のバージョン
(v1.1) は、論文 <a href="https://arxiv.org/abs/1606.05250" rel="nofollow">SQuAD: 100,000+ question for Machine Comprehension of Text</a> とともにリリースされました。 2 番目のバージョン (v2.0) は、論文 <a href="https://arxiv.org/abs/1806.03822" rel="nofollow">Know What You Don’t と同時にリリースされました。
知っておくべき: SQuAD の答えられない質問</a>。`,Ir,rt,Fa="このライブラリは、次の 2 つのバージョンのそれぞれのプロセッサをホストします。",Xr,st,Jr,at,Ra="それらのプロセッサは次のとおりです。",Ur,ot,Ga="<li><code>~data.processors.utils.SquadV1Processor</code></li> <li><code>~data.processors.utils.SquadV2Processor</code></li>",kr,nt,Wa="どちらも抽象クラス <code>~data.processors.utils.SquadProcessor</code> を継承しています。",Lr,X,lt,Ws,St,Ya=`Processor for the SQuAD data set. overridden by SquadV1Processor and SquadV2Processor, used by the version 1.1 and
version 2.0 of SQuAD, respectively.`,Ys,ie,it,As,Dt,Aa="Returns the evaluation example from the data directory.",Os,E,mt,Ks,Ft,Oa="Creates a list of <code>SquadExample</code> using a TFDS dataset.",ea,me,ta,de,dt,ra,Rt,Ka="Returns the training examples from the data directory.",Zr,ct,eo=`さらに、次のメソッドを使用して、SQuAD の例を次の形式に変換できます。
モデルの入力として使用できる <code>~data.processors.utils.SquadFeatures</code>。`,qr,L,pt,sa,Gt,to=`Converts a list of examples into a list of features that can be directly given as input to a model. It is
model-dependant and takes advantage of many of the tokenizer’s features to create the model’s inputs.`,aa,ce,Vr,ft,ro=`これらのプロセッサと前述の方法は、データを含むファイルだけでなく、
<em>tensorflow_datasets</em> パッケージ。以下に例を示します。`,zr,ut,Er,ht,so="以下にプロセッサを使用した例と、データ ファイルを使用した変換方法を示します。",Hr,gt,Qr,_t,ao="<em>tensorflow_datasets</em> の使用は、データ ファイルを使用するのと同じくらい簡単です。",Nr,vt,Br,bt,oo='これらのプロセッサを使用する別の例は、<a href="https://github.com/huggingface/transformers/tree/main/examples/legacy/question-answering/run_squad.py" rel="nofollow">run_squad.py</a> スクリプトに示されています。',Sr,tr,Dr;return T=new pe({props:{title:"Processors",local:"processors",headingTag:"h1"}}),ue=new pe({props:{title:"Multi-modal processors",local:"transformers.ProcessorMixin",headingTag:"h2"}}),_e=new M({props:{name:"class transformers.ProcessorMixin",anchor:"transformers.ProcessorMixin",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/processing_utils.py#L56"}}),ve=new M({props:{name:"from_args_and_dict",anchor:"transformers.ProcessorMixin.from_args_and_dict",parameters:[{name:"args",val:""},{name:"processor_dict",val:": Dict"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ProcessorMixin.from_args_and_dict.processor_dict",description:`<strong>processor_dict</strong> (<code>Dict[str, Any]</code>) &#x2014;
Dictionary that will be used to instantiate the processor object. Such a dictionary can be
retrieved from a pretrained checkpoint by leveraging the
<code>~processing_utils.ProcessingMixin.to_dict</code> method.`,name:"processor_dict"},{anchor:"transformers.ProcessorMixin.from_args_and_dict.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>) &#x2014;
Additional parameters from which to initialize the processor object.`,name:"kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/processing_utils.py#L365",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The processor object instantiated from those
parameters.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>~processing_utils.ProcessingMixin</code></p>
`}}),be=new M({props:{name:"from_pretrained",anchor:"transformers.ProcessorMixin.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": Union"},{name:"cache_dir",val:": Union = None"},{name:"force_download",val:": bool = False"},{name:"local_files_only",val:": bool = False"},{name:"token",val:": Union = None"},{name:"revision",val:": str = 'main'"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ProcessorMixin.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/ja/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.
**kwargs &#x2014;
Additional keyword arguments passed along to both
<a href="/docs/transformers/main/ja/main_classes/feature_extractor#transformers.FeatureExtractionMixin.from_pretrained">from_pretrained()</a> and
<code>~tokenization_utils_base.PreTrainedTokenizer.from_pretrained</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/processing_utils.py#L406"}}),F=new oa({props:{$$slots:{default:[po]},$$scope:{ctx:J}}}),xe=new M({props:{name:"get_processor_dict",anchor:"transformers.ProcessorMixin.get_processor_dict",parameters:[{name:"pretrained_model_name_or_path",val:": Union"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ProcessorMixin.get_processor_dict.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The identifier of the pre-trained checkpoint from which we want the dictionary of parameters.`,name:"pretrained_model_name_or_path"},{anchor:"transformers.ProcessorMixin.get_processor_dict.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&quot;</code>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co, you can
specify the folder name here.`,name:"subfolder"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/processing_utils.py#L256",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The dictionary(ies) that will be used to instantiate the processor object.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>Tuple[Dict, Dict]</code></p>
`}}),$e=new M({props:{name:"push_to_hub",anchor:"transformers.ProcessorMixin.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"use_temp_dir",val:": Optional = None"},{name:"commit_message",val:": Optional = None"},{name:"private",val:": Optional = None"},{name:"token",val:": Union = None"},{name:"max_shard_size",val:": Union = '5GB'"},{name:"create_pr",val:": bool = False"},{name:"safe_serialization",val:": bool = True"},{name:"revision",val:": str = None"},{name:"commit_description",val:": str = None"},{name:"tags",val:": Optional = None"},{name:"**deprecated_kwargs",val:""}],parametersDescription:[{anchor:"transformers.ProcessorMixin.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The name of the repository you want to push your processor to. It should contain your organization name
when pushing to a given organization.`,name:"repo_id"},{anchor:"transformers.ProcessorMixin.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to use a temporary directory to store the files saved before they are pushed to the Hub.
Will default to <code>True</code> if there is no directory named like <code>repo_id</code>, <code>False</code> otherwise.`,name:"use_temp_dir"},{anchor:"transformers.ProcessorMixin.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;Upload processor&quot;</code>.`,name:"commit_message"},{anchor:"transformers.ProcessorMixin.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private.`,name:"private"},{anchor:"transformers.ProcessorMixin.push_to_hub.token",description:`<strong>token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if <code>repo_url</code>
is not specified.`,name:"token"},{anchor:"transformers.ProcessorMixin.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;5GB&quot;</code>) &#x2014;
Only applicable for models. The maximum size for a checkpoint before being sharded. Checkpoints shard
will then be each of size lower than this size. If expressed as a string, needs to be digits followed
by a unit (like <code>&quot;5MB&quot;</code>). We default it to <code>&quot;5GB&quot;</code> so that users can easily load models on free-tier
Google Colab instances without any CPU OOM issues.`,name:"max_shard_size"},{anchor:"transformers.ProcessorMixin.push_to_hub.create_pr",description:`<strong>create_pr</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to create a PR with the uploaded files or directly commit.`,name:"create_pr"},{anchor:"transformers.ProcessorMixin.push_to_hub.safe_serialization",description:`<strong>safe_serialization</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to convert the model weights in safetensors format for safer serialization.`,name:"safe_serialization"},{anchor:"transformers.ProcessorMixin.push_to_hub.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Branch to push the uploaded files to.`,name:"revision"},{anchor:"transformers.ProcessorMixin.push_to_hub.commit_description",description:`<strong>commit_description</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The description of the commit that will be created`,name:"commit_description"},{anchor:"transformers.ProcessorMixin.push_to_hub.tags",description:`<strong>tags</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
List of tags to push on the Hub.`,name:"tags"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/utils/hub.py#L768"}}),G=new na({props:{anchor:"transformers.ProcessorMixin.push_to_hub.example",$$slots:{default:[fo]},$$scope:{ctx:J}}}),ye=new M({props:{name:"register_for_auto_class",anchor:"transformers.ProcessorMixin.register_for_auto_class",parameters:[{name:"auto_class",val:" = 'AutoProcessor'"}],parametersDescription:[{anchor:"transformers.ProcessorMixin.register_for_auto_class.auto_class",description:`<strong>auto_class</strong> (<code>str</code> or <code>type</code>, <em>optional</em>, defaults to <code>&quot;AutoProcessor&quot;</code>) &#x2014;
The auto class to register this new feature extractor with.`,name:"auto_class"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/processing_utils.py#L470"}}),W=new oa({props:{warning:!0,$$slots:{default:[uo]},$$scope:{ctx:J}}}),Me=new M({props:{name:"save_pretrained",anchor:"transformers.ProcessorMixin.save_pretrained",parameters:[{name:"save_directory",val:""},{name:"push_to_hub",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ProcessorMixin.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory where the feature extractor JSON file and the tokenizer files will be saved (directory will
be created if it does not exist).`,name:"save_directory"},{anchor:"transformers.ProcessorMixin.save_pretrained.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push your model to the Hugging Face model hub after saving it. You can specify the
repository you want to push to with <code>repo_id</code> (will default to the name of <code>save_directory</code> in your
namespace).`,name:"push_to_hub"},{anchor:"transformers.ProcessorMixin.save_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
Additional key word arguments passed along to the <a href="/docs/transformers/main/ja/main_classes/model#transformers.utils.PushToHubMixin.push_to_hub">push_to_hub()</a> method.`,name:"kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/processing_utils.py#L167"}}),Y=new oa({props:{$$slots:{default:[ho]},$$scope:{ctx:J}}}),we=new M({props:{name:"to_dict",anchor:"transformers.ProcessorMixin.to_dict",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/processing_utils.py#L102",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Dictionary of all the attributes that make up this processor instance.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>Dict[str, Any]</code></p>
`}}),Pe=new M({props:{name:"to_json_file",anchor:"transformers.ProcessorMixin.to_json_file",parameters:[{name:"json_file_path",val:": Union"}],parametersDescription:[{anchor:"transformers.ProcessorMixin.to_json_file.json_file_path",description:`<strong>json_file_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Path to the JSON file in which this processor instance&#x2019;s parameters will be saved.`,name:"json_file_path"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/processing_utils.py#L151"}}),Te=new M({props:{name:"to_json_string",anchor:"transformers.ProcessorMixin.to_json_string",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/processing_utils.py#L140",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>String containing all the attributes that make up this feature_extractor instance in JSON format.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>str</code></p>
`}}),Ce=new pe({props:{title:"Deprecated processors",local:"transformers.DataProcessor",headingTag:"h2"}}),Ie=new M({props:{name:"class transformers.DataProcessor",anchor:"transformers.DataProcessor",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L80"}}),Xe=new M({props:{name:"get_dev_examples",anchor:"transformers.DataProcessor.get_dev_examples",parameters:[{name:"data_dir",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L97"}}),Je=new M({props:{name:"get_example_from_tensor_dict",anchor:"transformers.DataProcessor.get_example_from_tensor_dict",parameters:[{name:"tensor_dict",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L83"}}),Ue=new M({props:{name:"get_labels",anchor:"transformers.DataProcessor.get_labels",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L105"}}),ke=new M({props:{name:"get_test_examples",anchor:"transformers.DataProcessor.get_test_examples",parameters:[{name:"data_dir",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L101"}}),Le=new M({props:{name:"get_train_examples",anchor:"transformers.DataProcessor.get_train_examples",parameters:[{name:"data_dir",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L93"}}),Ze=new M({props:{name:"tfds_map",anchor:"transformers.DataProcessor.tfds_map",parameters:[{name:"example",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L109"}}),qe=new M({props:{name:"class transformers.InputExample",anchor:"transformers.InputExample",parameters:[{name:"guid",val:": str"},{name:"text_a",val:": str"},{name:"text_b",val:": Optional = None"},{name:"label",val:": Optional = None"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L29"}}),Ve=new M({props:{name:"to_json_string",anchor:"transformers.InputExample.to_json_string",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L49"}}),ze=new M({props:{name:"class transformers.InputFeatures",anchor:"transformers.InputFeatures",parameters:[{name:"input_ids",val:": List"},{name:"attention_mask",val:": Optional = None"},{name:"token_type_ids",val:": Optional = None"},{name:"label",val:": Union = None"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L54"}}),Ee=new M({props:{name:"to_json_string",anchor:"transformers.InputFeatures.to_json_string",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L75"}}),He=new pe({props:{title:"GLUE",local:"transformers.glue_convert_examples_to_features",headingTag:"h2"}}),Fe=new M({props:{name:"transformers.glue_convert_examples_to_features",anchor:"transformers.glue_convert_examples_to_features",parameters:[{name:"examples",val:": Union"},{name:"tokenizer",val:": PreTrainedTokenizer"},{name:"max_length",val:": Optional = None"},{name:"task",val:" = None"},{name:"label_list",val:" = None"},{name:"output_mode",val:" = None"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/glue.py#L41",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>If the <code>examples</code> input is a <code>tf.data.Dataset</code>, will return a <code>tf.data.Dataset</code> containing the task-specific
features. If the input is a list of <code>InputExamples</code>, will return a list of task-specific <code>InputFeatures</code> which
can be fed to the model.</p>
`}}),Re=new pe({props:{title:"XNLI",local:"xnli",headingTag:"h2"}}),et=new pe({props:{title:"SQuAD",local:"squad",headingTag:"h2"}}),st=new pe({props:{title:"Processors",local:"transformers.data.processors.squad.SquadProcessor",headingTag:"h3"}}),lt=new M({props:{name:"class transformers.data.processors.squad.SquadProcessor",anchor:"transformers.data.processors.squad.SquadProcessor",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/squad.py#L541"}}),it=new M({props:{name:"get_dev_examples",anchor:"transformers.data.processors.squad.SquadProcessor.get_dev_examples",parameters:[{name:"data_dir",val:""},{name:"filename",val:" = None"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/squad.py#L629"}}),mt=new M({props:{name:"get_examples_from_dataset",anchor:"transformers.data.processors.squad.SquadProcessor.get_examples_from_dataset",parameters:[{name:"dataset",val:""},{name:"evaluate",val:" = False"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/squad.py#L574",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>List of SquadExample</p>
`}}),me=new na({props:{anchor:"transformers.data.processors.squad.SquadProcessor.get_examples_from_dataset.example",$$slots:{default:[go]},$$scope:{ctx:J}}}),dt=new M({props:{name:"get_train_examples",anchor:"transformers.data.processors.squad.SquadProcessor.get_train_examples",parameters:[{name:"data_dir",val:""},{name:"filename",val:" = None"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/squad.py#L607"}}),pt=new M({props:{name:"transformers.squad_convert_examples_to_features",anchor:"transformers.squad_convert_examples_to_features",parameters:[{name:"examples",val:""},{name:"tokenizer",val:""},{name:"max_seq_length",val:""},{name:"doc_stride",val:""},{name:"max_query_length",val:""},{name:"is_training",val:""},{name:"padding_strategy",val:" = 'max_length'"},{name:"return_dataset",val:" = False"},{name:"threads",val:" = 1"},{name:"tqdm_enabled",val:" = True"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/squad.py#L316",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>list of <code>SquadFeatures</code></p>
`}}),ce=new na({props:{anchor:"transformers.squad_convert_examples_to_features.example",$$slots:{default:[_o]},$$scope:{ctx:J}}}),ut=new pe({props:{title:"Example usage",local:"example-usage",headingTag:"h3"}}),gt=new rr({props:{code:"JTIzJTIwTG9hZGluZyUyMGElMjBWMiUyMHByb2Nlc3NvciUwQXByb2Nlc3NvciUyMCUzRCUyMFNxdWFkVjJQcm9jZXNzb3IoKSUwQWV4YW1wbGVzJTIwJTNEJTIwcHJvY2Vzc29yLmdldF9kZXZfZXhhbXBsZXMoc3F1YWRfdjJfZGF0YV9kaXIpJTBBJTBBJTIzJTIwTG9hZGluZyUyMGElMjBWMSUyMHByb2Nlc3NvciUwQXByb2Nlc3NvciUyMCUzRCUyMFNxdWFkVjFQcm9jZXNzb3IoKSUwQWV4YW1wbGVzJTIwJTNEJTIwcHJvY2Vzc29yLmdldF9kZXZfZXhhbXBsZXMoc3F1YWRfdjFfZGF0YV9kaXIpJTBBJTBBZmVhdHVyZXMlMjAlM0QlMjBzcXVhZF9jb252ZXJ0X2V4YW1wbGVzX3RvX2ZlYXR1cmVzKCUwQSUyMCUyMCUyMCUyMGV4YW1wbGVzJTNEZXhhbXBsZXMlMkMlMEElMjAlMjAlMjAlMjB0b2tlbml6ZXIlM0R0b2tlbml6ZXIlMkMlMEElMjAlMjAlMjAlMjBtYXhfc2VxX2xlbmd0aCUzRG1heF9zZXFfbGVuZ3RoJTJDJTBBJTIwJTIwJTIwJTIwZG9jX3N0cmlkZSUzRGFyZ3MuZG9jX3N0cmlkZSUyQyUwQSUyMCUyMCUyMCUyMG1heF9xdWVyeV9sZW5ndGglM0RtYXhfcXVlcnlfbGVuZ3RoJTJDJTBBJTIwJTIwJTIwJTIwaXNfdHJhaW5pbmclM0Rub3QlMjBldmFsdWF0ZSUyQyUwQSk=",highlighted:`<span class="hljs-comment"># Loading a V2 processor</span>
processor = SquadV2Processor()
examples = processor.get_dev_examples(squad_v2_data_dir)

<span class="hljs-comment"># Loading a V1 processor</span>
processor = SquadV1Processor()
examples = processor.get_dev_examples(squad_v1_data_dir)

features = squad_convert_examples_to_features(
    examples=examples,
    tokenizer=tokenizer,
    max_seq_length=max_seq_length,
    doc_stride=args.doc_stride,
    max_query_length=max_query_length,
    is_training=<span class="hljs-keyword">not</span> evaluate,
)`,wrap:!1}}),vt=new rr({props:{code:"JTIzJTIwdGVuc29yZmxvd19kYXRhc2V0cyUyMG9ubHklMjBoYW5kbGUlMjBTcXVhZCUyMFYxLiUwQXRmZHNfZXhhbXBsZXMlMjAlM0QlMjB0ZmRzLmxvYWQoJTIyc3F1YWQlMjIpJTBBZXhhbXBsZXMlMjAlM0QlMjBTcXVhZFYxUHJvY2Vzc29yKCkuZ2V0X2V4YW1wbGVzX2Zyb21fZGF0YXNldCh0ZmRzX2V4YW1wbGVzJTJDJTIwZXZhbHVhdGUlM0RldmFsdWF0ZSklMEElMEFmZWF0dXJlcyUyMCUzRCUyMHNxdWFkX2NvbnZlcnRfZXhhbXBsZXNfdG9fZmVhdHVyZXMoJTBBJTIwJTIwJTIwJTIwZXhhbXBsZXMlM0RleGFtcGxlcyUyQyUwQSUyMCUyMCUyMCUyMHRva2VuaXplciUzRHRva2VuaXplciUyQyUwQSUyMCUyMCUyMCUyMG1heF9zZXFfbGVuZ3RoJTNEbWF4X3NlcV9sZW5ndGglMkMlMEElMjAlMjAlMjAlMjBkb2Nfc3RyaWRlJTNEYXJncy5kb2Nfc3RyaWRlJTJDJTBBJTIwJTIwJTIwJTIwbWF4X3F1ZXJ5X2xlbmd0aCUzRG1heF9xdWVyeV9sZW5ndGglMkMlMEElMjAlMjAlMjAlMjBpc190cmFpbmluZyUzRG5vdCUyMGV2YWx1YXRlJTJDJTBBKQ==",highlighted:`<span class="hljs-comment"># tensorflow_datasets only handle Squad V1.</span>
tfds_examples = tfds.load(<span class="hljs-string">&quot;squad&quot;</span>)
examples = SquadV1Processor().get_examples_from_dataset(tfds_examples, evaluate=evaluate)

features = squad_convert_examples_to_features(
    examples=examples,
    tokenizer=tokenizer,
    max_seq_length=max_seq_length,
    doc_stride=args.doc_stride,
    max_query_length=max_query_length,
    is_training=<span class="hljs-keyword">not</span> evaluate,
)`,wrap:!1}}),{c(){d=n("meta"),P=a(),v=n("p"),b=a(),p(T.$$.fragment),c=a(),j=n("p"),j.textContent=la,sr=a(),fe=n("ul"),fe.innerHTML=ia,ar=a(),p(ue.$$.fragment),or=a(),he=n("p"),he.textContent=ma,nr=a(),ge=n("p"),ge.textContent=da,lr=a(),y=n("div"),p(_e.$$.fragment),ns=a(),yt=n("p"),yt.textContent=ca,ls=a(),D=n("div"),p(ve.$$.fragment),is=a(),Mt=n("p"),Mt.innerHTML=pa,ms=a(),Z=n("div"),p(be.$$.fragment),ds=a(),wt=n("p"),wt.textContent=fa,cs=a(),p(F.$$.fragment),ps=a(),R=n("div"),p(xe.$$.fragment),fs=a(),Pt=n("p"),Pt.innerHTML=ua,us=a(),q=n("div"),p($e.$$.fragment),hs=a(),Tt=n("p"),Tt.textContent=ha,gs=a(),p(G.$$.fragment),_s=a(),V=n("div"),p(ye.$$.fragment),vs=a(),Ct=n("p"),Ct.innerHTML=ga,bs=a(),p(W.$$.fragment),xs=a(),z=n("div"),p(Me.$$.fragment),$s=a(),jt=n("p"),jt.innerHTML=_a,ys=a(),p(Y.$$.fragment),Ms=a(),A=n("div"),p(we.$$.fragment),ws=a(),It=n("p"),It.textContent=va,Ps=a(),O=n("div"),p(Pe.$$.fragment),Ts=a(),Xt=n("p"),Xt.textContent=ba,Cs=a(),K=n("div"),p(Te.$$.fragment),js=a(),Jt=n("p"),Jt.textContent=xa,ir=a(),p(Ce.$$.fragment),mr=a(),je=n("p"),je.innerHTML=$a,dr=a(),C=n("div"),p(Ie.$$.fragment),Is=a(),Ut=n("p"),Ut.textContent=ya,Xs=a(),ee=n("div"),p(Xe.$$.fragment),Js=a(),kt=n("p"),kt.innerHTML=Ma,Us=a(),te=n("div"),p(Je.$$.fragment),ks=a(),Lt=n("p"),Lt.textContent=wa,Ls=a(),re=n("div"),p(Ue.$$.fragment),Zs=a(),Zt=n("p"),Zt.textContent=Pa,qs=a(),se=n("div"),p(ke.$$.fragment),Vs=a(),qt=n("p"),qt.innerHTML=Ta,zs=a(),ae=n("div"),p(Le.$$.fragment),Es=a(),Vt=n("p"),Vt.innerHTML=Ca,Hs=a(),oe=n("div"),p(Ze.$$.fragment),Qs=a(),zt=n("p"),zt.textContent=ja,cr=a(),U=n("div"),p(qe.$$.fragment),Ns=a(),Et=n("p"),Et.textContent=Ia,Bs=a(),ne=n("div"),p(Ve.$$.fragment),Ss=a(),Ht=n("p"),Ht.textContent=Xa,pr=a(),k=n("div"),p(ze.$$.fragment),Ds=a(),Qt=n("p"),Qt.textContent=Ja,Fs=a(),le=n("div"),p(Ee.$$.fragment),Rs=a(),Nt=n("p"),Nt.textContent=Ua,fr=a(),p(He.$$.fragment),ur=a(),Qe=n("p"),Qe.innerHTML=ka,hr=a(),Ne=n("p"),Ne.textContent=La,gr=a(),Be=n("p"),Be.textContent=Za,_r=a(),Se=n("ul"),Se.innerHTML=qa,vr=a(),De=n("p"),De.innerHTML=Va,br=a(),Q=n("div"),p(Fe.$$.fragment),Gs=a(),Bt=n("p"),Bt.innerHTML=za,xr=a(),p(Re.$$.fragment),$r=a(),Ge=n("p"),Ge.innerHTML=Ea,yr=a(),We=n("p"),We.innerHTML=Ha,Mr=a(),Ye=n("p"),Ye.textContent=Qa,wr=a(),Ae=n("ul"),Ae.innerHTML=Na,Pr=a(),Oe=n("p"),Oe.textContent=Ba,Tr=a(),Ke=n("p"),Ke.innerHTML=Sa,Cr=a(),p(et.$$.fragment),jr=a(),tt=n("p"),tt.innerHTML=Da,Ir=a(),rt=n("p"),rt.textContent=Fa,Xr=a(),p(st.$$.fragment),Jr=a(),at=n("p"),at.textContent=Ra,Ur=a(),ot=n("ul"),ot.innerHTML=Ga,kr=a(),nt=n("p"),nt.innerHTML=Wa,Lr=a(),X=n("div"),p(lt.$$.fragment),Ws=a(),St=n("p"),St.textContent=Ya,Ys=a(),ie=n("div"),p(it.$$.fragment),As=a(),Dt=n("p"),Dt.textContent=Aa,Os=a(),E=n("div"),p(mt.$$.fragment),Ks=a(),Ft=n("p"),Ft.innerHTML=Oa,ea=a(),p(me.$$.fragment),ta=a(),de=n("div"),p(dt.$$.fragment),ra=a(),Rt=n("p"),Rt.textContent=Ka,Zr=a(),ct=n("p"),ct.innerHTML=eo,qr=a(),L=n("div"),p(pt.$$.fragment),sa=a(),Gt=n("p"),Gt.textContent=to,aa=a(),p(ce.$$.fragment),Vr=a(),ft=n("p"),ft.innerHTML=ro,zr=a(),p(ut.$$.fragment),Er=a(),ht=n("p"),ht.textContent=so,Hr=a(),p(gt.$$.fragment),Qr=a(),_t=n("p"),_t.innerHTML=ao,Nr=a(),p(vt.$$.fragment),Br=a(),bt=n("p"),bt.innerHTML=oo,Sr=a(),tr=n("p"),this.h()},l(e){const r=co("svelte-u9bgzb",document.head);d=l(r,"META",{name:!0,content:!0}),r.forEach(t),P=o(e),v=l(e,"P",{}),x(v).forEach(t),b=o(e),f(T.$$.fragment,e),c=o(e),j=l(e,"P",{"data-svelte-h":!0}),m(j)!=="svelte-4gs895"&&(j.textContent=la),sr=o(e),fe=l(e,"UL",{"data-svelte-h":!0}),m(fe)!=="svelte-1h23xz2"&&(fe.innerHTML=ia),ar=o(e),f(ue.$$.fragment,e),or=o(e),he=l(e,"P",{"data-svelte-h":!0}),m(he)!=="svelte-hbbv64"&&(he.textContent=ma),nr=o(e),ge=l(e,"P",{"data-svelte-h":!0}),m(ge)!=="svelte-t565jj"&&(ge.textContent=da),lr=o(e),y=l(e,"DIV",{class:!0});var w=x(y);f(_e.$$.fragment,w),ns=o(w),yt=l(w,"P",{"data-svelte-h":!0}),m(yt)!=="svelte-1s4wckx"&&(yt.textContent=ca),ls=o(w),D=l(w,"DIV",{class:!0});var xt=x(D);f(ve.$$.fragment,xt),is=o(xt),Mt=l(xt,"P",{"data-svelte-h":!0}),m(Mt)!=="svelte-1i2d3vx"&&(Mt.innerHTML=pa),xt.forEach(t),ms=o(w),Z=l(w,"DIV",{class:!0});var N=x(Z);f(be.$$.fragment,N),ds=o(N),wt=l(N,"P",{"data-svelte-h":!0}),m(wt)!=="svelte-1cj8dcb"&&(wt.textContent=fa),cs=o(N),f(F.$$.fragment,N),N.forEach(t),ps=o(w),R=l(w,"DIV",{class:!0});var $t=x(R);f(xe.$$.fragment,$t),fs=o($t),Pt=l($t,"P",{"data-svelte-h":!0}),m(Pt)!=="svelte-hsvutq"&&(Pt.innerHTML=ua),$t.forEach(t),us=o(w),q=l(w,"DIV",{class:!0});var B=x(q);f($e.$$.fragment,B),hs=o(B),Tt=l(B,"P",{"data-svelte-h":!0}),m(Tt)!=="svelte-1cwsjho"&&(Tt.textContent=ha),gs=o(B),f(G.$$.fragment,B),B.forEach(t),_s=o(w),V=l(w,"DIV",{class:!0});var S=x(V);f(ye.$$.fragment,S),vs=o(S),Ct=l(S,"P",{"data-svelte-h":!0}),m(Ct)!=="svelte-hhsvto"&&(Ct.innerHTML=ga),bs=o(S),f(W.$$.fragment,S),S.forEach(t),xs=o(w),z=l(w,"DIV",{class:!0});var Wt=x(z);f(Me.$$.fragment,Wt),$s=o(Wt),jt=l(Wt,"P",{"data-svelte-h":!0}),m(jt)!=="svelte-1yuddp1"&&(jt.innerHTML=_a),ys=o(Wt),f(Y.$$.fragment,Wt),Wt.forEach(t),Ms=o(w),A=l(w,"DIV",{class:!0});var Fr=x(A);f(we.$$.fragment,Fr),ws=o(Fr),It=l(Fr,"P",{"data-svelte-h":!0}),m(It)!=="svelte-1ww3wqq"&&(It.textContent=va),Fr.forEach(t),Ps=o(w),O=l(w,"DIV",{class:!0});var Rr=x(O);f(Pe.$$.fragment,Rr),Ts=o(Rr),Xt=l(Rr,"P",{"data-svelte-h":!0}),m(Xt)!=="svelte-1g70y32"&&(Xt.textContent=ba),Rr.forEach(t),Cs=o(w),K=l(w,"DIV",{class:!0});var Gr=x(K);f(Te.$$.fragment,Gr),js=o(Gr),Jt=l(Gr,"P",{"data-svelte-h":!0}),m(Jt)!=="svelte-5ayq1f"&&(Jt.textContent=xa),Gr.forEach(t),w.forEach(t),ir=o(e),f(Ce.$$.fragment,e),mr=o(e),je=l(e,"P",{"data-svelte-h":!0}),m(je)!=="svelte-g98oo1"&&(je.innerHTML=$a),dr=o(e),C=l(e,"DIV",{class:!0});var I=x(C);f(Ie.$$.fragment,I),Is=o(I),Ut=l(I,"P",{"data-svelte-h":!0}),m(Ut)!=="svelte-1bsw04k"&&(Ut.textContent=ya),Xs=o(I),ee=l(I,"DIV",{class:!0});var Wr=x(ee);f(Xe.$$.fragment,Wr),Js=o(Wr),kt=l(Wr,"P",{"data-svelte-h":!0}),m(kt)!=="svelte-1szdena"&&(kt.innerHTML=Ma),Wr.forEach(t),Us=o(I),te=l(I,"DIV",{class:!0});var Yr=x(te);f(Je.$$.fragment,Yr),ks=o(Yr),Lt=l(Yr,"P",{"data-svelte-h":!0}),m(Lt)!=="svelte-pplryq"&&(Lt.textContent=wa),Yr.forEach(t),Ls=o(I),re=l(I,"DIV",{class:!0});var Ar=x(re);f(Ue.$$.fragment,Ar),Zs=o(Ar),Zt=l(Ar,"P",{"data-svelte-h":!0}),m(Zt)!=="svelte-3oqyjr"&&(Zt.textContent=Pa),Ar.forEach(t),qs=o(I),se=l(I,"DIV",{class:!0});var Or=x(se);f(ke.$$.fragment,Or),Vs=o(Or),qt=l(Or,"P",{"data-svelte-h":!0}),m(qt)!=="svelte-6j503t"&&(qt.innerHTML=Ta),Or.forEach(t),zs=o(I),ae=l(I,"DIV",{class:!0});var Kr=x(ae);f(Le.$$.fragment,Kr),Es=o(Kr),Vt=l(Kr,"P",{"data-svelte-h":!0}),m(Vt)!=="svelte-w0fgcv"&&(Vt.innerHTML=Ca),Kr.forEach(t),Hs=o(I),oe=l(I,"DIV",{class:!0});var es=x(oe);f(Ze.$$.fragment,es),Qs=o(es),zt=l(es,"P",{"data-svelte-h":!0}),m(zt)!=="svelte-1jevh15"&&(zt.textContent=ja),es.forEach(t),I.forEach(t),cr=o(e),U=l(e,"DIV",{class:!0});var Yt=x(U);f(qe.$$.fragment,Yt),Ns=o(Yt),Et=l(Yt,"P",{"data-svelte-h":!0}),m(Et)!=="svelte-vkt0pi"&&(Et.textContent=Ia),Bs=o(Yt),ne=l(Yt,"DIV",{class:!0});var ts=x(ne);f(Ve.$$.fragment,ts),Ss=o(ts),Ht=l(ts,"P",{"data-svelte-h":!0}),m(Ht)!=="svelte-5ayq1f"&&(Ht.textContent=Xa),ts.forEach(t),Yt.forEach(t),pr=o(e),k=l(e,"DIV",{class:!0});var At=x(k);f(ze.$$.fragment,At),Ds=o(At),Qt=l(At,"P",{"data-svelte-h":!0}),m(Qt)!=="svelte-168wf64"&&(Qt.textContent=Ja),Fs=o(At),le=l(At,"DIV",{class:!0});var rs=x(le);f(Ee.$$.fragment,rs),Rs=o(rs),Nt=l(rs,"P",{"data-svelte-h":!0}),m(Nt)!=="svelte-5ayq1f"&&(Nt.textContent=Ua),rs.forEach(t),At.forEach(t),fr=o(e),f(He.$$.fragment,e),ur=o(e),Qe=l(e,"P",{"data-svelte-h":!0}),m(Qe)!=="svelte-dz9ydi"&&(Qe.innerHTML=ka),hr=o(e),Ne=l(e,"P",{"data-svelte-h":!0}),m(Ne)!=="svelte-1lukeag"&&(Ne.textContent=La),gr=o(e),Be=l(e,"P",{"data-svelte-h":!0}),m(Be)!=="svelte-w2nqkz"&&(Be.textContent=Za),_r=o(e),Se=l(e,"UL",{"data-svelte-h":!0}),m(Se)!=="svelte-my8qym"&&(Se.innerHTML=qa),vr=o(e),De=l(e,"P",{"data-svelte-h":!0}),m(De)!=="svelte-1j6tfx9"&&(De.innerHTML=Va),br=o(e),Q=l(e,"DIV",{class:!0});var ss=x(Q);f(Fe.$$.fragment,ss),Gs=o(ss),Bt=l(ss,"P",{"data-svelte-h":!0}),m(Bt)!=="svelte-5lvrve"&&(Bt.innerHTML=za),ss.forEach(t),xr=o(e),f(Re.$$.fragment,e),$r=o(e),Ge=l(e,"P",{"data-svelte-h":!0}),m(Ge)!=="svelte-1cfncyx"&&(Ge.innerHTML=Ea),yr=o(e),We=l(e,"P",{"data-svelte-h":!0}),m(We)!=="svelte-10048a6"&&(We.innerHTML=Ha),Mr=o(e),Ye=l(e,"P",{"data-svelte-h":!0}),m(Ye)!=="svelte-1z0bn35"&&(Ye.textContent=Qa),wr=o(e),Ae=l(e,"UL",{"data-svelte-h":!0}),m(Ae)!=="svelte-1e2xq99"&&(Ae.innerHTML=Na),Pr=o(e),Oe=l(e,"P",{"data-svelte-h":!0}),m(Oe)!=="svelte-1d3nf11"&&(Oe.textContent=Ba),Tr=o(e),Ke=l(e,"P",{"data-svelte-h":!0}),m(Ke)!=="svelte-7zvs7i"&&(Ke.innerHTML=Sa),Cr=o(e),f(et.$$.fragment,e),jr=o(e),tt=l(e,"P",{"data-svelte-h":!0}),m(tt)!=="svelte-5cjvlv"&&(tt.innerHTML=Da),Ir=o(e),rt=l(e,"P",{"data-svelte-h":!0}),m(rt)!=="svelte-10uynke"&&(rt.textContent=Fa),Xr=o(e),f(st.$$.fragment,e),Jr=o(e),at=l(e,"P",{"data-svelte-h":!0}),m(at)!=="svelte-w2nqkz"&&(at.textContent=Ra),Ur=o(e),ot=l(e,"UL",{"data-svelte-h":!0}),m(ot)!=="svelte-1qiv3qf"&&(ot.innerHTML=Ga),kr=o(e),nt=l(e,"P",{"data-svelte-h":!0}),m(nt)!=="svelte-ii491f"&&(nt.innerHTML=Wa),Lr=o(e),X=l(e,"DIV",{class:!0});var H=x(X);f(lt.$$.fragment,H),Ws=o(H),St=l(H,"P",{"data-svelte-h":!0}),m(St)!=="svelte-173gxyd"&&(St.textContent=Ya),Ys=o(H),ie=l(H,"DIV",{class:!0});var as=x(ie);f(it.$$.fragment,as),As=o(as),Dt=l(as,"P",{"data-svelte-h":!0}),m(Dt)!=="svelte-wmaktk"&&(Dt.textContent=Aa),as.forEach(t),Os=o(H),E=l(H,"DIV",{class:!0});var Ot=x(E);f(mt.$$.fragment,Ot),Ks=o(Ot),Ft=l(Ot,"P",{"data-svelte-h":!0}),m(Ft)!=="svelte-11nqnea"&&(Ft.innerHTML=Oa),ea=o(Ot),f(me.$$.fragment,Ot),Ot.forEach(t),ta=o(H),de=l(H,"DIV",{class:!0});var os=x(de);f(dt.$$.fragment,os),ra=o(os),Rt=l(os,"P",{"data-svelte-h":!0}),m(Rt)!=="svelte-d5zv1x"&&(Rt.textContent=Ka),os.forEach(t),H.forEach(t),Zr=o(e),ct=l(e,"P",{"data-svelte-h":!0}),m(ct)!=="svelte-18mz77q"&&(ct.innerHTML=eo),qr=o(e),L=l(e,"DIV",{class:!0});var Kt=x(L);f(pt.$$.fragment,Kt),sa=o(Kt),Gt=l(Kt,"P",{"data-svelte-h":!0}),m(Gt)!=="svelte-169nh0g"&&(Gt.textContent=to),aa=o(Kt),f(ce.$$.fragment,Kt),Kt.forEach(t),Vr=o(e),ft=l(e,"P",{"data-svelte-h":!0}),m(ft)!=="svelte-1esudax"&&(ft.innerHTML=ro),zr=o(e),f(ut.$$.fragment,e),Er=o(e),ht=l(e,"P",{"data-svelte-h":!0}),m(ht)!=="svelte-3glna9"&&(ht.textContent=so),Hr=o(e),f(gt.$$.fragment,e),Qr=o(e),_t=l(e,"P",{"data-svelte-h":!0}),m(_t)!=="svelte-jzuhjq"&&(_t.innerHTML=ao),Nr=o(e),f(vt.$$.fragment,e),Br=o(e),bt=l(e,"P",{"data-svelte-h":!0}),m(bt)!=="svelte-fac3c8"&&(bt.innerHTML=oo),Sr=o(e),tr=l(e,"P",{}),x(tr).forEach(t),this.h()},h(){$(d,"name","hf:doc:metadata"),$(d,"content",bo),$(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,r){s(document.head,d),i(e,P,r),i(e,v,r),i(e,b,r),u(T,e,r),i(e,c,r),i(e,j,r),i(e,sr,r),i(e,fe,r),i(e,ar,r),u(ue,e,r),i(e,or,r),i(e,he,r),i(e,nr,r),i(e,ge,r),i(e,lr,r),i(e,y,r),u(_e,y,null),s(y,ns),s(y,yt),s(y,ls),s(y,D),u(ve,D,null),s(D,is),s(D,Mt),s(y,ms),s(y,Z),u(be,Z,null),s(Z,ds),s(Z,wt),s(Z,cs),u(F,Z,null),s(y,ps),s(y,R),u(xe,R,null),s(R,fs),s(R,Pt),s(y,us),s(y,q),u($e,q,null),s(q,hs),s(q,Tt),s(q,gs),u(G,q,null),s(y,_s),s(y,V),u(ye,V,null),s(V,vs),s(V,Ct),s(V,bs),u(W,V,null),s(y,xs),s(y,z),u(Me,z,null),s(z,$s),s(z,jt),s(z,ys),u(Y,z,null),s(y,Ms),s(y,A),u(we,A,null),s(A,ws),s(A,It),s(y,Ps),s(y,O),u(Pe,O,null),s(O,Ts),s(O,Xt),s(y,Cs),s(y,K),u(Te,K,null),s(K,js),s(K,Jt),i(e,ir,r),u(Ce,e,r),i(e,mr,r),i(e,je,r),i(e,dr,r),i(e,C,r),u(Ie,C,null),s(C,Is),s(C,Ut),s(C,Xs),s(C,ee),u(Xe,ee,null),s(ee,Js),s(ee,kt),s(C,Us),s(C,te),u(Je,te,null),s(te,ks),s(te,Lt),s(C,Ls),s(C,re),u(Ue,re,null),s(re,Zs),s(re,Zt),s(C,qs),s(C,se),u(ke,se,null),s(se,Vs),s(se,qt),s(C,zs),s(C,ae),u(Le,ae,null),s(ae,Es),s(ae,Vt),s(C,Hs),s(C,oe),u(Ze,oe,null),s(oe,Qs),s(oe,zt),i(e,cr,r),i(e,U,r),u(qe,U,null),s(U,Ns),s(U,Et),s(U,Bs),s(U,ne),u(Ve,ne,null),s(ne,Ss),s(ne,Ht),i(e,pr,r),i(e,k,r),u(ze,k,null),s(k,Ds),s(k,Qt),s(k,Fs),s(k,le),u(Ee,le,null),s(le,Rs),s(le,Nt),i(e,fr,r),u(He,e,r),i(e,ur,r),i(e,Qe,r),i(e,hr,r),i(e,Ne,r),i(e,gr,r),i(e,Be,r),i(e,_r,r),i(e,Se,r),i(e,vr,r),i(e,De,r),i(e,br,r),i(e,Q,r),u(Fe,Q,null),s(Q,Gs),s(Q,Bt),i(e,xr,r),u(Re,e,r),i(e,$r,r),i(e,Ge,r),i(e,yr,r),i(e,We,r),i(e,Mr,r),i(e,Ye,r),i(e,wr,r),i(e,Ae,r),i(e,Pr,r),i(e,Oe,r),i(e,Tr,r),i(e,Ke,r),i(e,Cr,r),u(et,e,r),i(e,jr,r),i(e,tt,r),i(e,Ir,r),i(e,rt,r),i(e,Xr,r),u(st,e,r),i(e,Jr,r),i(e,at,r),i(e,Ur,r),i(e,ot,r),i(e,kr,r),i(e,nt,r),i(e,Lr,r),i(e,X,r),u(lt,X,null),s(X,Ws),s(X,St),s(X,Ys),s(X,ie),u(it,ie,null),s(ie,As),s(ie,Dt),s(X,Os),s(X,E),u(mt,E,null),s(E,Ks),s(E,Ft),s(E,ea),u(me,E,null),s(X,ta),s(X,de),u(dt,de,null),s(de,ra),s(de,Rt),i(e,Zr,r),i(e,ct,r),i(e,qr,r),i(e,L,r),u(pt,L,null),s(L,sa),s(L,Gt),s(L,aa),u(ce,L,null),i(e,Vr,r),i(e,ft,r),i(e,zr,r),u(ut,e,r),i(e,Er,r),i(e,ht,r),i(e,Hr,r),u(gt,e,r),i(e,Qr,r),i(e,_t,r),i(e,Nr,r),u(vt,e,r),i(e,Br,r),i(e,bt,r),i(e,Sr,r),i(e,tr,r),Dr=!0},p(e,[r]){const w={};r&2&&(w.$$scope={dirty:r,ctx:e}),F.$set(w);const xt={};r&2&&(xt.$$scope={dirty:r,ctx:e}),G.$set(xt);const N={};r&2&&(N.$$scope={dirty:r,ctx:e}),W.$set(N);const $t={};r&2&&($t.$$scope={dirty:r,ctx:e}),Y.$set($t);const B={};r&2&&(B.$$scope={dirty:r,ctx:e}),me.$set(B);const S={};r&2&&(S.$$scope={dirty:r,ctx:e}),ce.$set(S)},i(e){Dr||(h(T.$$.fragment,e),h(ue.$$.fragment,e),h(_e.$$.fragment,e),h(ve.$$.fragment,e),h(be.$$.fragment,e),h(F.$$.fragment,e),h(xe.$$.fragment,e),h($e.$$.fragment,e),h(G.$$.fragment,e),h(ye.$$.fragment,e),h(W.$$.fragment,e),h(Me.$$.fragment,e),h(Y.$$.fragment,e),h(we.$$.fragment,e),h(Pe.$$.fragment,e),h(Te.$$.fragment,e),h(Ce.$$.fragment,e),h(Ie.$$.fragment,e),h(Xe.$$.fragment,e),h(Je.$$.fragment,e),h(Ue.$$.fragment,e),h(ke.$$.fragment,e),h(Le.$$.fragment,e),h(Ze.$$.fragment,e),h(qe.$$.fragment,e),h(Ve.$$.fragment,e),h(ze.$$.fragment,e),h(Ee.$$.fragment,e),h(He.$$.fragment,e),h(Fe.$$.fragment,e),h(Re.$$.fragment,e),h(et.$$.fragment,e),h(st.$$.fragment,e),h(lt.$$.fragment,e),h(it.$$.fragment,e),h(mt.$$.fragment,e),h(me.$$.fragment,e),h(dt.$$.fragment,e),h(pt.$$.fragment,e),h(ce.$$.fragment,e),h(ut.$$.fragment,e),h(gt.$$.fragment,e),h(vt.$$.fragment,e),Dr=!0)},o(e){g(T.$$.fragment,e),g(ue.$$.fragment,e),g(_e.$$.fragment,e),g(ve.$$.fragment,e),g(be.$$.fragment,e),g(F.$$.fragment,e),g(xe.$$.fragment,e),g($e.$$.fragment,e),g(G.$$.fragment,e),g(ye.$$.fragment,e),g(W.$$.fragment,e),g(Me.$$.fragment,e),g(Y.$$.fragment,e),g(we.$$.fragment,e),g(Pe.$$.fragment,e),g(Te.$$.fragment,e),g(Ce.$$.fragment,e),g(Ie.$$.fragment,e),g(Xe.$$.fragment,e),g(Je.$$.fragment,e),g(Ue.$$.fragment,e),g(ke.$$.fragment,e),g(Le.$$.fragment,e),g(Ze.$$.fragment,e),g(qe.$$.fragment,e),g(Ve.$$.fragment,e),g(ze.$$.fragment,e),g(Ee.$$.fragment,e),g(He.$$.fragment,e),g(Fe.$$.fragment,e),g(Re.$$.fragment,e),g(et.$$.fragment,e),g(st.$$.fragment,e),g(lt.$$.fragment,e),g(it.$$.fragment,e),g(mt.$$.fragment,e),g(me.$$.fragment,e),g(dt.$$.fragment,e),g(pt.$$.fragment,e),g(ce.$$.fragment,e),g(ut.$$.fragment,e),g(gt.$$.fragment,e),g(vt.$$.fragment,e),Dr=!1},d(e){e&&(t(P),t(v),t(b),t(c),t(j),t(sr),t(fe),t(ar),t(or),t(he),t(nr),t(ge),t(lr),t(y),t(ir),t(mr),t(je),t(dr),t(C),t(cr),t(U),t(pr),t(k),t(fr),t(ur),t(Qe),t(hr),t(Ne),t(gr),t(Be),t(_r),t(Se),t(vr),t(De),t(br),t(Q),t(xr),t($r),t(Ge),t(yr),t(We),t(Mr),t(Ye),t(wr),t(Ae),t(Pr),t(Oe),t(Tr),t(Ke),t(Cr),t(jr),t(tt),t(Ir),t(rt),t(Xr),t(Jr),t(at),t(Ur),t(ot),t(kr),t(nt),t(Lr),t(X),t(Zr),t(ct),t(qr),t(L),t(Vr),t(ft),t(zr),t(Er),t(ht),t(Hr),t(Qr),t(_t),t(Nr),t(Br),t(bt),t(Sr),t(tr)),t(d),_(T,e),_(ue,e),_(_e),_(ve),_(be),_(F),_(xe),_($e),_(G),_(ye),_(W),_(Me),_(Y),_(we),_(Pe),_(Te),_(Ce,e),_(Ie),_(Xe),_(Je),_(Ue),_(ke),_(Le),_(Ze),_(qe),_(Ve),_(ze),_(Ee),_(He,e),_(Fe),_(Re,e),_(et,e),_(st,e),_(lt),_(it),_(mt),_(me),_(dt),_(pt),_(ce),_(ut,e),_(gt,e),_(vt,e)}}}const bo='{"title":"Processors","local":"processors","sections":[{"title":"Multi-modal processors","local":"transformers.ProcessorMixin","sections":[],"depth":2},{"title":"Deprecated processors","local":"transformers.DataProcessor","sections":[],"depth":2},{"title":"GLUE","local":"transformers.glue_convert_examples_to_features","sections":[],"depth":2},{"title":"XNLI","local":"xnli","sections":[],"depth":2},{"title":"SQuAD","local":"squad","sections":[{"title":"Processors","local":"transformers.data.processors.squad.SquadProcessor","sections":[],"depth":3},{"title":"Example usage","local":"example-usage","sections":[],"depth":3}],"depth":2}],"depth":1}';function xo(J){return lo(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class jo extends io{constructor(d){super(),mo(this,d,xo,vo,no,{})}}export{jo as component};
