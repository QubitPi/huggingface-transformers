import{s as St,o as Bt,n as Te}from"../chunks/scheduler.9bc65507.js";import{S as Kt,i as Et,g as p,s as o,r as $,A as Qt,h as f,f as l,c as a,j as It,u,x as r,k as Yt,y as Dt,a as n,v as d,d as T,t as g,w as c}from"../chunks/index.707bf1b6.js";import{T as de}from"../chunks/Tip.c2ecdbf4.js";import{C as mt}from"../chunks/CodeBlock.54a9f38d.js";import{H as h}from"../chunks/Heading.342b1fa6.js";function qt(M){let s,m='詳細な説明が不要で、単にTPUのコードサンプルを入手してトレーニングを開始したい場合は、<a href="https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb" rel="nofollow">私たちのTPUの例のノートブックをチェックしてください！</a>';return{c(){s=p("p"),s.innerHTML=m},l(i){s=f(i,"P",{"data-svelte-h":!0}),r(s)!=="svelte-1o4hgvh"&&(s.innerHTML=m)},m(i,U){n(i,s,U)},p:Te,d(i){i&&l(s)}}}function Ot(M){let s,m="すべてのデータを<code>np.ndarray</code>または<code>tf.Tensor</code>としてメモリに収めることができる場合、ColabまたはTPUノードを使用している場合でも、データをGoogle Cloud Storageにアップロードせずに<code>fit()</code>でトレーニングできます。";return{c(){s=p("p"),s.innerHTML=m},l(i){s=f(i,"P",{"data-svelte-h":!0}),r(s)!=="svelte-1r6i7r5"&&(s.innerHTML=m)},m(i,U){n(i,s,U)},p:Te,d(i){i&&l(s)}}}function el(M){let s,m="<strong>🤗 Hugging Face固有のヒント🤗:</strong> TFコードの例でよく見るであろう<code>Dataset.to_tf_dataset()</code>とその高レベルのラッパーである<code>model.prepare_tf_dataset()</code>は、TPUノードで失敗します。これは、<code>tf.data.Dataset</code>を作成しているにもかかわらず、それが「純粋な」<code>tf.data</code>パイプラインではなく、<code>tf.numpy_function</code>または<code>Dataset.from_generator()</code>を使用して基盤となるHuggingFace <code>Dataset</code>からデータをストリームで読み込むことからです。このHuggingFace <code>Dataset</code>はローカルディスク上のデータをバックアップしており、リモートTPUノードが読み取ることができないためです。";return{c(){s=p("p"),s.innerHTML=m},l(i){s=f(i,"P",{"data-svelte-h":!0}),r(s)!=="svelte-13idf4u"&&(s.innerHTML=m)},m(i,U){n(i,s,U)},p:Te,d(i){i&&l(s)}}}function tl(M){let s,m="XLAコンパイルされたコードは通常高速です。したがって、TPUで実行する予定がない場合でも、<code>jit_compile=True</code>を追加することでパフォーマンスを向上させることができます。ただし、以下のXLA互換性に関する注意事項に注意してください！";return{c(){s=p("p"),s.innerHTML=m},l(i){s=f(i,"P",{"data-svelte-h":!0}),r(s)!=="svelte-6glddx"&&(s.innerHTML=m)},m(i,U){n(i,s,U)},p:Te,d(i){i&&l(s)}}}function ll(M){let s,m="<strong>苦い経験から生まれたヒント:</strong> <code>jit_compile=True</code>を使用することは、CPU/GPUコードがXLA互換であることを確認し、速度を向上させる良い方法ですが、実際にTPUでコードを実行する際には多くの問題を引き起こす可能性があります。 XLAコンパイルはTPU上で暗黙的に行われるため、実際にコードをTPUで実行する前にその行を削除することを忘れないでください！";return{c(){s=p("p"),s.innerHTML=m},l(i){s=f(i,"P",{"data-svelte-h":!0}),r(s)!=="svelte-o1irwm"&&(s.innerHTML=m)},m(i,U){n(i,s,U)},p:Te,d(i){i&&l(s)}}}function nl(M){let s,m="<strong>🤗 HuggingFace固有のヒント🤗:</strong> TensorFlowモデルと損失関数をXLA互換に書き直すために多くの努力を払っています。通常、モデルと損失関数はデフォルトでルール＃1と＃2に従っているため、<code>transformers</code>モデルを使用している場合はこれらをスキップできます。ただし、独自のモデルと損失関数を記述する場合は、これらのルールを忘れないでください！";return{c(){s=p("p"),s.innerHTML=m},l(i){s=f(i,"P",{"data-svelte-h":!0}),r(s)!=="svelte-1evmood"&&(s.innerHTML=m)},m(i,U){n(i,s,U)},p:Te,d(i){i&&l(s)}}}function sl(M){let s,m="<strong>🤗 HuggingFace に関する具体的なヒント🤗:</strong> 弊社のトークナイザーとデータコレクターには、ここで役立つメソッドがあります。トークナイザーを呼び出す際に <code>padding=&quot;max_length&quot;</code> または <code>padding=&quot;longest&quot;</code> を使用して、パディングされたデータを出力するように設定できます。トークナイザーとデータコレクターには、一意の入力形状の数を減らすのに役立つ <code>pad_to_multiple_of</code> 引数もあります！";return{c(){s=p("p"),s.innerHTML=m},l(i){s=f(i,"P",{"data-svelte-h":!0}),r(s)!=="svelte-8akled"&&(s.innerHTML=m)},m(i,U){n(i,s,U)},p:Te,d(i){i&&l(s)}}}function ol(M){let s,m,i,U,C,ce,b,Ue,y,Me,H,$t="TPUは<strong>Tensor Processing Unit（テンソル処理ユニット）</strong>の略です。これらはGoogleが設計したハードウェアで、ニューラルネットワーク内のテンソル計算を大幅に高速化するために使用されます。これはGPUのようなものです。ネットワークのトレーニングと推論の両方に使用できます。一般的にはGoogleのクラウドサービスを介してアクセスされますが、Google ColabとKaggle Kernelsを通じても無料で小規模のTPUに直接アクセスできます。",he,X,ut='<a href="https://huggingface.co/blog/tensorflow-philosophy" rel="nofollow">🤗 TransformersのすべてのTensorFlowモデルはKerasモデルです</a>ので、この文書のほとんどの方法は一般的にKerasモデル用のTPUトレーニングに適用できます！ただし、TransformersとDatasetsのHuggingFaceエコシステム（hug-o-system？）に固有のポイントもいくつかあり、それについては適用するときにそれを示します。',be,A,Pe,k,dt="新しいユーザーは、さまざまなTPUとそのアクセス方法に関する幅広い情報によく混乱します。理解するための最初の重要な違いは、<strong>TPUノード</strong>と<strong>TPU VM</strong>の違いです。",ve,z,Tt="<strong>TPUノード</strong>を使用すると、事実上リモートのTPUに間接的にアクセスします。別個のVMが必要で、ネットワークとデータパイプラインを初期化し、それらをリモートノードに転送します。Google ColabでTPUを使用すると、<strong>TPUノード</strong>スタイルでアクセスしています。",_e,j,gt="TPUノードを使用すると、それに慣れていない人々にはかなり予期しない動作が発生することがあります！特に、TPUはPythonコードを実行しているマシンと物理的に異なるシステムに配置されているため、データはローカルマシンにローカルで格納されているデータパイプラインが完全に失敗します。代わりに、データはGoogle Cloud Storageに格納する必要があります。ここでデータパイプラインはリモートのTPUノードで実行されている場合でも、データにアクセスできます。",we,P,Le,v,xe,J,ct="TPUにアクセスする第二の方法は、<strong>TPU VM</strong>を介してです。TPU VMを使用する場合、TPUが接続されているマシンに直接接続します。これはGPU VMでトレーニングを行うのと同様です。TPU VMは一般的にデータパイプラインに関しては特に作業がしやすく、上記のすべての警告はTPU VMには適用されません！",Ce,G,Ut='これは主観的な文書ですので、こちらの意見です：<strong>可能な限りTPUノードの使用を避けてください。</strong> TPU VMよりも混乱しやすく、デバッグが難しいです。将来的にはサポートされなくなる可能性もあります - Googleの最新のTPUであるTPUv4は、TPU VMとしてのみアクセスできるため、TPUノードは将来的には「レガシー」のアクセス方法になる可能性が高いです。ただし、無料でTPUにアクセスできるのはColabとKaggle Kernelsの場合があります。その場合、どうしても使用しなければならない場合の取り扱い方法を説明しようとします！詳細は<a href="https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb" rel="nofollow">TPUの例のノートブック</a>で詳細な説明を確認してください。',ye,V,He,F,Mt="単一のTPU（v2-8/v3-8/v4-8）は8つのレプリカを実行します。TPUは数百から数千のレプリカを同時に実行できる<strong>ポッド</strong>に存在します。単一のTPUよりも多くのTPUを使用するが、ポッド全体ではない場合（たとえばv3-32）、TPUフリートは<strong>ポッドスライス</strong>として参照されます。",Xe,R,ht="Colabを介して無料のTPUにアクセスする場合、通常は単一のv2-8 TPUが提供されます。",Ae,W,ke,Z,bt="XLAは、TensorFlowとJAXの両方で使用される最適化コンパイラです。JAXでは唯一のコンパイラであり、TensorFlowではオプションですが（しかしTPUでは必須です！）、Kerasモデルをトレーニングする際に<code>model.compile()</code>に引数<code>jit_compile=True</code>を渡すことで最も簡単に有効にできます。エラーが発生せず、パフォーマンスが良好であれば、それはTPUに移行する準備が整った良い兆候です！",ze,N,Pt="TPU上でのデバッグは一般的にCPU/GPUよりも少し難しいため、TPUで試す前にまずCPU/GPUでXLAを使用してコードを実行することをお勧めします。もちろん、長時間トレーニングする必要はありません。モデルとデータパイプラインが期待通りに動作するかを確認するための数ステップだけです。",je,_,Je,w,Ge,I,Ve,Y,vt="多くの場合、コードはすでにXLA互換かもしれません！ただし、XLAでは動作する通常のTensorFlowでも動作しないいくつかの要素があります。以下に、3つの主要なルールにまとめています：",Fe,L,Re,S,We,B,_t="これは、任意の<code>if</code>ステートメントが<code>tf.Tensor</code>内の値に依存していない必要があることを意味します。例えば、次のコードブロックはXLAでコンパイルできません！",Ze,K,Ne,E,wt="これは最初は非常に制限的に思えるかもしれませんが、ほとんどのニューラルネットコードはこれを行う必要はありません。通常、この制約を回避するために<code>tf.cond</code>を使用するか（ドキュメントはこちらを参照）、条件を削除して代わりに指示変数を使用したりすることができます。次のように：",Ie,Q,Ye,D,Lt="このコードは、上記のコードとまったく同じ効果を持っていますが、条件を回避することで、XLAで問題なくコンパイルできることを確認します！",Se,q,Be,O,xt="これは、コード内のすべての <code>tf.Tensor</code> オブジェクトの形状が、その値に依存しないことを意味します。たとえば、<code>tf.unique</code> 関数はXLAでコンパイルできないので、このルールに違反します。なぜなら、これは入力 <code>Tensor</code> の一意の値の各インスタンスを含む <code>tensor</code> を返すためです。この出力の形状は、入力 <code>Tensor</code> の重複具合によって異なるため、XLAはそれを処理しないことになります！",Ke,ee,Ct='一般的に、ほとんどのニューラルネットワークコードはデフォルトでルール＃2に従います。ただし、いくつかの一般的なケースでは問題が発生することがあります。非常に一般的なケースの1つは、<strong>ラベルマスキング</strong>を使用する場合です。ラベルを無視して損失を計算する場所を示すために、ラベルを負の値に設定する方法です。NumPyまたはPyTorchのラベルマスキングをサポートする損失関数を見ると、次のような<a href="https://numpy.org/doc/stable/user/basics.indexing.html#boolean-array-indexing" rel="nofollow">ブールインデックス</a>を使用したコードがよく見られます：',Ee,te,Qe,le,yt="このコードはNumPyやPyTorchでは完全に機能しますが、XLAでは動作しません！なぜなら、<code>masked_outputs</code>と<code>masked_labels</code>の形状はマスクされた位置の数に依存するため、これは<strong>データ依存の形状</strong>になります。ただし、ルール＃1と同様に、このコードを書き直して、データ依存の形状なしでまったく同じ出力を生成できることがあります。",De,ne,qe,se,Ht="ここでは、データ依存の形状を避けるために、各位置で損失を計算してから、平均を計算する際に分子と分母の両方でマスクされた位置をゼロ化する方法を紹介します。これにより、最初のアプローチとまったく同じ結果が得られますが、XLA互換性を維持します。注意点として、ルール＃1と同じトリックを使用します - <code>tf.bool</code>を<code>tf.float32</code>に変換して指標変数として使用します。これは非常に便利なトリックですので、自分のコードをXLAに変換する必要がある場合には覚えておいてください！",Oe,oe,et,ae,Xt="これは重要なルールです。これはつまり、入力形状が非常に変動的な場合、XLA はモデルを何度も再コンパイルする必要があるため、大きなパフォーマンスの問題が発生する可能性があるということです。これは NLP モデルで一般的に発生し、トークナイズ後の入力テキストの長さが異なる場合があります。他のモダリティでは、静的な形状が一般的であり、このルールはほとんど問題になりません。",tt,ie,At="ルール＃3を回避する方法は何でしょうか？鍵は「パディング」です - すべての入力を同じ長さにパディングし、次に「attention_mask」を使用することで、可変形状と同じ結果を得ることができますが、XLA の問題は発生しません。ただし、過度のパディングも深刻な遅延を引き起こす可能性があります - データセット全体で最大の長さにすべてのサンプルをパディングすると、多くの計算とメモリを無駄にする可能性があります！",lt,pe,kt="この問題には完璧な解決策はありませんが、いくつかのトリックを試すことができます。非常に便利なトリックの1つは、<strong>バッチのサンプルを32または64トークンの倍数までパディングする</strong>ことです。これにより、トークン数がわずかに増加するだけで、すべての入力形状が32または64の倍数である必要があるため、一意の入力形状の数が大幅に減少します。一意の入力形状が少ないと、XLA の再コンパイルが少なくなります！",nt,x,st,fe,ot,re,zt='一度トレーニングが XLA 互換性があることを確認し、（TPU Node/Colab を使用する場合は）データセットが適切に準備されている場合、TPU 上で実行することは驚くほど簡単です！コードを変更する必要があるのは、いくつかの行を追加して TPU を初期化し、モデルとデータセットが <code>TPUStrategy</code> スコープ内で作成されるようにすることだけです。これを実際に見るには、<a href="https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb" rel="nofollow">TPU のサンプルノートブック</a>をご覧ください！',at,me,it,$e,jt="ここでは多くの情報が提供されましたので、TPU でモデルをトレーニングする際に以下のチェックリストを使用できます：",pt,ue,Jt='<li>コードが XLA の三つのルールに従っていることを確認します。</li> <li>CPU/GPU で <code>jit_compile=True</code> を使用してモデルをコンパイルし、XLA でトレーニングできることを確認します。</li> <li>データセットをメモリに読み込むか、TPU 互換のデータセット読み込みアプローチを使用します（<a href="https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb" rel="nofollow">ノートブックを参照</a>）。</li> <li>コードを Colab（アクセラレータを「TPU」に設定）または Google Cloud の TPU VM に移行します。</li> <li>TPU 初期化コードを追加します（<a href="https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb" rel="nofollow">ノートブックを参照</a>）。</li> <li><code>TPUStrategy</code> を作成し、データセットの読み込みとモデルの作成が <code>strategy.scope()</code> 内で行われることを確認します（<a href="https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb" rel="nofollow">ノートブックを参照</a>）。</li> <li>TPU に移行する際に <code>jit_compile=True</code> を外すのを忘れないでください！</li> <li>🙏🙏🙏🥺🥺🥺</li> <li><code>model.fit()</code> を呼び出します。</li> <li>おめでとうございます！</li>',ft,ge,rt;return C=new h({props:{title:"Training on TPU with TensorFlow",local:"training-on-tpu-with-tensorflow",headingTag:"h1"}}),b=new de({props:{$$slots:{default:[qt]},$$scope:{ctx:M}}}),y=new h({props:{title:"What is a TPU?",local:"what-is-a-tpu",headingTag:"h3"}}),A=new h({props:{title:"What kinds of TPU are available?",local:"what-kinds-of-tpu-are-available",headingTag:"h3"}}),P=new de({props:{$$slots:{default:[Ot]},$$scope:{ctx:M}}}),v=new de({props:{$$slots:{default:[el]},$$scope:{ctx:M}}}),V=new h({props:{title:"What sizes of TPU are available?",local:"what-sizes-of-tpu-are-available",headingTag:"h3"}}),W=new h({props:{title:"I keep hearing about this XLA thing. What’s XLA, and how does it relate to TPUs?",local:"i-keep-hearing-about-this-xla-thing-whats-xla-and-how-does-it-relate-to-tpus",headingTag:"h3"}}),_=new de({props:{$$slots:{default:[tl]},$$scope:{ctx:M}}}),w=new de({props:{warning:!0,$$slots:{default:[ll]},$$scope:{ctx:M}}}),I=new h({props:{title:"How do I make my model XLA compatible?",local:"how-do-i-make-my-model-xla-compatible",headingTag:"h3"}}),L=new de({props:{$$slots:{default:[nl]},$$scope:{ctx:M}}}),S=new h({props:{title:"XLA Rule #1: Your code cannot have “data-dependent conditionals”",local:"xla-rule-1-your-code-cannot-have-data-dependent-conditionals",headingTag:"h4"}}),K=new mt({props:{code:"aWYlMjB0Zi5yZWR1Y2Vfc3VtKHRlbnNvciklMjAlM0UlMjAxMCUzQSUwQSUyMCUyMCUyMCUyMHRlbnNvciUyMCUzRCUyMHRlbnNvciUyMCUyRiUyMDIuMA==",highlighted:`<span class="hljs-keyword">if</span> tf.reduce_sum(tensor) &gt; <span class="hljs-number">10</span>:
    tensor = tensor / <span class="hljs-number">2.0</span>`,wrap:!1}}),Q=new mt({props:{code:"c3VtX292ZXJfMTAlMjAlM0QlMjB0Zi5jYXN0KHRmLnJlZHVjZV9zdW0odGVuc29yKSUyMCUzRSUyMDEwJTJDJTIwdGYuZmxvYXQzMiklMEF0ZW5zb3IlMjAlM0QlMjB0ZW5zb3IlMjAlMkYlMjAoMS4wJTIwJTJCJTIwc3VtX292ZXJfMTAp",highlighted:`sum_over_10 = tf.cast(tf.reduce_sum(tensor) &gt; <span class="hljs-number">10</span>, tf.float32)
tensor = tensor / (<span class="hljs-number">1.0</span> + sum_over_10)`,wrap:!1}}),q=new h({props:{title:"XLA Rule #2: Your code cannot have “data-dependent shapes”",local:"xla-rule-2-your-code-cannot-have-data-dependent-shapes",headingTag:"h4"}}),te=new mt({props:{code:"bGFiZWxfbWFzayUyMCUzRCUyMGxhYmVscyUyMCUzRSUzRCUyMDAlMEFtYXNrZWRfb3V0cHV0cyUyMCUzRCUyMG91dHB1dHMlNUJsYWJlbF9tYXNrJTVEJTBBbWFza2VkX2xhYmVscyUyMCUzRCUyMGxhYmVscyU1QmxhYmVsX21hc2slNUQlMEFsb3NzJTIwJTNEJTIwY29tcHV0ZV9sb3NzKG1hc2tlZF9vdXRwdXRzJTJDJTIwbWFza2VkX2xhYmVscyklMEFtZWFuX2xvc3MlMjAlM0QlMjB0b3JjaC5tZWFuKGxvc3Mp",highlighted:`label_mask = labels &gt;= <span class="hljs-number">0</span>
masked_outputs = outputs[label_mask]
masked_labels = labels[label_mask]
loss = compute_loss(masked_outputs, masked_labels)
mean_loss = torch.mean(loss)`,wrap:!1}}),ne=new mt({props:{code:"bGFiZWxfbWFzayUyMCUzRCUyMHRmLmNhc3QobGFiZWxzJTIwJTNFJTNEJTIwMCUyQyUyMHRmLmZsb2F0MzIpJTBBbG9zcyUyMCUzRCUyMGNvbXB1dGVfbG9zcyhvdXRwdXRzJTJDJTIwbGFiZWxzKSUwQWxvc3MlMjAlM0QlMjBsb3NzJTIwKiUyMGxhYmVsX21hc2slMjAlMjAlMjMlMjBTZXQlMjBuZWdhdGl2ZSUyMGxhYmVsJTIwcG9zaXRpb25zJTIwdG8lMjAwJTBBbWVhbl9sb3NzJTIwJTNEJTIwdGYucmVkdWNlX3N1bShsb3NzKSUyMCUyRiUyMHRmLnJlZHVjZV9zdW0obGFiZWxfbWFzayk=",highlighted:`label_mask = tf.cast(labels &gt;= <span class="hljs-number">0</span>, tf.float32)
loss = compute_loss(outputs, labels)
loss = loss * label_mask  <span class="hljs-comment"># Set negative label positions to 0</span>
mean_loss = tf.reduce_sum(loss) / tf.reduce_sum(label_mask)`,wrap:!1}}),oe=new h({props:{title:"XLA Rule #3: XLA will need to recompile your model for every different input shape it sees",local:"xla-rule-3-xla-will-need-to-recompile-your-model-for-every-different-input-shape-it-sees",headingTag:"h4"}}),x=new de({props:{$$slots:{default:[sl]},$$scope:{ctx:M}}}),fe=new h({props:{title:"How do I actually train my model on TPU?",local:"how-do-i-actually-train-my-model-on-tpu",headingTag:"h3"}}),me=new h({props:{title:"Summary",local:"summary",headingTag:"h3"}}),{c(){s=p("meta"),m=o(),i=p("p"),U=o(),$(C.$$.fragment),ce=o(),$(b.$$.fragment),Ue=o(),$(y.$$.fragment),Me=o(),H=p("p"),H.innerHTML=$t,he=o(),X=p("p"),X.innerHTML=ut,be=o(),$(A.$$.fragment),Pe=o(),k=p("p"),k.innerHTML=dt,ve=o(),z=p("p"),z.innerHTML=Tt,_e=o(),j=p("p"),j.textContent=gt,we=o(),$(P.$$.fragment),Le=o(),$(v.$$.fragment),xe=o(),J=p("p"),J.innerHTML=ct,Ce=o(),G=p("p"),G.innerHTML=Ut,ye=o(),$(V.$$.fragment),He=o(),F=p("p"),F.innerHTML=Mt,Xe=o(),R=p("p"),R.textContent=ht,Ae=o(),$(W.$$.fragment),ke=o(),Z=p("p"),Z.innerHTML=bt,ze=o(),N=p("p"),N.textContent=Pt,je=o(),$(_.$$.fragment),Je=o(),$(w.$$.fragment),Ge=o(),$(I.$$.fragment),Ve=o(),Y=p("p"),Y.textContent=vt,Fe=o(),$(L.$$.fragment),Re=o(),$(S.$$.fragment),We=o(),B=p("p"),B.innerHTML=_t,Ze=o(),$(K.$$.fragment),Ne=o(),E=p("p"),E.innerHTML=wt,Ie=o(),$(Q.$$.fragment),Ye=o(),D=p("p"),D.textContent=Lt,Se=o(),$(q.$$.fragment),Be=o(),O=p("p"),O.innerHTML=xt,Ke=o(),ee=p("p"),ee.innerHTML=Ct,Ee=o(),$(te.$$.fragment),Qe=o(),le=p("p"),le.innerHTML=yt,De=o(),$(ne.$$.fragment),qe=o(),se=p("p"),se.innerHTML=Ht,Oe=o(),$(oe.$$.fragment),et=o(),ae=p("p"),ae.textContent=Xt,tt=o(),ie=p("p"),ie.textContent=At,lt=o(),pe=p("p"),pe.innerHTML=kt,nt=o(),$(x.$$.fragment),st=o(),$(fe.$$.fragment),ot=o(),re=p("p"),re.innerHTML=zt,at=o(),$(me.$$.fragment),it=o(),$e=p("p"),$e.textContent=jt,pt=o(),ue=p("ul"),ue.innerHTML=Jt,ft=o(),ge=p("p"),this.h()},l(e){const t=Qt("svelte-u9bgzb",document.head);s=f(t,"META",{name:!0,content:!0}),t.forEach(l),m=a(e),i=f(e,"P",{}),It(i).forEach(l),U=a(e),u(C.$$.fragment,e),ce=a(e),u(b.$$.fragment,e),Ue=a(e),u(y.$$.fragment,e),Me=a(e),H=f(e,"P",{"data-svelte-h":!0}),r(H)!=="svelte-35fk3b"&&(H.innerHTML=$t),he=a(e),X=f(e,"P",{"data-svelte-h":!0}),r(X)!=="svelte-1n4upl"&&(X.innerHTML=ut),be=a(e),u(A.$$.fragment,e),Pe=a(e),k=f(e,"P",{"data-svelte-h":!0}),r(k)!=="svelte-1ciuzma"&&(k.innerHTML=dt),ve=a(e),z=f(e,"P",{"data-svelte-h":!0}),r(z)!=="svelte-3bugvv"&&(z.innerHTML=Tt),_e=a(e),j=f(e,"P",{"data-svelte-h":!0}),r(j)!=="svelte-1swcwpr"&&(j.textContent=gt),we=a(e),u(P.$$.fragment,e),Le=a(e),u(v.$$.fragment,e),xe=a(e),J=f(e,"P",{"data-svelte-h":!0}),r(J)!=="svelte-1fsy31p"&&(J.innerHTML=ct),Ce=a(e),G=f(e,"P",{"data-svelte-h":!0}),r(G)!=="svelte-1y8nigm"&&(G.innerHTML=Ut),ye=a(e),u(V.$$.fragment,e),He=a(e),F=f(e,"P",{"data-svelte-h":!0}),r(F)!=="svelte-vch5fw"&&(F.innerHTML=Mt),Xe=a(e),R=f(e,"P",{"data-svelte-h":!0}),r(R)!=="svelte-1n91nxd"&&(R.textContent=ht),Ae=a(e),u(W.$$.fragment,e),ke=a(e),Z=f(e,"P",{"data-svelte-h":!0}),r(Z)!=="svelte-1cq4qv4"&&(Z.innerHTML=bt),ze=a(e),N=f(e,"P",{"data-svelte-h":!0}),r(N)!=="svelte-12tomgx"&&(N.textContent=Pt),je=a(e),u(_.$$.fragment,e),Je=a(e),u(w.$$.fragment,e),Ge=a(e),u(I.$$.fragment,e),Ve=a(e),Y=f(e,"P",{"data-svelte-h":!0}),r(Y)!=="svelte-cgtung"&&(Y.textContent=vt),Fe=a(e),u(L.$$.fragment,e),Re=a(e),u(S.$$.fragment,e),We=a(e),B=f(e,"P",{"data-svelte-h":!0}),r(B)!=="svelte-18l9znw"&&(B.innerHTML=_t),Ze=a(e),u(K.$$.fragment,e),Ne=a(e),E=f(e,"P",{"data-svelte-h":!0}),r(E)!=="svelte-5dtfca"&&(E.innerHTML=wt),Ie=a(e),u(Q.$$.fragment,e),Ye=a(e),D=f(e,"P",{"data-svelte-h":!0}),r(D)!=="svelte-8jak9a"&&(D.textContent=Lt),Se=a(e),u(q.$$.fragment,e),Be=a(e),O=f(e,"P",{"data-svelte-h":!0}),r(O)!=="svelte-133bqgc"&&(O.innerHTML=xt),Ke=a(e),ee=f(e,"P",{"data-svelte-h":!0}),r(ee)!=="svelte-1nvm4pc"&&(ee.innerHTML=Ct),Ee=a(e),u(te.$$.fragment,e),Qe=a(e),le=f(e,"P",{"data-svelte-h":!0}),r(le)!=="svelte-1j7912w"&&(le.innerHTML=yt),De=a(e),u(ne.$$.fragment,e),qe=a(e),se=f(e,"P",{"data-svelte-h":!0}),r(se)!=="svelte-70ri5v"&&(se.innerHTML=Ht),Oe=a(e),u(oe.$$.fragment,e),et=a(e),ae=f(e,"P",{"data-svelte-h":!0}),r(ae)!=="svelte-1so4lwd"&&(ae.textContent=Xt),tt=a(e),ie=f(e,"P",{"data-svelte-h":!0}),r(ie)!=="svelte-fs80h0"&&(ie.textContent=At),lt=a(e),pe=f(e,"P",{"data-svelte-h":!0}),r(pe)!=="svelte-1v79vih"&&(pe.innerHTML=kt),nt=a(e),u(x.$$.fragment,e),st=a(e),u(fe.$$.fragment,e),ot=a(e),re=f(e,"P",{"data-svelte-h":!0}),r(re)!=="svelte-s8ojth"&&(re.innerHTML=zt),at=a(e),u(me.$$.fragment,e),it=a(e),$e=f(e,"P",{"data-svelte-h":!0}),r($e)!=="svelte-ib17zq"&&($e.textContent=jt),pt=a(e),ue=f(e,"UL",{"data-svelte-h":!0}),r(ue)!=="svelte-1gk05i8"&&(ue.innerHTML=Jt),ft=a(e),ge=f(e,"P",{}),It(ge).forEach(l),this.h()},h(){Yt(s,"name","hf:doc:metadata"),Yt(s,"content",al)},m(e,t){Dt(document.head,s),n(e,m,t),n(e,i,t),n(e,U,t),d(C,e,t),n(e,ce,t),d(b,e,t),n(e,Ue,t),d(y,e,t),n(e,Me,t),n(e,H,t),n(e,he,t),n(e,X,t),n(e,be,t),d(A,e,t),n(e,Pe,t),n(e,k,t),n(e,ve,t),n(e,z,t),n(e,_e,t),n(e,j,t),n(e,we,t),d(P,e,t),n(e,Le,t),d(v,e,t),n(e,xe,t),n(e,J,t),n(e,Ce,t),n(e,G,t),n(e,ye,t),d(V,e,t),n(e,He,t),n(e,F,t),n(e,Xe,t),n(e,R,t),n(e,Ae,t),d(W,e,t),n(e,ke,t),n(e,Z,t),n(e,ze,t),n(e,N,t),n(e,je,t),d(_,e,t),n(e,Je,t),d(w,e,t),n(e,Ge,t),d(I,e,t),n(e,Ve,t),n(e,Y,t),n(e,Fe,t),d(L,e,t),n(e,Re,t),d(S,e,t),n(e,We,t),n(e,B,t),n(e,Ze,t),d(K,e,t),n(e,Ne,t),n(e,E,t),n(e,Ie,t),d(Q,e,t),n(e,Ye,t),n(e,D,t),n(e,Se,t),d(q,e,t),n(e,Be,t),n(e,O,t),n(e,Ke,t),n(e,ee,t),n(e,Ee,t),d(te,e,t),n(e,Qe,t),n(e,le,t),n(e,De,t),d(ne,e,t),n(e,qe,t),n(e,se,t),n(e,Oe,t),d(oe,e,t),n(e,et,t),n(e,ae,t),n(e,tt,t),n(e,ie,t),n(e,lt,t),n(e,pe,t),n(e,nt,t),d(x,e,t),n(e,st,t),d(fe,e,t),n(e,ot,t),n(e,re,t),n(e,at,t),d(me,e,t),n(e,it,t),n(e,$e,t),n(e,pt,t),n(e,ue,t),n(e,ft,t),n(e,ge,t),rt=!0},p(e,[t]){const Gt={};t&2&&(Gt.$$scope={dirty:t,ctx:e}),b.$set(Gt);const Vt={};t&2&&(Vt.$$scope={dirty:t,ctx:e}),P.$set(Vt);const Ft={};t&2&&(Ft.$$scope={dirty:t,ctx:e}),v.$set(Ft);const Rt={};t&2&&(Rt.$$scope={dirty:t,ctx:e}),_.$set(Rt);const Wt={};t&2&&(Wt.$$scope={dirty:t,ctx:e}),w.$set(Wt);const Zt={};t&2&&(Zt.$$scope={dirty:t,ctx:e}),L.$set(Zt);const Nt={};t&2&&(Nt.$$scope={dirty:t,ctx:e}),x.$set(Nt)},i(e){rt||(T(C.$$.fragment,e),T(b.$$.fragment,e),T(y.$$.fragment,e),T(A.$$.fragment,e),T(P.$$.fragment,e),T(v.$$.fragment,e),T(V.$$.fragment,e),T(W.$$.fragment,e),T(_.$$.fragment,e),T(w.$$.fragment,e),T(I.$$.fragment,e),T(L.$$.fragment,e),T(S.$$.fragment,e),T(K.$$.fragment,e),T(Q.$$.fragment,e),T(q.$$.fragment,e),T(te.$$.fragment,e),T(ne.$$.fragment,e),T(oe.$$.fragment,e),T(x.$$.fragment,e),T(fe.$$.fragment,e),T(me.$$.fragment,e),rt=!0)},o(e){g(C.$$.fragment,e),g(b.$$.fragment,e),g(y.$$.fragment,e),g(A.$$.fragment,e),g(P.$$.fragment,e),g(v.$$.fragment,e),g(V.$$.fragment,e),g(W.$$.fragment,e),g(_.$$.fragment,e),g(w.$$.fragment,e),g(I.$$.fragment,e),g(L.$$.fragment,e),g(S.$$.fragment,e),g(K.$$.fragment,e),g(Q.$$.fragment,e),g(q.$$.fragment,e),g(te.$$.fragment,e),g(ne.$$.fragment,e),g(oe.$$.fragment,e),g(x.$$.fragment,e),g(fe.$$.fragment,e),g(me.$$.fragment,e),rt=!1},d(e){e&&(l(m),l(i),l(U),l(ce),l(Ue),l(Me),l(H),l(he),l(X),l(be),l(Pe),l(k),l(ve),l(z),l(_e),l(j),l(we),l(Le),l(xe),l(J),l(Ce),l(G),l(ye),l(He),l(F),l(Xe),l(R),l(Ae),l(ke),l(Z),l(ze),l(N),l(je),l(Je),l(Ge),l(Ve),l(Y),l(Fe),l(Re),l(We),l(B),l(Ze),l(Ne),l(E),l(Ie),l(Ye),l(D),l(Se),l(Be),l(O),l(Ke),l(ee),l(Ee),l(Qe),l(le),l(De),l(qe),l(se),l(Oe),l(et),l(ae),l(tt),l(ie),l(lt),l(pe),l(nt),l(st),l(ot),l(re),l(at),l(it),l($e),l(pt),l(ue),l(ft),l(ge)),l(s),c(C,e),c(b,e),c(y,e),c(A,e),c(P,e),c(v,e),c(V,e),c(W,e),c(_,e),c(w,e),c(I,e),c(L,e),c(S,e),c(K,e),c(Q,e),c(q,e),c(te,e),c(ne,e),c(oe,e),c(x,e),c(fe,e),c(me,e)}}}const al='{"title":"Training on TPU with TensorFlow","local":"training-on-tpu-with-tensorflow","sections":[{"title":"What is a TPU?","local":"what-is-a-tpu","sections":[],"depth":3},{"title":"What kinds of TPU are available?","local":"what-kinds-of-tpu-are-available","sections":[],"depth":3},{"title":"What sizes of TPU are available?","local":"what-sizes-of-tpu-are-available","sections":[],"depth":3},{"title":"I keep hearing about this XLA thing. What’s XLA, and how does it relate to TPUs?","local":"i-keep-hearing-about-this-xla-thing-whats-xla-and-how-does-it-relate-to-tpus","sections":[],"depth":3},{"title":"How do I make my model XLA compatible?","local":"how-do-i-make-my-model-xla-compatible","sections":[{"title":"XLA Rule #1: Your code cannot have “data-dependent conditionals”","local":"xla-rule-1-your-code-cannot-have-data-dependent-conditionals","sections":[],"depth":4},{"title":"XLA Rule #2: Your code cannot have “data-dependent shapes”","local":"xla-rule-2-your-code-cannot-have-data-dependent-shapes","sections":[],"depth":4},{"title":"XLA Rule #3: XLA will need to recompile your model for every different input shape it sees","local":"xla-rule-3-xla-will-need-to-recompile-your-model-for-every-different-input-shape-it-sees","sections":[],"depth":4}],"depth":3},{"title":"How do I actually train my model on TPU?","local":"how-do-i-actually-train-my-model-on-tpu","sections":[],"depth":3},{"title":"Summary","local":"summary","sections":[],"depth":3}],"depth":1}';function il(M){return Bt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ul extends Kt{constructor(s){super(),Et(this,s,il,ol,St,{})}}export{ul as component};
