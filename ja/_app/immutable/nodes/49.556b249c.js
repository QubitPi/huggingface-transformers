import{s as $b,o as kb,n as L}from"../chunks/scheduler.9bc65507.js";import{S as jb,i as Ab,g as s,s as n,r as p,A as qb,h as i,f as t,c as a,j as w,u,x as d,k as x,y as o,a as l,v as h,d as g,t as f,w as _}from"../chunks/index.707bf1b6.js";import{T as jt}from"../chunks/Tip.c2ecdbf4.js";import{D as $}from"../chunks/Docstring.17db21ae.js";import{C as q}from"../chunks/CodeBlock.54a9f38d.js";import{E as Me}from"../chunks/ExampleCodeBlock.4f515aa9.js";import{H as P}from"../chunks/Heading.342b1fa6.js";function Cb(C){let m,k=`<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a> クラスは 🤗 Transformers モデル用に最適化されており、驚くべき動作をする可能性があります
他の機種で使用する場合。独自のモデルで使用する場合は、次の点を確認してください。`,v,b,M=`<li>モデルは常に <a href="/docs/transformers/main/ja/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> のタプルまたはサブクラスを返します。</li> <li><code>labels</code> 引数が指定され、その損失が最初の値として返される場合、モデルは損失を計算できます。
タプルの要素 (モデルがタプルを返す場合)</li> <li>モデルは複数のラベル引数を受け入れることができます (<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a> で <code>label_names</code> を使用して、その名前を <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a> に示します) が、それらのいずれにも <code>&quot;label&quot;</code> という名前を付ける必要はありません。</li>`;return{c(){m=s("p"),m.innerHTML=k,v=n(),b=s("ul"),b.innerHTML=M},l(c){m=i(c,"P",{"data-svelte-h":!0}),d(m)!=="svelte-lp29i0"&&(m.innerHTML=k),v=a(c),b=i(c,"UL",{"data-svelte-h":!0}),d(b)!=="svelte-1mf36i8"&&(b.innerHTML=M)},m(c,j){l(c,m,j),l(c,v,j),l(c,b,j)},p:L,d(c){c&&(t(m),t(v),t(b))}}}function Jb(C){let m,k=`To use this method, you need to have provided a <code>model_init</code> when initializing your <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>: we need to
reinitialize the model at each new run. This is incompatible with the <code>optimizers</code> argument, so you need to
subclass <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a> and override the method <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer.create_optimizer_and_scheduler">create_optimizer_and_scheduler()</a> for custom
optimizer/scheduler.`;return{c(){m=s("p"),m.innerHTML=k},l(v){m=i(v,"P",{"data-svelte-h":!0}),d(m)!=="svelte-17di6jz"&&(m.innerHTML=k)},m(v,b){l(v,m,b)},p:L,d(v){v&&t(m)}}}function Ib(C){let m,k="Now when this method is run, you will see a report that will include: :",v,b,M;return b=new q({props:{code:"aW5pdF9tZW1fY3B1X2FsbG9jX2RlbHRhJTIwJTIwJTIwJTNEJTIwJTIwJTIwJTIwJTIwMTMwMU1CJTBBaW5pdF9tZW1fY3B1X3BlYWtlZF9kZWx0YSUyMCUyMCUzRCUyMCUyMCUyMCUyMCUyMCUyMDE1NE1CJTBBaW5pdF9tZW1fZ3B1X2FsbG9jX2RlbHRhJTIwJTIwJTIwJTNEJTIwJTIwJTIwJTIwJTIwJTIwMjMwTUIlMEFpbml0X21lbV9ncHVfcGVha2VkX2RlbHRhJTIwJTIwJTNEJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwME1CJTBBdHJhaW5fbWVtX2NwdV9hbGxvY19kZWx0YSUyMCUyMCUzRCUyMCUyMCUyMCUyMCUyMDEzNDVNQiUwQXRyYWluX21lbV9jcHVfcGVha2VkX2RlbHRhJTIwJTNEJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwME1CJTBBdHJhaW5fbWVtX2dwdV9hbGxvY19kZWx0YSUyMCUyMCUzRCUyMCUyMCUyMCUyMCUyMCUyMDY5M01CJTBBdHJhaW5fbWVtX2dwdV9wZWFrZWRfZGVsdGElMjAlM0QlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjA3TUI=",highlighted:`<span class="hljs-attr">init_mem_cpu_alloc_delta</span>   =     <span class="hljs-number">1301</span>MB
<span class="hljs-attr">init_mem_cpu_peaked_delta</span>  =      <span class="hljs-number">154</span>MB
<span class="hljs-attr">init_mem_gpu_alloc_delta</span>   =      <span class="hljs-number">230</span>MB
<span class="hljs-attr">init_mem_gpu_peaked_delta</span>  =        <span class="hljs-number">0</span>MB
<span class="hljs-attr">train_mem_cpu_alloc_delta</span>  =     <span class="hljs-number">1345</span>MB
<span class="hljs-attr">train_mem_cpu_peaked_delta</span> =        <span class="hljs-number">0</span>MB
<span class="hljs-attr">train_mem_gpu_alloc_delta</span>  =      <span class="hljs-number">693</span>MB
<span class="hljs-attr">train_mem_gpu_peaked_delta</span> =        <span class="hljs-number">7</span>MB`,wrap:!1}}),{c(){m=s("p"),m.textContent=k,v=n(),p(b.$$.fragment)},l(c){m=i(c,"P",{"data-svelte-h":!0}),d(m)!=="svelte-2hs27k"&&(m.textContent=k),v=a(c),u(b.$$.fragment,c)},m(c,j){l(c,m,j),l(c,v,j),h(b,c,j),M=!0},p:L,i(c){M||(g(b.$$.fragment,c),M=!0)},o(c){f(b.$$.fragment,c),M=!1},d(c){c&&(t(m),t(v)),_(b,c)}}}function Ub(C){let m,k=`If your predictions or labels have different sequence length (for instance because you’re doing dynamic padding
in a token classification task) the predictions will be padded (on the right) to allow for concatenation into
one array. The padding index is -100.`;return{c(){m=s("p"),m.textContent=k},l(v){m=i(v,"P",{"data-svelte-h":!0}),d(m)!=="svelte-vq7haq"&&(m.textContent=k)},m(v,b){l(v,m,b)},p:L,d(v){v&&t(m)}}}function Sb(C){let m,k=`If your predictions or labels have different sequence lengths (for instance because you’re doing dynamic
padding in a token classification task) the predictions will be padded (on the right) to allow for
concatenation into one array. The padding index is -100.`;return{c(){m=s("p"),m.textContent=k},l(v){m=i(v,"P",{"data-svelte-h":!0}),d(m)!=="svelte-1c3ugfb"&&(m.textContent=k)},m(v,b){l(v,m,b)},p:L,d(v){v&&t(m)}}}function Pb(C){let m,k="Example:",v,b,M;return b=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFRyYWluaW5nQXJndW1lbnRzJTBBJTBBYXJncyUyMCUzRCUyMFRyYWluaW5nQXJndW1lbnRzKCUyMndvcmtpbmdfZGlyJTIyKSUwQWFyZ3MlMjAlM0QlMjBhcmdzLnNldF9kYXRhbG9hZGVyKHRyYWluX2JhdGNoX3NpemUlM0QxNiUyQyUyMGV2YWxfYmF0Y2hfc2l6ZSUzRDY0KSUwQWFyZ3MucGVyX2RldmljZV90cmFpbl9iYXRjaF9zaXpl",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrainingArguments

<span class="hljs-meta">&gt;&gt;&gt; </span>args = TrainingArguments(<span class="hljs-string">&quot;working_dir&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>args = args.set_dataloader(train_batch_size=<span class="hljs-number">16</span>, eval_batch_size=<span class="hljs-number">64</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>args.per_device_train_batch_size
<span class="hljs-number">16</span>`,wrap:!1}}),{c(){m=s("p"),m.textContent=k,v=n(),p(b.$$.fragment)},l(c){m=i(c,"P",{"data-svelte-h":!0}),d(m)!=="svelte-11lpom8"&&(m.textContent=k),v=a(c),u(b.$$.fragment,c)},m(c,j){l(c,m,j),l(c,v,j),h(b,c,j),M=!0},p:L,i(c){M||(g(b.$$.fragment,c),M=!0)},o(c){f(b.$$.fragment,c),M=!1},d(c){c&&(t(m),t(v)),_(b,c)}}}function Lb(C){let m,k="Example:",v,b,M;return b=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFRyYWluaW5nQXJndW1lbnRzJTBBJTBBYXJncyUyMCUzRCUyMFRyYWluaW5nQXJndW1lbnRzKCUyMndvcmtpbmdfZGlyJTIyKSUwQWFyZ3MlMjAlM0QlMjBhcmdzLnNldF9ldmFsdWF0ZShzdHJhdGVneSUzRCUyMnN0ZXBzJTIyJTJDJTIwc3RlcHMlM0QxMDApJTBBYXJncy5ldmFsX3N0ZXBz",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrainingArguments

<span class="hljs-meta">&gt;&gt;&gt; </span>args = TrainingArguments(<span class="hljs-string">&quot;working_dir&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>args = args.set_evaluate(strategy=<span class="hljs-string">&quot;steps&quot;</span>, steps=<span class="hljs-number">100</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>args.eval_steps
<span class="hljs-number">100</span>`,wrap:!1}}),{c(){m=s("p"),m.textContent=k,v=n(),p(b.$$.fragment)},l(c){m=i(c,"P",{"data-svelte-h":!0}),d(m)!=="svelte-11lpom8"&&(m.textContent=k),v=a(c),u(b.$$.fragment,c)},m(c,j){l(c,m,j),l(c,v,j),h(b,c,j),M=!0},p:L,i(c){M||(g(b.$$.fragment,c),M=!0)},o(c){f(b.$$.fragment,c),M=!1},d(c){c&&(t(m),t(v)),_(b,c)}}}function Fb(C){let m,k="Example:",v,b,M;return b=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFRyYWluaW5nQXJndW1lbnRzJTBBJTBBYXJncyUyMCUzRCUyMFRyYWluaW5nQXJndW1lbnRzKCUyMndvcmtpbmdfZGlyJTIyKSUwQWFyZ3MlMjAlM0QlMjBhcmdzLnNldF9sb2dnaW5nKHN0cmF0ZWd5JTNEJTIyc3RlcHMlMjIlMkMlMjBzdGVwcyUzRDEwMCklMEFhcmdzLmxvZ2dpbmdfc3RlcHM=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrainingArguments

<span class="hljs-meta">&gt;&gt;&gt; </span>args = TrainingArguments(<span class="hljs-string">&quot;working_dir&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>args = args.set_logging(strategy=<span class="hljs-string">&quot;steps&quot;</span>, steps=<span class="hljs-number">100</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>args.logging_steps
<span class="hljs-number">100</span>`,wrap:!1}}),{c(){m=s("p"),m.textContent=k,v=n(),p(b.$$.fragment)},l(c){m=i(c,"P",{"data-svelte-h":!0}),d(m)!=="svelte-11lpom8"&&(m.textContent=k),v=a(c),u(b.$$.fragment,c)},m(c,j){l(c,m,j),l(c,v,j),h(b,c,j),M=!0},p:L,i(c){M||(g(b.$$.fragment,c),M=!0)},o(c){f(b.$$.fragment,c),M=!1},d(c){c&&(t(m),t(v)),_(b,c)}}}function Wb(C){let m,k="Example:",v,b,M;return b=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFRyYWluaW5nQXJndW1lbnRzJTBBJTBBYXJncyUyMCUzRCUyMFRyYWluaW5nQXJndW1lbnRzKCUyMndvcmtpbmdfZGlyJTIyKSUwQWFyZ3MlMjAlM0QlMjBhcmdzLnNldF9scl9zY2hlZHVsZXIobmFtZSUzRCUyMmNvc2luZSUyMiUyQyUyMHdhcm11cF9yYXRpbyUzRDAuMDUpJTBBYXJncy53YXJtdXBfcmF0aW8=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrainingArguments

<span class="hljs-meta">&gt;&gt;&gt; </span>args = TrainingArguments(<span class="hljs-string">&quot;working_dir&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>args = args.set_lr_scheduler(name=<span class="hljs-string">&quot;cosine&quot;</span>, warmup_ratio=<span class="hljs-number">0.05</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>args.warmup_ratio
<span class="hljs-number">0.05</span>`,wrap:!1}}),{c(){m=s("p"),m.textContent=k,v=n(),p(b.$$.fragment)},l(c){m=i(c,"P",{"data-svelte-h":!0}),d(m)!=="svelte-11lpom8"&&(m.textContent=k),v=a(c),u(b.$$.fragment,c)},m(c,j){l(c,m,j),l(c,v,j),h(b,c,j),M=!0},p:L,i(c){M||(g(b.$$.fragment,c),M=!0)},o(c){f(b.$$.fragment,c),M=!1},d(c){c&&(t(m),t(v)),_(b,c)}}}function zb(C){let m,k="Example:",v,b,M;return b=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFRyYWluaW5nQXJndW1lbnRzJTBBJTBBYXJncyUyMCUzRCUyMFRyYWluaW5nQXJndW1lbnRzKCUyMndvcmtpbmdfZGlyJTIyKSUwQWFyZ3MlMjAlM0QlMjBhcmdzLnNldF9vcHRpbWl6ZXIobmFtZSUzRCUyMmFkYW13X3RvcmNoJTIyJTJDJTIwYmV0YTElM0QwLjgpJTBBYXJncy5vcHRpbQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrainingArguments

<span class="hljs-meta">&gt;&gt;&gt; </span>args = TrainingArguments(<span class="hljs-string">&quot;working_dir&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>args = args.set_optimizer(name=<span class="hljs-string">&quot;adamw_torch&quot;</span>, beta1=<span class="hljs-number">0.8</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>args.optim
<span class="hljs-string">&#x27;adamw_torch&#x27;</span>`,wrap:!1}}),{c(){m=s("p"),m.textContent=k,v=n(),p(b.$$.fragment)},l(c){m=i(c,"P",{"data-svelte-h":!0}),d(m)!=="svelte-11lpom8"&&(m.textContent=k),v=a(c),u(b.$$.fragment,c)},m(c,j){l(c,m,j),l(c,v,j),h(b,c,j),M=!0},p:L,i(c){M||(g(b.$$.fragment,c),M=!0)},o(c){f(b.$$.fragment,c),M=!1},d(c){c&&(t(m),t(v)),_(b,c)}}}function Nb(C){let m,k=`Calling this method will set <code>self.push_to_hub</code> to <code>True</code>, which means the <code>output_dir</code> will begin a git
directory synced with the repo (determined by <code>model_id</code>) and the content will be pushed each time a save is
triggered (depending on<code>self.save_strategy</code>). Calling <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer.save_model">save_model()</a> will also trigger a push.`;return{c(){m=s("p"),m.innerHTML=k},l(v){m=i(v,"P",{"data-svelte-h":!0}),d(m)!=="svelte-1sjx2il"&&(m.innerHTML=k)},m(v,b){l(v,m,b)},p:L,d(v){v&&t(m)}}}function Db(C){let m,k="Example:",v,b,M;return b=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFRyYWluaW5nQXJndW1lbnRzJTBBJTBBYXJncyUyMCUzRCUyMFRyYWluaW5nQXJndW1lbnRzKCUyMndvcmtpbmdfZGlyJTIyKSUwQWFyZ3MlMjAlM0QlMjBhcmdzLnNldF9wdXNoX3RvX2h1YiglMjJtZSUyRmF3ZXNvbWUtbW9kZWwlMjIpJTBBYXJncy5odWJfbW9kZWxfaWQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrainingArguments

<span class="hljs-meta">&gt;&gt;&gt; </span>args = TrainingArguments(<span class="hljs-string">&quot;working_dir&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>args = args.set_push_to_hub(<span class="hljs-string">&quot;me/awesome-model&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>args.hub_model_id
<span class="hljs-string">&#x27;me/awesome-model&#x27;</span>`,wrap:!1}}),{c(){m=s("p"),m.textContent=k,v=n(),p(b.$$.fragment)},l(c){m=i(c,"P",{"data-svelte-h":!0}),d(m)!=="svelte-11lpom8"&&(m.textContent=k),v=a(c),u(b.$$.fragment,c)},m(c,j){l(c,m,j),l(c,v,j),h(b,c,j),M=!0},p:L,i(c){M||(g(b.$$.fragment,c),M=!0)},o(c){f(b.$$.fragment,c),M=!1},d(c){c&&(t(m),t(v)),_(b,c)}}}function Hb(C){let m,k="Example:",v,b,M;return b=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFRyYWluaW5nQXJndW1lbnRzJTBBJTBBYXJncyUyMCUzRCUyMFRyYWluaW5nQXJndW1lbnRzKCUyMndvcmtpbmdfZGlyJTIyKSUwQWFyZ3MlMjAlM0QlMjBhcmdzLnNldF9zYXZlKHN0cmF0ZWd5JTNEJTIyc3RlcHMlMjIlMkMlMjBzdGVwcyUzRDEwMCklMEFhcmdzLnNhdmVfc3RlcHM=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrainingArguments

<span class="hljs-meta">&gt;&gt;&gt; </span>args = TrainingArguments(<span class="hljs-string">&quot;working_dir&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>args = args.set_save(strategy=<span class="hljs-string">&quot;steps&quot;</span>, steps=<span class="hljs-number">100</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>args.save_steps
<span class="hljs-number">100</span>`,wrap:!1}}),{c(){m=s("p"),m.textContent=k,v=n(),p(b.$$.fragment)},l(c){m=i(c,"P",{"data-svelte-h":!0}),d(m)!=="svelte-11lpom8"&&(m.textContent=k),v=a(c),u(b.$$.fragment,c)},m(c,j){l(c,m,j),l(c,v,j),h(b,c,j),M=!0},p:L,i(c){M||(g(b.$$.fragment,c),M=!0)},o(c){f(b.$$.fragment,c),M=!1},d(c){c&&(t(m),t(v)),_(b,c)}}}function Rb(C){let m,k="Calling this method will automatically set <code>self.do_predict</code> to <code>True</code>.";return{c(){m=s("p"),m.innerHTML=k},l(v){m=i(v,"P",{"data-svelte-h":!0}),d(m)!=="svelte-ci4epi"&&(m.innerHTML=k)},m(v,b){l(v,m,b)},p:L,d(v){v&&t(m)}}}function Eb(C){let m,k="Example:",v,b,M;return b=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFRyYWluaW5nQXJndW1lbnRzJTBBJTBBYXJncyUyMCUzRCUyMFRyYWluaW5nQXJndW1lbnRzKCUyMndvcmtpbmdfZGlyJTIyKSUwQWFyZ3MlMjAlM0QlMjBhcmdzLnNldF90ZXN0aW5nKGJhdGNoX3NpemUlM0QzMiklMEFhcmdzLnBlcl9kZXZpY2VfZXZhbF9iYXRjaF9zaXpl",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrainingArguments

<span class="hljs-meta">&gt;&gt;&gt; </span>args = TrainingArguments(<span class="hljs-string">&quot;working_dir&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>args = args.set_testing(batch_size=<span class="hljs-number">32</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>args.per_device_eval_batch_size
<span class="hljs-number">32</span>`,wrap:!1}}),{c(){m=s("p"),m.textContent=k,v=n(),p(b.$$.fragment)},l(c){m=i(c,"P",{"data-svelte-h":!0}),d(m)!=="svelte-11lpom8"&&(m.textContent=k),v=a(c),u(b.$$.fragment,c)},m(c,j){l(c,m,j),l(c,v,j),h(b,c,j),M=!0},p:L,i(c){M||(g(b.$$.fragment,c),M=!0)},o(c){f(b.$$.fragment,c),M=!1},d(c){c&&(t(m),t(v)),_(b,c)}}}function Bb(C){let m,k="Calling this method will automatically set <code>self.do_train</code> to <code>True</code>.";return{c(){m=s("p"),m.innerHTML=k},l(v){m=i(v,"P",{"data-svelte-h":!0}),d(m)!=="svelte-102o7rb"&&(m.innerHTML=k)},m(v,b){l(v,m,b)},p:L,d(v){v&&t(m)}}}function Vb(C){let m,k="Example:",v,b,M;return b=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFRyYWluaW5nQXJndW1lbnRzJTBBJTBBYXJncyUyMCUzRCUyMFRyYWluaW5nQXJndW1lbnRzKCUyMndvcmtpbmdfZGlyJTIyKSUwQWFyZ3MlMjAlM0QlMjBhcmdzLnNldF90cmFpbmluZyhsZWFybmluZ19yYXRlJTNEMWUtNCUyQyUyMGJhdGNoX3NpemUlM0QzMiklMEFhcmdzLmxlYXJuaW5nX3JhdGU=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrainingArguments

<span class="hljs-meta">&gt;&gt;&gt; </span>args = TrainingArguments(<span class="hljs-string">&quot;working_dir&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>args = args.set_training(learning_rate=<span class="hljs-number">1e-4</span>, batch_size=<span class="hljs-number">32</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>args.learning_rate
<span class="hljs-number">1e-4</span>`,wrap:!1}}),{c(){m=s("p"),m.textContent=k,v=n(),p(b.$$.fragment)},l(c){m=i(c,"P",{"data-svelte-h":!0}),d(m)!=="svelte-11lpom8"&&(m.textContent=k),v=a(c),u(b.$$.fragment,c)},m(c,j){l(c,m,j),l(c,v,j),h(b,c,j),M=!0},p:L,i(c){M||(g(b.$$.fragment,c),M=!0)},o(c){f(b.$$.fragment,c),M=!1},d(c){c&&(t(m),t(v)),_(b,c)}}}function Zb(C){let m,k=`MacOS マシンに PyTorch &gt;= 1.13 (執筆時点ではナイトリー バージョン) をインストールすることを強くお勧めします。
トランスベースのモデルのモデルの正確性とパフォーマンスの向上に関連する主要な修正が行われています。
詳細については、<a href="https://github.com/pytorch/pytorch/issues/82707" rel="nofollow">https://github.com/pytorch/pytorch/issues/82707</a> を参照してください。`;return{c(){m=s("p"),m.innerHTML=k},l(v){m=i(v,"P",{"data-svelte-h":!0}),d(m)!=="svelte-jhax21"&&(m.innerHTML=k)},m(v,b){l(v,m,b)},p:L,d(v){v&&t(m)}}}function Xb(C){let m,k,v,b,M,c,j,$h='<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a> クラスは、ほとんどの標準的なユースケースに対して、PyTorch で機能を完全にトレーニングするための API を提供します。これは、<a href="https://github.com/huggingface/transformers/tree/main/examples" rel="nofollow">サンプル スクリプト</a> のほとんどで使用されています。',Xi,At,kh='<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a> をインスタンス化する前に、トレーニング中にカスタマイズのすべてのポイントにアクセスするために <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a> を作成します。',Gi,qt,jh='この API は、複数の GPU/TPU での分散トレーニング、<a href="https://github.com/NVIDIA/apex" rel="nofollow">NVIDIA Apex</a> および PyTorch のネイティブ AMP による混合精度をサポートします。',Qi,Ct,Ah='<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a> には、上記の機能をサポートする基本的なトレーニング ループが含まれています。カスタム動作を挿入するには、それらをサブクラス化し、次のメソッドをオーバーライドします。',Oi,Jt,qh=`<li><strong>get_train_dataloader</strong> — トレーニング データローダーを作成します。</li> <li><strong>get_eval_dataloader</strong> — 評価用データローダーを作成します。</li> <li><strong>get_test_dataloader</strong> — テスト データローダーを作成します。</li> <li><strong>log</strong> — トレーニングを監視しているさまざまなオブジェクトに関する情報をログに記録します。</li> <li><strong>create_optimizer_and_scheduler</strong> — オプティマイザと学習率スケジューラが渡されなかった場合にセットアップします。
初期化。 <code>create_optimizer</code>メソッドと<code>create_scheduler</code>メソッドをサブクラス化またはオーバーライドすることもできることに注意してください。
別々に。</li> <li><strong>create_optimizer</strong> — init で渡されなかった場合にオプティマイザーをセットアップします。</li> <li><strong>create_scheduler</strong> — init で渡されなかった場合、学習率スケジューラを設定します。</li> <li><strong>compute_loss</strong> - トレーニング入力のバッチの損失を計算します。</li> <li><strong>training_step</strong> — トレーニング ステップを実行します。</li> <li><strong>prediction_step</strong> — 評価/テスト ステップを実行します。</li> <li><strong>evaluate</strong> — 評価ループを実行し、メトリクスを返します。</li> <li><strong>predict</strong> — テスト セットの予測 (ラベルが使用可能な場合はメトリクスも含む) を返します。</li>`,Yi,Ue,Ki,It,Ch='以下は、加重損失を使用するように <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a> をカスタマイズする方法の例です (不均衡なトレーニング セットがある場合に役立ちます)。',el,Ut,tl,St,Jh='PyTorch <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a> のトレーニング ループの動作をカスタマイズするもう 1 つの方法は、トレーニング ループの状態を検査できる <a href="%E3%82%B3%E3%83%BC%E3%83%AB%E3%83%90%E3%83%83%E3%82%AF">callbacks</a> を使用することです (進行状況レポート、TensorBoard または他の ML プラットフォームでのログ記録など)。決定（早期停止など）。',ol,Pt,nl,T,Lt,em,$r,Ih="Trainer is a simple but feature-complete training and eval loop for PyTorch, optimized for 🤗 Transformers.",tm,kr,Uh="Important attributes:",om,jr,Sh=`<li><strong>model</strong> — Always points to the core model. If using a transformers model, it will be a <a href="/docs/transformers/main/ja/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a>
subclass.</li> <li><strong>model_wrapped</strong> — Always points to the most external model in case one or more other modules wrap the
original model. This is the model that should be used for the forward pass. For example, under <code>DeepSpeed</code>,
the inner model is wrapped in <code>DeepSpeed</code> and then again in <code>torch.nn.DistributedDataParallel</code>. If the inner
model hasn’t been wrapped, then <code>self.model_wrapped</code> is the same as <code>self.model</code>.</li> <li><strong>is_model_parallel</strong> — Whether or not a model has been switched to a model parallel mode (different from
data parallelism, this means some of the model layers are split on different GPUs).</li> <li><strong>place_model_on_device</strong> — Whether or not to automatically place the model on the device - it will be set
to <code>False</code> if model parallel or deepspeed is used, or if the default
<code>TrainingArguments.place_model_on_device</code> is overridden to return <code>False</code> .</li> <li><strong>is_in_train</strong> — Whether or not a model is currently running <code>train</code> (e.g. when <code>evaluate</code> is called while
in <code>train</code>)</li>`,nm,Se,Ft,am,Ar,Ph='Add a callback to the current list of <a href="/docs/transformers/main/ja/main_classes/callback#transformers.TrainerCallback">TrainerCallback</a>.',rm,Pe,Wt,sm,qr,Lh=`A helper wrapper that creates an appropriate context manager for <code>autocast</code> while feeding it the desired
arguments, depending on the situation.`,im,ee,zt,lm,Cr,Fh="How the loss is computed by Trainer. By default, all models return the loss in the first element.",dm,Jr,Wh="Subclass and override for custom behavior.",cm,Le,Nt,mm,Ir,zh="A helper wrapper to group together context managers.",pm,Fe,Dt,um,Ur,Nh="Creates a draft of a model card using the information available to the <code>Trainer</code>.",hm,te,Ht,gm,Sr,Dh="Setup the optimizer.",fm,Pr,Hh=`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer’s init through <code>optimizers</code>, or subclass and override this method in a subclass.`,_m,oe,Rt,bm,Lr,Rh="Setup the optimizer and the learning rate scheduler.",vm,Fr,Eh=`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer’s init through <code>optimizers</code>, or subclass and override this method (or <code>create_optimizer</code> and/or
<code>create_scheduler</code>) in a subclass.`,Tm,We,Et,ym,Wr,Bh=`Setup the scheduler. The optimizer of the trainer must have been set up either before this method is called or
passed as an argument.`,wm,H,Bt,xm,zr,Vh="Run evaluation and returns metrics.",Mm,Nr,Zh=`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init <code>compute_metrics</code> argument).`,$m,Dr,Xh="You can also subclass and override this method to inject custom behavior.",km,ne,Vt,jm,Hr,Gh="Prediction/evaluation loop, shared by <code>Trainer.evaluate()</code> and <code>Trainer.predict()</code>.",Am,Rr,Qh="Works both with or without labels.",qm,ze,Zt,Cm,Er,Oh=`For models that inherit from <a href="/docs/transformers/main/ja/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a>, uses that method to compute the number of floating point
operations for every backward + forward pass. If using another model, either implement such a method in the
model or subclass and override this method.`,Jm,ae,Xt,Im,Br,Yh="Get all parameter names that weight decay will be applied to",Um,Vr,Kh=`Note that some models implement their own layernorm instead of calling nn.LayerNorm, weight decay could still
apply to those modules since this function only filter out instance of nn.LayerNorm`,Sm,re,Gt,Pm,Zr,eg="Returns the evaluation <code>~torch.utils.data.DataLoader</code>.",Lm,Xr,tg="Subclass and override this method if you want to inject some custom behavior.",Fm,Ne,Qt,Wm,Gr,og="Returns the optimizer class and optimizer parameters based on the training arguments.",zm,se,Ot,Nm,Qr,ng="Returns the test <code>~torch.utils.data.DataLoader</code>.",Dm,Or,ag="Subclass and override this method if you want to inject some custom behavior.",Hm,R,Yt,Rm,Yr,rg="Returns the training <code>~torch.utils.data.DataLoader</code>.",Em,Kr,sg=`Will use no sampler if <code>train_dataset</code> does not implement <code>__len__</code>, a random sampler (adapted to distributed
training if necessary) otherwise.`,Bm,es,ig="Subclass and override this method if you want to inject some custom behavior.",Vm,ie,Kt,Zm,ts,lg=`Launch an hyperparameter search using <code>optuna</code> or <code>Ray Tune</code> or <code>SigOpt</code>. The optimized quantity is determined
by <code>compute_objective</code>, which defaults to a function returning the evaluation loss when no metric is provided,
the sum of all metrics otherwise.`,Xm,De,Gm,He,eo,Qm,os,dg="Initializes a git repo in <code>self.args.hub_model_id</code>.",Om,Re,to,Ym,ns,cg=`Whether or not this process is the local (e.g., on one machine if training in a distributed fashion on several
machines) main process.`,Km,Ee,oo,ep,as,mg=`Whether or not this process is the global main process (when training in a distributed fashion on several
machines, this is only going to be <code>True</code> for one process).`,tp,le,no,op,rs,pg="Log <code>logs</code> on the various objects watching training.",np,ss,ug="Subclass and override this method to inject custom behavior.",ap,J,ao,rp,is,hg="Log metrics in a specially formatted way",sp,ls,gg="Under distributed environment this is done only for a process with rank 0.",ip,ds,fg="Notes on memory reports:",lp,cs,_g="In order to get memory usage report you need to install <code>psutil</code>. You can do that with <code>pip install psutil</code>.",dp,Be,cp,ms,bg="<strong>Understanding the reports:</strong>",mp,ps,vg=`<li>the first segment, e.g., <code>train__</code>, tells you which stage the metrics are for. Reports starting with <code>init_</code>
will be added to the first stage that gets run. So that if only evaluation is run, the memory usage for the
<code>__init__</code> will be reported along with the <code>eval_</code> metrics.</li> <li>the third segment, is either <code>cpu</code> or <code>gpu</code>, tells you whether it’s the general RAM or the gpu0 memory
metric.</li> <li><code>*_alloc_delta</code> - is the difference in the used/allocated memory counter between the end and the start of the
stage - it can be negative if a function released more memory than it allocated.</li> <li><code>*_peaked_delta</code> - is any extra memory that was consumed and then freed - relative to the current allocated
memory counter - it is never negative. When you look at the metrics of any stage you add up <code>alloc_delta</code> +
<code>peaked_delta</code> and you know how much memory was needed to complete that stage.</li>`,pp,us,Tg=`The reporting happens only for process of rank 0 and gpu 0 (if there is a gpu). Typically this is enough since the
main process does the bulk of work, but it could be not quite so if model parallel is used and then other GPUs may
use a different amount of gpu memory. This is also not the same under DataParallel where gpu0 may require much more
memory than the rest since it stores the gradient and optimizer states for all participating GPUS. Perhaps in the
future these reports will evolve to measure those too.`,up,hs,yg=`The CPU RAM metric measures RSS (Resident Set Size) includes both the memory which is unique to the process and the
memory shared with other processes. It is important to note that it does not include swapped out memory, so the
reports could be imprecise.`,hp,gs,wg=`The CPU peak memory is measured using a sampling thread. Due to python’s GIL it may miss some of the peak memory if
that thread didn’t get a chance to run when the highest memory was used. Therefore this report can be less than
reality. Using <code>tracemalloc</code> would have reported the exact peak memory, but it doesn’t report memory allocations
outside of python. So if some C++ CUDA extension allocated its own memory it won’t be reported. And therefore it
was dropped in favor of the memory sampling approach, which reads the current process memory usage.`,gp,fs,xg=`The GPU allocated and peak memory reporting is done with <code>torch.cuda.memory_allocated()</code> and
<code>torch.cuda.max_memory_allocated()</code>. This metric reports only “deltas” for pytorch-specific allocations, as
<code>torch.cuda</code> memory management system doesn’t track any memory allocated outside of pytorch. For example, the very
first cuda call typically loads CUDA kernels, which may take from 0.5 to 2GB of GPU memory.`,fp,_s,Mg=`Note that this tracker doesn’t account for memory allocations outside of <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>’s <code>__init__</code>, <code>train</code>,
<code>evaluate</code> and <code>predict</code> calls.`,_p,bs,$g=`Because <code>evaluation</code> calls may happen during <code>train</code>, we can’t handle nested invocations because
<code>torch.cuda.max_memory_allocated</code> is a single counter, so if it gets reset by a nested eval call, <code>train</code>’s tracker
will report incorrect info. If this <a href="https://github.com/pytorch/pytorch/issues/16266" rel="nofollow">pytorch issue</a> gets resolved
it will be possible to change this class to be re-entrant. Until then we will only track the outer level of
<code>train</code>, <code>evaluate</code> and <code>predict</code> methods. Which means that if <code>eval</code> is called during <code>train</code>, it’s the latter
that will account for its memory usage and that of the former.`,bp,vs,kg=`This also means that if any other tool that is used along the <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a> calls
<code>torch.cuda.reset_peak_memory_stats</code>, the gpu peak memory stats could be invalid. And the <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a> will disrupt
the normal behavior of any such tools that rely on calling <code>torch.cuda.reset_peak_memory_stats</code> themselves.`,vp,Ts,jg="For best performance you may want to consider turning the memory profiling off for production runs.",Tp,Ve,ro,yp,ys,Ag="Reformat Trainer metrics values to a human-readable format",wp,Ze,so,xp,ws,qg=`Helper to get number of samples in a <code>~torch.utils.data.DataLoader</code> by accessing its dataset. When
dataloader.dataset does not exist or has no length, estimates as best it can`,Mp,Xe,io,$p,xs,Cg="Helper to get number of tokens in a <code>~torch.utils.data.DataLoader</code> by enumerating dataloader.",kp,de,lo,jp,Ms,Jg='Remove a callback from the current list of <a href="/docs/transformers/main/ja/main_classes/callback#transformers.TrainerCallback">TrainerCallback</a> and returns it.',Ap,$s,Ig="If the callback is not found, returns <code>None</code> (and no error is raised).",qp,F,co,Cp,ks,Ug="Run prediction and returns predictions and potential metrics.",Jp,js,Sg=`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in <code>evaluate()</code>.`,Ip,Ge,Up,As,Pg="Returns: <em>NamedTuple</em> A namedtuple with the following keys:",Sp,qs,Lg=`<li>predictions (<code>np.ndarray</code>): The predictions on <code>test_dataset</code>.</li> <li>label_ids (<code>np.ndarray</code>, <em>optional</em>): The labels (if the dataset contained some).</li> <li>metrics (<code>Dict[str, float]</code>, <em>optional</em>): The potential dictionary of metrics (if the dataset contained
labels).</li>`,Pp,ce,mo,Lp,Cs,Fg="Prediction/evaluation loop, shared by <code>Trainer.evaluate()</code> and <code>Trainer.predict()</code>.",Fp,Js,Wg="Works both with or without labels.",Wp,me,po,zp,Is,zg="Perform an evaluation step on <code>model</code> using <code>inputs</code>.",Np,Us,Ng="Subclass and override to inject custom behavior.",Dp,Qe,uo,Hp,Ss,Dg="Sets values in the deepspeed plugin based on the Trainer args",Rp,Oe,ho,Ep,Ps,Hg="Upload <code>self.model</code> and <code>self.tokenizer</code> to the 🤗 model hub on the repo <code>self.args.hub_model_id</code>.",Bp,Ye,go,Vp,Ls,Rg='Remove a callback from the current list of <a href="/docs/transformers/main/ja/main_classes/callback#transformers.TrainerCallback">TrainerCallback</a>.',Zp,E,fo,Xp,Fs,Eg="Save metrics into a json file for that split, e.g. <code>train_results.json</code>.",Gp,Ws,Bg="Under distributed environment this is done only for a process with rank 0.",Qp,zs,Vg=`To understand the metrics please read the docstring of <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer.log_metrics">log_metrics()</a>. The only difference is that raw
unformatted numbers are saved in the current method.`,Op,pe,_o,Yp,Ns,Zg="Will save the model, so you can reload it using <code>from_pretrained()</code>.",Kp,Ds,Xg="Will only save from the main process.",eu,ue,bo,tu,Hs,Gg="Saves the Trainer state, since Trainer.save_model saves only the tokenizer with the model",ou,Rs,Qg="Under distributed environment this is done only for a process with rank 0.",nu,Ke,vo,au,Es,Og="Main training entry point.",ru,he,To,su,Bs,Yg="Perform a training step on a batch of inputs.",iu,Vs,Kg="Subclass and override to inject custom behavior.",al,yo,rl,O,wo,lu,B,xo,du,Zs,ef="Run evaluation and returns metrics.",cu,Xs,tf=`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init <code>compute_metrics</code> argument).`,mu,Gs,of="You can also subclass and override this method to inject custom behavior.",pu,W,Mo,uu,Qs,nf="Run prediction and returns predictions and potential metrics.",hu,Os,af=`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in <code>evaluate()</code>.`,gu,et,fu,Ys,rf="Returns: <em>NamedTuple</em> A namedtuple with the following keys:",_u,Ks,sf=`<li>predictions (<code>np.ndarray</code>): The predictions on <code>test_dataset</code>.</li> <li>label_ids (<code>np.ndarray</code>, <em>optional</em>): The labels (if the dataset contained some).</li> <li>metrics (<code>Dict[str, float]</code>, <em>optional</em>): The potential dictionary of metrics (if the dataset contained
labels).</li>`,sl,$o,il,A,ko,bu,ei,lf=`TrainingArguments is the subset of the arguments we use in our example scripts <strong>which relate to the training loop
itself</strong>.`,vu,ti,df=`Using <a href="/docs/transformers/main/ja/internal/trainer_utils#transformers.HfArgumentParser">HfArgumentParser</a> we can turn this class into
<a href="https://docs.python.org/3/library/argparse#module-argparse" rel="nofollow">argparse</a> arguments that can be specified on the
command line.`,Tu,N,jo,yu,oi,cf=`Returns the log level to be used depending on whether this process is the main process of node 0, main process
of node non-0, or a non-main process.`,wu,ni,mf=`For the main process the log level defaults to the logging level set (<code>logging.WARNING</code> if you didn’t do
anything) unless overridden by <code>log_level</code> argument.`,xu,ai,pf=`For the replica processes the log level defaults to <code>logging.WARNING</code> unless overridden by <code>log_level_replica</code>
argument.`,Mu,ri,uf="The choice between the main and replica process settings is made according to the return value of <code>should_log</code>.",$u,tt,Ao,ku,si,hf="Get number of steps used for a linear warmup.",ju,ge,qo,Au,ii,gf=`A context manager for torch distributed environment where on needs to do something on the main process, while
blocking replicas, and when it’s finished releasing the replicas.`,qu,li,ff=`One such use is for <code>datasets</code>’s <code>map</code> feature which to be efficient should be run once on the main process,
which upon completion saves a cached version of results and which then automatically gets loaded by the
replicas.`,Cu,fe,Co,Ju,di,_f="A method that regroups all arguments linked to the dataloaders creation.",Iu,ot,Uu,_e,Jo,Su,ci,bf="A method that regroups all arguments linked to evaluation.",Pu,nt,Lu,be,Io,Fu,mi,vf="A method that regroups all arguments linked to logging.",Wu,at,zu,ve,Uo,Nu,pi,Tf="A method that regroups all arguments linked to the learning rate scheduler and its hyperparameters.",Du,rt,Hu,Te,So,Ru,ui,yf="A method that regroups all arguments linked to the optimizer and its hyperparameters.",Eu,st,Bu,V,Po,Vu,hi,wf="A method that regroups all arguments linked to synchronizing checkpoints with the Hub.",Zu,it,Xu,lt,Gu,ye,Lo,Qu,gi,xf="A method that regroups all arguments linked to checkpoint saving.",Ou,dt,Yu,Z,Fo,Ku,fi,Mf="A method that regroups all basic arguments linked to testing on a held-out dataset.",eh,ct,th,mt,oh,X,Wo,nh,_i,$f="A method that regroups all basic arguments linked to the training.",ah,pt,rh,ut,sh,ht,zo,ih,bi,kf=`Serializes this instance while replace <code>Enum</code> by their values (for JSON serialization support). It obfuscates
the token values by removing their value.`,lh,gt,No,dh,vi,jf="Serializes this instance to a JSON string.",ch,ft,Do,mh,Ti,Af="Sanitized serialization to use with TensorBoard’s hparams",ll,Ho,dl,D,Ro,ph,yi,qf=`TrainingArguments is the subset of the arguments we use in our example scripts <strong>which relate to the training loop
itself</strong>.`,uh,wi,Cf=`Using <a href="/docs/transformers/main/ja/internal/trainer_utils#transformers.HfArgumentParser">HfArgumentParser</a> we can turn this class into
<a href="https://docs.python.org/3/library/argparse#module-argparse" rel="nofollow">argparse</a> arguments that can be specified on the
command line.`,hh,_t,Eo,gh,xi,Jf=`Serializes this instance while replace <code>Enum</code> by their values and <code>GenerationConfig</code> by dictionaries (for JSON
serialization support). It obfuscates the token values by removing their value.`,cl,Bo,ml,Vo,If=`デフォルトでは、<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a> はすべてのチェックポイントを、
<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a> を使用しています。これらは、xxx を含む<code>checkpoint-xxx</code>という名前のサブフォルダーに保存されます。
それはトレーニングの段階でした。`,pl,Zo,Uf='チェックポイントからトレーニングを再開するには、次のいずれかを使用して <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer.train">Trainer.train()</a> を呼び出します。',ul,Xo,Sf=`<li><code>resume_from_checkpoint=True</code> は最新のチェックポイントからトレーニングを再開します</li> <li><code>resume_from_checkpoint=checkpoint_dir</code> ディレクトリ内の特定のチェックポイントからトレーニングを再開します
合格した。</li>`,hl,Go,Pf=`さらに、<code>push_to_hub=True</code> を使用すると、モデル ハブにチェックポイントを簡単に保存できます。デフォルトでは、すべて
中間チェックポイントに保存されたモデルは別のコミットに保存されますが、オプティマイザーの状態は保存されません。適応できます
<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a> の <code>hub-strategy</code> 値を次のいずれかにします。`,gl,Qo,Lf=`<li><code>&quot;checkpoint&quot;</code>: 最新のチェックポイントも last-checkpoint という名前のサブフォルダーにプッシュされます。
<code>trainer.train(resume_from_checkpoint=&quot;output_dir/last-checkpoint&quot;)</code> を使用してトレーニングを簡単に再開します。</li> <li><code>&quot;all_checkpoints&quot;</code>: すべてのチェックポイントは、出力フォルダーに表示されるようにプッシュされます (したがって、1 つのチェックポイントが得られます)
最終リポジトリ内のフォルダーごとのチェックポイント フォルダー)</li>`,fl,Oo,_l,Yo,Ff='デフォルトでは、<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a> はメインプロセスに <code>logging.INFO</code> を使用し、レプリカがある場合には <code>logging.WARNING</code> を使用します。',bl,Ko,Wf=`これらのデフォルトは、<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a> の 5 つの <code>logging</code> レベルのいずれかを使用するようにオーバーライドできます。
引数:`,vl,en,zf="<li><code>log_level</code> - メインプロセス用</li> <li><code>log_level_replica</code> - レプリカ用</li>",Tl,tn,Nf=`さらに、<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a> の <code>log_on_each_node</code> が <code>False</code> に設定されている場合、メイン ノードのみが
メイン プロセスのログ レベル設定を使用すると、他のすべてのノードはレプリカのログ レベル設定を使用します。`,yl,on,Df=`<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a> は、<code>transformers</code> のログ レベルをノードごとに個別に設定することに注意してください。
<code>Trainer.__init__()</code>。したがって、他の機能を利用する場合は、これをより早く設定することをお勧めします (次の例を参照)。
<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a> オブジェクトを作成する前の <code>transformers</code> 機能。`,wl,nn,Hf="これをアプリケーションで使用する方法の例を次に示します。",xl,an,Ml,rn,Rf=`そして、メイン ノードと他のすべてのノードで重複する可能性が高いものを出力しないように警告するだけを表示したい場合は、
警告: 次のように実行できます。`,$l,sn,kl,ln,Ef=`マルチノード環境で、各ノードのメインプロセスのログを繰り返したくない場合は、次のようにします。
上記を次のように変更します。`,jl,dn,Al,cn,Bf=`その後、最初のノードのメイン プロセスのみが「警告」レベルでログに記録され、メイン ノード上の他のすべてのプロセスはログに記録されます。
ノードと他のノード上のすべてのプロセスは「エラー」レベルでログに記録されます。`,ql,mn,Vf="アプリケーションをできるだけ静かにする必要がある場合は、次のようにします。",Cl,pn,Jl,un,Zf="(マルチノード環境の場合は <code>--log_on_each_node 0</code> を追加します)",Il,hn,Ul,gn,Xf=`<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a> によって生成されたチェックポイントから再開する場合、すべての努力がその状態を復元するために行われます。
<em>python</em>、<em>numpy</em>、および <em>pytorch</em> の RNG 状態は、そのチェックポイントを保存した時点と同じ状態になります。
これにより、「停止して再開」というスタイルのトレーニングが、ノンストップトレーニングに可能な限り近づけられるはずです。`,Sl,fn,Gf=`ただし、さまざまなデフォルトの非決定的な pytorch 設定により、これは完全に機能しない可能性があります。フルをご希望の場合は
決定論については、<a href="https://pytorch.org/docs/stable/notes/randomness" rel="nofollow">ランダム性のソースの制御</a> を参照してください。ドキュメントで説明されているように、これらの設定の一部は
物事を決定論的にするもの (例: <code>torch.backends.cudnn.deterministic</code>) は物事を遅くする可能性があるため、これは
デフォルトでは実行できませんが、必要に応じて自分で有効にすることができます。`,Pl,_n,Ll,bn,Qf="どの GPU をどのような順序で使用するかをプログラムに指示する方法について説明します。",Fl,vn,Of='<a href="https://pytorch.org/docs/stable/generated/torch.nn.Parallel.DistributedDataParallel.html" rel="nofollow"><code>DistributedDataParallel</code></a> を使用して GPU のサブセットのみを使用する場合、使用する GPU の数を指定するだけです。 。たとえば、GPU が 4 つあるが、最初の 2 つを使用したい場合は、次のようにします。',Wl,Tn,zl,yn,Yf='<a href="https://github.com/huggingface/accelerate" rel="nofollow"><code>accelerate</code></a> または <a href="https://github.com/microsoft/DeepSpeed" rel="nofollow"><code>deepspeed</code></a> がインストールされている場合は、次を使用して同じことを達成することもできます。の一つ：',Nl,wn,Dl,xn,Hl,Mn,Kf='これらのランチャーを使用するために、Accelerate または <a href="deepspeed">Deepspeed 統合</a> 機能を使用する必要はありません。',Rl,$n,e_="これまでは、プログラムに使用する GPU の数を指示できました。次に、特定の GPU を選択し、その順序を制御する方法について説明します。",El,kn,t_="次の環境変数は、使用する GPU とその順序を制御するのに役立ちます。",Bl,jn,o_="<strong><code>CUDA_VISIBLE_DEVICES</code></strong>",Vl,An,n_="複数の GPU があり、そのうちの 1 つまたはいくつかの GPU だけを使用したい場合は、環境変数 <code>CUDA_VISIBLE_DEVICES</code> を使用する GPU のリストに設定します。",Zl,qn,a_="たとえば、4 つの GPU (0、1、2、3) があるとします。物理 GPU 0 と 2 のみで実行するには、次のようにします。",Xl,Cn,Gl,Jn,r_="したがって、pytorch は 2 つの GPU のみを認識し、物理 GPU 0 と 2 はそれぞれ <code>cuda:0</code> と <code>cuda:1</code> にマッピングされます。",Ql,In,s_="順序を変更することもできます。",Ol,Un,Yl,Sn,i_="ここでは、物理 GPU 0 と 2 がそれぞれ<code>cuda:1</code>と<code>cuda:0</code>にマッピングされています。",Kl,Pn,l_='上記の例はすべて <code>DistributedDataParallel</code> 使用パターンのものですが、同じ方法が <a href="https://pytorch.org/docs/stable/generated/torch.nn.DataParallel.html" rel="nofollow"><code>DataParallel</code></a> でも機能します。',ed,Ln,td,Fn,d_="GPU のない環境をエミュレートするには、次のようにこの環境変数を空の値に設定するだけです。",od,Wn,nd,zn,c_="他の環境変数と同様に、これらをコマンド ラインに追加する代わりに、次のようにエクスポートすることもできます。",ad,Nn,rd,Dn,m_="ただし、この方法では、以前に環境変数を設定したことを忘れて、なぜ間違った GPU が使用されているのか理解できない可能性があるため、混乱を招く可能性があります。したがって、このセクションのほとんどの例で示されているように、同じコマンド ラインで特定の実行に対してのみ環境変数を設定するのが一般的です。",sd,Hn,p_="<strong><code>CUDA_DEVICE_ORDER</code></strong>",id,Rn,u_="物理デバイスの順序を制御する追加の環境変数 <code>CUDA_DEVICE_ORDER</code> があります。選択肢は次の 2 つです。",ld,En,h_="<li>PCIe バス ID 順 (<code>nvidia-smi</code> の順序と一致) - これがデフォルトです。</li>",dd,Bn,cd,bt,g_="<li>GPU コンピューティング能力順に並べる</li>",md,Vn,pd,Zn,f_="ほとんどの場合、この環境変数を気にする必要はありませんが、古い GPU と新しい GPU が物理的に挿入されているため、遅い古いカードが遅くなっているように見えるような偏ったセットアップを行っている場合には、非常に役立ちます。初め。これを解決する 1 つの方法は、カードを交換することです。ただし、カードを交換できない場合 (デバイスの冷却が影響を受けた場合など)、<code>CUDA_DEVICE_ORDER=FASTEST_FIRST</code>を設定すると、常に新しい高速カードが最初に配置されます。ただし、<code>nvidia-smi</code>は依然として PCIe の順序でレポートするため、多少混乱するでしょう。",ud,Xn,__="順序を入れ替えるもう 1 つの解決策は、以下を使用することです。",hd,Gn,gd,Qn,b_="この例では 2 つの GPU だけを使用していますが、もちろん、コンピューターに搭載されている数の GPU にも同じことが当てはまります。",fd,On,v_="また、この環境変数を設定する場合は、<code>~/.bashrc</code> ファイルまたはその他の起動設定ファイルに設定して、忘れるのが最善です。",_d,Yn,bd,Kn,T_=`<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a> は、トレーニングを劇的に改善する可能性のあるライブラリをサポートするように拡張されました。
時間とはるかに大きなモデルに適合します。`,vd,ea,y_='現在、サードパーティのソリューション <a href="https://github.com/microsoft/DeepSpeed" rel="nofollow">DeepSpeed</a> および <a href="https://pytorch.org/docs/stable/fsdp.html" rel="nofollow">PyTorch FSDP</a> をサポートしています。論文 <a href="https://arxiv.org/abs/1910.02054" rel="nofollow">ZeRO: メモリの最適化兆パラメータ モデルのトレーニングに向けて、Samyam Rajbhandari、Jeff Rasley、Olatunji Ruwase、Yuxiong He 著</a>。',Td,ta,w_='この提供されるサポートは、この記事の執筆時点では新しくて実験的なものです。 DeepSpeed と PyTorch FSDP のサポートはアクティブであり、それに関する問題は歓迎しますが、FairScale 統合は PyTorch メインに統合されているため、もうサポートしていません (<a href="#pytorch-fully-sharded-data-parallel">PyTorch FSDP 統合</a>)',yd,Mi,wd,oa,xd,na,x_="この記事の執筆時点では、Deepspeed を使用するには、CUDA C++ コードをコンパイルする必要があります。",Md,aa,M_=`すべてのインストールの問題は、<a href="https://github.com/microsoft/DeepSpeed/issues" rel="nofollow">Deepspeed</a> の対応する GitHub の問題を通じて対処する必要がありますが、ビルド中に発生する可能性のある一般的な問題がいくつかあります。
CUDA 拡張機能を構築する必要がある PyTorch 拡張機能。`,$d,ra,$_="したがって、次の操作を実行中に CUDA 関連のビルドの問題が発生した場合は、次のとおりです。",kd,sa,jd,ia,k_="まず次の注意事項をお読みください。",Ad,la,j_=`これらのノートでは、<code>pytorch</code> が CUDA <code>10.2</code> でビルドされた場合に何をすべきかの例を示します。あなたの状況が次のような場合
異なる場合は、バージョン番号を目的のバージョンに調整することを忘れないでください。`,qd,da,Cd,ca,A_=`Pytorch には独自の CUDA ツールキットが付属していますが、これら 2 つのプロジェクトをビルドするには、同一バージョンの CUDA が必要です。
システム全体にインストールされます。`,Jd,ma,q_=`たとえば、Python 環境に <code>cudatoolkit==10.2</code> を指定して <code>pytorch</code> をインストールした場合は、次のものも必要です。
CUDA <code>10.2</code> がシステム全体にインストールされました。`,Id,pa,C_=`正確な場所はシステムによって異なる場合がありますが、多くのシステムでは<code>/usr/local/cuda-10.2</code>が最も一般的な場所です。
Unix システム。 CUDA が正しく設定され、<code>PATH</code>環境変数に追加されると、
次のようにしてインストール場所を指定します。`,Ud,ua,Sd,ha,J_=`CUDA がシステム全体にインストールされていない場合は、最初にインストールしてください。お気に入りを使用して手順を見つけることができます
検索エンジン。たとえば、Ubuntu を使用している場合は、<a href="https://www.google.com/search?q=ubuntu+cuda+10.2+install" rel="nofollow">ubuntu cuda 10.2 install</a> を検索するとよいでしょう。`,Pd,ga,Ld,fa,I_=`もう 1 つの考えられる一般的な問題は、システム全体に複数の CUDA ツールキットがインストールされている可能性があることです。たとえばあなた
がある可能性があり：`,Fd,_a,Wd,ba,U_=`この状況では、<code>PATH</code> および <code>LD_LIBRARY_PATH</code> 環境変数に以下が含まれていることを確認する必要があります。
目的の CUDA バージョンへの正しいパス。通常、パッケージ インストーラーは、これらに、
最後のバージョンがインストールされました。適切なパッケージが見つからないためにパッケージのビルドが失敗するという問題が発生した場合は、
CUDA バージョンがシステム全体にインストールされているにもかかわらず、前述の 2 つを調整する必要があることを意味します
環境変数。`,zd,va,S_="まず、その内容を見てみましょう。",Nd,Ta,Dd,ya,P_="それで、中に何が入っているかがわかります。",Hd,wa,L_="<code>LD_LIBRARY_PATH</code> が空である可能性があります。",Rd,xa,F_=`<code>PATH</code> は実行可能ファイルが存在する場所をリストし、<code>LD_LIBRARY_PATH</code> は共有ライブラリの場所を示します。
探すことです。どちらの場合も、前のエントリが後のエントリより優先されます。 <code>:</code> は複数を区切るために使用されます
エントリ。`,Ed,Ma,W_=`ここで、ビルド プログラムに特定の CUDA ツールキットの場所を指示するには、最初にリストされる希望のパスを挿入します。
やっていること：`,Bd,$a,Vd,ka,z_="既存の値を上書きするのではなく、先頭に追加することに注意してください。",Zd,ja,N_=`もちろん、必要に応じてバージョン番号やフルパスを調整します。割り当てたディレクトリが実際に機能することを確認してください
存在する。 <code>lib64</code> サブディレクトリは、<code>libcudart.so</code> などのさまざまな CUDA <code>.so</code> オブジェクトが存在する場所です。
システムでは別の名前が付けられますが、現実を反映するように調整してください。`,Xd,Aa,Gd,qa,D_=`一部の古い CUDA バージョンは、新しいコンパイラでのビルドを拒否する場合があります。たとえば、あなたは<code>gcc-9</code>を持っていますが、それが必要です
<code>gcc-7</code>。`,Qd,Ca,H_="それにはさまざまな方法があります。",Od,Ja,R_="最新の CUDA ツールキットをインストールできる場合は、通常、新しいコンパイラがサポートされているはずです。",Yd,Ia,E_=`あるいは、既に所有しているコンパイラに加えて、下位バージョンのコンパイラをインストールすることもできます。
すでに存在しますが、デフォルトではないため、ビルドシステムはそれを認識できません。 「gcc-7」がインストールされているが、
ビルドシステムが見つからないというメッセージを表示する場合は、次の方法で解決できる可能性があります。`,Kd,Ua,ec,Sa,B_=`ここでは、<code>/usr/local/cuda-10.2/bin/gcc</code> から <code>gcc-7</code> へのシンボリックリンクを作成しています。
<code>/usr/local/cuda-10.2/bin/</code> は <code>PATH</code> 環境変数内にある必要があります (前の問題の解決策を参照)。
<code>gcc-7</code> (および <code>g++7</code>) が見つかるはずで、ビルドは成功します。`,tc,Pa,V_="いつものように、状況に合わせて例のパスを編集してください。",oc,La,nc,Fa,Z_=`より大きなバッチ サイズで巨大なモデルのトレーニングを高速化するには、完全にシャード化されたデータ並列モデルを使用できます。
このタイプのデータ並列パラダイムでは、オプティマイザーの状態、勾配、パラメーターをシャーディングすることで、より多くのデータと大規模なモデルをフィッティングできます。
この機能とその利点の詳細については、<a href="https://pytorch.org/blog/introducing-pytorch-full-sharded-data-Parallel-api/" rel="nofollow">完全シャーディング データ並列ブログ</a> をご覧ください。
最新の PyTorch の Fully Sharded Data Parallel (FSDP) トレーニング機能を統合しました。
必要なのは、設定を通じて有効にすることだけです。`,ac,Wa,X_=`<strong>FSDP サポートに必要な PyTorch バージョン</strong>: PyTorch Nightly (リリース後にこれを読んだ場合は 1.12.0)
FSDP を有効にしたモデルの保存は、最近の修正でのみ利用できるためです。`,rc,za,G_="<strong>使用法</strong>：",sc,Na,Q_=`<li><p>配布されたランチャーが追加されていることを確認してください
まだ使用していない場合は、<code>-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE</code>を使用します。</p></li> <li><p><strong>シャーディング戦略</strong>:</p> <ul><li>FULL_SHARD : データ並列ワーカー/GPU にわたるシャード オプティマイザーの状態 + 勾配 + モデル パラメーター。
このためには、コマンドライン引数に<code>--fsdp full_shard</code>を追加します。</li> <li>SHARD_GRAD_OP : シャード オプティマイザーの状態 + データ並列ワーカー/GPU 全体の勾配。
このためには、コマンドライン引数に<code>--fsdp shard_grad_op</code>を追加します。</li> <li>NO_SHARD : シャーディングなし。このためには、コマンドライン引数に<code>--fsdp no_shard</code>を追加します。</li></ul></li> <li><p>パラメータと勾配を CPU にオフロードするには、
コマンドライン引数に<code>--fsdp &quot;full_shard offload&quot;</code>または<code>--fsdp &quot;shard_grad_op offload&quot;</code>を追加します。</p></li> <li><p><code>default_auto_wrap_policy</code> を使用して FSDP でレイヤーを自動的に再帰的にラップするには、
コマンドライン引数に<code>--fsdp &quot;full_shard auto_wrap&quot;</code>または<code>--fsdp &quot;shard_grad_op auto_wrap&quot;</code>を追加します。</p></li> <li><p>CPU オフロードと自動ラッピングの両方を有効にするには、
コマンドライン引数に<code>--fsdp &quot;full_shard offload auto_wrap&quot;</code>または<code>--fsdp &quot;shard_grad_op offload auto_wrap&quot;</code>を追加します。</p></li> <li><p>残りの FSDP 構成は、<code>--fsdp_config &lt;path_to_fsdp_config.json&gt;</code>を介して渡されます。それは、次のいずれかの場所です。
FSDP json 構成ファイル (例: <code>fsdp_config.json</code>)、またはすでにロードされている json ファイルを <code>dict</code> として使用します。</p> <ul><li>自動ラッピングが有効な場合は、トランスベースの自動ラップ ポリシーまたはサイズ ベースの自動ラップ ポリシーを使用できます。<ul><li>トランスフォーマーベースの自動ラップポリシーの場合、構成ファイルで <code>fsdp_transformer_layer_cls_to_wrap</code> を指定することをお勧めします。指定しない場合、使用可能な場合、デフォルト値は <code>model._no_split_modules</code> になります。
これは、ラップするトランスフォーマー層クラス名のリスト (大文字と小文字を区別) を指定します (例: <code>BertLayer</code>、<code>GPTJBlock</code>、<code>T5Block</code> …)。
重みを共有するサブモジュール (埋め込み層など) が異なる FSDP ラップされたユニットにならないようにする必要があるため、これは重要です。
このポリシーを使用すると、マルチヘッド アテンションとそれに続くいくつかの MLP レイヤーを含むブロックごとにラッピングが発生します。
共有埋め込みを含む残りの層は、同じ最も外側の FSDP ユニットにラップされるのが便利です。
したがって、トランスベースのモデルにはこれを使用してください。</li> <li>サイズベースの自動ラップポリシーの場合は、設定ファイルに<code>fsdp_min_num_params</code>を追加してください。
自動ラッピングのための FSDP のパラメータの最小数を指定します。</li></ul></li> <li>設定ファイルで <code>fsdp_backward_prefetch</code> を指定できるようになりました。次のパラメータのセットをいつプリフェッチするかを制御します。
<code>backward_pre</code> と <code>backward_pos</code> が利用可能なオプションです。
詳細については、<code>torch.distributed.fsdp.full_sharded_data_Parallel.BackwardPrefetch</code>を参照してください。</li> <li>設定ファイルで <code>fsdp_forward_prefetch</code> を指定できるようになりました。次のパラメータのセットをいつプリフェッチするかを制御します。
<code>True</code>の場合、FSDP はフォワード パスでの実行中に、次に来るオールギャザーを明示的にプリフェッチします。</li> <li>設定ファイルで <code>limit_all_gathers</code> を指定できるようになりました。
<code>True</code>の場合、FSDP は CPU スレッドを明示的に同期して、実行中のオールギャザが多すぎるのを防ぎます。</li> <li><code>activation_checkpointing</code>を設定ファイルで指定できるようになりました。
<code>True</code>の場合、FSDP アクティベーション チェックポイントは、FSDP のアクティベーションをクリアすることでメモリ使用量を削減する手法です。
特定のレイヤーを処理し、バックワード パス中にそれらを再計算します。事実上、これは余分な計算時間を犠牲にします
メモリ使用量を削減します。</li></ul></li>`,ic,Da,O_="<strong>注意すべき注意点がいくつかあります</strong>",lc,Ha,Y_=`<li>これは <code>generate</code> と互換性がないため、 <code>--predict_with_generate</code> とも互換性がありません
すべての seq2seq/clm スクリプト (翻訳/要約/clm など)。
問題 <a href="https://github.com/huggingface/transformers/issues/21667" rel="nofollow">#21667</a> を参照してください。</li>`,dc,Ra,cc,Ea,K_=`TPU ユーザーの皆様に朗報です。 PyTorch/XLA は FSDP をサポートするようになりました。
最新の Fully Sharded Data Parallel (FSDP) トレーニングがすべてサポートされています。
詳細については、<a href="https://pytorch.org/blog/scaling-pytorch-models-on-cloud-tpus-with-fsdp/" rel="nofollow">FSDP を使用した Cloud TPU での PyTorch モデルのスケーリング</a> および <a href="https://github.com/pytorch/xla/tree/master/torch_xla/distributed/fsdp" rel="nofollow">PyTorch/XLA 実装 を参照してください。 FSDP の</a>
必要なのは、設定を通じて有効にすることだけです。`,mc,Ba,eb="<strong>FSDP サポートに必要な PyTorch/XLA バージョン</strong>: &gt;=2.0",pc,Va,tb="<strong>使用法</strong>：",uc,Za,ob="<code>--fsdp &quot;full shard&quot;</code> を、<code>--fsdp_config &lt;path_to_fsdp_config.json&gt;</code> に加えられる次の変更とともに渡します。",hc,Xa,nb=`<li>PyTorch/XLA FSDP を有効にするには、<code>xla</code>を<code>True</code>に設定する必要があります。</li> <li><code>xla_fsdp_settings</code> 値は、XLA FSDP ラッピング パラメータを格納する辞書です。
オプションの完全なリストについては、<a href="https://github.com/pytorch/xla/blob/master/torch_xla/distributed/fsdp/xla_full_sharded_data_Parallel.py" rel="nofollow">こちら</a>。</li> <li><code>xla_fsdp_grad_ckpt</code>。 <code>True</code>の場合、ネストされた XLA FSDP でラップされた各レイヤー上で勾配チェックポイントを使用します。
この設定は、xla フラグが true に設定されており、自動ラッピング ポリシーが指定されている場合にのみ使用できます。
<code>fsdp_min_num_params</code> または <code>fsdp_transformer_layer_cls_to_wrap</code>。</li> <li>トランスフォーマー ベースの自動ラップ ポリシーまたはサイズ ベースの自動ラップ ポリシーのいずれかを使用できます。<ul><li>トランスフォーマーベースの自動ラップポリシーの場合、構成ファイルで <code>fsdp_transformer_layer_cls_to_wrap</code> を指定することをお勧めします。指定しない場合、使用可能な場合、デフォルト値は <code>model._no_split_modules</code> になります。
これは、ラップするトランスフォーマー層クラス名のリスト (大文字と小文字を区別) を指定します (例: <code>BertLayer</code>、<code>GPTJBlock</code>、<code>T5Block</code> …)。
重みを共有するサブモジュール (埋め込み層など) が異なる FSDP ラップされたユニットにならないようにする必要があるため、これは重要です。
このポリシーを使用すると、マルチヘッド アテンションとそれに続くいくつかの MLP レイヤーを含むブロックごとにラッピングが発生します。
共有埋め込みを含む残りの層は、同じ最も外側の FSDP ユニットにラップされるのが便利です。
したがって、トランスベースのモデルにはこれを使用してください。</li> <li>サイズベースの自動ラップポリシーの場合は、設定ファイルに<code>fsdp_min_num_params</code>を追加してください。
自動ラッピングのための FSDP のパラメータの最小数を指定します。</li></ul></li>`,gc,Ga,fc,Qa,ab=`PyTorch v1.12 リリースにより、開発者と研究者は Apple シリコン GPU を利用してモデル トレーニングを大幅に高速化できます。
これにより、プロトタイピングや微調整などの機械学習ワークフローを Mac 上でローカルで実行できるようになります。
PyTorch のバックエンドとしての Apple の Metal Performance Shaders (MPS) はこれを可能にし、新しい <code>&quot;mps&quot;</code> デバイス経由で使用できます。
これにより、計算グラフとプリミティブが MPS Graph フレームワークと MPS によって提供される調整されたカーネルにマッピングされます。
詳細については、公式ドキュメント <a href="https://pytorch.org/blog/introducing-accelerated-pytorch-training-on-mac/" rel="nofollow">Mac での Accelerated PyTorch Training の紹介</a> を参照してください。
および <a href="https://pytorch.org/docs/stable/notes/mps.html" rel="nofollow">MPS バックエンド</a>。`,_c,vt,bc,Oa,rb="<strong>Apple Silicon チップを使用したトレーニングと推論の利点</strong>",vc,Ya,sb=`<li>ユーザーがローカルで大規模なネットワークやバッチ サイズをトレーニングできるようにします</li> <li>ユニファイド メモリ アーキテクチャにより、データ取得の遅延が短縮され、GPU がメモリ ストア全体に直接アクセスできるようになります。
したがって、エンドツーエンドのパフォーマンスが向上します。</li> <li>クラウドベースの開発に関連するコストや追加のローカル GPU の必要性を削減します。</li>`,Tc,Ka,ib=`<strong>前提条件</strong>: mps サポートを備えたトーチをインストールするには、
この素晴らしいメディア記事 <a href="https://medium.com/towards-data-science/gpu-acceleration-comes-to-pytorch-on-m1-macs-195c399efcc1" rel="nofollow">GPU アクセラレーションが M1 Mac の PyTorch に登場</a> に従ってください。 。`,yc,er,lb=`<strong>使用法</strong>：
<code>mps</code> デバイスは、<code>cuda</code> デバイスが使用される方法と同様に利用可能な場合、デフォルトで使用されます。
したがって、ユーザーによるアクションは必要ありません。
たとえば、以下のコマンドを使用して、Apple Silicon GPU を使用して公式の Glue テキスト分類タスクを (ルート フォルダーから) 実行できます。`,wc,tr,xc,or,db="<strong>注意すべきいくつかの注意事項</strong>",Mc,nr,cb=`<li>一部の PyTorch 操作は mps に実装されていないため、エラーがスローされます。
これを回避する 1 つの方法は、環境変数 <code>PYTORCH_ENABLE_MPS_FALLBACK=1</code> を設定することです。
これらの操作では CPU にフォールバックします。ただし、それでも UserWarning がスローされます。</li> <li>分散セットアップ<code>gloo</code>および<code>nccl</code>は、<code>mps</code>デバイスでは動作しません。
これは、現在「mps」デバイス タイプの単一 GPU のみを使用できることを意味します。</li>`,$c,ar,mb=`最後に、覚えておいてください。 🤗 <code>Trainer</code> は MPS バックエンドのみを統合するため、
MPS バックエンドの使用に関して問題や質問がある場合は、
<a href="https://github.com/pytorch/pytorch/issues" rel="nofollow">PyTorch GitHub</a> に問題を提出してください。`,kc,rr,jc,sr,pb="加速してトレーナーにパワーを与えましょう。ユーザーが期待することに関しては、次のとおりです。",Ac,ir,ub="<li>トレーナー引数に対して FSDP、DeepSpeed などのトレーナー インテレーションを変更せずに使用し続けることができます。</li> <li>トレーナーで Accelerate Launcher を使用できるようになりました (推奨)。</li>",qc,lr,hb="トレーナーで Accelerate Launcher を使用する手順:",Cc,we,$i,gb="<p>🤗 Accelerate がインストールされていることを確認してください。Accelerate がないと <code>Trainer</code> を使用することはできません。そうでない場合は、<code>pip install accelerate</code>してください。 Accelerate のバージョンを更新する必要がある場合もあります: <code>pip install activate --upgrade</code></p>",fh,S,ki,fb=`<code>accelerate config</code>を実行し、アンケートに記入します。以下は加速設定の例です。
ａ． DDP マルチノード マルチ GPU 構成:`,_h,dr,bh,ji,_b="b. FSDP config:",vh,cr,Th,Ai,bb="c.ファイルを指す DeepSpeed 構成:",yh,mr,wh,qi,vb="d.加速プラグインを使用した DeepSpeed 構成:",xh,pr,Mh,Ci,Tb=`<p>加速設定またはランチャー引数によって上記で処理された引数以外の引数を使用して、トレーナー スクリプトを実行します。
以下は、上記の FSDP 構成で<code>accelerate launcher</code>を使用して<code>run_glue.py</code>を実行する例です。</p>`,Jc,ur,Ic,Tt,yb="<li><code>accelerate launch</code>するための cmd 引数を直接使用することもできます。上の例は次のようにマッピングされます。</li>",Uc,hr,Sc,gr,wb='詳細については、🤗 Accelerate CLI ガイドを参照してください: <a href="https://huggingface.co/docs/accelerate/basic_tutorials/launch" rel="nofollow">🤗 Accelerate スクリプトの起動</a>。',Pc,fr,xb="移動されたセクション:",Lc,_r,Mb=`[ <a href="./deepspeed#deepspeed-trainer-integration">DeepSpeed</a><a id="deepspeed"></a>
| <a href="./deepspeed#deepspeed-installation">Installation</a><a id="installation"></a>
| <a href="./deepspeed#deepspeed-multi-gpu">Deployment with multiple GPUs</a><a id="deployment-with-multiple-gpus"></a>
| <a href="./deepspeed#deepspeed-one-gpu">Deployment with one GPU</a><a id="deployment-with-one-gpu"></a>
| <a href="./deepspeed#deepspeed-notebook">Deployment in Notebooks</a><a id="deployment-in-notebooks"></a>
| <a href="./deepspeed#deepspeed-config">Configuration</a><a id="configuration"></a>
| <a href="./deepspeed#deepspeed-config-passing">Passing Configuration</a><a id="passing-configuration"></a>
| <a href="./deepspeed#deepspeed-config-shared">Shared Configuration</a><a id="shared-configuration"></a>
| <a href="./deepspeed#deepspeed-zero">ZeRO</a><a id="zero"></a>
| <a href="./deepspeed#deepspeed-zero2-config">ZeRO-2 Config</a><a id="zero-2-config"></a>
| <a href="./deepspeed#deepspeed-zero3-config">ZeRO-3 Config</a><a id="zero-3-config"></a>
| <a href="./deepspeed#deepspeed-nvme">NVMe Support</a><a id="nvme-support"></a>
| <a href="./deepspeed#deepspeed-zero2-zero3-performance">ZeRO-2 vs ZeRO-3 Performance</a><a id="zero-2-vs-zero-3-performance"></a>
| <a href="./deepspeed#deepspeed-zero2-example">ZeRO-2 Example</a><a id="zero-2-example"></a>
| <a href="./deepspeed#deepspeed-zero3-example">ZeRO-3 Example</a><a id="zero-3-example"></a>
| <a href="./deepspeed#deepspeed-optimizer">Optimizer</a><a id="optimizer"></a>
| <a href="./deepspeed#deepspeed-scheduler">Scheduler</a><a id="scheduler"></a>
| <a href="./deepspeed#deepspeed-fp32">fp32 Precision</a><a id="fp32-precision"></a>
| <a href="./deepspeed#deepspeed-amp">Automatic Mixed Precision</a><a id="automatic-mixed-precision"></a>
| <a href="./deepspeed#deepspeed-bs">Batch Size</a><a id="batch-size"></a>
| <a href="./deepspeed#deepspeed-grad-acc">Gradient Accumulation</a><a id="gradient-accumulation"></a>
| <a href="./deepspeed#deepspeed-grad-clip">Gradient Clipping</a><a id="gradient-clipping"></a>
| <a href="./deepspeed#deepspeed-weight-extraction">Getting The Model Weights Out</a><a id="getting-the-model-weights-out"></a>
]`,Fc,Zi,Wc;return M=new P({props:{title:"Trainer",local:"trainer",headingTag:"h1"}}),Ue=new jt({props:{warning:!0,$$slots:{default:[Cb]},$$scope:{ctx:C}}}),Ut=new q({props:{code:"ZnJvbSUyMHRvcmNoJTIwaW1wb3J0JTIwbm4lMEFmcm9tJTIwdHJhbnNmb3JtZXJzJTIwaW1wb3J0JTIwVHJhaW5lciUwQSUwQSUwQWNsYXNzJTIwQ3VzdG9tVHJhaW5lcihUcmFpbmVyKSUzQSUwQSUyMCUyMCUyMCUyMGRlZiUyMGNvbXB1dGVfbG9zcyhzZWxmJTJDJTIwbW9kZWwlMkMlMjBpbnB1dHMlMkMlMjByZXR1cm5fb3V0cHV0cyUzREZhbHNlKSUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGxhYmVscyUyMCUzRCUyMGlucHV0cy5wb3AoJTIybGFiZWxzJTIyKSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMyUyMGZvcndhcmQlMjBwYXNzJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwb3V0cHV0cyUyMCUzRCUyMG1vZGVsKCoqaW5wdXRzKSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGxvZ2l0cyUyMCUzRCUyMG91dHB1dHMuZ2V0KCUyMmxvZ2l0cyUyMiklMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjMlMjBjb21wdXRlJTIwY3VzdG9tJTIwbG9zcyUyMChzdXBwb3NlJTIwb25lJTIwaGFzJTIwMyUyMGxhYmVscyUyMHdpdGglMjBkaWZmZXJlbnQlMjB3ZWlnaHRzKSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGxvc3NfZmN0JTIwJTNEJTIwbm4uQ3Jvc3NFbnRyb3B5TG9zcyh3ZWlnaHQlM0R0b3JjaC50ZW5zb3IoJTVCMS4wJTJDJTIwMi4wJTJDJTIwMy4wJTVEJTJDJTIwZGV2aWNlJTNEbW9kZWwuZGV2aWNlKSklMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBsb3NzJTIwJTNEJTIwbG9zc19mY3QobG9naXRzLnZpZXcoLTElMkMlMjBzZWxmLm1vZGVsLmNvbmZpZy5udW1fbGFiZWxzKSUyQyUyMGxhYmVscy52aWV3KC0xKSklMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjByZXR1cm4lMjAobG9zcyUyQyUyMG91dHB1dHMpJTIwaWYlMjByZXR1cm5fb3V0cHV0cyUyMGVsc2UlMjBsb3Nz",highlighted:`<span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Trainer


<span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomTrainer</span>(<span class="hljs-title class_ inherited__">Trainer</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_loss</span>(<span class="hljs-params">self, model, inputs, return_outputs=<span class="hljs-literal">False</span></span>):
        labels = inputs.pop(<span class="hljs-string">&quot;labels&quot;</span>)
        <span class="hljs-comment"># forward pass</span>
        outputs = model(**inputs)
        logits = outputs.get(<span class="hljs-string">&quot;logits&quot;</span>)
        <span class="hljs-comment"># compute custom loss (suppose one has 3 labels with different weights)</span>
        loss_fct = nn.CrossEntropyLoss(weight=torch.tensor([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>], device=model.device))
        loss = loss_fct(logits.view(-<span class="hljs-number">1</span>, self.model.config.num_labels), labels.view(-<span class="hljs-number">1</span>))
        <span class="hljs-keyword">return</span> (loss, outputs) <span class="hljs-keyword">if</span> return_outputs <span class="hljs-keyword">else</span> loss`,wrap:!1}}),Pt=new P({props:{title:"Trainer",local:"transformers.Trainer",headingTag:"h2"}}),Lt=new $({props:{name:"class transformers.Trainer",anchor:"transformers.Trainer",parameters:[{name:"model",val:": Union = None"},{name:"args",val:": TrainingArguments = None"},{name:"data_collator",val:": Optional = None"},{name:"train_dataset",val:": Optional = None"},{name:"eval_dataset",val:": Union = None"},{name:"tokenizer",val:": Optional = None"},{name:"model_init",val:": Optional = None"},{name:"compute_metrics",val:": Optional = None"},{name:"callbacks",val:": Optional = None"},{name:"optimizers",val:": Tuple = (None, None)"},{name:"preprocess_logits_for_metrics",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.Trainer.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/ja/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <code>torch.nn.Module</code>, <em>optional</em>) &#x2014;
The model to train, evaluate or use for predictions. If not provided, a <code>model_init</code> must be passed.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p><a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a> is optimized to work with the <a href="/docs/transformers/main/ja/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> provided by the library. You can still use
your own models defined as <code>torch.nn.Module</code> as long as they work the same way as the &#x1F917; Transformers
models.</p>

					</div>`,name:"model"},{anchor:"transformers.Trainer.args",description:`<strong>args</strong> (<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a>, <em>optional</em>) &#x2014;
The arguments to tweak for training. Will default to a basic instance of <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a> with the
<code>output_dir</code> set to a directory named <em>tmp_trainer</em> in the current directory if not provided.`,name:"args"},{anchor:"transformers.Trainer.data_collator",description:`<strong>data_collator</strong> (<code>DataCollator</code>, <em>optional</em>) &#x2014;
The function to use to form a batch from a list of elements of <code>train_dataset</code> or <code>eval_dataset</code>. Will
default to <a href="/docs/transformers/main/ja/main_classes/data_collator#transformers.default_data_collator">default_data_collator()</a> if no <code>tokenizer</code> is provided, an instance of
<a href="/docs/transformers/main/ja/main_classes/data_collator#transformers.DataCollatorWithPadding">DataCollatorWithPadding</a> otherwise.`,name:"data_collator"},{anchor:"transformers.Trainer.train_dataset",description:`<strong>train_dataset</strong> (<code>torch.utils.data.Dataset</code> or <code>torch.utils.data.IterableDataset</code>, <em>optional</em>) &#x2014;
The dataset to use for training. If it is a <code>Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed.</p>
<p>Note that if it&#x2019;s a <code>torch.utils.data.IterableDataset</code> with some randomization and you are training in a
distributed fashion, your iterable dataset should either use a internal attribute <code>generator</code> that is a
<code>torch.Generator</code> for the randomization that must be identical on all processes (and the Trainer will
manually set the seed of this <code>generator</code> at each epoch) or have a <code>set_epoch()</code> method that internally
sets the seed of the RNGs used.`,name:"train_dataset"},{anchor:"transformers.Trainer.eval_dataset",description:`<strong>eval_dataset</strong> (Union[<code>torch.utils.data.Dataset</code>, Dict[str, <code>torch.utils.data.Dataset</code>]), <em>optional</em>) &#x2014;
The dataset to use for evaluation. If it is a <code>Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed. If it is a dictionary, it will evaluate on each
dataset prepending the dictionary key to the metric name.`,name:"eval_dataset"},{anchor:"transformers.Trainer.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/ja/internal/tokenization_utils#transformers.PreTrainedTokenizerBase">PreTrainedTokenizerBase</a>, <em>optional</em>) &#x2014;
The tokenizer used to preprocess the data. If provided, will be used to automatically pad the inputs to the
maximum length when batching inputs, and it will be saved along the model to make it easier to rerun an
interrupted training or reuse the fine-tuned model.`,name:"tokenizer"},{anchor:"transformers.Trainer.model_init",description:`<strong>model_init</strong> (<code>Callable[[], PreTrainedModel]</code>, <em>optional</em>) &#x2014;
A function that instantiates the model to be used. If provided, each call to <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer.train">train()</a> will start
from a new instance of the model as given by this function.</p>
<p>The function may have zero argument, or a single one containing the optuna/Ray Tune/SigOpt trial object, to
be able to choose different architectures according to hyper parameters (such as layer count, sizes of
inner layers, dropout probabilities etc).`,name:"model_init"},{anchor:"transformers.Trainer.compute_metrics",description:`<strong>compute_metrics</strong> (<code>Callable[[EvalPrediction], Dict]</code>, <em>optional</em>) &#x2014;
The function that will be used to compute metrics at evaluation. Must take a <a href="/docs/transformers/main/ja/internal/trainer_utils#transformers.EvalPrediction">EvalPrediction</a> and return
a dictionary string to metric values.`,name:"compute_metrics"},{anchor:"transformers.Trainer.callbacks",description:`<strong>callbacks</strong> (List of <a href="/docs/transformers/main/ja/main_classes/callback#transformers.TrainerCallback">TrainerCallback</a>, <em>optional</em>) &#x2014;
A list of callbacks to customize the training loop. Will add those to the list of default callbacks
detailed in <a href="callback">here</a>.</p>
<p>If you want to remove one of the default callbacks used, use the <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer.remove_callback">Trainer.remove_callback()</a> method.`,name:"callbacks"},{anchor:"transformers.Trainer.optimizers",description:`<strong>optimizers</strong> (<code>Tuple[torch.optim.Optimizer, torch.optim.lr_scheduler.LambdaLR]</code>, <em>optional</em>, defaults to <code>(None, None)</code>) &#x2014;
A tuple containing the optimizer and the scheduler to use. Will default to an instance of <a href="/docs/transformers/main/ja/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> on your
model and a scheduler given by <a href="/docs/transformers/main/ja/main_classes/optimizer_schedules#transformers.get_linear_schedule_with_warmup">get_linear_schedule_with_warmup()</a> controlled by <code>args</code>.`,name:"optimizers"},{anchor:"transformers.Trainer.preprocess_logits_for_metrics",description:`<strong>preprocess_logits_for_metrics</strong> (<code>Callable[[torch.Tensor, torch.Tensor], torch.Tensor]</code>, <em>optional</em>) &#x2014;
A function that preprocess the logits right before caching them at each evaluation step. Must take two
tensors, the logits and the labels, and return the logits once processed as desired. The modifications made
by this function will be reflected in the predictions received by <code>compute_metrics</code>.</p>
<p>Note that the labels (second parameter) will be <code>None</code> if the dataset does not have them.`,name:"preprocess_logits_for_metrics"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L255"}}),Ft=new $({props:{name:"add_callback",anchor:"transformers.Trainer.add_callback",parameters:[{name:"callback",val:""}],parametersDescription:[{anchor:"transformers.Trainer.add_callback.callback",description:`<strong>callback</strong> (<code>type</code> or <a href="/docs/transformers/main/ja/main_classes/callback#transformers.TrainerCallback">TrainerCallback</a>) &#x2014;
A <a href="/docs/transformers/main/ja/main_classes/callback#transformers.TrainerCallback">TrainerCallback</a> class or an instance of a <a href="/docs/transformers/main/ja/main_classes/callback#transformers.TrainerCallback">TrainerCallback</a>. In the
first case, will instantiate a member of that class.`,name:"callback"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L684"}}),Wt=new $({props:{name:"autocast_smart_context_manager",anchor:"transformers.Trainer.autocast_smart_context_manager",parameters:[{name:"cache_enabled",val:": Optional = True"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L2835"}}),zt=new $({props:{name:"compute_loss",anchor:"transformers.Trainer.compute_loss",parameters:[{name:"model",val:""},{name:"inputs",val:""},{name:"return_outputs",val:" = False"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L2886"}}),Nt=new $({props:{name:"compute_loss_context_manager",anchor:"transformers.Trainer.compute_loss_context_manager",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L2829"}}),Dt=new $({props:{name:"create_model_card",anchor:"transformers.Trainer.create_model_card",parameters:[{name:"language",val:": Optional = None"},{name:"license",val:": Optional = None"},{name:"tags",val:": Union = None"},{name:"model_name",val:": Optional = None"},{name:"finetuned_from",val:": Optional = None"},{name:"tasks",val:": Union = None"},{name:"dataset_tags",val:": Union = None"},{name:"dataset",val:": Union = None"},{name:"dataset_args",val:": Union = None"}],parametersDescription:[{anchor:"transformers.Trainer.create_model_card.language",description:`<strong>language</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The language of the model (if applicable)`,name:"language"},{anchor:"transformers.Trainer.create_model_card.license",description:`<strong>license</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The license of the model. Will default to the license of the pretrained model used, if the original
model given to the <code>Trainer</code> comes from a repo on the Hub.`,name:"license"},{anchor:"transformers.Trainer.create_model_card.tags",description:`<strong>tags</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>) &#x2014;
Some tags to be included in the metadata of the model card.`,name:"tags"},{anchor:"transformers.Trainer.create_model_card.model_name",description:`<strong>model_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The name of the model.`,name:"model_name"},{anchor:"transformers.Trainer.create_model_card.finetuned_from",description:`<strong>finetuned_from</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The name of the model used to fine-tune this one (if applicable). Will default to the name of the repo
of the original model given to the <code>Trainer</code> (if it comes from the Hub).`,name:"finetuned_from"},{anchor:"transformers.Trainer.create_model_card.tasks",description:`<strong>tasks</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>) &#x2014;
One or several task identifiers, to be included in the metadata of the model card.`,name:"tasks"},{anchor:"transformers.Trainer.create_model_card.dataset_tags",description:`<strong>dataset_tags</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>) &#x2014;
One or several dataset tags, to be included in the metadata of the model card.`,name:"dataset_tags"},{anchor:"transformers.Trainer.create_model_card.dataset",description:`<strong>dataset</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>) &#x2014;
One or several dataset identifiers, to be included in the metadata of the model card.`,name:"dataset"},{anchor:"transformers.Trainer.create_model_card.dataset_args",description:`<strong>dataset_args</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>) &#x2014;
One or several dataset arguments, to be included in the metadata of the model card.`,name:"dataset_args"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L3669"}}),Ht=new $({props:{name:"create_optimizer",anchor:"transformers.Trainer.create_optimizer",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L966"}}),Rt=new $({props:{name:"create_optimizer_and_scheduler",anchor:"transformers.Trainer.create_optimizer_and_scheduler",parameters:[{name:"num_training_steps",val:": int"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L939"}}),Et=new $({props:{name:"create_scheduler",anchor:"transformers.Trainer.create_scheduler",parameters:[{name:"num_training_steps",val:": int"},{name:"optimizer",val:": Optimizer = None"}],parametersDescription:[{anchor:"transformers.Trainer.create_scheduler.num_training_steps",description:"<strong>num_training_steps</strong> (int) &#x2014; The number of training steps to do.",name:"num_training_steps"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L1146"}}),Bt=new $({props:{name:"evaluate",anchor:"transformers.Trainer.evaluate",parameters:[{name:"eval_dataset",val:": Union = None"},{name:"ignore_keys",val:": Optional = None"},{name:"metric_key_prefix",val:": str = 'eval'"}],parametersDescription:[{anchor:"transformers.Trainer.evaluate.eval_dataset",description:`<strong>eval_dataset</strong> (Union[<code>Dataset</code>, Dict[str, <code>Dataset</code>]), <em>optional</em>) &#x2014;
Pass a dataset if you wish to override <code>self.eval_dataset</code>. If it is a <code>Dataset</code>, columns
not accepted by the <code>model.forward()</code> method are automatically removed. If it is a dictionary, it will
evaluate on each dataset, prepending the dictionary key to the metric name. Datasets must implement the
<code>__len__</code> method.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>If you pass a dictionary with names of datasets as keys and datasets as values, evaluate will run
separate evaluations on each dataset. This can be useful to monitor how training affects other
datasets or simply to get a more fine-grained evaluation.
When used with <code>load_best_model_at_end</code>, make sure <code>metric_for_best_model</code> references exactly one
of the datasets. If you, for example, pass in <code>{&quot;data1&quot;: data1, &quot;data2&quot;: data2}</code> for two datasets
<code>data1</code> and <code>data2</code>, you could specify <code>metric_for_best_model=&quot;eval_data1_loss&quot;</code> for using the
loss on <code>data1</code> and <code>metric_for_best_model=&quot;eval_data1_loss&quot;</code> for the loss on <code>data2</code>.</p>

					</div>`,name:"eval_dataset"},{anchor:"transformers.Trainer.evaluate.ignore_keys",description:`<strong>ignore_keys</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Trainer.evaluate.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;eval&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;eval_bleu&#x201D; if the prefix is &#x201C;eval&#x201D; (default)`,name:"metric_key_prefix"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L3133",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A dictionary containing the evaluation loss and the potential metrics computed from the predictions. The
dictionary also contains the epoch number which comes from the training state.</p>
`}}),Vt=new $({props:{name:"evaluation_loop",anchor:"transformers.Trainer.evaluation_loop",parameters:[{name:"dataloader",val:": DataLoader"},{name:"description",val:": str"},{name:"prediction_loss_only",val:": Optional = None"},{name:"ignore_keys",val:": Optional = None"},{name:"metric_key_prefix",val:": str = 'eval'"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L3296"}}),Zt=new $({props:{name:"floating_point_ops",anchor:"transformers.Trainer.floating_point_ops",parameters:[{name:"inputs",val:": Dict"}],parametersDescription:[{anchor:"transformers.Trainer.floating_point_ops.inputs",description:`<strong>inputs</strong> (<code>Dict[str, Union[torch.Tensor, Any]]</code>) &#x2014;
The inputs and targets of the model.`,name:"inputs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L3634",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The number of floating-point operations.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>int</code></p>
`}}),Xt=new $({props:{name:"get_decay_parameter_names",anchor:"transformers.Trainer.get_decay_parameter_names",parameters:[{name:"model",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L955"}}),Gt=new $({props:{name:"get_eval_dataloader",anchor:"transformers.Trainer.get_eval_dataloader",parameters:[{name:"eval_dataset",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.Trainer.get_eval_dataloader.eval_dataset",description:`<strong>eval_dataset</strong> (<code>torch.utils.data.Dataset</code>, <em>optional</em>) &#x2014;
If provided, will override <code>self.eval_dataset</code>. If it is a <code>Dataset</code>, columns not accepted
by the <code>model.forward()</code> method are automatically removed. It must implement <code>__len__</code>.`,name:"eval_dataset"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L869"}}),Qt=new $({props:{name:"get_optimizer_cls_and_kwargs",anchor:"transformers.Trainer.get_optimizer_cls_and_kwargs",parameters:[{name:"args",val:": TrainingArguments"}],parametersDescription:[{anchor:"transformers.Trainer.get_optimizer_cls_and_kwargs.args",description:`<strong>args</strong> (<code>transformers.training_args.TrainingArguments</code>) &#x2014;
The training arguments for the training session.`,name:"args"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L1014"}}),Ot=new $({props:{name:"get_test_dataloader",anchor:"transformers.Trainer.get_test_dataloader",parameters:[{name:"test_dataset",val:": Dataset"}],parametersDescription:[{anchor:"transformers.Trainer.get_test_dataloader.test_dataset",description:`<strong>test_dataset</strong> (<code>torch.utils.data.Dataset</code>, <em>optional</em>) &#x2014;
The test dataset to use. If it is a <code>Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed. It must implement <code>__len__</code>.`,name:"test_dataset"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L905"}}),Yt=new $({props:{name:"get_train_dataloader",anchor:"transformers.Trainer.get_train_dataloader",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L812"}}),Kt=new $({props:{name:"hyperparameter_search",anchor:"transformers.Trainer.hyperparameter_search",parameters:[{name:"hp_space",val:": Optional = None"},{name:"compute_objective",val:": Optional = None"},{name:"n_trials",val:": int = 20"},{name:"direction",val:": Union = 'minimize'"},{name:"backend",val:": Union = None"},{name:"hp_name",val:": Optional = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.Trainer.hyperparameter_search.hp_space",description:`<strong>hp_space</strong> (<code>Callable[[&quot;optuna.Trial&quot;], Dict[str, float]]</code>, <em>optional</em>) &#x2014;
A function that defines the hyperparameter search space. Will default to
<code>default_hp_space_optuna()</code> or <code>default_hp_space_ray()</code> or
<code>default_hp_space_sigopt()</code> depending on your backend.`,name:"hp_space"},{anchor:"transformers.Trainer.hyperparameter_search.compute_objective",description:`<strong>compute_objective</strong> (<code>Callable[[Dict[str, float]], float]</code>, <em>optional</em>) &#x2014;
A function computing the objective to minimize or maximize from the metrics returned by the <code>evaluate</code>
method. Will default to <code>default_compute_objective()</code>.`,name:"compute_objective"},{anchor:"transformers.Trainer.hyperparameter_search.n_trials",description:`<strong>n_trials</strong> (<code>int</code>, <em>optional</em>, defaults to 100) &#x2014;
The number of trial runs to test.`,name:"n_trials"},{anchor:"transformers.Trainer.hyperparameter_search.direction",description:`<strong>direction</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>, defaults to <code>&quot;minimize&quot;</code>) &#x2014;
If it&#x2019;s single objective optimization, direction is <code>str</code>, can be <code>&quot;minimize&quot;</code> or <code>&quot;maximize&quot;</code>, you
should pick <code>&quot;minimize&quot;</code> when optimizing the validation loss, <code>&quot;maximize&quot;</code> when optimizing one or
several metrics. If it&#x2019;s multi objectives optimization, direction is <code>List[str]</code>, can be List of
<code>&quot;minimize&quot;</code> and <code>&quot;maximize&quot;</code>, you should pick <code>&quot;minimize&quot;</code> when optimizing the validation loss,
<code>&quot;maximize&quot;</code> when optimizing one or several metrics.`,name:"direction"},{anchor:"transformers.Trainer.hyperparameter_search.backend",description:`<strong>backend</strong> (<code>str</code> or <code>~training_utils.HPSearchBackend</code>, <em>optional</em>) &#x2014;
The backend to use for hyperparameter search. Will default to optuna or Ray Tune or SigOpt, depending
on which one is installed. If all are installed, will default to optuna.`,name:"backend"},{anchor:"transformers.Trainer.hyperparameter_search.hp_name",description:`<strong>hp_name</strong> (<code>Callable[[&quot;optuna.Trial&quot;], str]]</code>, <em>optional</em>) &#x2014;
A function that defines the trial/run name. Will default to None.`,name:"hp_name"},{anchor:"transformers.Trainer.hyperparameter_search.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
Additional keyword arguments passed along to <code>optuna.create_study</code> or <code>ray.tune.run</code>. For more
information see:</p>
<ul>
<li>the documentation of
<a href="https://optuna.readthedocs.io/en/stable/reference/generated/optuna.study.create_study.html" rel="nofollow">optuna.create_study</a></li>
<li>the documentation of <a href="https://docs.ray.io/en/latest/tune/api_docs/execution.html#tune-run" rel="nofollow">tune.run</a></li>
<li>the documentation of <a href="https://app.sigopt.com/docs/endpoints/experiments/create" rel="nofollow">sigopt</a></li>
</ul>`,name:"kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L2697",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>All the information about the best run or best
runs for multi-objective optimization. Experiment summary can be found in <code>run_summary</code> attribute for Ray
backend.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>[<code>trainer_utils.BestRun</code> or <code>List[trainer_utils.BestRun]</code>]</p>
`}}),De=new jt({props:{warning:!0,$$slots:{default:[Jb]},$$scope:{ctx:C}}}),eo=new $({props:{name:"init_hf_repo",anchor:"transformers.Trainer.init_hf_repo",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L3652"}}),to=new $({props:{name:"is_local_process_zero",anchor:"transformers.Trainer.is_local_process_zero",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L2923"}}),oo=new $({props:{name:"is_world_process_zero",anchor:"transformers.Trainer.is_world_process_zero",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L2930"}}),no=new $({props:{name:"log",anchor:"transformers.Trainer.log",parameters:[{name:"logs",val:": Dict"}],parametersDescription:[{anchor:"transformers.Trainer.log.logs",description:`<strong>logs</strong> (<code>Dict[str, float]</code>) &#x2014;
The values to log.`,name:"logs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L2776"}}),ao=new $({props:{name:"log_metrics",anchor:"transformers.Trainer.log_metrics",parameters:[{name:"split",val:""},{name:"metrics",val:""}],parametersDescription:[{anchor:"transformers.Trainer.log_metrics.split",description:`<strong>split</strong> (<code>str</code>) &#x2014;
Mode/split name: one of <code>train</code>, <code>eval</code>, <code>test</code>`,name:"split"},{anchor:"transformers.Trainer.log_metrics.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics returned from train/evaluate/predictmetrics: metrics dict`,name:"metrics"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer_pt_utils.py#L907"}}),Be=new Me({props:{anchor:"transformers.Trainer.log_metrics.example",$$slots:{default:[Ib]},$$scope:{ctx:C}}}),ro=new $({props:{name:"metrics_format",anchor:"transformers.Trainer.metrics_format",parameters:[{name:"metrics",val:": Dict"}],parametersDescription:[{anchor:"transformers.Trainer.metrics_format.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics returned from train/evaluate/predict`,name:"metrics"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer_pt_utils.py#L881",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The reformatted metrics</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>metrics (<code>Dict[str, float]</code>)</p>
`}}),so=new $({props:{name:"num_examples",anchor:"transformers.Trainer.num_examples",parameters:[{name:"dataloader",val:": DataLoader"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L1165"}}),io=new $({props:{name:"num_tokens",anchor:"transformers.Trainer.num_tokens",parameters:[{name:"train_dl",val:": DataLoader"},{name:"max_steps",val:": Optional = None"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L1179"}}),lo=new $({props:{name:"pop_callback",anchor:"transformers.Trainer.pop_callback",parameters:[{name:"callback",val:""}],parametersDescription:[{anchor:"transformers.Trainer.pop_callback.callback",description:`<strong>callback</strong> (<code>type</code> or <a href="/docs/transformers/main/ja/main_classes/callback#transformers.TrainerCallback">TrainerCallback</a>) &#x2014;
A <a href="/docs/transformers/main/ja/main_classes/callback#transformers.TrainerCallback">TrainerCallback</a> class or an instance of a <a href="/docs/transformers/main/ja/main_classes/callback#transformers.TrainerCallback">TrainerCallback</a>. In the
first case, will pop the first member of that class found in the list of callbacks.`,name:"callback"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L695",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The callback removed, if found.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/transformers/main/ja/main_classes/callback#transformers.TrainerCallback"
>TrainerCallback</a></p>
`}}),co=new $({props:{name:"predict",anchor:"transformers.Trainer.predict",parameters:[{name:"test_dataset",val:": Dataset"},{name:"ignore_keys",val:": Optional = None"},{name:"metric_key_prefix",val:": str = 'test'"}],parametersDescription:[{anchor:"transformers.Trainer.predict.test_dataset",description:`<strong>test_dataset</strong> (<code>Dataset</code>) &#x2014;
Dataset to run the predictions on. If it is an <code>datasets.Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed. Has to implement the method <code>__len__</code>`,name:"test_dataset"},{anchor:"transformers.Trainer.predict.ignore_keys",description:`<strong>ignore_keys</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Trainer.predict.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;test&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;test_bleu&#x201D; if the prefix is &#x201C;test&#x201D; (default)`,name:"metric_key_prefix"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L3234"}}),Ge=new jt({props:{$$slots:{default:[Ub]},$$scope:{ctx:C}}}),mo=new $({props:{name:"prediction_loop",anchor:"transformers.Trainer.prediction_loop",parameters:[{name:"dataloader",val:": DataLoader"},{name:"description",val:": str"},{name:"prediction_loss_only",val:": Optional = None"},{name:"ignore_keys",val:": Optional = None"},{name:"metric_key_prefix",val:": str = 'eval'"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L3874"}}),po=new $({props:{name:"prediction_step",anchor:"transformers.Trainer.prediction_step",parameters:[{name:"model",val:": Module"},{name:"inputs",val:": Dict"},{name:"prediction_loss_only",val:": bool"},{name:"ignore_keys",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.Trainer.prediction_step.model",description:`<strong>model</strong> (<code>nn.Module</code>) &#x2014;
The model to evaluate.`,name:"model"},{anchor:"transformers.Trainer.prediction_step.inputs",description:`<strong>inputs</strong> (<code>Dict[str, Union[torch.Tensor, Any]]</code>) &#x2014;
The inputs and targets of the model.</p>
<p>The dictionary will be unpacked before being fed to the model. Most models expect the targets under the
argument <code>labels</code>. Check your model&#x2019;s documentation for all accepted arguments.`,name:"inputs"},{anchor:"transformers.Trainer.prediction_step.prediction_loss_only",description:`<strong>prediction_loss_only</strong> (<code>bool</code>) &#x2014;
Whether or not to return the loss only.`,name:"prediction_loss_only"},{anchor:"transformers.Trainer.prediction_step.ignore_keys",description:`<strong>ignore_keys</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L3529",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A tuple with the loss,
logits and labels (each being optional).</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Tuple[Optional[torch.Tensor], Optional[torch.Tensor], Optional[torch.Tensor]]</p>
`}}),uo=new $({props:{name:"propagate_args_to_deepspeed",anchor:"transformers.Trainer.propagate_args_to_deepspeed",parameters:[{name:"auto_find_batch_size",val:" = False"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L4144"}}),ho=new $({props:{name:"push_to_hub",anchor:"transformers.Trainer.push_to_hub",parameters:[{name:"commit_message",val:": Optional = 'End of training'"},{name:"blocking",val:": bool = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.Trainer.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;End of training&quot;</code>) &#x2014;
Message to commit while pushing.`,name:"commit_message"},{anchor:"transformers.Trainer.push_to_hub.blocking",description:`<strong>blocking</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether the function should return only when the <code>git push</code> has finished.`,name:"blocking"},{anchor:"transformers.Trainer.push_to_hub.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
Additional keyword arguments passed along to <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer.create_model_card">create_model_card()</a>.`,name:"kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L3807",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The URL of the repository where the model was pushed if <code>blocking=False</code>, or a <code>Future</code> object tracking the
progress of the commit if <code>blocking=True</code>.</p>
`}}),go=new $({props:{name:"remove_callback",anchor:"transformers.Trainer.remove_callback",parameters:[{name:"callback",val:""}],parametersDescription:[{anchor:"transformers.Trainer.remove_callback.callback",description:`<strong>callback</strong> (<code>type</code> or <a href="/docs/transformers/main/ja/main_classes/callback#transformers.TrainerCallback">TrainerCallback</a>) &#x2014;
A <a href="/docs/transformers/main/ja/main_classes/callback#transformers.TrainerCallback">TrainerCallback</a> class or an instance of a <a href="/docs/transformers/main/ja/main_classes/callback#transformers.TrainerCallback">TrainerCallback</a>. In the
first case, will remove the first member of that class found in the list of callbacks.`,name:"callback"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L711"}}),fo=new $({props:{name:"save_metrics",anchor:"transformers.Trainer.save_metrics",parameters:[{name:"split",val:""},{name:"metrics",val:""},{name:"combined",val:" = True"}],parametersDescription:[{anchor:"transformers.Trainer.save_metrics.split",description:`<strong>split</strong> (<code>str</code>) &#x2014;
Mode/split name: one of <code>train</code>, <code>eval</code>, <code>test</code>, <code>all</code>`,name:"split"},{anchor:"transformers.Trainer.save_metrics.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics returned from train/evaluate/predict`,name:"metrics"},{anchor:"transformers.Trainer.save_metrics.combined",description:`<strong>combined</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Creates combined metrics by updating <code>all_results.json</code> with metrics of this call`,name:"combined"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer_pt_utils.py#L997"}}),_o=new $({props:{name:"save_model",anchor:"transformers.Trainer.save_model",parameters:[{name:"output_dir",val:": Optional = None"},{name:"_internal_call",val:": bool = False"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L2942"}}),bo=new $({props:{name:"save_state",anchor:"transformers.Trainer.save_state",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer_pt_utils.py#L1035"}}),vo=new $({props:{name:"train",anchor:"transformers.Trainer.train",parameters:[{name:"resume_from_checkpoint",val:": Union = None"},{name:"trial",val:": Union = None"},{name:"ignore_keys_for_eval",val:": Optional = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.Trainer.train.resume_from_checkpoint",description:`<strong>resume_from_checkpoint</strong> (<code>str</code> or <code>bool</code>, <em>optional</em>) &#x2014;
If a <code>str</code>, local path to a saved checkpoint as saved by a previous instance of <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>. If a
<code>bool</code> and equals <code>True</code>, load the last checkpoint in <em>args.output_dir</em> as saved by a previous instance
of <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>. If present, training will resume from the model/optimizer/scheduler states loaded here.`,name:"resume_from_checkpoint"},{anchor:"transformers.Trainer.train.trial",description:`<strong>trial</strong> (<code>optuna.Trial</code> or <code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The trial run or the hyperparameter dictionary for hyperparameter search.`,name:"trial"},{anchor:"transformers.Trainer.train.ignore_keys_for_eval",description:`<strong>ignore_keys_for_eval</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions for evaluation during the training.`,name:"ignore_keys_for_eval"},{anchor:"transformers.Trainer.train.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
Additional keyword arguments used to hide deprecated arguments`,name:"kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L1505"}}),To=new $({props:{name:"training_step",anchor:"transformers.Trainer.training_step",parameters:[{name:"model",val:": Module"},{name:"inputs",val:": Dict"}],parametersDescription:[{anchor:"transformers.Trainer.training_step.model",description:`<strong>model</strong> (<code>nn.Module</code>) &#x2014;
The model to train.`,name:"model"},{anchor:"transformers.Trainer.training_step.inputs",description:`<strong>inputs</strong> (<code>Dict[str, Union[torch.Tensor, Any]]</code>) &#x2014;
The inputs and targets of the model.</p>
<p>The dictionary will be unpacked before being fed to the model. Most models expect the targets under the
argument <code>labels</code>. Check your model&#x2019;s documentation for all accepted arguments.`,name:"inputs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer.py#L2847",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The tensor with training loss on this batch.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>torch.Tensor</code></p>
`}}),yo=new P({props:{title:"Seq2SeqTrainer",local:"transformers.Seq2SeqTrainer",headingTag:"h2"}}),wo=new $({props:{name:"class transformers.Seq2SeqTrainer",anchor:"transformers.Seq2SeqTrainer",parameters:[{name:"model",val:": Union = None"},{name:"args",val:": TrainingArguments = None"},{name:"data_collator",val:": Optional = None"},{name:"train_dataset",val:": Optional = None"},{name:"eval_dataset",val:": Union = None"},{name:"tokenizer",val:": Optional = None"},{name:"model_init",val:": Optional = None"},{name:"compute_metrics",val:": Optional = None"},{name:"callbacks",val:": Optional = None"},{name:"optimizers",val:": Tuple = (None, None)"},{name:"preprocess_logits_for_metrics",val:": Optional = None"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer_seq2seq.py#L41"}}),xo=new $({props:{name:"evaluate",anchor:"transformers.Seq2SeqTrainer.evaluate",parameters:[{name:"eval_dataset",val:": Optional = None"},{name:"ignore_keys",val:": Optional = None"},{name:"metric_key_prefix",val:": str = 'eval'"},{name:"**gen_kwargs",val:""}],parametersDescription:[{anchor:"transformers.Seq2SeqTrainer.evaluate.eval_dataset",description:`<strong>eval_dataset</strong> (<code>Dataset</code>, <em>optional</em>) &#x2014;
Pass a dataset if you wish to override <code>self.eval_dataset</code>. If it is an <code>Dataset</code>, columns
not accepted by the <code>model.forward()</code> method are automatically removed. It must implement the <code>__len__</code>
method.`,name:"eval_dataset"},{anchor:"transformers.Seq2SeqTrainer.evaluate.ignore_keys",description:`<strong>ignore_keys</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Seq2SeqTrainer.evaluate.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;eval&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;eval_bleu&#x201D; if the prefix is <code>&quot;eval&quot;</code> (default)`,name:"metric_key_prefix"},{anchor:"transformers.Seq2SeqTrainer.evaluate.max_length",description:`<strong>max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The maximum target length to use when predicting with the generate method.`,name:"max_length"},{anchor:"transformers.Seq2SeqTrainer.evaluate.num_beams",description:`<strong>num_beams</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of beams for beam search that will be used when predicting with the generate method. 1 means no
beam search.
gen_kwargs &#x2014;
Additional <code>generate</code> specific kwargs.`,name:"num_beams"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer_seq2seq.py#L112",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A dictionary containing the evaluation loss and the potential metrics computed from the predictions. The
dictionary also contains the epoch number which comes from the training state.</p>
`}}),Mo=new $({props:{name:"predict",anchor:"transformers.Seq2SeqTrainer.predict",parameters:[{name:"test_dataset",val:": Dataset"},{name:"ignore_keys",val:": Optional = None"},{name:"metric_key_prefix",val:": str = 'test'"},{name:"**gen_kwargs",val:""}],parametersDescription:[{anchor:"transformers.Seq2SeqTrainer.predict.test_dataset",description:`<strong>test_dataset</strong> (<code>Dataset</code>) &#x2014;
Dataset to run the predictions on. If it is a <code>Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed. Has to implement the method <code>__len__</code>`,name:"test_dataset"},{anchor:"transformers.Seq2SeqTrainer.predict.ignore_keys",description:`<strong>ignore_keys</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Seq2SeqTrainer.predict.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;eval&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;eval_bleu&#x201D; if the prefix is <code>&quot;eval&quot;</code> (default)`,name:"metric_key_prefix"},{anchor:"transformers.Seq2SeqTrainer.predict.max_length",description:`<strong>max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The maximum target length to use when predicting with the generate method.`,name:"max_length"},{anchor:"transformers.Seq2SeqTrainer.predict.num_beams",description:`<strong>num_beams</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of beams for beam search that will be used when predicting with the generate method. 1 means no
beam search.
gen_kwargs &#x2014;
Additional <code>generate</code> specific kwargs.`,name:"num_beams"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/trainer_seq2seq.py#L168"}}),et=new jt({props:{$$slots:{default:[Sb]},$$scope:{ctx:C}}}),$o=new P({props:{title:"TrainingArguments",local:"transformers.TrainingArguments",headingTag:"h2"}}),ko=new $({props:{name:"class transformers.TrainingArguments",anchor:"transformers.TrainingArguments",parameters:[{name:"output_dir",val:": str"},{name:"overwrite_output_dir",val:": bool = False"},{name:"do_train",val:": bool = False"},{name:"do_eval",val:": bool = False"},{name:"do_predict",val:": bool = False"},{name:"evaluation_strategy",val:": Union = 'no'"},{name:"prediction_loss_only",val:": bool = False"},{name:"per_device_train_batch_size",val:": int = 8"},{name:"per_device_eval_batch_size",val:": int = 8"},{name:"per_gpu_train_batch_size",val:": Optional = None"},{name:"per_gpu_eval_batch_size",val:": Optional = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"eval_accumulation_steps",val:": Optional = None"},{name:"eval_delay",val:": Optional = 0"},{name:"learning_rate",val:": float = 5e-05"},{name:"weight_decay",val:": float = 0.0"},{name:"adam_beta1",val:": float = 0.9"},{name:"adam_beta2",val:": float = 0.999"},{name:"adam_epsilon",val:": float = 1e-08"},{name:"max_grad_norm",val:": float = 1.0"},{name:"num_train_epochs",val:": float = 3.0"},{name:"max_steps",val:": int = -1"},{name:"lr_scheduler_type",val:": Union = 'linear'"},{name:"lr_scheduler_kwargs",val:": Optional = <factory>"},{name:"warmup_ratio",val:": float = 0.0"},{name:"warmup_steps",val:": int = 0"},{name:"log_level",val:": Optional = 'passive'"},{name:"log_level_replica",val:": Optional = 'warning'"},{name:"log_on_each_node",val:": bool = True"},{name:"logging_dir",val:": Optional = None"},{name:"logging_strategy",val:": Union = 'steps'"},{name:"logging_first_step",val:": bool = False"},{name:"logging_steps",val:": float = 500"},{name:"logging_nan_inf_filter",val:": bool = True"},{name:"save_strategy",val:": Union = 'steps'"},{name:"save_steps",val:": float = 500"},{name:"save_total_limit",val:": Optional = None"},{name:"save_safetensors",val:": Optional = True"},{name:"save_on_each_node",val:": bool = False"},{name:"save_only_model",val:": bool = False"},{name:"no_cuda",val:": bool = False"},{name:"use_cpu",val:": bool = False"},{name:"use_mps_device",val:": bool = False"},{name:"seed",val:": int = 42"},{name:"data_seed",val:": Optional = None"},{name:"jit_mode_eval",val:": bool = False"},{name:"use_ipex",val:": bool = False"},{name:"bf16",val:": bool = False"},{name:"fp16",val:": bool = False"},{name:"fp16_opt_level",val:": str = 'O1'"},{name:"half_precision_backend",val:": str = 'auto'"},{name:"bf16_full_eval",val:": bool = False"},{name:"fp16_full_eval",val:": bool = False"},{name:"tf32",val:": Optional = None"},{name:"local_rank",val:": int = -1"},{name:"ddp_backend",val:": Optional = None"},{name:"tpu_num_cores",val:": Optional = None"},{name:"tpu_metrics_debug",val:": bool = False"},{name:"debug",val:": Union = ''"},{name:"dataloader_drop_last",val:": bool = False"},{name:"eval_steps",val:": Optional = None"},{name:"dataloader_num_workers",val:": int = 0"},{name:"dataloader_prefetch_factor",val:": int = None"},{name:"past_index",val:": int = -1"},{name:"run_name",val:": Optional = None"},{name:"disable_tqdm",val:": Optional = None"},{name:"remove_unused_columns",val:": Optional = True"},{name:"label_names",val:": Optional = None"},{name:"load_best_model_at_end",val:": Optional = False"},{name:"metric_for_best_model",val:": Optional = None"},{name:"greater_is_better",val:": Optional = None"},{name:"ignore_data_skip",val:": bool = False"},{name:"fsdp",val:": Union = ''"},{name:"fsdp_min_num_params",val:": int = 0"},{name:"fsdp_config",val:": Union = None"},{name:"fsdp_transformer_layer_cls_to_wrap",val:": Optional = None"},{name:"accelerator_config",val:": Optional = None"},{name:"deepspeed",val:": Optional = None"},{name:"label_smoothing_factor",val:": float = 0.0"},{name:"optim",val:": Union = 'adamw_torch'"},{name:"optim_args",val:": Optional = None"},{name:"adafactor",val:": bool = False"},{name:"group_by_length",val:": bool = False"},{name:"length_column_name",val:": Optional = 'length'"},{name:"report_to",val:": Optional = None"},{name:"ddp_find_unused_parameters",val:": Optional = None"},{name:"ddp_bucket_cap_mb",val:": Optional = None"},{name:"ddp_broadcast_buffers",val:": Optional = None"},{name:"dataloader_pin_memory",val:": bool = True"},{name:"dataloader_persistent_workers",val:": bool = False"},{name:"skip_memory_metrics",val:": bool = True"},{name:"use_legacy_prediction_loop",val:": bool = False"},{name:"push_to_hub",val:": bool = False"},{name:"resume_from_checkpoint",val:": Optional = None"},{name:"hub_model_id",val:": Optional = None"},{name:"hub_strategy",val:": Union = 'every_save'"},{name:"hub_token",val:": Optional = None"},{name:"hub_private_repo",val:": bool = False"},{name:"hub_always_push",val:": bool = False"},{name:"gradient_checkpointing",val:": bool = False"},{name:"gradient_checkpointing_kwargs",val:": Optional = None"},{name:"include_inputs_for_metrics",val:": bool = False"},{name:"fp16_backend",val:": str = 'auto'"},{name:"push_to_hub_model_id",val:": Optional = None"},{name:"push_to_hub_organization",val:": Optional = None"},{name:"push_to_hub_token",val:": Optional = None"},{name:"mp_parameters",val:": str = ''"},{name:"auto_find_batch_size",val:": bool = False"},{name:"full_determinism",val:": bool = False"},{name:"torchdynamo",val:": Optional = None"},{name:"ray_scope",val:": Optional = 'last'"},{name:"ddp_timeout",val:": Optional = 1800"},{name:"torch_compile",val:": bool = False"},{name:"torch_compile_backend",val:": Optional = None"},{name:"torch_compile_mode",val:": Optional = None"},{name:"dispatch_batches",val:": Optional = None"},{name:"split_batches",val:": Optional = None"},{name:"include_tokens_per_second",val:": Optional = False"},{name:"include_num_input_tokens_seen",val:": Optional = False"},{name:"neftune_noise_alpha",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.TrainingArguments.output_dir",description:`<strong>output_dir</strong> (<code>str</code>) &#x2014;
The output directory where the model predictions and checkpoints will be written.`,name:"output_dir"},{anchor:"transformers.TrainingArguments.overwrite_output_dir",description:`<strong>overwrite_output_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, overwrite the content of the output directory. Use this to continue training if <code>output_dir</code>
points to a checkpoint directory.`,name:"overwrite_output_dir"},{anchor:"transformers.TrainingArguments.do_train",description:`<strong>do_train</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to run training or not. This argument is not directly used by <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used
by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/main/examples" rel="nofollow">example
scripts</a> for more details.`,name:"do_train"},{anchor:"transformers.TrainingArguments.do_eval",description:`<strong>do_eval</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to run evaluation on the validation set or not. Will be set to <code>True</code> if <code>evaluation_strategy</code> is
different from <code>&quot;no&quot;</code>. This argument is not directly used by <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your
training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/main/examples" rel="nofollow">example
scripts</a> for more details.`,name:"do_eval"},{anchor:"transformers.TrainingArguments.do_predict",description:`<strong>do_predict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to run predictions on the test set or not. This argument is not directly used by <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s
intended to be used by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/main/examples" rel="nofollow">example
scripts</a> for more details.`,name:"do_predict"},{anchor:"transformers.TrainingArguments.evaluation_strategy",description:`<strong>evaluation_strategy</strong> (<code>str</code> or <a href="/docs/transformers/main/ja/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;no&quot;</code>) &#x2014;
The evaluation strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No evaluation is done during training.</li>
<li><code>&quot;steps&quot;</code>: Evaluation is done (and logged) every <code>eval_steps</code>.</li>
<li><code>&quot;epoch&quot;</code>: Evaluation is done at the end of each epoch.</li>
</ul>`,name:"evaluation_strategy"},{anchor:"transformers.TrainingArguments.prediction_loss_only",description:`<strong>prediction_loss_only</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When performing evaluation and generating predictions, only returns the loss.`,name:"prediction_loss_only"},{anchor:"transformers.TrainingArguments.per_device_train_batch_size",description:`<strong>per_device_train_batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The batch size per GPU/XPU/TPU/MPS/NPU core/CPU for training.`,name:"per_device_train_batch_size"},{anchor:"transformers.TrainingArguments.per_device_eval_batch_size",description:`<strong>per_device_eval_batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The batch size per GPU/XPU/TPU/MPS/NPU core/CPU for evaluation.`,name:"per_device_eval_batch_size"},{anchor:"transformers.TrainingArguments.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Number of updates steps to accumulate the gradients for, before performing a backward/update pass.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>When using gradient accumulation, one step is counted as one step with backward pass. Therefore, logging,
evaluation, save will be conducted every <code>gradient_accumulation_steps * xxx_step</code> training examples.</p>

					</div>`,name:"gradient_accumulation_steps"},{anchor:"transformers.TrainingArguments.eval_accumulation_steps",description:`<strong>eval_accumulation_steps</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of predictions steps to accumulate the output tensors for, before moving the results to the CPU. If
left unset, the whole predictions are accumulated on GPU/NPU/TPU before being moved to the CPU (faster but
requires more memory).`,name:"eval_accumulation_steps"},{anchor:"transformers.TrainingArguments.eval_delay",description:`<strong>eval_delay</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Number of epochs or steps to wait for before the first evaluation can be performed, depending on the
evaluation_strategy.`,name:"eval_delay"},{anchor:"transformers.TrainingArguments.learning_rate",description:`<strong>learning_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 5e-5) &#x2014;
The initial learning rate for <a href="/docs/transformers/main/ja/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"learning_rate"},{anchor:"transformers.TrainingArguments.weight_decay",description:`<strong>weight_decay</strong> (<code>float</code>, <em>optional</em>, defaults to 0) &#x2014;
The weight decay to apply (if not zero) to all layers except all bias and LayerNorm weights in <a href="/docs/transformers/main/ja/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a>
optimizer.`,name:"weight_decay"},{anchor:"transformers.TrainingArguments.adam_beta1",description:`<strong>adam_beta1</strong> (<code>float</code>, <em>optional</em>, defaults to 0.9) &#x2014;
The beta1 hyperparameter for the <a href="/docs/transformers/main/ja/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_beta1"},{anchor:"transformers.TrainingArguments.adam_beta2",description:`<strong>adam_beta2</strong> (<code>float</code>, <em>optional</em>, defaults to 0.999) &#x2014;
The beta2 hyperparameter for the <a href="/docs/transformers/main/ja/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_beta2"},{anchor:"transformers.TrainingArguments.adam_epsilon",description:`<strong>adam_epsilon</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-8) &#x2014;
The epsilon hyperparameter for the <a href="/docs/transformers/main/ja/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_epsilon"},{anchor:"transformers.TrainingArguments.max_grad_norm",description:`<strong>max_grad_norm</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Maximum gradient norm (for gradient clipping).`,name:"max_grad_norm"},{anchor:"transformers.TrainingArguments.num_train_epochs(float,",description:`<strong>num_train_epochs(<code>float</code>,</strong> <em>optional</em>, defaults to 3.0) &#x2014;
Total number of training epochs to perform (if not an integer, will perform the decimal part percents of
the last epoch before stopping training).`,name:"num_train_epochs(float,"},{anchor:"transformers.TrainingArguments.max_steps",description:`<strong>max_steps</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
If set to a positive number, the total number of training steps to perform. Overrides <code>num_train_epochs</code>.
For a finite dataset, training is reiterated through the dataset (if all data is exhausted) until
<code>max_steps</code> is reached.`,name:"max_steps"},{anchor:"transformers.TrainingArguments.lr_scheduler_type",description:`<strong>lr_scheduler_type</strong> (<code>str</code> or <a href="/docs/transformers/main/ja/main_classes/optimizer_schedules#transformers.SchedulerType">SchedulerType</a>, <em>optional</em>, defaults to <code>&quot;linear&quot;</code>) &#x2014;
The scheduler type to use. See the documentation of <a href="/docs/transformers/main/ja/main_classes/optimizer_schedules#transformers.SchedulerType">SchedulerType</a> for all possible values.`,name:"lr_scheduler_type"},{anchor:"transformers.TrainingArguments.lr_scheduler_kwargs",description:`<strong>lr_scheduler_kwargs</strong> (&#x2018;dict&#x2019;, <em>optional</em>, defaults to {}) &#x2014;
The extra arguments for the lr_scheduler. See the documentation of each scheduler for possible values.`,name:"lr_scheduler_kwargs"},{anchor:"transformers.TrainingArguments.warmup_ratio",description:`<strong>warmup_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
Ratio of total training steps used for a linear warmup from 0 to <code>learning_rate</code>.`,name:"warmup_ratio"},{anchor:"transformers.TrainingArguments.warmup_steps",description:`<strong>warmup_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of steps used for a linear warmup from 0 to <code>learning_rate</code>. Overrides any effect of <code>warmup_ratio</code>.`,name:"warmup_steps"},{anchor:"transformers.TrainingArguments.log_level",description:`<strong>log_level</strong> (<code>str</code>, <em>optional</em>, defaults to <code>passive</code>) &#x2014;
Logger log level to use on the main process. Possible choices are the log levels as strings: &#x2018;debug&#x2019;,
&#x2018;info&#x2019;, &#x2018;warning&#x2019;, &#x2018;error&#x2019; and &#x2018;critical&#x2019;, plus a &#x2018;passive&#x2019; level which doesn&#x2019;t set anything and keeps the
current log level for the Transformers library (which will be <code>&quot;warning&quot;</code> by default).`,name:"log_level"},{anchor:"transformers.TrainingArguments.log_level_replica",description:`<strong>log_level_replica</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;warning&quot;</code>) &#x2014;
Logger log level to use on replicas. Same choices as <code>log_level</code>&#x201D;`,name:"log_level_replica"},{anchor:"transformers.TrainingArguments.log_on_each_node",description:`<strong>log_on_each_node</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
In multinode distributed training, whether to log using <code>log_level</code> once per node, or only on the main
node.`,name:"log_on_each_node"},{anchor:"transformers.TrainingArguments.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <em>optional</em>) &#x2014;
<a href="https://www.tensorflow.org/tensorboard" rel="nofollow">TensorBoard</a> log directory. Will default to
*output_dir/runs/<strong>CURRENT_DATETIME_HOSTNAME*</strong>.`,name:"logging_dir"},{anchor:"transformers.TrainingArguments.logging_strategy",description:`<strong>logging_strategy</strong> (<code>str</code> or <a href="/docs/transformers/main/ja/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;steps&quot;</code>) &#x2014;
The logging strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No logging is done during training.</li>
<li><code>&quot;epoch&quot;</code>: Logging is done at the end of each epoch.</li>
<li><code>&quot;steps&quot;</code>: Logging is done every <code>logging_steps</code>.</li>
</ul>`,name:"logging_strategy"},{anchor:"transformers.TrainingArguments.logging_first_step",description:`<strong>logging_first_step</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to log the first <code>global_step</code> or not.`,name:"logging_first_step"},{anchor:"transformers.TrainingArguments.logging_steps",description:`<strong>logging_steps</strong> (<code>int</code> or <code>float</code>, <em>optional</em>, defaults to 500) &#x2014;
Number of update steps between two logs if <code>logging_strategy=&quot;steps&quot;</code>. Should be an integer or a float in
range <code>[0,1)</code>. If smaller than 1, will be interpreted as ratio of total training steps.`,name:"logging_steps"},{anchor:"transformers.TrainingArguments.logging_nan_inf_filter",description:`<strong>logging_nan_inf_filter</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to filter <code>nan</code> and <code>inf</code> losses for logging. If set to <code>True</code> the loss of every step that is <code>nan</code>
or <code>inf</code> is filtered and the average loss of the current logging window is taken instead.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p><code>logging_nan_inf_filter</code> only influences the logging of loss values, it does not change the behavior the
gradient is computed or applied to the model.</p>

					</div>`,name:"logging_nan_inf_filter"},{anchor:"transformers.TrainingArguments.save_strategy",description:`<strong>save_strategy</strong> (<code>str</code> or <a href="/docs/transformers/main/ja/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;steps&quot;</code>) &#x2014;
The checkpoint save strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No save is done during training.</li>
<li><code>&quot;epoch&quot;</code>: Save is done at the end of each epoch.</li>
<li><code>&quot;steps&quot;</code>: Save is done every <code>save_steps</code>.</li>
</ul>`,name:"save_strategy"},{anchor:"transformers.TrainingArguments.save_steps",description:`<strong>save_steps</strong> (<code>int</code> or <code>float</code>, <em>optional</em>, defaults to 500) &#x2014;
Number of updates steps before two checkpoint saves if <code>save_strategy=&quot;steps&quot;</code>. Should be an integer or a
float in range <code>[0,1)</code>. If smaller than 1, will be interpreted as ratio of total training steps.`,name:"save_steps"},{anchor:"transformers.TrainingArguments.save_total_limit",description:`<strong>save_total_limit</strong> (<code>int</code>, <em>optional</em>) &#x2014;
If a value is passed, will limit the total amount of checkpoints. Deletes the older checkpoints in
<code>output_dir</code>. When <code>load_best_model_at_end</code> is enabled, the &#x201C;best&#x201D; checkpoint according to
<code>metric_for_best_model</code> will always be retained in addition to the most recent ones. For example, for
<code>save_total_limit=5</code> and <code>load_best_model_at_end</code>, the four last checkpoints will always be retained
alongside the best model. When <code>save_total_limit=1</code> and <code>load_best_model_at_end</code>, it is possible that two
checkpoints are saved: the last one and the best one (if they are different).`,name:"save_total_limit"},{anchor:"transformers.TrainingArguments.save_safetensors",description:`<strong>save_safetensors</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Use <a href="https://huggingface.co/docs/safetensors" rel="nofollow">safetensors</a> saving and loading for state dicts instead of
default <code>torch.load</code> and <code>torch.save</code>.`,name:"save_safetensors"},{anchor:"transformers.TrainingArguments.save_on_each_node",description:`<strong>save_on_each_node</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When doing multi-node distributed training, whether to save models and checkpoints on each node, or only on
the main one.</p>
<p>This should not be activated when the different nodes use the same storage as the files will be saved with
the same names for each node.`,name:"save_on_each_node"},{anchor:"transformers.TrainingArguments.save_only_model",description:`<strong>save_only_model</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When checkpointing, whether to only save the model, or also the optimizer, scheduler &amp; rng state.
Note that when this is true, you won&#x2019;t be able to resume training from checkpoint.
This enables you to save storage by not storing the optimizer, scheduler &amp; rng state.
You can only load the model using <code>from_pretrained</code> with this option set to <code>True</code>.`,name:"save_only_model"},{anchor:"transformers.TrainingArguments.use_cpu",description:`<strong>use_cpu</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to use cpu. If set to False, we will use cuda or mps device if available.`,name:"use_cpu"},{anchor:"transformers.TrainingArguments.seed",description:`<strong>seed</strong> (<code>int</code>, <em>optional</em>, defaults to 42) &#x2014;
Random seed that will be set at the beginning of training. To ensure reproducibility across runs, use the
<code>~Trainer.model_init</code> function to instantiate the model if it has some randomly initialized parameters.`,name:"seed"},{anchor:"transformers.TrainingArguments.data_seed",description:`<strong>data_seed</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Random seed to be used with data samplers. If not set, random generators for data sampling will use the
same seed as <code>seed</code>. This can be used to ensure reproducibility of data sampling, independent of the model
seed.`,name:"data_seed"},{anchor:"transformers.TrainingArguments.jit_mode_eval",description:`<strong>jit_mode_eval</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to use PyTorch jit trace for inference.`,name:"jit_mode_eval"},{anchor:"transformers.TrainingArguments.use_ipex",description:`<strong>use_ipex</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Use Intel extension for PyTorch when it is available. <a href="https://github.com/intel/intel-extension-for-pytorch" rel="nofollow">IPEX
installation</a>.`,name:"use_ipex"},{anchor:"transformers.TrainingArguments.bf16",description:`<strong>bf16</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use bf16 16-bit (mixed) precision training instead of 32-bit training. Requires Ampere or higher
NVIDIA architecture or using CPU (use_cpu) or Ascend NPU. This is an experimental API and it may change.`,name:"bf16"},{anchor:"transformers.TrainingArguments.fp16",description:`<strong>fp16</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use fp16 16-bit (mixed) precision training instead of 32-bit training.`,name:"fp16"},{anchor:"transformers.TrainingArguments.fp16_opt_level",description:`<strong>fp16_opt_level</strong> (<code>str</code>, <em>optional</em>, defaults to &#x2018;O1&#x2019;) &#x2014;
For <code>fp16</code> training, Apex AMP optimization level selected in [&#x2018;O0&#x2019;, &#x2018;O1&#x2019;, &#x2018;O2&#x2019;, and &#x2018;O3&#x2019;]. See details on
the <a href="https://nvidia.github.io/apex/amp" rel="nofollow">Apex documentation</a>.`,name:"fp16_opt_level"},{anchor:"transformers.TrainingArguments.fp16_backend",description:`<strong>fp16_backend</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
This argument is deprecated. Use <code>half_precision_backend</code> instead.`,name:"fp16_backend"},{anchor:"transformers.TrainingArguments.half_precision_backend",description:`<strong>half_precision_backend</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
The backend to use for mixed precision training. Must be one of <code>&quot;auto&quot;, &quot;apex&quot;, &quot;cpu_amp&quot;</code>. <code>&quot;auto&quot;</code> will
use CPU/CUDA AMP or APEX depending on the PyTorch version detected, while the other choices will force the
requested backend.`,name:"half_precision_backend"},{anchor:"transformers.TrainingArguments.bf16_full_eval",description:`<strong>bf16_full_eval</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use full bfloat16 evaluation instead of 32-bit. This will be faster and save memory but can harm
metric values. This is an experimental API and it may change.`,name:"bf16_full_eval"},{anchor:"transformers.TrainingArguments.fp16_full_eval",description:`<strong>fp16_full_eval</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use full float16 evaluation instead of 32-bit. This will be faster and save memory but can harm
metric values.`,name:"fp16_full_eval"},{anchor:"transformers.TrainingArguments.tf32",description:`<strong>tf32</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to enable the TF32 mode, available in Ampere and newer GPU architectures. The default value depends
on PyTorch&#x2019;s version default of <code>torch.backends.cuda.matmul.allow_tf32</code>. For more details please refer to
the <a href="https://huggingface.co/docs/transformers/performance#tf32" rel="nofollow">TF32</a> documentation. This is an
experimental API and it may change.`,name:"tf32"},{anchor:"transformers.TrainingArguments.local_rank",description:`<strong>local_rank</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Rank of the process during distributed training.`,name:"local_rank"},{anchor:"transformers.TrainingArguments.ddp_backend",description:`<strong>ddp_backend</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The backend to use for distributed training. Must be one of <code>&quot;nccl&quot;</code>, <code>&quot;mpi&quot;</code>, <code>&quot;ccl&quot;</code>, <code>&quot;gloo&quot;</code>, <code>&quot;hccl&quot;</code>.`,name:"ddp_backend"},{anchor:"transformers.TrainingArguments.tpu_num_cores",description:`<strong>tpu_num_cores</strong> (<code>int</code>, <em>optional</em>) &#x2014;
When training on TPU, the number of TPU cores (automatically passed by launcher script).`,name:"tpu_num_cores"},{anchor:"transformers.TrainingArguments.dataloader_drop_last",description:`<strong>dataloader_drop_last</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to drop the last incomplete batch (if the length of the dataset is not divisible by the batch size)
or not.`,name:"dataloader_drop_last"},{anchor:"transformers.TrainingArguments.eval_steps",description:`<strong>eval_steps</strong> (<code>int</code> or <code>float</code>, <em>optional</em>) &#x2014;
Number of update steps between two evaluations if <code>evaluation_strategy=&quot;steps&quot;</code>. Will default to the same
value as <code>logging_steps</code> if not set. Should be an integer or a float in range <code>[0,1)</code>. If smaller than 1,
will be interpreted as ratio of total training steps.`,name:"eval_steps"},{anchor:"transformers.TrainingArguments.dataloader_num_workers",description:`<strong>dataloader_num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of subprocesses to use for data loading (PyTorch only). 0 means that the data will be loaded in the
main process.`,name:"dataloader_num_workers"},{anchor:"transformers.TrainingArguments.past_index",description:`<strong>past_index</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Some models like <a href="../model_doc/transformerxl">TransformerXL</a> or <a href="../model_doc/xlnet">XLNet</a> can make use of
the past hidden states for their predictions. If this argument is set to a positive int, the <code>Trainer</code> will
use the corresponding output (usually index 2) as the past state and feed it to the model at the next
training step under the keyword argument <code>mems</code>.`,name:"past_index"},{anchor:"transformers.TrainingArguments.run_name",description:`<strong>run_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
A descriptor for the run. Typically used for <a href="https://www.wandb.com/" rel="nofollow">wandb</a> and
<a href="https://www.mlflow.org/" rel="nofollow">mlflow</a> logging.`,name:"run_name"},{anchor:"transformers.TrainingArguments.disable_tqdm",description:`<strong>disable_tqdm</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to disable the tqdm progress bars and table of metrics produced by
<code>~notebook.NotebookTrainingTracker</code> in Jupyter Notebooks. Will default to <code>True</code> if the logging level is
set to warn or lower (default), <code>False</code> otherwise.`,name:"disable_tqdm"},{anchor:"transformers.TrainingArguments.remove_unused_columns",description:`<strong>remove_unused_columns</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to automatically remove the columns unused by the model forward method.`,name:"remove_unused_columns"},{anchor:"transformers.TrainingArguments.label_names",description:`<strong>label_names</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
The list of keys in your dictionary of inputs that correspond to the labels.</p>
<p>Will eventually default to the list of argument names accepted by the model that contain the word &#x201C;label&#x201D;,
except if the model used is one of the <code>XxxForQuestionAnswering</code> in which case it will also include the
<code>[&quot;start_positions&quot;, &quot;end_positions&quot;]</code> keys.`,name:"label_names"},{anchor:"transformers.TrainingArguments.load_best_model_at_end",description:`<strong>load_best_model_at_end</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to load the best model found during training at the end of training. When this option is
enabled, the best checkpoint will always be saved. See
<a href="https://huggingface.co/docs/transformers/main_classes/trainer#transformers.TrainingArguments.save_total_limit" rel="nofollow"><code>save_total_limit</code></a>
for more.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When set to <code>True</code>, the parameters <code>save_strategy</code> needs to be the same as <code>evaluation_strategy</code>, and in
the case it is &#x201C;steps&#x201D;, <code>save_steps</code> must be a round multiple of <code>eval_steps</code>.</p>

					</div>`,name:"load_best_model_at_end"},{anchor:"transformers.TrainingArguments.metric_for_best_model",description:`<strong>metric_for_best_model</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Use in conjunction with <code>load_best_model_at_end</code> to specify the metric to use to compare two different
models. Must be the name of a metric returned by the evaluation with or without the prefix <code>&quot;eval_&quot;</code>. Will
default to <code>&quot;loss&quot;</code> if unspecified and <code>load_best_model_at_end=True</code> (to use the evaluation loss).</p>
<p>If you set this value, <code>greater_is_better</code> will default to <code>True</code>. Don&#x2019;t forget to set it to <code>False</code> if
your metric is better when lower.`,name:"metric_for_best_model"},{anchor:"transformers.TrainingArguments.greater_is_better",description:`<strong>greater_is_better</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Use in conjunction with <code>load_best_model_at_end</code> and <code>metric_for_best_model</code> to specify if better models
should have a greater metric or not. Will default to:</p>
<ul>
<li><code>True</code> if <code>metric_for_best_model</code> is set to a value that isn&#x2019;t <code>&quot;loss&quot;</code> or <code>&quot;eval_loss&quot;</code>.</li>
<li><code>False</code> if <code>metric_for_best_model</code> is not set, or set to <code>&quot;loss&quot;</code> or <code>&quot;eval_loss&quot;</code>.</li>
</ul>`,name:"greater_is_better"},{anchor:"transformers.TrainingArguments.ignore_data_skip",description:`<strong>ignore_data_skip</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When resuming training, whether or not to skip the epochs and batches to get the data loading at the same
stage as in the previous training. If set to <code>True</code>, the training will begin faster (as that skipping step
can take a long time) but will not yield the same results as the interrupted training would have.`,name:"ignore_data_skip"},{anchor:"transformers.TrainingArguments.fsdp",description:`<strong>fsdp</strong> (<code>bool</code>, <code>str</code> or list of <code>FSDPOption</code>, <em>optional</em>, defaults to <code>&apos;&apos;</code>) &#x2014;
Use PyTorch Distributed Parallel Training (in distributed training only).</p>
<p>A list of options along the following:</p>
<ul>
<li><code>&quot;full_shard&quot;</code>: Shard parameters, gradients and optimizer states.</li>
<li><code>&quot;shard_grad_op&quot;</code>: Shard optimizer states and gradients.</li>
<li><code>&quot;hybrid_shard&quot;</code>: Apply <code>FULL_SHARD</code> within a node, and replicate parameters across nodes.</li>
<li><code>&quot;hybrid_shard_zero2&quot;</code>: Apply <code>SHARD_GRAD_OP</code> within a node, and replicate parameters across nodes.</li>
<li><code>&quot;offload&quot;</code>: Offload parameters and gradients to CPUs (only compatible with <code>&quot;full_shard&quot;</code> and
<code>&quot;shard_grad_op&quot;</code>).</li>
<li><code>&quot;auto_wrap&quot;</code>: Automatically recursively wrap layers with FSDP using <code>default_auto_wrap_policy</code>.</li>
</ul>`,name:"fsdp"},{anchor:"transformers.TrainingArguments.fsdp_config",description:`<strong>fsdp_config</strong> (<code>str</code> or <code>dict</code>, <em>optional</em>) &#x2014;
Config to be used with fsdp (Pytorch Distributed Parallel Training). The value is either a location of
fsdp json config file (e.g., <code>fsdp_config.json</code>) or an already loaded json file as <code>dict</code>.</p>
<p>A List of config and its options:</p>
<ul>
<li>
<p>min_num_params (<code>int</code>, <em>optional</em>, defaults to <code>0</code>):
FSDP&#x2019;s minimum number of parameters for Default Auto Wrapping. (useful only when <code>fsdp</code> field is
passed).</p>
</li>
<li>
<p>transformer_layer_cls_to_wrap (<code>List[str]</code>, <em>optional</em>):
List of transformer layer class names (case-sensitive) to wrap, e.g, <code>BertLayer</code>, <code>GPTJBlock</code>,
<code>T5Block</code> &#x2026; (useful only when <code>fsdp</code> flag is passed).</p>
</li>
<li>
<p>backward_prefetch (<code>str</code>, <em>optional</em>)
FSDP&#x2019;s backward prefetch mode. Controls when to prefetch next set of parameters (useful only when
<code>fsdp</code> field is passed).</p>
<p>A list of options along the following:</p>
<ul>
<li><code>&quot;backward_pre&quot;</code> : Prefetches the next set of parameters before the current set of parameter&#x2019;s
gradient
computation.</li>
<li><code>&quot;backward_post&quot;</code> : This prefetches the next set of parameters after the current set of
parameter&#x2019;s
gradient computation.</li>
</ul>
</li>
<li>
<p>forward_prefetch (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>)
FSDP&#x2019;s forward prefetch mode (useful only when <code>fsdp</code> field is passed).
If <code>&quot;True&quot;</code>, then FSDP explicitly prefetches the next upcoming all-gather while executing in the
forward pass.</p>
</li>
<li>
<p>limit_all_gathers (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>)
FSDP&#x2019;s limit_all_gathers (useful only when <code>fsdp</code> field is passed).
If <code>&quot;True&quot;</code>, FSDP explicitly synchronizes the CPU thread to prevent too many in-flight
all-gathers.</p>
</li>
<li>
<p>use_orig_params (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>)
If <code>&quot;True&quot;</code>, allows non-uniform <code>requires_grad</code> during init, which means support for interspersed
frozen and trainable paramteres. Useful in cases such as parameter-efficient fine-tuning. Please
refer this
[blog](<a href="https://dev-discuss.pytorch.org/t/rethinking-pytorch-fully-sharded-data-parallel-fsdp-from-first-principles/1019" rel="nofollow">https://dev-discuss.pytorch.org/t/rethinking-pytorch-fully-sharded-data-parallel-fsdp-from-first-principles/1019</a></p>
</li>
<li>
<p>sync_module_states (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>)
If <code>&quot;True&quot;</code>, each individually wrapped FSDP unit will broadcast module parameters from rank 0 to
ensure they are the same across all ranks after initialization</p>
</li>
<li>
<p>activation_checkpointing (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>):
If <code>&quot;True&quot;</code>, activation checkpointing is a technique to reduce memory usage by clearing activations of
certain layers and recomputing them during a backward pass. Effectively, this trades extra
computation time for reduced memory usage.</p>
</li>
<li>
<p>xla (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>):
Whether to use PyTorch/XLA Fully Sharded Data Parallel Training. This is an experimental feature
and its API may evolve in the future.</p>
</li>
<li>
<p>xla_fsdp_settings (<code>dict</code>, <em>optional</em>)
The value is a dictionary which stores the XLA FSDP wrapping parameters.</p>
<p>For a complete list of options, please see <a href="https://github.com/pytorch/xla/blob/master/torch_xla/distributed/fsdp/xla_fully_sharded_data_parallel.py" rel="nofollow">here</a>.</p>
</li>
<li>
<p>xla_fsdp_grad_ckpt (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>):
Will use gradient checkpointing over each nested XLA FSDP wrapped layer. This setting can only be
used when the xla flag is set to true, and an auto wrapping policy is specified through
fsdp_min_num_params or fsdp_transformer_layer_cls_to_wrap.</p>
</li>
</ul>`,name:"fsdp_config"},{anchor:"transformers.TrainingArguments.deepspeed",description:`<strong>deepspeed</strong> (<code>str</code> or <code>dict</code>, <em>optional</em>) &#x2014;
Use <a href="https://github.com/microsoft/deepspeed" rel="nofollow">Deepspeed</a>. This is an experimental feature and its API may
evolve in the future. The value is either the location of DeepSpeed json config file (e.g.,
<code>ds_config.json</code>) or an already loaded json file as a <code>dict</code>&#x201D;`,name:"deepspeed"},{anchor:"transformers.TrainingArguments.accelerator_config",description:`<strong>accelerator_config</strong> (<code>str</code>, <code>dict</code>, or <code>AcceleratorConfig</code>, <em>optional</em>) &#x2014;
Config to be used with the internal <code>Accelerator</code> implementation. The value is either a location of
accelerator json config file (e.g., <code>accelerator_config.json</code>), an already loaded json file as <code>dict</code>,
or an instance of <code>AcceleratorConfig</code>.</p>
<p>A list of config and its options:</p>
<ul>
<li>split_batches (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>):
Whether or not the accelerator should split the batches yielded by the dataloaders across the devices. If
<code>True</code> the actual batch size used will be the same on any kind of distributed processes, but it must be a
round multiple of the <code>num_processes</code> you are using. If <code>False</code>, actual batch size used will be the one set
in your script multiplied by the number of processes.</li>
<li>dispatch_batches (<code>bool</code>, <em>optional</em>):
If set to <code>True</code>, the dataloader prepared by the Accelerator is only iterated through on the main process
and then the batches are split and broadcast to each process. Will default to <code>True</code> for <code>DataLoader</code> whose
underlying dataset is an <code>IterableDataset</code>, <code>False</code> otherwise.</li>
<li>even_batches (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>):
If set to <code>True</code>, in cases where the total batch size across all processes does not exactly divide the
dataset, samples at the start of the dataset will be duplicated so the batch can be divided equally among
all workers.</li>
<li>use_seedable_sampler (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>):
Whether or not use a fully seedable random sampler (<code>accelerate.data_loader.SeedableRandomSampler</code>). Ensures
training results are fully reproducable using a different sampling technique. While seed-to-seed results
may differ, on average the differences are neglible when using multiple different seeds to compare. Should
also be ran with <code>~utils.set_seed</code> for the best results.</li>
</ul>`,name:"accelerator_config"},{anchor:"transformers.TrainingArguments.label_smoothing_factor",description:`<strong>label_smoothing_factor</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The label smoothing factor to use. Zero means no label smoothing, otherwise the underlying onehot-encoded
labels are changed from 0s and 1s to <code>label_smoothing_factor/num_labels</code> and <code>1 - label_smoothing_factor + label_smoothing_factor/num_labels</code> respectively.`,name:"label_smoothing_factor"},{anchor:"transformers.TrainingArguments.debug",description:`<strong>debug</strong> (<code>str</code> or list of <code>DebugOption</code>, <em>optional</em>, defaults to <code>&quot;&quot;</code>) &#x2014;
Enable one or more debug features. This is an experimental feature.</p>
<p>Possible options are:</p>
<ul>
<li><code>&quot;underflow_overflow&quot;</code>: detects overflow in model&#x2019;s input/outputs and reports the last frames that led to
the event</li>
<li><code>&quot;tpu_metrics_debug&quot;</code>: print debug metrics on TPU</li>
</ul>
<p>The options should be separated by whitespaces.`,name:"debug"},{anchor:"transformers.TrainingArguments.optim",description:`<strong>optim</strong> (<code>str</code> or <code>training_args.OptimizerNames</code>, <em>optional</em>, defaults to <code>&quot;adamw_torch&quot;</code>) &#x2014;
The optimizer to use: adamw_hf, adamw_torch, adamw_torch_fused, adamw_apex_fused, adamw_anyprecision or
adafactor.`,name:"optim"},{anchor:"transformers.TrainingArguments.optim_args",description:`<strong>optim_args</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Optional arguments that are supplied to AnyPrecisionAdamW.`,name:"optim_args"},{anchor:"transformers.TrainingArguments.group_by_length",description:`<strong>group_by_length</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to group together samples of roughly the same length in the training dataset (to minimize
padding applied and be more efficient). Only useful if applying dynamic padding.`,name:"group_by_length"},{anchor:"transformers.TrainingArguments.length_column_name",description:`<strong>length_column_name</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;length&quot;</code>) &#x2014;
Column name for precomputed lengths. If the column exists, grouping by length will use these values rather
than computing them on train startup. Ignored unless <code>group_by_length</code> is <code>True</code> and the dataset is an
instance of <code>Dataset</code>.`,name:"length_column_name"},{anchor:"transformers.TrainingArguments.report_to",description:`<strong>report_to</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>, defaults to <code>&quot;all&quot;</code>) &#x2014;
The list of integrations to report the results and logs to. Supported platforms are <code>&quot;azure_ml&quot;</code>,
<code>&quot;clearml&quot;</code>, <code>&quot;codecarbon&quot;</code>, <code>&quot;comet_ml&quot;</code>, <code>&quot;dagshub&quot;</code>, <code>&quot;dvclive&quot;</code>, <code>&quot;flyte&quot;</code>, <code>&quot;mlflow&quot;</code>, <code>&quot;neptune&quot;</code>,
<code>&quot;tensorboard&quot;</code>, and <code>&quot;wandb&quot;</code>. Use <code>&quot;all&quot;</code> to report to all integrations installed, <code>&quot;none&quot;</code> for no
integrations.`,name:"report_to"},{anchor:"transformers.TrainingArguments.ddp_find_unused_parameters",description:`<strong>ddp_find_unused_parameters</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
When using distributed training, the value of the flag <code>find_unused_parameters</code> passed to
<code>DistributedDataParallel</code>. Will default to <code>False</code> if gradient checkpointing is used, <code>True</code> otherwise.`,name:"ddp_find_unused_parameters"},{anchor:"transformers.TrainingArguments.ddp_bucket_cap_mb",description:`<strong>ddp_bucket_cap_mb</strong> (<code>int</code>, <em>optional</em>) &#x2014;
When using distributed training, the value of the flag <code>bucket_cap_mb</code> passed to <code>DistributedDataParallel</code>.`,name:"ddp_bucket_cap_mb"},{anchor:"transformers.TrainingArguments.ddp_broadcast_buffers",description:`<strong>ddp_broadcast_buffers</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
When using distributed training, the value of the flag <code>broadcast_buffers</code> passed to
<code>DistributedDataParallel</code>. Will default to <code>False</code> if gradient checkpointing is used, <code>True</code> otherwise.`,name:"ddp_broadcast_buffers"},{anchor:"transformers.TrainingArguments.dataloader_pin_memory",description:`<strong>dataloader_pin_memory</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether you want to pin memory in data loaders or not. Will default to <code>True</code>.`,name:"dataloader_pin_memory"},{anchor:"transformers.TrainingArguments.dataloader_persistent_workers",description:`<strong>dataloader_persistent_workers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If True, the data loader will not shut down the worker processes after a dataset has been consumed once.
This allows to maintain the workers Dataset instances alive. Can potentially speed up training, but will
increase RAM usage. Will default to <code>False</code>.`,name:"dataloader_persistent_workers"},{anchor:"transformers.TrainingArguments.dataloader_prefetch_factor",description:`<strong>dataloader_prefetch_factor</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of batches loaded in advance by each worker.
2 means there will be a total of 2 * num_workers batches prefetched across all workers.`,name:"dataloader_prefetch_factor"},{anchor:"transformers.TrainingArguments.skip_memory_metrics",description:`<strong>skip_memory_metrics</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to skip adding of memory profiler reports to metrics. This is skipped by default because it slows
down the training and evaluation speed.`,name:"skip_memory_metrics"},{anchor:"transformers.TrainingArguments.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push the model to the Hub every time the model is saved. If this is activated,
<code>output_dir</code> will begin a git directory synced with the repo (determined by <code>hub_model_id</code>) and the content
will be pushed each time a save is triggered (depending on your <code>save_strategy</code>). Calling
<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer.save_model">save_model()</a> will also trigger a push.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>If <code>output_dir</code> exists, it needs to be a local clone of the repository to which the <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a> will be
pushed.</p>

					</div>`,name:"push_to_hub"},{anchor:"transformers.TrainingArguments.resume_from_checkpoint",description:`<strong>resume_from_checkpoint</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The path to a folder with a valid checkpoint for your model. This argument is not directly used by
<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/main/examples" rel="nofollow">example
scripts</a> for more details.`,name:"resume_from_checkpoint"},{anchor:"transformers.TrainingArguments.hub_model_id",description:`<strong>hub_model_id</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The name of the repository to keep in sync with the local <em>output_dir</em>. It can be a simple model ID in
which case the model will be pushed in your namespace. Otherwise it should be the whole repository name,
for instance <code>&quot;user_name/model&quot;</code>, which allows you to push to an organization you are a member of with
<code>&quot;organization_name/model&quot;</code>. Will default to <code>user_name/output_dir_name</code> with <em>output_dir_name</em> being the
name of <code>output_dir</code>.</p>
<p>Will default to the name of <code>output_dir</code>.`,name:"hub_model_id"},{anchor:"transformers.TrainingArguments.hub_strategy",description:`<strong>hub_strategy</strong> (<code>str</code> or <code>HubStrategy</code>, <em>optional</em>, defaults to <code>&quot;every_save&quot;</code>) &#x2014;
Defines the scope of what is pushed to the Hub and when. Possible values are:</p>
<ul>
<li><code>&quot;end&quot;</code>: push the model, its configuration, the tokenizer (if passed along to the <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>) and a
draft of a model card when the <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer.save_model">save_model()</a> method is called.</li>
<li><code>&quot;every_save&quot;</code>: push the model, its configuration, the tokenizer (if passed along to the <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>) and
a draft of a model card each time there is a model save. The pushes are asynchronous to not block
training, and in case the save are very frequent, a new push is only attempted if the previous one is
finished. A last push is made with the final model at the end of training.</li>
<li><code>&quot;checkpoint&quot;</code>: like <code>&quot;every_save&quot;</code> but the latest checkpoint is also pushed in a subfolder named
last-checkpoint, allowing you to resume training easily with
<code>trainer.train(resume_from_checkpoint=&quot;last-checkpoint&quot;)</code>.</li>
<li><code>&quot;all_checkpoints&quot;</code>: like <code>&quot;checkpoint&quot;</code> but all checkpoints are pushed like they appear in the output
folder (so you will get one checkpoint folder per folder in your final repository)</li>
</ul>`,name:"hub_strategy"},{anchor:"transformers.TrainingArguments.hub_token",description:`<strong>hub_token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The token to use to push the model to the Hub. Will default to the token in the cache folder obtained with
<code>huggingface-cli login</code>.`,name:"hub_token"},{anchor:"transformers.TrainingArguments.hub_private_repo",description:`<strong>hub_private_repo</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If True, the Hub repo will be set to private.`,name:"hub_private_repo"},{anchor:"transformers.TrainingArguments.hub_always_push",description:`<strong>hub_always_push</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Unless this is <code>True</code>, the <code>Trainer</code> will skip pushing a checkpoint when the previous push is not finished.`,name:"hub_always_push"},{anchor:"transformers.TrainingArguments.gradient_checkpointing",description:`<strong>gradient_checkpointing</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If True, use gradient checkpointing to save memory at the expense of slower backward pass.`,name:"gradient_checkpointing"},{anchor:"transformers.TrainingArguments.gradient_checkpointing_kwargs",description:`<strong>gradient_checkpointing_kwargs</strong> (<code>dict</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Key word arguments to be passed to the <code>gradient_checkpointing_enable</code> method.`,name:"gradient_checkpointing_kwargs"},{anchor:"transformers.TrainingArguments.include_inputs_for_metrics",description:`<strong>include_inputs_for_metrics</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the inputs will be passed to the <code>compute_metrics</code> function. This is intended for metrics
that need inputs, predictions and references for scoring calculation in Metric class.`,name:"include_inputs_for_metrics"},{anchor:"transformers.TrainingArguments.auto_find_batch_size",description:`<strong>auto_find_batch_size</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to find a batch size that will fit into memory automatically through exponential decay, avoiding
CUDA Out-of-Memory errors. Requires accelerate to be installed (<code>pip install accelerate</code>)`,name:"auto_find_batch_size"},{anchor:"transformers.TrainingArguments.full_determinism",description:`<strong>full_determinism</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, <a href="/docs/transformers/main/ja/internal/trainer_utils#transformers.enable_full_determinism">enable_full_determinism()</a> is called instead of <a href="/docs/transformers/main/ja/internal/trainer_utils#transformers.set_seed">set_seed()</a> to ensure reproducible results in
distributed training. Important: this will negatively impact the performance, so only use it for debugging.`,name:"full_determinism"},{anchor:"transformers.TrainingArguments.torchdynamo",description:`<strong>torchdynamo</strong> (<code>str</code>, <em>optional</em>) &#x2014;
If set, the backend compiler for TorchDynamo. Possible choices are <code>&quot;eager&quot;</code>, <code>&quot;aot_eager&quot;</code>, <code>&quot;inductor&quot;</code>,
<code>&quot;nvfuser&quot;</code>, <code>&quot;aot_nvfuser&quot;</code>, <code>&quot;aot_cudagraphs&quot;</code>, <code>&quot;ofi&quot;</code>, <code>&quot;fx2trt&quot;</code>, <code>&quot;onnxrt&quot;</code> and <code>&quot;ipex&quot;</code>.`,name:"torchdynamo"},{anchor:"transformers.TrainingArguments.ray_scope",description:`<strong>ray_scope</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;last&quot;</code>) &#x2014;
The scope to use when doing hyperparameter search with Ray. By default, <code>&quot;last&quot;</code> will be used. Ray will
then use the last checkpoint of all trials, compare those, and select the best one. However, other options
are also available. See the <a href="https://docs.ray.io/en/latest/tune/api_docs/analysis.html#ray.tune.ExperimentAnalysis.get_best_trial" rel="nofollow">Ray documentation</a> for
more options.`,name:"ray_scope"},{anchor:"transformers.TrainingArguments.ddp_timeout",description:`<strong>ddp_timeout</strong> (<code>int</code>, <em>optional</em>, defaults to 1800) &#x2014;
The timeout for <code>torch.distributed.init_process_group</code> calls, used to avoid GPU socket timeouts when
performing slow operations in distributed runnings. Please refer the [PyTorch documentation]
(<a href="https://pytorch.org/docs/stable/distributed.html#torch.distributed.init_process_group" rel="nofollow">https://pytorch.org/docs/stable/distributed.html#torch.distributed.init_process_group</a>) for more
information.`,name:"ddp_timeout"},{anchor:"transformers.TrainingArguments.use_mps_device",description:`<strong>use_mps_device</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
This argument is deprecated.<code>mps</code> device will be used if it is available similar to <code>cuda</code> device.`,name:"use_mps_device"},{anchor:"transformers.TrainingArguments.torch_compile",description:`<strong>torch_compile</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to compile the model using PyTorch 2.0
<a href="https://pytorch.org/get-started/pytorch-2.0/" rel="nofollow"><code>torch.compile</code></a>.</p>
<p>This will use the best defaults for the <a href="https://pytorch.org/docs/stable/generated/torch.compile.html?highlight=torch+compile#torch.compile" rel="nofollow"><code>torch.compile</code>
API</a>.
You can customize the defaults with the argument <code>torch_compile_backend</code> and <code>torch_compile_mode</code> but we
don&#x2019;t guarantee any of them will work as the support is progressively rolled in in PyTorch.</p>
<p>This flag and the whole compile API is experimental and subject to change in future releases.`,name:"torch_compile"},{anchor:"transformers.TrainingArguments.torch_compile_backend",description:`<strong>torch_compile_backend</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The backend to use in <code>torch.compile</code>. If set to any value, <code>torch_compile</code> will be set to <code>True</code>.</p>
<p>Refer to the PyTorch doc for possible values and note that they may change across PyTorch versions.</p>
<p>This flag is experimental and subject to change in future releases.`,name:"torch_compile_backend"},{anchor:"transformers.TrainingArguments.torch_compile_mode",description:`<strong>torch_compile_mode</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The mode to use in <code>torch.compile</code>. If set to any value, <code>torch_compile</code> will be set to <code>True</code>.</p>
<p>Refer to the PyTorch doc for possible values and note that they may change across PyTorch versions.</p>
<p>This flag is experimental and subject to change in future releases.`,name:"torch_compile_mode"},{anchor:"transformers.TrainingArguments.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the accelerator should split the batches yielded by the dataloaders across the devices
during distributed training. If</p>
<p>set to <code>True</code>, the actual batch size used will be the same on any kind of distributed processes, but it
must be a</p>
<p>round multiple of the number of processes you are using (such as GPUs).`,name:"split_batches"},{anchor:"transformers.TrainingArguments.include_tokens_per_second",description:`<strong>include_tokens_per_second</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to compute the number of tokens per second per device for training speed metrics.</p>
<p>This will iterate over the entire training dataloader once beforehand,</p>
<p>and will slow down the entire process.`,name:"include_tokens_per_second"},{anchor:"transformers.TrainingArguments.include_num_input_tokens_seen",description:`<strong>include_num_input_tokens_seen</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to track the number of input tokens seen throughout training.</p>
<p>May be slower in distributed training as gather operations must be called.`,name:"include_num_input_tokens_seen"},{anchor:"transformers.TrainingArguments.neftune_noise_alpha",description:`<strong>neftune_noise_alpha</strong> (<code>Optional[float]</code>) &#x2014;
If not <code>None</code>, this will activate NEFTune noise embeddings. This can drastically improve model performance
for instruction fine-tuning. Check out the <a href="https://arxiv.org/abs/2310.05914" rel="nofollow">original paper</a> and the
<a href="https://github.com/neelsjain/NEFTune" rel="nofollow">original code</a>. Support transformers <code>PreTrainedModel</code> and also
<code>PeftModel</code> from peft.`,name:"neftune_noise_alpha"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/training_args.py#L163"}}),jo=new $({props:{name:"get_process_log_level",anchor:"transformers.TrainingArguments.get_process_log_level",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/training_args.py#L2099"}}),Ao=new $({props:{name:"get_warmup_steps",anchor:"transformers.TrainingArguments.get_warmup_steps",parameters:[{name:"num_training_steps",val:": int"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/training_args.py#L2188"}}),qo=new $({props:{name:"main_process_first",anchor:"transformers.TrainingArguments.main_process_first",parameters:[{name:"local",val:" = True"},{name:"desc",val:" = 'work'"}],parametersDescription:[{anchor:"transformers.TrainingArguments.main_process_first.local",description:`<strong>local</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
if <code>True</code> first means process of rank 0 of each node if <code>False</code> first means process of rank 0 of node
rank 0 In multi-node environment with a shared filesystem you most likely will want to use
<code>local=False</code> so that only the main process of the first node will do the processing. If however, the
filesystem is not shared, then the main process of each node will need to do the processing, which is
the default behavior.`,name:"local"},{anchor:"transformers.TrainingArguments.main_process_first.desc",description:`<strong>desc</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;work&quot;</code>) &#x2014;
a work description to be used in debug logs`,name:"desc"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/training_args.py#L2137"}}),Co=new $({props:{name:"set_dataloader",anchor:"transformers.TrainingArguments.set_dataloader",parameters:[{name:"train_batch_size",val:": int = 8"},{name:"eval_batch_size",val:": int = 8"},{name:"drop_last",val:": bool = False"},{name:"num_workers",val:": int = 0"},{name:"pin_memory",val:": bool = True"},{name:"persistent_workers",val:": bool = False"},{name:"prefetch_factor",val:": Optional = None"},{name:"auto_find_batch_size",val:": bool = False"},{name:"ignore_data_skip",val:": bool = False"},{name:"sampler_seed",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.TrainingArguments.set_dataloader.drop_last",description:`<strong>drop_last</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to drop the last incomplete batch (if the length of the dataset is not divisible by the batch
size) or not.`,name:"drop_last"},{anchor:"transformers.TrainingArguments.set_dataloader.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of subprocesses to use for data loading (PyTorch only). 0 means that the data will be loaded in
the main process.`,name:"num_workers"},{anchor:"transformers.TrainingArguments.set_dataloader.pin_memory",description:`<strong>pin_memory</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether you want to pin memory in data loaders or not. Will default to <code>True</code>.`,name:"pin_memory"},{anchor:"transformers.TrainingArguments.set_dataloader.persistent_workers",description:`<strong>persistent_workers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If True, the data loader will not shut down the worker processes after a dataset has been consumed
once. This allows to maintain the workers Dataset instances alive. Can potentially speed up training,
but will increase RAM usage. Will default to <code>False</code>.`,name:"persistent_workers"},{anchor:"transformers.TrainingArguments.set_dataloader.prefetch_factor",description:`<strong>prefetch_factor</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of batches loaded in advance by each worker.
2 means there will be a total of 2 * num_workers batches prefetched across all workers.`,name:"prefetch_factor"},{anchor:"transformers.TrainingArguments.set_dataloader.auto_find_batch_size",description:`<strong>auto_find_batch_size</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to find a batch size that will fit into memory automatically through exponential decay,
avoiding CUDA Out-of-Memory errors. Requires accelerate to be installed (<code>pip install accelerate</code>)`,name:"auto_find_batch_size"},{anchor:"transformers.TrainingArguments.set_dataloader.ignore_data_skip",description:`<strong>ignore_data_skip</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When resuming training, whether or not to skip the epochs and batches to get the data loading at the
same stage as in the previous training. If set to <code>True</code>, the training will begin faster (as that
skipping step can take a long time) but will not yield the same results as the interrupted training
would have.`,name:"ignore_data_skip"},{anchor:"transformers.TrainingArguments.set_dataloader.sampler_seed",description:`<strong>sampler_seed</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Random seed to be used with data samplers. If not set, random generators for data sampling will use the
same seed as <code>self.seed</code>. This can be used to ensure reproducibility of data sampling, independent of
the model seed.`,name:"sampler_seed"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/training_args.py#L2703"}}),ot=new Me({props:{anchor:"transformers.TrainingArguments.set_dataloader.example",$$slots:{default:[Pb]},$$scope:{ctx:C}}}),Jo=new $({props:{name:"set_evaluate",anchor:"transformers.TrainingArguments.set_evaluate",parameters:[{name:"strategy",val:": Union = 'no'"},{name:"steps",val:": int = 500"},{name:"batch_size",val:": int = 8"},{name:"accumulation_steps",val:": Optional = None"},{name:"delay",val:": Optional = None"},{name:"loss_only",val:": bool = False"},{name:"jit_mode",val:": bool = False"}],parametersDescription:[{anchor:"transformers.TrainingArguments.set_evaluate.strategy",description:`<strong>strategy</strong> (<code>str</code> or <a href="/docs/transformers/main/ja/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;no&quot;</code>) &#x2014;
The evaluation strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No evaluation is done during training.</li>
<li><code>&quot;steps&quot;</code>: Evaluation is done (and logged) every <code>steps</code>.</li>
<li><code>&quot;epoch&quot;</code>: Evaluation is done at the end of each epoch.</li>
</ul>
<p>Setting a <code>strategy</code> different from <code>&quot;no&quot;</code> will set <code>self.do_eval</code> to <code>True</code>.`,name:"strategy"},{anchor:"transformers.TrainingArguments.set_evaluate.steps",description:`<strong>steps</strong> (<code>int</code>, <em>optional</em>, defaults to 500) &#x2014;
Number of update steps between two evaluations if <code>strategy=&quot;steps&quot;</code>.`,name:"steps"},{anchor:"transformers.TrainingArguments.set_evaluate.batch_size",description:`<strong>batch_size</strong> (<code>int</code> <em>optional</em>, defaults to 8) &#x2014;
The batch size per device (GPU/TPU core/CPU&#x2026;) used for evaluation.`,name:"batch_size"},{anchor:"transformers.TrainingArguments.set_evaluate.accumulation_steps",description:`<strong>accumulation_steps</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of predictions steps to accumulate the output tensors for, before moving the results to the CPU.
If left unset, the whole predictions are accumulated on GPU/TPU before being moved to the CPU (faster
but requires more memory).`,name:"accumulation_steps"},{anchor:"transformers.TrainingArguments.set_evaluate.delay",description:`<strong>delay</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Number of epochs or steps to wait for before the first evaluation can be performed, depending on the
evaluation_strategy.`,name:"delay"},{anchor:"transformers.TrainingArguments.set_evaluate.loss_only",description:`<strong>loss_only</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Ignores all outputs except the loss.`,name:"loss_only"},{anchor:"transformers.TrainingArguments.set_evaluate.jit_mode",description:`<strong>jit_mode</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to use PyTorch jit trace for inference.`,name:"jit_mode"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/training_args.py#L2312"}}),nt=new Me({props:{anchor:"transformers.TrainingArguments.set_evaluate.example",$$slots:{default:[Lb]},$$scope:{ctx:C}}}),Io=new $({props:{name:"set_logging",anchor:"transformers.TrainingArguments.set_logging",parameters:[{name:"strategy",val:": Union = 'steps'"},{name:"steps",val:": int = 500"},{name:"report_to",val:": Union = 'none'"},{name:"level",val:": str = 'passive'"},{name:"first_step",val:": bool = False"},{name:"nan_inf_filter",val:": bool = False"},{name:"on_each_node",val:": bool = False"},{name:"replica_level",val:": str = 'passive'"}],parametersDescription:[{anchor:"transformers.TrainingArguments.set_logging.strategy",description:`<strong>strategy</strong> (<code>str</code> or <a href="/docs/transformers/main/ja/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;steps&quot;</code>) &#x2014;
The logging strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No logging is done during training.</li>
<li><code>&quot;epoch&quot;</code>: Logging is done at the end of each epoch.</li>
<li><code>&quot;steps&quot;</code>: Logging is done every <code>logging_steps</code>.</li>
</ul>`,name:"strategy"},{anchor:"transformers.TrainingArguments.set_logging.steps",description:`<strong>steps</strong> (<code>int</code>, <em>optional</em>, defaults to 500) &#x2014;
Number of update steps between two logs if <code>strategy=&quot;steps&quot;</code>.`,name:"steps"},{anchor:"transformers.TrainingArguments.set_logging.level",description:`<strong>level</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;passive&quot;</code>) &#x2014;
Logger log level to use on the main process. Possible choices are the log levels as strings: <code>&quot;debug&quot;</code>,
<code>&quot;info&quot;</code>, <code>&quot;warning&quot;</code>, <code>&quot;error&quot;</code> and <code>&quot;critical&quot;</code>, plus a <code>&quot;passive&quot;</code> level which doesn&#x2019;t set anything
and lets the application set the level.`,name:"level"},{anchor:"transformers.TrainingArguments.set_logging.report_to",description:`<strong>report_to</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>, defaults to <code>&quot;all&quot;</code>) &#x2014;
The list of integrations to report the results and logs to. Supported platforms are <code>&quot;azure_ml&quot;</code>,
<code>&quot;clearml&quot;</code>, <code>&quot;codecarbon&quot;</code>, <code>&quot;comet_ml&quot;</code>, <code>&quot;dagshub&quot;</code>, <code>&quot;dvclive&quot;</code>, <code>&quot;flyte&quot;</code>, <code>&quot;mlflow&quot;</code>,
<code>&quot;neptune&quot;</code>, <code>&quot;tensorboard&quot;</code>, and <code>&quot;wandb&quot;</code>. Use <code>&quot;all&quot;</code> to report to all integrations installed,
<code>&quot;none&quot;</code> for no integrations.`,name:"report_to"},{anchor:"transformers.TrainingArguments.set_logging.first_step",description:`<strong>first_step</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to log and evaluate the first <code>global_step</code> or not.`,name:"first_step"},{anchor:"transformers.TrainingArguments.set_logging.nan_inf_filter",description:`<strong>nan_inf_filter</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to filter <code>nan</code> and <code>inf</code> losses for logging. If set to <code>True</code> the loss of every step that is
<code>nan</code> or <code>inf</code> is filtered and the average loss of the current logging window is taken instead.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p><code>nan_inf_filter</code> only influences the logging of loss values, it does not change the behavior the
gradient is computed or applied to the model.</p>

					</div>`,name:"nan_inf_filter"},{anchor:"transformers.TrainingArguments.set_logging.on_each_node",description:`<strong>on_each_node</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
In multinode distributed training, whether to log using <code>log_level</code> once per node, or only on the main
node.`,name:"on_each_node"},{anchor:"transformers.TrainingArguments.set_logging.replica_level",description:`<strong>replica_level</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;passive&quot;</code>) &#x2014;
Logger log level to use on replicas. Same choices as <code>log_level</code>`,name:"replica_level"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/training_args.py#L2462"}}),at=new Me({props:{anchor:"transformers.TrainingArguments.set_logging.example",$$slots:{default:[Fb]},$$scope:{ctx:C}}}),Uo=new $({props:{name:"set_lr_scheduler",anchor:"transformers.TrainingArguments.set_lr_scheduler",parameters:[{name:"name",val:": Union = 'linear'"},{name:"num_epochs",val:": float = 3.0"},{name:"max_steps",val:": int = -1"},{name:"warmup_ratio",val:": float = 0"},{name:"warmup_steps",val:": int = 0"}],parametersDescription:[{anchor:"transformers.TrainingArguments.set_lr_scheduler.name",description:`<strong>name</strong> (<code>str</code> or <a href="/docs/transformers/main/ja/main_classes/optimizer_schedules#transformers.SchedulerType">SchedulerType</a>, <em>optional</em>, defaults to <code>&quot;linear&quot;</code>) &#x2014;
The scheduler type to use. See the documentation of <a href="/docs/transformers/main/ja/main_classes/optimizer_schedules#transformers.SchedulerType">SchedulerType</a> for all possible values.`,name:"name"},{anchor:"transformers.TrainingArguments.set_lr_scheduler.num_epochs(float,",description:`<strong>num_epochs(<code>float</code>,</strong> <em>optional</em>, defaults to 3.0) &#x2014;
Total number of training epochs to perform (if not an integer, will perform the decimal part percents
of the last epoch before stopping training).`,name:"num_epochs(float,"},{anchor:"transformers.TrainingArguments.set_lr_scheduler.max_steps",description:`<strong>max_steps</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
If set to a positive number, the total number of training steps to perform. Overrides <code>num_train_epochs</code>.
For a finite dataset, training is reiterated through the dataset (if all data is exhausted) until
<code>max_steps</code> is reached.`,name:"max_steps"},{anchor:"transformers.TrainingArguments.set_lr_scheduler.warmup_ratio",description:`<strong>warmup_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
Ratio of total training steps used for a linear warmup from 0 to <code>learning_rate</code>.`,name:"warmup_ratio"},{anchor:"transformers.TrainingArguments.set_lr_scheduler.warmup_steps",description:`<strong>warmup_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of steps used for a linear warmup from 0 to <code>learning_rate</code>. Overrides any effect of
<code>warmup_ratio</code>.`,name:"warmup_steps"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/training_args.py#L2658"}}),rt=new Me({props:{anchor:"transformers.TrainingArguments.set_lr_scheduler.example",$$slots:{default:[Wb]},$$scope:{ctx:C}}}),So=new $({props:{name:"set_optimizer",anchor:"transformers.TrainingArguments.set_optimizer",parameters:[{name:"name",val:": Union = 'adamw_torch'"},{name:"learning_rate",val:": float = 5e-05"},{name:"weight_decay",val:": float = 0"},{name:"beta1",val:": float = 0.9"},{name:"beta2",val:": float = 0.999"},{name:"epsilon",val:": float = 1e-08"},{name:"args",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.TrainingArguments.set_optimizer.name",description:`<strong>name</strong> (<code>str</code> or <code>training_args.OptimizerNames</code>, <em>optional</em>, defaults to <code>&quot;adamw_torch&quot;</code>) &#x2014;
The optimizer to use: <code>&quot;adamw_hf&quot;</code>, <code>&quot;adamw_torch&quot;</code>, <code>&quot;adamw_torch_fused&quot;</code>, <code>&quot;adamw_apex_fused&quot;</code>,
<code>&quot;adamw_anyprecision&quot;</code> or <code>&quot;adafactor&quot;</code>.`,name:"name"},{anchor:"transformers.TrainingArguments.set_optimizer.learning_rate",description:`<strong>learning_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 5e-5) &#x2014;
The initial learning rate.`,name:"learning_rate"},{anchor:"transformers.TrainingArguments.set_optimizer.weight_decay",description:`<strong>weight_decay</strong> (<code>float</code>, <em>optional</em>, defaults to 0) &#x2014;
The weight decay to apply (if not zero) to all layers except all bias and LayerNorm weights.`,name:"weight_decay"},{anchor:"transformers.TrainingArguments.set_optimizer.beta1",description:`<strong>beta1</strong> (<code>float</code>, <em>optional</em>, defaults to 0.9) &#x2014;
The beta1 hyperparameter for the adam optimizer or its variants.`,name:"beta1"},{anchor:"transformers.TrainingArguments.set_optimizer.beta2",description:`<strong>beta2</strong> (<code>float</code>, <em>optional</em>, defaults to 0.999) &#x2014;
The beta2 hyperparameter for the adam optimizer or its variants.`,name:"beta2"},{anchor:"transformers.TrainingArguments.set_optimizer.epsilon",description:`<strong>epsilon</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-8) &#x2014;
The epsilon hyperparameter for the adam optimizer or its variants.`,name:"epsilon"},{anchor:"transformers.TrainingArguments.set_optimizer.args",description:`<strong>args</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Optional arguments that are supplied to AnyPrecisionAdamW (only useful when
<code>optim=&quot;adamw_anyprecision&quot;</code>).`,name:"args"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/training_args.py#L2607"}}),st=new Me({props:{anchor:"transformers.TrainingArguments.set_optimizer.example",$$slots:{default:[zb]},$$scope:{ctx:C}}}),Po=new $({props:{name:"set_push_to_hub",anchor:"transformers.TrainingArguments.set_push_to_hub",parameters:[{name:"model_id",val:": str"},{name:"strategy",val:": Union = 'every_save'"},{name:"token",val:": Optional = None"},{name:"private_repo",val:": bool = False"},{name:"always_push",val:": bool = False"}],parametersDescription:[{anchor:"transformers.TrainingArguments.set_push_to_hub.model_id",description:`<strong>model_id</strong> (<code>str</code>) &#x2014;
The name of the repository to keep in sync with the local <em>output_dir</em>. It can be a simple model ID in
which case the model will be pushed in your namespace. Otherwise it should be the whole repository
name, for instance <code>&quot;user_name/model&quot;</code>, which allows you to push to an organization you are a member of
with <code>&quot;organization_name/model&quot;</code>.`,name:"model_id"},{anchor:"transformers.TrainingArguments.set_push_to_hub.strategy",description:`<strong>strategy</strong> (<code>str</code> or <code>HubStrategy</code>, <em>optional</em>, defaults to <code>&quot;every_save&quot;</code>) &#x2014;
Defines the scope of what is pushed to the Hub and when. Possible values are:</p>
<ul>
<li><code>&quot;end&quot;</code>: push the model, its configuration, the tokenizer (if passed along to the <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>) and a
draft of a model card when the <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer.save_model">save_model()</a> method is called.</li>
<li><code>&quot;every_save&quot;</code>: push the model, its configuration, the tokenizer (if passed along to the <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>)
and
a draft of a model card each time there is a model save. The pushes are asynchronous to not block
training, and in case the save are very frequent, a new push is only attempted if the previous one is
finished. A last push is made with the final model at the end of training.</li>
<li><code>&quot;checkpoint&quot;</code>: like <code>&quot;every_save&quot;</code> but the latest checkpoint is also pushed in a subfolder named
last-checkpoint, allowing you to resume training easily with
<code>trainer.train(resume_from_checkpoint=&quot;last-checkpoint&quot;)</code>.</li>
<li><code>&quot;all_checkpoints&quot;</code>: like <code>&quot;checkpoint&quot;</code> but all checkpoints are pushed like they appear in the
output
folder (so you will get one checkpoint folder per folder in your final repository)</li>
</ul>`,name:"strategy"},{anchor:"transformers.TrainingArguments.set_push_to_hub.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The token to use to push the model to the Hub. Will default to the token in the cache folder obtained
with <code>huggingface-cli login</code>.`,name:"token"},{anchor:"transformers.TrainingArguments.set_push_to_hub.private_repo",description:`<strong>private_repo</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If True, the Hub repo will be set to private.`,name:"private_repo"},{anchor:"transformers.TrainingArguments.set_push_to_hub.always_push",description:`<strong>always_push</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Unless this is <code>True</code>, the <code>Trainer</code> will skip pushing a checkpoint when the previous push is not
finished.`,name:"always_push"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/training_args.py#L2537"}}),it=new jt({props:{$$slots:{default:[Nb]},$$scope:{ctx:C}}}),lt=new Me({props:{anchor:"transformers.TrainingArguments.set_push_to_hub.example",$$slots:{default:[Db]},$$scope:{ctx:C}}}),Lo=new $({props:{name:"set_save",anchor:"transformers.TrainingArguments.set_save",parameters:[{name:"strategy",val:": Union = 'steps'"},{name:"steps",val:": int = 500"},{name:"total_limit",val:": Optional = None"},{name:"on_each_node",val:": bool = False"}],parametersDescription:[{anchor:"transformers.TrainingArguments.set_save.strategy",description:`<strong>strategy</strong> (<code>str</code> or <a href="/docs/transformers/main/ja/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;steps&quot;</code>) &#x2014;
The checkpoint save strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No save is done during training.</li>
<li><code>&quot;epoch&quot;</code>: Save is done at the end of each epoch.</li>
<li><code>&quot;steps&quot;</code>: Save is done every <code>save_steps</code>.</li>
</ul>`,name:"strategy"},{anchor:"transformers.TrainingArguments.set_save.steps",description:`<strong>steps</strong> (<code>int</code>, <em>optional</em>, defaults to 500) &#x2014;
Number of updates steps before two checkpoint saves if <code>strategy=&quot;steps&quot;</code>.`,name:"steps"},{anchor:"transformers.TrainingArguments.set_save.total_limit",description:`<strong>total_limit</strong> (<code>int</code>, <em>optional</em>) &#x2014;
If a value is passed, will limit the total amount of checkpoints. Deletes the older checkpoints in
<code>output_dir</code>.`,name:"total_limit"},{anchor:"transformers.TrainingArguments.set_save.on_each_node",description:`<strong>on_each_node</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When doing multi-node distributed training, whether to save models and checkpoints on each node, or
only on the main one.</p>
<p>This should not be activated when the different nodes use the same storage as the files will be saved
with the same names for each node.`,name:"on_each_node"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/training_args.py#L2413"}}),dt=new Me({props:{anchor:"transformers.TrainingArguments.set_save.example",$$slots:{default:[Hb]},$$scope:{ctx:C}}}),Fo=new $({props:{name:"set_testing",anchor:"transformers.TrainingArguments.set_testing",parameters:[{name:"batch_size",val:": int = 8"},{name:"loss_only",val:": bool = False"},{name:"jit_mode",val:": bool = False"}],parametersDescription:[{anchor:"transformers.TrainingArguments.set_testing.batch_size",description:`<strong>batch_size</strong> (<code>int</code> <em>optional</em>, defaults to 8) &#x2014;
The batch size per device (GPU/TPU core/CPU&#x2026;) used for testing.`,name:"batch_size"},{anchor:"transformers.TrainingArguments.set_testing.loss_only",description:`<strong>loss_only</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Ignores all outputs except the loss.`,name:"loss_only"},{anchor:"transformers.TrainingArguments.set_testing.jit_mode",description:`<strong>jit_mode</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to use PyTorch jit trace for inference.`,name:"jit_mode"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/training_args.py#L2373"}}),ct=new jt({props:{$$slots:{default:[Rb]},$$scope:{ctx:C}}}),mt=new Me({props:{anchor:"transformers.TrainingArguments.set_testing.example",$$slots:{default:[Eb]},$$scope:{ctx:C}}}),Wo=new $({props:{name:"set_training",anchor:"transformers.TrainingArguments.set_training",parameters:[{name:"learning_rate",val:": float = 5e-05"},{name:"batch_size",val:": int = 8"},{name:"weight_decay",val:": float = 0"},{name:"num_epochs",val:": float = 3"},{name:"max_steps",val:": int = -1"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"seed",val:": int = 42"},{name:"gradient_checkpointing",val:": bool = False"}],parametersDescription:[{anchor:"transformers.TrainingArguments.set_training.learning_rate",description:`<strong>learning_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 5e-5) &#x2014;
The initial learning rate for the optimizer.`,name:"learning_rate"},{anchor:"transformers.TrainingArguments.set_training.batch_size",description:`<strong>batch_size</strong> (<code>int</code> <em>optional</em>, defaults to 8) &#x2014;
The batch size per device (GPU/TPU core/CPU&#x2026;) used for training.`,name:"batch_size"},{anchor:"transformers.TrainingArguments.set_training.weight_decay",description:`<strong>weight_decay</strong> (<code>float</code>, <em>optional</em>, defaults to 0) &#x2014;
The weight decay to apply (if not zero) to all layers except all bias and LayerNorm weights in the
optimizer.`,name:"weight_decay"},{anchor:"transformers.TrainingArguments.set_training.num_train_epochs(float,",description:`<strong>num_train_epochs(<code>float</code>,</strong> <em>optional</em>, defaults to 3.0) &#x2014;
Total number of training epochs to perform (if not an integer, will perform the decimal part percents
of the last epoch before stopping training).`,name:"num_train_epochs(float,"},{anchor:"transformers.TrainingArguments.set_training.max_steps",description:`<strong>max_steps</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
If set to a positive number, the total number of training steps to perform. Overrides <code>num_train_epochs</code>.
For a finite dataset, training is reiterated through the dataset (if all data is exhausted) until
<code>max_steps</code> is reached.`,name:"max_steps"},{anchor:"transformers.TrainingArguments.set_training.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Number of updates steps to accumulate the gradients for, before performing a backward/update pass.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>When using gradient accumulation, one step is counted as one step with backward pass. Therefore,
logging, evaluation, save will be conducted every <code>gradient_accumulation_steps * xxx_step</code> training
examples.</p>

					</div>`,name:"gradient_accumulation_steps"},{anchor:"transformers.TrainingArguments.set_training.seed",description:`<strong>seed</strong> (<code>int</code>, <em>optional</em>, defaults to 42) &#x2014;
Random seed that will be set at the beginning of training. To ensure reproducibility across runs, use
the <code>~Trainer.model_init</code> function to instantiate the model if it has some randomly initialized
parameters.`,name:"seed"},{anchor:"transformers.TrainingArguments.set_training.gradient_checkpointing",description:`<strong>gradient_checkpointing</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If True, use gradient checkpointing to save memory at the expense of slower backward pass.`,name:"gradient_checkpointing"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/training_args.py#L2237"}}),pt=new jt({props:{$$slots:{default:[Bb]},$$scope:{ctx:C}}}),ut=new Me({props:{anchor:"transformers.TrainingArguments.set_training.example",$$slots:{default:[Vb]},$$scope:{ctx:C}}}),zo=new $({props:{name:"to_dict",anchor:"transformers.TrainingArguments.to_dict",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/training_args.py#L2197"}}),No=new $({props:{name:"to_json_string",anchor:"transformers.TrainingArguments.to_json_string",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/training_args.py#L2217"}}),Do=new $({props:{name:"to_sanitized_dict",anchor:"transformers.TrainingArguments.to_sanitized_dict",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/training_args.py#L2223"}}),Ho=new P({props:{title:"Seq2SeqTrainingArguments",local:"transformers.Seq2SeqTrainingArguments",headingTag:"h2"}}),Ro=new $({props:{name:"class transformers.Seq2SeqTrainingArguments",anchor:"transformers.Seq2SeqTrainingArguments",parameters:[{name:"output_dir",val:": str"},{name:"overwrite_output_dir",val:": bool = False"},{name:"do_train",val:": bool = False"},{name:"do_eval",val:": bool = False"},{name:"do_predict",val:": bool = False"},{name:"evaluation_strategy",val:": Union = 'no'"},{name:"prediction_loss_only",val:": bool = False"},{name:"per_device_train_batch_size",val:": int = 8"},{name:"per_device_eval_batch_size",val:": int = 8"},{name:"per_gpu_train_batch_size",val:": Optional = None"},{name:"per_gpu_eval_batch_size",val:": Optional = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"eval_accumulation_steps",val:": Optional = None"},{name:"eval_delay",val:": Optional = 0"},{name:"learning_rate",val:": float = 5e-05"},{name:"weight_decay",val:": float = 0.0"},{name:"adam_beta1",val:": float = 0.9"},{name:"adam_beta2",val:": float = 0.999"},{name:"adam_epsilon",val:": float = 1e-08"},{name:"max_grad_norm",val:": float = 1.0"},{name:"num_train_epochs",val:": float = 3.0"},{name:"max_steps",val:": int = -1"},{name:"lr_scheduler_type",val:": Union = 'linear'"},{name:"lr_scheduler_kwargs",val:": Optional = <factory>"},{name:"warmup_ratio",val:": float = 0.0"},{name:"warmup_steps",val:": int = 0"},{name:"log_level",val:": Optional = 'passive'"},{name:"log_level_replica",val:": Optional = 'warning'"},{name:"log_on_each_node",val:": bool = True"},{name:"logging_dir",val:": Optional = None"},{name:"logging_strategy",val:": Union = 'steps'"},{name:"logging_first_step",val:": bool = False"},{name:"logging_steps",val:": float = 500"},{name:"logging_nan_inf_filter",val:": bool = True"},{name:"save_strategy",val:": Union = 'steps'"},{name:"save_steps",val:": float = 500"},{name:"save_total_limit",val:": Optional = None"},{name:"save_safetensors",val:": Optional = True"},{name:"save_on_each_node",val:": bool = False"},{name:"save_only_model",val:": bool = False"},{name:"no_cuda",val:": bool = False"},{name:"use_cpu",val:": bool = False"},{name:"use_mps_device",val:": bool = False"},{name:"seed",val:": int = 42"},{name:"data_seed",val:": Optional = None"},{name:"jit_mode_eval",val:": bool = False"},{name:"use_ipex",val:": bool = False"},{name:"bf16",val:": bool = False"},{name:"fp16",val:": bool = False"},{name:"fp16_opt_level",val:": str = 'O1'"},{name:"half_precision_backend",val:": str = 'auto'"},{name:"bf16_full_eval",val:": bool = False"},{name:"fp16_full_eval",val:": bool = False"},{name:"tf32",val:": Optional = None"},{name:"local_rank",val:": int = -1"},{name:"ddp_backend",val:": Optional = None"},{name:"tpu_num_cores",val:": Optional = None"},{name:"tpu_metrics_debug",val:": bool = False"},{name:"debug",val:": Union = ''"},{name:"dataloader_drop_last",val:": bool = False"},{name:"eval_steps",val:": Optional = None"},{name:"dataloader_num_workers",val:": int = 0"},{name:"dataloader_prefetch_factor",val:": int = None"},{name:"past_index",val:": int = -1"},{name:"run_name",val:": Optional = None"},{name:"disable_tqdm",val:": Optional = None"},{name:"remove_unused_columns",val:": Optional = True"},{name:"label_names",val:": Optional = None"},{name:"load_best_model_at_end",val:": Optional = False"},{name:"metric_for_best_model",val:": Optional = None"},{name:"greater_is_better",val:": Optional = None"},{name:"ignore_data_skip",val:": bool = False"},{name:"fsdp",val:": Union = ''"},{name:"fsdp_min_num_params",val:": int = 0"},{name:"fsdp_config",val:": Union = None"},{name:"fsdp_transformer_layer_cls_to_wrap",val:": Optional = None"},{name:"accelerator_config",val:": Optional = None"},{name:"deepspeed",val:": Optional = None"},{name:"label_smoothing_factor",val:": float = 0.0"},{name:"optim",val:": Union = 'adamw_torch'"},{name:"optim_args",val:": Optional = None"},{name:"adafactor",val:": bool = False"},{name:"group_by_length",val:": bool = False"},{name:"length_column_name",val:": Optional = 'length'"},{name:"report_to",val:": Optional = None"},{name:"ddp_find_unused_parameters",val:": Optional = None"},{name:"ddp_bucket_cap_mb",val:": Optional = None"},{name:"ddp_broadcast_buffers",val:": Optional = None"},{name:"dataloader_pin_memory",val:": bool = True"},{name:"dataloader_persistent_workers",val:": bool = False"},{name:"skip_memory_metrics",val:": bool = True"},{name:"use_legacy_prediction_loop",val:": bool = False"},{name:"push_to_hub",val:": bool = False"},{name:"resume_from_checkpoint",val:": Optional = None"},{name:"hub_model_id",val:": Optional = None"},{name:"hub_strategy",val:": Union = 'every_save'"},{name:"hub_token",val:": Optional = None"},{name:"hub_private_repo",val:": bool = False"},{name:"hub_always_push",val:": bool = False"},{name:"gradient_checkpointing",val:": bool = False"},{name:"gradient_checkpointing_kwargs",val:": Optional = None"},{name:"include_inputs_for_metrics",val:": bool = False"},{name:"fp16_backend",val:": str = 'auto'"},{name:"push_to_hub_model_id",val:": Optional = None"},{name:"push_to_hub_organization",val:": Optional = None"},{name:"push_to_hub_token",val:": Optional = None"},{name:"mp_parameters",val:": str = ''"},{name:"auto_find_batch_size",val:": bool = False"},{name:"full_determinism",val:": bool = False"},{name:"torchdynamo",val:": Optional = None"},{name:"ray_scope",val:": Optional = 'last'"},{name:"ddp_timeout",val:": Optional = 1800"},{name:"torch_compile",val:": bool = False"},{name:"torch_compile_backend",val:": Optional = None"},{name:"torch_compile_mode",val:": Optional = None"},{name:"dispatch_batches",val:": Optional = None"},{name:"split_batches",val:": Optional = None"},{name:"include_tokens_per_second",val:": Optional = False"},{name:"include_num_input_tokens_seen",val:": Optional = False"},{name:"neftune_noise_alpha",val:": Optional = None"},{name:"sortish_sampler",val:": bool = False"},{name:"predict_with_generate",val:": bool = False"},{name:"generation_max_length",val:": Optional = None"},{name:"generation_num_beams",val:": Optional = None"},{name:"generation_config",val:": Union = None"}],parametersDescription:[{anchor:"transformers.Seq2SeqTrainingArguments.output_dir",description:`<strong>output_dir</strong> (<code>str</code>) &#x2014;
The output directory where the model predictions and checkpoints will be written.`,name:"output_dir"},{anchor:"transformers.Seq2SeqTrainingArguments.overwrite_output_dir",description:`<strong>overwrite_output_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, overwrite the content of the output directory. Use this to continue training if <code>output_dir</code>
points to a checkpoint directory.`,name:"overwrite_output_dir"},{anchor:"transformers.Seq2SeqTrainingArguments.do_train",description:`<strong>do_train</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to run training or not. This argument is not directly used by <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used
by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/main/examples" rel="nofollow">example
scripts</a> for more details.`,name:"do_train"},{anchor:"transformers.Seq2SeqTrainingArguments.do_eval",description:`<strong>do_eval</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to run evaluation on the validation set or not. Will be set to <code>True</code> if <code>evaluation_strategy</code> is
different from <code>&quot;no&quot;</code>. This argument is not directly used by <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your
training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/main/examples" rel="nofollow">example
scripts</a> for more details.`,name:"do_eval"},{anchor:"transformers.Seq2SeqTrainingArguments.do_predict",description:`<strong>do_predict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to run predictions on the test set or not. This argument is not directly used by <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s
intended to be used by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/main/examples" rel="nofollow">example
scripts</a> for more details.`,name:"do_predict"},{anchor:"transformers.Seq2SeqTrainingArguments.evaluation_strategy",description:`<strong>evaluation_strategy</strong> (<code>str</code> or <a href="/docs/transformers/main/ja/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;no&quot;</code>) &#x2014;
The evaluation strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No evaluation is done during training.</li>
<li><code>&quot;steps&quot;</code>: Evaluation is done (and logged) every <code>eval_steps</code>.</li>
<li><code>&quot;epoch&quot;</code>: Evaluation is done at the end of each epoch.</li>
</ul>`,name:"evaluation_strategy"},{anchor:"transformers.Seq2SeqTrainingArguments.prediction_loss_only",description:`<strong>prediction_loss_only</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When performing evaluation and generating predictions, only returns the loss.`,name:"prediction_loss_only"},{anchor:"transformers.Seq2SeqTrainingArguments.per_device_train_batch_size",description:`<strong>per_device_train_batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The batch size per GPU/XPU/TPU/MPS/NPU core/CPU for training.`,name:"per_device_train_batch_size"},{anchor:"transformers.Seq2SeqTrainingArguments.per_device_eval_batch_size",description:`<strong>per_device_eval_batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The batch size per GPU/XPU/TPU/MPS/NPU core/CPU for evaluation.`,name:"per_device_eval_batch_size"},{anchor:"transformers.Seq2SeqTrainingArguments.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Number of updates steps to accumulate the gradients for, before performing a backward/update pass.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>When using gradient accumulation, one step is counted as one step with backward pass. Therefore, logging,
evaluation, save will be conducted every <code>gradient_accumulation_steps * xxx_step</code> training examples.</p>

					</div>`,name:"gradient_accumulation_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.eval_accumulation_steps",description:`<strong>eval_accumulation_steps</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of predictions steps to accumulate the output tensors for, before moving the results to the CPU. If
left unset, the whole predictions are accumulated on GPU/NPU/TPU before being moved to the CPU (faster but
requires more memory).`,name:"eval_accumulation_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.eval_delay",description:`<strong>eval_delay</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Number of epochs or steps to wait for before the first evaluation can be performed, depending on the
evaluation_strategy.`,name:"eval_delay"},{anchor:"transformers.Seq2SeqTrainingArguments.learning_rate",description:`<strong>learning_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 5e-5) &#x2014;
The initial learning rate for <a href="/docs/transformers/main/ja/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"learning_rate"},{anchor:"transformers.Seq2SeqTrainingArguments.weight_decay",description:`<strong>weight_decay</strong> (<code>float</code>, <em>optional</em>, defaults to 0) &#x2014;
The weight decay to apply (if not zero) to all layers except all bias and LayerNorm weights in <a href="/docs/transformers/main/ja/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a>
optimizer.`,name:"weight_decay"},{anchor:"transformers.Seq2SeqTrainingArguments.adam_beta1",description:`<strong>adam_beta1</strong> (<code>float</code>, <em>optional</em>, defaults to 0.9) &#x2014;
The beta1 hyperparameter for the <a href="/docs/transformers/main/ja/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_beta1"},{anchor:"transformers.Seq2SeqTrainingArguments.adam_beta2",description:`<strong>adam_beta2</strong> (<code>float</code>, <em>optional</em>, defaults to 0.999) &#x2014;
The beta2 hyperparameter for the <a href="/docs/transformers/main/ja/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_beta2"},{anchor:"transformers.Seq2SeqTrainingArguments.adam_epsilon",description:`<strong>adam_epsilon</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-8) &#x2014;
The epsilon hyperparameter for the <a href="/docs/transformers/main/ja/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_epsilon"},{anchor:"transformers.Seq2SeqTrainingArguments.max_grad_norm",description:`<strong>max_grad_norm</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Maximum gradient norm (for gradient clipping).`,name:"max_grad_norm"},{anchor:"transformers.Seq2SeqTrainingArguments.num_train_epochs(float,",description:`<strong>num_train_epochs(<code>float</code>,</strong> <em>optional</em>, defaults to 3.0) &#x2014;
Total number of training epochs to perform (if not an integer, will perform the decimal part percents of
the last epoch before stopping training).`,name:"num_train_epochs(float,"},{anchor:"transformers.Seq2SeqTrainingArguments.max_steps",description:`<strong>max_steps</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
If set to a positive number, the total number of training steps to perform. Overrides <code>num_train_epochs</code>.
For a finite dataset, training is reiterated through the dataset (if all data is exhausted) until
<code>max_steps</code> is reached.`,name:"max_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.lr_scheduler_type",description:`<strong>lr_scheduler_type</strong> (<code>str</code> or <a href="/docs/transformers/main/ja/main_classes/optimizer_schedules#transformers.SchedulerType">SchedulerType</a>, <em>optional</em>, defaults to <code>&quot;linear&quot;</code>) &#x2014;
The scheduler type to use. See the documentation of <a href="/docs/transformers/main/ja/main_classes/optimizer_schedules#transformers.SchedulerType">SchedulerType</a> for all possible values.`,name:"lr_scheduler_type"},{anchor:"transformers.Seq2SeqTrainingArguments.lr_scheduler_kwargs",description:`<strong>lr_scheduler_kwargs</strong> (&#x2018;dict&#x2019;, <em>optional</em>, defaults to {}) &#x2014;
The extra arguments for the lr_scheduler. See the documentation of each scheduler for possible values.`,name:"lr_scheduler_kwargs"},{anchor:"transformers.Seq2SeqTrainingArguments.warmup_ratio",description:`<strong>warmup_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
Ratio of total training steps used for a linear warmup from 0 to <code>learning_rate</code>.`,name:"warmup_ratio"},{anchor:"transformers.Seq2SeqTrainingArguments.warmup_steps",description:`<strong>warmup_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of steps used for a linear warmup from 0 to <code>learning_rate</code>. Overrides any effect of <code>warmup_ratio</code>.`,name:"warmup_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.log_level",description:`<strong>log_level</strong> (<code>str</code>, <em>optional</em>, defaults to <code>passive</code>) &#x2014;
Logger log level to use on the main process. Possible choices are the log levels as strings: &#x2018;debug&#x2019;,
&#x2018;info&#x2019;, &#x2018;warning&#x2019;, &#x2018;error&#x2019; and &#x2018;critical&#x2019;, plus a &#x2018;passive&#x2019; level which doesn&#x2019;t set anything and keeps the
current log level for the Transformers library (which will be <code>&quot;warning&quot;</code> by default).`,name:"log_level"},{anchor:"transformers.Seq2SeqTrainingArguments.log_level_replica",description:`<strong>log_level_replica</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;warning&quot;</code>) &#x2014;
Logger log level to use on replicas. Same choices as <code>log_level</code>&#x201D;`,name:"log_level_replica"},{anchor:"transformers.Seq2SeqTrainingArguments.log_on_each_node",description:`<strong>log_on_each_node</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
In multinode distributed training, whether to log using <code>log_level</code> once per node, or only on the main
node.`,name:"log_on_each_node"},{anchor:"transformers.Seq2SeqTrainingArguments.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <em>optional</em>) &#x2014;
<a href="https://www.tensorflow.org/tensorboard" rel="nofollow">TensorBoard</a> log directory. Will default to
*output_dir/runs/<strong>CURRENT_DATETIME_HOSTNAME*</strong>.`,name:"logging_dir"},{anchor:"transformers.Seq2SeqTrainingArguments.logging_strategy",description:`<strong>logging_strategy</strong> (<code>str</code> or <a href="/docs/transformers/main/ja/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;steps&quot;</code>) &#x2014;
The logging strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No logging is done during training.</li>
<li><code>&quot;epoch&quot;</code>: Logging is done at the end of each epoch.</li>
<li><code>&quot;steps&quot;</code>: Logging is done every <code>logging_steps</code>.</li>
</ul>`,name:"logging_strategy"},{anchor:"transformers.Seq2SeqTrainingArguments.logging_first_step",description:`<strong>logging_first_step</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to log the first <code>global_step</code> or not.`,name:"logging_first_step"},{anchor:"transformers.Seq2SeqTrainingArguments.logging_steps",description:`<strong>logging_steps</strong> (<code>int</code> or <code>float</code>, <em>optional</em>, defaults to 500) &#x2014;
Number of update steps between two logs if <code>logging_strategy=&quot;steps&quot;</code>. Should be an integer or a float in
range <code>[0,1)</code>. If smaller than 1, will be interpreted as ratio of total training steps.`,name:"logging_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.logging_nan_inf_filter",description:`<strong>logging_nan_inf_filter</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to filter <code>nan</code> and <code>inf</code> losses for logging. If set to <code>True</code> the loss of every step that is <code>nan</code>
or <code>inf</code> is filtered and the average loss of the current logging window is taken instead.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p><code>logging_nan_inf_filter</code> only influences the logging of loss values, it does not change the behavior the
gradient is computed or applied to the model.</p>

					</div>`,name:"logging_nan_inf_filter"},{anchor:"transformers.Seq2SeqTrainingArguments.save_strategy",description:`<strong>save_strategy</strong> (<code>str</code> or <a href="/docs/transformers/main/ja/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;steps&quot;</code>) &#x2014;
The checkpoint save strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No save is done during training.</li>
<li><code>&quot;epoch&quot;</code>: Save is done at the end of each epoch.</li>
<li><code>&quot;steps&quot;</code>: Save is done every <code>save_steps</code>.</li>
</ul>`,name:"save_strategy"},{anchor:"transformers.Seq2SeqTrainingArguments.save_steps",description:`<strong>save_steps</strong> (<code>int</code> or <code>float</code>, <em>optional</em>, defaults to 500) &#x2014;
Number of updates steps before two checkpoint saves if <code>save_strategy=&quot;steps&quot;</code>. Should be an integer or a
float in range <code>[0,1)</code>. If smaller than 1, will be interpreted as ratio of total training steps.`,name:"save_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.save_total_limit",description:`<strong>save_total_limit</strong> (<code>int</code>, <em>optional</em>) &#x2014;
If a value is passed, will limit the total amount of checkpoints. Deletes the older checkpoints in
<code>output_dir</code>. When <code>load_best_model_at_end</code> is enabled, the &#x201C;best&#x201D; checkpoint according to
<code>metric_for_best_model</code> will always be retained in addition to the most recent ones. For example, for
<code>save_total_limit=5</code> and <code>load_best_model_at_end</code>, the four last checkpoints will always be retained
alongside the best model. When <code>save_total_limit=1</code> and <code>load_best_model_at_end</code>, it is possible that two
checkpoints are saved: the last one and the best one (if they are different).`,name:"save_total_limit"},{anchor:"transformers.Seq2SeqTrainingArguments.save_safetensors",description:`<strong>save_safetensors</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Use <a href="https://huggingface.co/docs/safetensors" rel="nofollow">safetensors</a> saving and loading for state dicts instead of
default <code>torch.load</code> and <code>torch.save</code>.`,name:"save_safetensors"},{anchor:"transformers.Seq2SeqTrainingArguments.save_on_each_node",description:`<strong>save_on_each_node</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When doing multi-node distributed training, whether to save models and checkpoints on each node, or only on
the main one.</p>
<p>This should not be activated when the different nodes use the same storage as the files will be saved with
the same names for each node.`,name:"save_on_each_node"},{anchor:"transformers.Seq2SeqTrainingArguments.save_only_model",description:`<strong>save_only_model</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When checkpointing, whether to only save the model, or also the optimizer, scheduler &amp; rng state.
Note that when this is true, you won&#x2019;t be able to resume training from checkpoint.
This enables you to save storage by not storing the optimizer, scheduler &amp; rng state.
You can only load the model using <code>from_pretrained</code> with this option set to <code>True</code>.`,name:"save_only_model"},{anchor:"transformers.Seq2SeqTrainingArguments.use_cpu",description:`<strong>use_cpu</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to use cpu. If set to False, we will use cuda or mps device if available.`,name:"use_cpu"},{anchor:"transformers.Seq2SeqTrainingArguments.seed",description:`<strong>seed</strong> (<code>int</code>, <em>optional</em>, defaults to 42) &#x2014;
Random seed that will be set at the beginning of training. To ensure reproducibility across runs, use the
<code>~Trainer.model_init</code> function to instantiate the model if it has some randomly initialized parameters.`,name:"seed"},{anchor:"transformers.Seq2SeqTrainingArguments.data_seed",description:`<strong>data_seed</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Random seed to be used with data samplers. If not set, random generators for data sampling will use the
same seed as <code>seed</code>. This can be used to ensure reproducibility of data sampling, independent of the model
seed.`,name:"data_seed"},{anchor:"transformers.Seq2SeqTrainingArguments.jit_mode_eval",description:`<strong>jit_mode_eval</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to use PyTorch jit trace for inference.`,name:"jit_mode_eval"},{anchor:"transformers.Seq2SeqTrainingArguments.use_ipex",description:`<strong>use_ipex</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Use Intel extension for PyTorch when it is available. <a href="https://github.com/intel/intel-extension-for-pytorch" rel="nofollow">IPEX
installation</a>.`,name:"use_ipex"},{anchor:"transformers.Seq2SeqTrainingArguments.bf16",description:`<strong>bf16</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use bf16 16-bit (mixed) precision training instead of 32-bit training. Requires Ampere or higher
NVIDIA architecture or using CPU (use_cpu) or Ascend NPU. This is an experimental API and it may change.`,name:"bf16"},{anchor:"transformers.Seq2SeqTrainingArguments.fp16",description:`<strong>fp16</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use fp16 16-bit (mixed) precision training instead of 32-bit training.`,name:"fp16"},{anchor:"transformers.Seq2SeqTrainingArguments.fp16_opt_level",description:`<strong>fp16_opt_level</strong> (<code>str</code>, <em>optional</em>, defaults to &#x2018;O1&#x2019;) &#x2014;
For <code>fp16</code> training, Apex AMP optimization level selected in [&#x2018;O0&#x2019;, &#x2018;O1&#x2019;, &#x2018;O2&#x2019;, and &#x2018;O3&#x2019;]. See details on
the <a href="https://nvidia.github.io/apex/amp" rel="nofollow">Apex documentation</a>.`,name:"fp16_opt_level"},{anchor:"transformers.Seq2SeqTrainingArguments.fp16_backend",description:`<strong>fp16_backend</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
This argument is deprecated. Use <code>half_precision_backend</code> instead.`,name:"fp16_backend"},{anchor:"transformers.Seq2SeqTrainingArguments.half_precision_backend",description:`<strong>half_precision_backend</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
The backend to use for mixed precision training. Must be one of <code>&quot;auto&quot;, &quot;apex&quot;, &quot;cpu_amp&quot;</code>. <code>&quot;auto&quot;</code> will
use CPU/CUDA AMP or APEX depending on the PyTorch version detected, while the other choices will force the
requested backend.`,name:"half_precision_backend"},{anchor:"transformers.Seq2SeqTrainingArguments.bf16_full_eval",description:`<strong>bf16_full_eval</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use full bfloat16 evaluation instead of 32-bit. This will be faster and save memory but can harm
metric values. This is an experimental API and it may change.`,name:"bf16_full_eval"},{anchor:"transformers.Seq2SeqTrainingArguments.fp16_full_eval",description:`<strong>fp16_full_eval</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use full float16 evaluation instead of 32-bit. This will be faster and save memory but can harm
metric values.`,name:"fp16_full_eval"},{anchor:"transformers.Seq2SeqTrainingArguments.tf32",description:`<strong>tf32</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to enable the TF32 mode, available in Ampere and newer GPU architectures. The default value depends
on PyTorch&#x2019;s version default of <code>torch.backends.cuda.matmul.allow_tf32</code>. For more details please refer to
the <a href="https://huggingface.co/docs/transformers/performance#tf32" rel="nofollow">TF32</a> documentation. This is an
experimental API and it may change.`,name:"tf32"},{anchor:"transformers.Seq2SeqTrainingArguments.local_rank",description:`<strong>local_rank</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Rank of the process during distributed training.`,name:"local_rank"},{anchor:"transformers.Seq2SeqTrainingArguments.ddp_backend",description:`<strong>ddp_backend</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The backend to use for distributed training. Must be one of <code>&quot;nccl&quot;</code>, <code>&quot;mpi&quot;</code>, <code>&quot;ccl&quot;</code>, <code>&quot;gloo&quot;</code>, <code>&quot;hccl&quot;</code>.`,name:"ddp_backend"},{anchor:"transformers.Seq2SeqTrainingArguments.tpu_num_cores",description:`<strong>tpu_num_cores</strong> (<code>int</code>, <em>optional</em>) &#x2014;
When training on TPU, the number of TPU cores (automatically passed by launcher script).`,name:"tpu_num_cores"},{anchor:"transformers.Seq2SeqTrainingArguments.dataloader_drop_last",description:`<strong>dataloader_drop_last</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to drop the last incomplete batch (if the length of the dataset is not divisible by the batch size)
or not.`,name:"dataloader_drop_last"},{anchor:"transformers.Seq2SeqTrainingArguments.eval_steps",description:`<strong>eval_steps</strong> (<code>int</code> or <code>float</code>, <em>optional</em>) &#x2014;
Number of update steps between two evaluations if <code>evaluation_strategy=&quot;steps&quot;</code>. Will default to the same
value as <code>logging_steps</code> if not set. Should be an integer or a float in range <code>[0,1)</code>. If smaller than 1,
will be interpreted as ratio of total training steps.`,name:"eval_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.dataloader_num_workers",description:`<strong>dataloader_num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of subprocesses to use for data loading (PyTorch only). 0 means that the data will be loaded in the
main process.`,name:"dataloader_num_workers"},{anchor:"transformers.Seq2SeqTrainingArguments.past_index",description:`<strong>past_index</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Some models like <a href="../model_doc/transformerxl">TransformerXL</a> or <a href="../model_doc/xlnet">XLNet</a> can make use of
the past hidden states for their predictions. If this argument is set to a positive int, the <code>Trainer</code> will
use the corresponding output (usually index 2) as the past state and feed it to the model at the next
training step under the keyword argument <code>mems</code>.`,name:"past_index"},{anchor:"transformers.Seq2SeqTrainingArguments.run_name",description:`<strong>run_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
A descriptor for the run. Typically used for <a href="https://www.wandb.com/" rel="nofollow">wandb</a> and
<a href="https://www.mlflow.org/" rel="nofollow">mlflow</a> logging.`,name:"run_name"},{anchor:"transformers.Seq2SeqTrainingArguments.disable_tqdm",description:`<strong>disable_tqdm</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to disable the tqdm progress bars and table of metrics produced by
<code>~notebook.NotebookTrainingTracker</code> in Jupyter Notebooks. Will default to <code>True</code> if the logging level is
set to warn or lower (default), <code>False</code> otherwise.`,name:"disable_tqdm"},{anchor:"transformers.Seq2SeqTrainingArguments.remove_unused_columns",description:`<strong>remove_unused_columns</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to automatically remove the columns unused by the model forward method.`,name:"remove_unused_columns"},{anchor:"transformers.Seq2SeqTrainingArguments.label_names",description:`<strong>label_names</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
The list of keys in your dictionary of inputs that correspond to the labels.</p>
<p>Will eventually default to the list of argument names accepted by the model that contain the word &#x201C;label&#x201D;,
except if the model used is one of the <code>XxxForQuestionAnswering</code> in which case it will also include the
<code>[&quot;start_positions&quot;, &quot;end_positions&quot;]</code> keys.`,name:"label_names"},{anchor:"transformers.Seq2SeqTrainingArguments.load_best_model_at_end",description:`<strong>load_best_model_at_end</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to load the best model found during training at the end of training. When this option is
enabled, the best checkpoint will always be saved. See
<a href="https://huggingface.co/docs/transformers/main_classes/trainer#transformers.TrainingArguments.save_total_limit" rel="nofollow"><code>save_total_limit</code></a>
for more.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When set to <code>True</code>, the parameters <code>save_strategy</code> needs to be the same as <code>evaluation_strategy</code>, and in
the case it is &#x201C;steps&#x201D;, <code>save_steps</code> must be a round multiple of <code>eval_steps</code>.</p>

					</div>`,name:"load_best_model_at_end"},{anchor:"transformers.Seq2SeqTrainingArguments.metric_for_best_model",description:`<strong>metric_for_best_model</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Use in conjunction with <code>load_best_model_at_end</code> to specify the metric to use to compare two different
models. Must be the name of a metric returned by the evaluation with or without the prefix <code>&quot;eval_&quot;</code>. Will
default to <code>&quot;loss&quot;</code> if unspecified and <code>load_best_model_at_end=True</code> (to use the evaluation loss).</p>
<p>If you set this value, <code>greater_is_better</code> will default to <code>True</code>. Don&#x2019;t forget to set it to <code>False</code> if
your metric is better when lower.`,name:"metric_for_best_model"},{anchor:"transformers.Seq2SeqTrainingArguments.greater_is_better",description:`<strong>greater_is_better</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Use in conjunction with <code>load_best_model_at_end</code> and <code>metric_for_best_model</code> to specify if better models
should have a greater metric or not. Will default to:</p>
<ul>
<li><code>True</code> if <code>metric_for_best_model</code> is set to a value that isn&#x2019;t <code>&quot;loss&quot;</code> or <code>&quot;eval_loss&quot;</code>.</li>
<li><code>False</code> if <code>metric_for_best_model</code> is not set, or set to <code>&quot;loss&quot;</code> or <code>&quot;eval_loss&quot;</code>.</li>
</ul>`,name:"greater_is_better"},{anchor:"transformers.Seq2SeqTrainingArguments.ignore_data_skip",description:`<strong>ignore_data_skip</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When resuming training, whether or not to skip the epochs and batches to get the data loading at the same
stage as in the previous training. If set to <code>True</code>, the training will begin faster (as that skipping step
can take a long time) but will not yield the same results as the interrupted training would have.`,name:"ignore_data_skip"},{anchor:"transformers.Seq2SeqTrainingArguments.fsdp",description:`<strong>fsdp</strong> (<code>bool</code>, <code>str</code> or list of <code>FSDPOption</code>, <em>optional</em>, defaults to <code>&apos;&apos;</code>) &#x2014;
Use PyTorch Distributed Parallel Training (in distributed training only).</p>
<p>A list of options along the following:</p>
<ul>
<li><code>&quot;full_shard&quot;</code>: Shard parameters, gradients and optimizer states.</li>
<li><code>&quot;shard_grad_op&quot;</code>: Shard optimizer states and gradients.</li>
<li><code>&quot;hybrid_shard&quot;</code>: Apply <code>FULL_SHARD</code> within a node, and replicate parameters across nodes.</li>
<li><code>&quot;hybrid_shard_zero2&quot;</code>: Apply <code>SHARD_GRAD_OP</code> within a node, and replicate parameters across nodes.</li>
<li><code>&quot;offload&quot;</code>: Offload parameters and gradients to CPUs (only compatible with <code>&quot;full_shard&quot;</code> and
<code>&quot;shard_grad_op&quot;</code>).</li>
<li><code>&quot;auto_wrap&quot;</code>: Automatically recursively wrap layers with FSDP using <code>default_auto_wrap_policy</code>.</li>
</ul>`,name:"fsdp"},{anchor:"transformers.Seq2SeqTrainingArguments.fsdp_config",description:`<strong>fsdp_config</strong> (<code>str</code> or <code>dict</code>, <em>optional</em>) &#x2014;
Config to be used with fsdp (Pytorch Distributed Parallel Training). The value is either a location of
fsdp json config file (e.g., <code>fsdp_config.json</code>) or an already loaded json file as <code>dict</code>.</p>
<p>A List of config and its options:</p>
<ul>
<li>
<p>min_num_params (<code>int</code>, <em>optional</em>, defaults to <code>0</code>):
FSDP&#x2019;s minimum number of parameters for Default Auto Wrapping. (useful only when <code>fsdp</code> field is
passed).</p>
</li>
<li>
<p>transformer_layer_cls_to_wrap (<code>List[str]</code>, <em>optional</em>):
List of transformer layer class names (case-sensitive) to wrap, e.g, <code>BertLayer</code>, <code>GPTJBlock</code>,
<code>T5Block</code> &#x2026; (useful only when <code>fsdp</code> flag is passed).</p>
</li>
<li>
<p>backward_prefetch (<code>str</code>, <em>optional</em>)
FSDP&#x2019;s backward prefetch mode. Controls when to prefetch next set of parameters (useful only when
<code>fsdp</code> field is passed).</p>
<p>A list of options along the following:</p>
<ul>
<li><code>&quot;backward_pre&quot;</code> : Prefetches the next set of parameters before the current set of parameter&#x2019;s
gradient
computation.</li>
<li><code>&quot;backward_post&quot;</code> : This prefetches the next set of parameters after the current set of
parameter&#x2019;s
gradient computation.</li>
</ul>
</li>
<li>
<p>forward_prefetch (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>)
FSDP&#x2019;s forward prefetch mode (useful only when <code>fsdp</code> field is passed).
If <code>&quot;True&quot;</code>, then FSDP explicitly prefetches the next upcoming all-gather while executing in the
forward pass.</p>
</li>
<li>
<p>limit_all_gathers (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>)
FSDP&#x2019;s limit_all_gathers (useful only when <code>fsdp</code> field is passed).
If <code>&quot;True&quot;</code>, FSDP explicitly synchronizes the CPU thread to prevent too many in-flight
all-gathers.</p>
</li>
<li>
<p>use_orig_params (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>)
If <code>&quot;True&quot;</code>, allows non-uniform <code>requires_grad</code> during init, which means support for interspersed
frozen and trainable paramteres. Useful in cases such as parameter-efficient fine-tuning. Please
refer this
[blog](<a href="https://dev-discuss.pytorch.org/t/rethinking-pytorch-fully-sharded-data-parallel-fsdp-from-first-principles/1019" rel="nofollow">https://dev-discuss.pytorch.org/t/rethinking-pytorch-fully-sharded-data-parallel-fsdp-from-first-principles/1019</a></p>
</li>
<li>
<p>sync_module_states (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>)
If <code>&quot;True&quot;</code>, each individually wrapped FSDP unit will broadcast module parameters from rank 0 to
ensure they are the same across all ranks after initialization</p>
</li>
<li>
<p>activation_checkpointing (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>):
If <code>&quot;True&quot;</code>, activation checkpointing is a technique to reduce memory usage by clearing activations of
certain layers and recomputing them during a backward pass. Effectively, this trades extra
computation time for reduced memory usage.</p>
</li>
<li>
<p>xla (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>):
Whether to use PyTorch/XLA Fully Sharded Data Parallel Training. This is an experimental feature
and its API may evolve in the future.</p>
</li>
<li>
<p>xla_fsdp_settings (<code>dict</code>, <em>optional</em>)
The value is a dictionary which stores the XLA FSDP wrapping parameters.</p>
<p>For a complete list of options, please see <a href="https://github.com/pytorch/xla/blob/master/torch_xla/distributed/fsdp/xla_fully_sharded_data_parallel.py" rel="nofollow">here</a>.</p>
</li>
<li>
<p>xla_fsdp_grad_ckpt (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>):
Will use gradient checkpointing over each nested XLA FSDP wrapped layer. This setting can only be
used when the xla flag is set to true, and an auto wrapping policy is specified through
fsdp_min_num_params or fsdp_transformer_layer_cls_to_wrap.</p>
</li>
</ul>`,name:"fsdp_config"},{anchor:"transformers.Seq2SeqTrainingArguments.deepspeed",description:`<strong>deepspeed</strong> (<code>str</code> or <code>dict</code>, <em>optional</em>) &#x2014;
Use <a href="https://github.com/microsoft/deepspeed" rel="nofollow">Deepspeed</a>. This is an experimental feature and its API may
evolve in the future. The value is either the location of DeepSpeed json config file (e.g.,
<code>ds_config.json</code>) or an already loaded json file as a <code>dict</code>&#x201D;`,name:"deepspeed"},{anchor:"transformers.Seq2SeqTrainingArguments.accelerator_config",description:`<strong>accelerator_config</strong> (<code>str</code>, <code>dict</code>, or <code>AcceleratorConfig</code>, <em>optional</em>) &#x2014;
Config to be used with the internal <code>Accelerator</code> implementation. The value is either a location of
accelerator json config file (e.g., <code>accelerator_config.json</code>), an already loaded json file as <code>dict</code>,
or an instance of <code>AcceleratorConfig</code>.</p>
<p>A list of config and its options:</p>
<ul>
<li>split_batches (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>):
Whether or not the accelerator should split the batches yielded by the dataloaders across the devices. If
<code>True</code> the actual batch size used will be the same on any kind of distributed processes, but it must be a
round multiple of the <code>num_processes</code> you are using. If <code>False</code>, actual batch size used will be the one set
in your script multiplied by the number of processes.</li>
<li>dispatch_batches (<code>bool</code>, <em>optional</em>):
If set to <code>True</code>, the dataloader prepared by the Accelerator is only iterated through on the main process
and then the batches are split and broadcast to each process. Will default to <code>True</code> for <code>DataLoader</code> whose
underlying dataset is an <code>IterableDataset</code>, <code>False</code> otherwise.</li>
<li>even_batches (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>):
If set to <code>True</code>, in cases where the total batch size across all processes does not exactly divide the
dataset, samples at the start of the dataset will be duplicated so the batch can be divided equally among
all workers.</li>
<li>use_seedable_sampler (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>):
Whether or not use a fully seedable random sampler (<code>accelerate.data_loader.SeedableRandomSampler</code>). Ensures
training results are fully reproducable using a different sampling technique. While seed-to-seed results
may differ, on average the differences are neglible when using multiple different seeds to compare. Should
also be ran with <code>~utils.set_seed</code> for the best results.</li>
</ul>`,name:"accelerator_config"},{anchor:"transformers.Seq2SeqTrainingArguments.label_smoothing_factor",description:`<strong>label_smoothing_factor</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The label smoothing factor to use. Zero means no label smoothing, otherwise the underlying onehot-encoded
labels are changed from 0s and 1s to <code>label_smoothing_factor/num_labels</code> and <code>1 - label_smoothing_factor + label_smoothing_factor/num_labels</code> respectively.`,name:"label_smoothing_factor"},{anchor:"transformers.Seq2SeqTrainingArguments.debug",description:`<strong>debug</strong> (<code>str</code> or list of <code>DebugOption</code>, <em>optional</em>, defaults to <code>&quot;&quot;</code>) &#x2014;
Enable one or more debug features. This is an experimental feature.</p>
<p>Possible options are:</p>
<ul>
<li><code>&quot;underflow_overflow&quot;</code>: detects overflow in model&#x2019;s input/outputs and reports the last frames that led to
the event</li>
<li><code>&quot;tpu_metrics_debug&quot;</code>: print debug metrics on TPU</li>
</ul>
<p>The options should be separated by whitespaces.`,name:"debug"},{anchor:"transformers.Seq2SeqTrainingArguments.optim",description:`<strong>optim</strong> (<code>str</code> or <code>training_args.OptimizerNames</code>, <em>optional</em>, defaults to <code>&quot;adamw_torch&quot;</code>) &#x2014;
The optimizer to use: adamw_hf, adamw_torch, adamw_torch_fused, adamw_apex_fused, adamw_anyprecision or
adafactor.`,name:"optim"},{anchor:"transformers.Seq2SeqTrainingArguments.optim_args",description:`<strong>optim_args</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Optional arguments that are supplied to AnyPrecisionAdamW.`,name:"optim_args"},{anchor:"transformers.Seq2SeqTrainingArguments.group_by_length",description:`<strong>group_by_length</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to group together samples of roughly the same length in the training dataset (to minimize
padding applied and be more efficient). Only useful if applying dynamic padding.`,name:"group_by_length"},{anchor:"transformers.Seq2SeqTrainingArguments.length_column_name",description:`<strong>length_column_name</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;length&quot;</code>) &#x2014;
Column name for precomputed lengths. If the column exists, grouping by length will use these values rather
than computing them on train startup. Ignored unless <code>group_by_length</code> is <code>True</code> and the dataset is an
instance of <code>Dataset</code>.`,name:"length_column_name"},{anchor:"transformers.Seq2SeqTrainingArguments.report_to",description:`<strong>report_to</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>, defaults to <code>&quot;all&quot;</code>) &#x2014;
The list of integrations to report the results and logs to. Supported platforms are <code>&quot;azure_ml&quot;</code>,
<code>&quot;clearml&quot;</code>, <code>&quot;codecarbon&quot;</code>, <code>&quot;comet_ml&quot;</code>, <code>&quot;dagshub&quot;</code>, <code>&quot;dvclive&quot;</code>, <code>&quot;flyte&quot;</code>, <code>&quot;mlflow&quot;</code>, <code>&quot;neptune&quot;</code>,
<code>&quot;tensorboard&quot;</code>, and <code>&quot;wandb&quot;</code>. Use <code>&quot;all&quot;</code> to report to all integrations installed, <code>&quot;none&quot;</code> for no
integrations.`,name:"report_to"},{anchor:"transformers.Seq2SeqTrainingArguments.ddp_find_unused_parameters",description:`<strong>ddp_find_unused_parameters</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
When using distributed training, the value of the flag <code>find_unused_parameters</code> passed to
<code>DistributedDataParallel</code>. Will default to <code>False</code> if gradient checkpointing is used, <code>True</code> otherwise.`,name:"ddp_find_unused_parameters"},{anchor:"transformers.Seq2SeqTrainingArguments.ddp_bucket_cap_mb",description:`<strong>ddp_bucket_cap_mb</strong> (<code>int</code>, <em>optional</em>) &#x2014;
When using distributed training, the value of the flag <code>bucket_cap_mb</code> passed to <code>DistributedDataParallel</code>.`,name:"ddp_bucket_cap_mb"},{anchor:"transformers.Seq2SeqTrainingArguments.ddp_broadcast_buffers",description:`<strong>ddp_broadcast_buffers</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
When using distributed training, the value of the flag <code>broadcast_buffers</code> passed to
<code>DistributedDataParallel</code>. Will default to <code>False</code> if gradient checkpointing is used, <code>True</code> otherwise.`,name:"ddp_broadcast_buffers"},{anchor:"transformers.Seq2SeqTrainingArguments.dataloader_pin_memory",description:`<strong>dataloader_pin_memory</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether you want to pin memory in data loaders or not. Will default to <code>True</code>.`,name:"dataloader_pin_memory"},{anchor:"transformers.Seq2SeqTrainingArguments.dataloader_persistent_workers",description:`<strong>dataloader_persistent_workers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If True, the data loader will not shut down the worker processes after a dataset has been consumed once.
This allows to maintain the workers Dataset instances alive. Can potentially speed up training, but will
increase RAM usage. Will default to <code>False</code>.`,name:"dataloader_persistent_workers"},{anchor:"transformers.Seq2SeqTrainingArguments.dataloader_prefetch_factor",description:`<strong>dataloader_prefetch_factor</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of batches loaded in advance by each worker.
2 means there will be a total of 2 * num_workers batches prefetched across all workers.`,name:"dataloader_prefetch_factor"},{anchor:"transformers.Seq2SeqTrainingArguments.skip_memory_metrics",description:`<strong>skip_memory_metrics</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to skip adding of memory profiler reports to metrics. This is skipped by default because it slows
down the training and evaluation speed.`,name:"skip_memory_metrics"},{anchor:"transformers.Seq2SeqTrainingArguments.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push the model to the Hub every time the model is saved. If this is activated,
<code>output_dir</code> will begin a git directory synced with the repo (determined by <code>hub_model_id</code>) and the content
will be pushed each time a save is triggered (depending on your <code>save_strategy</code>). Calling
<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer.save_model">save_model()</a> will also trigger a push.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>If <code>output_dir</code> exists, it needs to be a local clone of the repository to which the <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a> will be
pushed.</p>

					</div>`,name:"push_to_hub"},{anchor:"transformers.Seq2SeqTrainingArguments.resume_from_checkpoint",description:`<strong>resume_from_checkpoint</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The path to a folder with a valid checkpoint for your model. This argument is not directly used by
<a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/main/examples" rel="nofollow">example
scripts</a> for more details.`,name:"resume_from_checkpoint"},{anchor:"transformers.Seq2SeqTrainingArguments.hub_model_id",description:`<strong>hub_model_id</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The name of the repository to keep in sync with the local <em>output_dir</em>. It can be a simple model ID in
which case the model will be pushed in your namespace. Otherwise it should be the whole repository name,
for instance <code>&quot;user_name/model&quot;</code>, which allows you to push to an organization you are a member of with
<code>&quot;organization_name/model&quot;</code>. Will default to <code>user_name/output_dir_name</code> with <em>output_dir_name</em> being the
name of <code>output_dir</code>.</p>
<p>Will default to the name of <code>output_dir</code>.`,name:"hub_model_id"},{anchor:"transformers.Seq2SeqTrainingArguments.hub_strategy",description:`<strong>hub_strategy</strong> (<code>str</code> or <code>HubStrategy</code>, <em>optional</em>, defaults to <code>&quot;every_save&quot;</code>) &#x2014;
Defines the scope of what is pushed to the Hub and when. Possible values are:</p>
<ul>
<li><code>&quot;end&quot;</code>: push the model, its configuration, the tokenizer (if passed along to the <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>) and a
draft of a model card when the <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer.save_model">save_model()</a> method is called.</li>
<li><code>&quot;every_save&quot;</code>: push the model, its configuration, the tokenizer (if passed along to the <a href="/docs/transformers/main/ja/main_classes/trainer#transformers.Trainer">Trainer</a>) and
a draft of a model card each time there is a model save. The pushes are asynchronous to not block
training, and in case the save are very frequent, a new push is only attempted if the previous one is
finished. A last push is made with the final model at the end of training.</li>
<li><code>&quot;checkpoint&quot;</code>: like <code>&quot;every_save&quot;</code> but the latest checkpoint is also pushed in a subfolder named
last-checkpoint, allowing you to resume training easily with
<code>trainer.train(resume_from_checkpoint=&quot;last-checkpoint&quot;)</code>.</li>
<li><code>&quot;all_checkpoints&quot;</code>: like <code>&quot;checkpoint&quot;</code> but all checkpoints are pushed like they appear in the output
folder (so you will get one checkpoint folder per folder in your final repository)</li>
</ul>`,name:"hub_strategy"},{anchor:"transformers.Seq2SeqTrainingArguments.hub_token",description:`<strong>hub_token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The token to use to push the model to the Hub. Will default to the token in the cache folder obtained with
<code>huggingface-cli login</code>.`,name:"hub_token"},{anchor:"transformers.Seq2SeqTrainingArguments.hub_private_repo",description:`<strong>hub_private_repo</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If True, the Hub repo will be set to private.`,name:"hub_private_repo"},{anchor:"transformers.Seq2SeqTrainingArguments.hub_always_push",description:`<strong>hub_always_push</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Unless this is <code>True</code>, the <code>Trainer</code> will skip pushing a checkpoint when the previous push is not finished.`,name:"hub_always_push"},{anchor:"transformers.Seq2SeqTrainingArguments.gradient_checkpointing",description:`<strong>gradient_checkpointing</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If True, use gradient checkpointing to save memory at the expense of slower backward pass.`,name:"gradient_checkpointing"},{anchor:"transformers.Seq2SeqTrainingArguments.gradient_checkpointing_kwargs",description:`<strong>gradient_checkpointing_kwargs</strong> (<code>dict</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Key word arguments to be passed to the <code>gradient_checkpointing_enable</code> method.`,name:"gradient_checkpointing_kwargs"},{anchor:"transformers.Seq2SeqTrainingArguments.include_inputs_for_metrics",description:`<strong>include_inputs_for_metrics</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the inputs will be passed to the <code>compute_metrics</code> function. This is intended for metrics
that need inputs, predictions and references for scoring calculation in Metric class.`,name:"include_inputs_for_metrics"},{anchor:"transformers.Seq2SeqTrainingArguments.auto_find_batch_size",description:`<strong>auto_find_batch_size</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to find a batch size that will fit into memory automatically through exponential decay, avoiding
CUDA Out-of-Memory errors. Requires accelerate to be installed (<code>pip install accelerate</code>)`,name:"auto_find_batch_size"},{anchor:"transformers.Seq2SeqTrainingArguments.full_determinism",description:`<strong>full_determinism</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, <a href="/docs/transformers/main/ja/internal/trainer_utils#transformers.enable_full_determinism">enable_full_determinism()</a> is called instead of <a href="/docs/transformers/main/ja/internal/trainer_utils#transformers.set_seed">set_seed()</a> to ensure reproducible results in
distributed training. Important: this will negatively impact the performance, so only use it for debugging.`,name:"full_determinism"},{anchor:"transformers.Seq2SeqTrainingArguments.torchdynamo",description:`<strong>torchdynamo</strong> (<code>str</code>, <em>optional</em>) &#x2014;
If set, the backend compiler for TorchDynamo. Possible choices are <code>&quot;eager&quot;</code>, <code>&quot;aot_eager&quot;</code>, <code>&quot;inductor&quot;</code>,
<code>&quot;nvfuser&quot;</code>, <code>&quot;aot_nvfuser&quot;</code>, <code>&quot;aot_cudagraphs&quot;</code>, <code>&quot;ofi&quot;</code>, <code>&quot;fx2trt&quot;</code>, <code>&quot;onnxrt&quot;</code> and <code>&quot;ipex&quot;</code>.`,name:"torchdynamo"},{anchor:"transformers.Seq2SeqTrainingArguments.ray_scope",description:`<strong>ray_scope</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;last&quot;</code>) &#x2014;
The scope to use when doing hyperparameter search with Ray. By default, <code>&quot;last&quot;</code> will be used. Ray will
then use the last checkpoint of all trials, compare those, and select the best one. However, other options
are also available. See the <a href="https://docs.ray.io/en/latest/tune/api_docs/analysis.html#ray.tune.ExperimentAnalysis.get_best_trial" rel="nofollow">Ray documentation</a> for
more options.`,name:"ray_scope"},{anchor:"transformers.Seq2SeqTrainingArguments.ddp_timeout",description:`<strong>ddp_timeout</strong> (<code>int</code>, <em>optional</em>, defaults to 1800) &#x2014;
The timeout for <code>torch.distributed.init_process_group</code> calls, used to avoid GPU socket timeouts when
performing slow operations in distributed runnings. Please refer the [PyTorch documentation]
(<a href="https://pytorch.org/docs/stable/distributed.html#torch.distributed.init_process_group" rel="nofollow">https://pytorch.org/docs/stable/distributed.html#torch.distributed.init_process_group</a>) for more
information.`,name:"ddp_timeout"},{anchor:"transformers.Seq2SeqTrainingArguments.use_mps_device",description:`<strong>use_mps_device</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
This argument is deprecated.<code>mps</code> device will be used if it is available similar to <code>cuda</code> device.`,name:"use_mps_device"},{anchor:"transformers.Seq2SeqTrainingArguments.torch_compile",description:`<strong>torch_compile</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to compile the model using PyTorch 2.0
<a href="https://pytorch.org/get-started/pytorch-2.0/" rel="nofollow"><code>torch.compile</code></a>.</p>
<p>This will use the best defaults for the <a href="https://pytorch.org/docs/stable/generated/torch.compile.html?highlight=torch+compile#torch.compile" rel="nofollow"><code>torch.compile</code>
API</a>.
You can customize the defaults with the argument <code>torch_compile_backend</code> and <code>torch_compile_mode</code> but we
don&#x2019;t guarantee any of them will work as the support is progressively rolled in in PyTorch.</p>
<p>This flag and the whole compile API is experimental and subject to change in future releases.`,name:"torch_compile"},{anchor:"transformers.Seq2SeqTrainingArguments.torch_compile_backend",description:`<strong>torch_compile_backend</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The backend to use in <code>torch.compile</code>. If set to any value, <code>torch_compile</code> will be set to <code>True</code>.</p>
<p>Refer to the PyTorch doc for possible values and note that they may change across PyTorch versions.</p>
<p>This flag is experimental and subject to change in future releases.`,name:"torch_compile_backend"},{anchor:"transformers.Seq2SeqTrainingArguments.torch_compile_mode",description:`<strong>torch_compile_mode</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The mode to use in <code>torch.compile</code>. If set to any value, <code>torch_compile</code> will be set to <code>True</code>.</p>
<p>Refer to the PyTorch doc for possible values and note that they may change across PyTorch versions.</p>
<p>This flag is experimental and subject to change in future releases.`,name:"torch_compile_mode"},{anchor:"transformers.Seq2SeqTrainingArguments.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the accelerator should split the batches yielded by the dataloaders across the devices
during distributed training. If</p>
<p>set to <code>True</code>, the actual batch size used will be the same on any kind of distributed processes, but it
must be a</p>
<p>round multiple of the number of processes you are using (such as GPUs).`,name:"split_batches"},{anchor:"transformers.Seq2SeqTrainingArguments.include_tokens_per_second",description:`<strong>include_tokens_per_second</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to compute the number of tokens per second per device for training speed metrics.</p>
<p>This will iterate over the entire training dataloader once beforehand,</p>
<p>and will slow down the entire process.`,name:"include_tokens_per_second"},{anchor:"transformers.Seq2SeqTrainingArguments.include_num_input_tokens_seen",description:`<strong>include_num_input_tokens_seen</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to track the number of input tokens seen throughout training.</p>
<p>May be slower in distributed training as gather operations must be called.`,name:"include_num_input_tokens_seen"},{anchor:"transformers.Seq2SeqTrainingArguments.neftune_noise_alpha",description:`<strong>neftune_noise_alpha</strong> (<code>Optional[float]</code>) &#x2014;
If not <code>None</code>, this will activate NEFTune noise embeddings. This can drastically improve model performance
for instruction fine-tuning. Check out the <a href="https://arxiv.org/abs/2310.05914" rel="nofollow">original paper</a> and the
<a href="https://github.com/neelsjain/NEFTune" rel="nofollow">original code</a>. Support transformers <code>PreTrainedModel</code> and also
<code>PeftModel</code> from peft.`,name:"neftune_noise_alpha"},{anchor:"transformers.Seq2SeqTrainingArguments.sortish_sampler",description:`<strong>sortish_sampler</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use a <em>sortish sampler</em> or not. Only possible if the underlying datasets are <em>Seq2SeqDataset</em>
for now but will become generally available in the near future.</p>
<p>It sorts the inputs according to lengths in order to minimize the padding size, with a bit of randomness
for the training set.`,name:"sortish_sampler"},{anchor:"transformers.Seq2SeqTrainingArguments.predict_with_generate",description:`<strong>predict_with_generate</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use generate to calculate generative metrics (ROUGE, BLEU).`,name:"predict_with_generate"},{anchor:"transformers.Seq2SeqTrainingArguments.generation_max_length",description:`<strong>generation_max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The <code>max_length</code> to use on each evaluation loop when <code>predict_with_generate=True</code>. Will default to the
<code>max_length</code> value of the model configuration.`,name:"generation_max_length"},{anchor:"transformers.Seq2SeqTrainingArguments.generation_num_beams",description:`<strong>generation_num_beams</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The <code>num_beams</code> to use on each evaluation loop when <code>predict_with_generate=True</code>. Will default to the
<code>num_beams</code> value of the model configuration.`,name:"generation_num_beams"},{anchor:"transformers.Seq2SeqTrainingArguments.generation_config",description:`<strong>generation_config</strong> (<code>str</code> or <code>Path</code> or <a href="/docs/transformers/main/ja/main_classes/text_generation#transformers.GenerationConfig">GenerationConfig</a>, <em>optional</em>) &#x2014;
Allows to load a <a href="/docs/transformers/main/ja/main_classes/text_generation#transformers.GenerationConfig">GenerationConfig</a> from the <code>from_pretrained</code> method. This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co.</li>
<li>a path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/ja/main_classes/text_generation#transformers.GenerationConfig.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>a <a href="/docs/transformers/main/ja/main_classes/text_generation#transformers.GenerationConfig">GenerationConfig</a> object.</li>
</ul>`,name:"generation_config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/training_args_seq2seq.py#L28"}}),Eo=new $({props:{name:"to_dict",anchor:"transformers.Seq2SeqTrainingArguments.to_dict",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/training_args_seq2seq.py#L86"}}),Bo=new P({props:{title:"Checkpoints",local:"checkpoints",headingTag:"h2"}}),Oo=new P({props:{title:"Logging",local:"logging",headingTag:"h2"}}),an=new q({props:{code:"JTVCLi4uJTVEJTBBbG9nZ2VyJTIwJTNEJTIwbG9nZ2luZy5nZXRMb2dnZXIoX19uYW1lX18pJTBBJTBBJTIzJTIwU2V0dXAlMjBsb2dnaW5nJTBBbG9nZ2luZy5iYXNpY0NvbmZpZyglMEElMjAlMjAlMjAlMjBmb3JtYXQlM0QlMjIlMjUoYXNjdGltZSlzJTIwLSUyMCUyNShsZXZlbG5hbWUpcyUyMC0lMjAlMjUobmFtZSlzJTIwLSUyMCUyNShtZXNzYWdlKXMlMjIlMkMlMEElMjAlMjAlMjAlMjBkYXRlZm10JTNEJTIyJTI1bSUyRiUyNWQlMkYlMjVZJTIwJTI1SCUzQSUyNU0lM0ElMjVTJTIyJTJDJTBBJTIwJTIwJTIwJTIwaGFuZGxlcnMlM0QlNUJsb2dnaW5nLlN0cmVhbUhhbmRsZXIoc3lzLnN0ZG91dCklNUQlMkMlMEEpJTBBJTBBJTIzJTIwc2V0JTIwdGhlJTIwbWFpbiUyMGNvZGUlMjBhbmQlMjB0aGUlMjBtb2R1bGVzJTIwaXQlMjB1c2VzJTIwdG8lMjB0aGUlMjBzYW1lJTIwbG9nLWxldmVsJTIwYWNjb3JkaW5nJTIwdG8lMjB0aGUlMjBub2RlJTBBbG9nX2xldmVsJTIwJTNEJTIwdHJhaW5pbmdfYXJncy5nZXRfcHJvY2Vzc19sb2dfbGV2ZWwoKSUwQWxvZ2dlci5zZXRMZXZlbChsb2dfbGV2ZWwpJTBBZGF0YXNldHMudXRpbHMubG9nZ2luZy5zZXRfdmVyYm9zaXR5KGxvZ19sZXZlbCklMEF0cmFuc2Zvcm1lcnMudXRpbHMubG9nZ2luZy5zZXRfdmVyYm9zaXR5KGxvZ19sZXZlbCklMEElMEF0cmFpbmVyJTIwJTNEJTIwVHJhaW5lciguLi4p",highlighted:`[...]
logger = logging.getLogger(__name__)

<span class="hljs-comment"># Setup logging</span>
logging.basicConfig(
    <span class="hljs-built_in">format</span>=<span class="hljs-string">&quot;%(asctime)s - %(levelname)s - %(name)s - %(message)s&quot;</span>,
    datefmt=<span class="hljs-string">&quot;%m/%d/%Y %H:%M:%S&quot;</span>,
    handlers=[logging.StreamHandler(sys.stdout)],
)

<span class="hljs-comment"># set the main code and the modules it uses to the same log-level according to the node</span>
log_level = training_args.get_process_log_level()
logger.setLevel(log_level)
datasets.utils.logging.set_verbosity(log_level)
transformers.utils.logging.set_verbosity(log_level)

trainer = Trainer(...)`,wrap:!1}}),sn=new q({props:{code:"bXlfYXBwLnB5JTIwLi4uJTIwLS1sb2dfbGV2ZWwlMjB3YXJuaW5nJTIwLS1sb2dfbGV2ZWxfcmVwbGljYSUyMGVycm9y",highlighted:"my_app.py ... --log_level warning --log_level_replica error",wrap:!1}}),dn=new q({props:{code:"bXlfYXBwLnB5JTIwLi4uJTIwLS1sb2dfbGV2ZWwlMjB3YXJuaW5nJTIwLS1sb2dfbGV2ZWxfcmVwbGljYSUyMGVycm9yJTIwLS1sb2dfb25fZWFjaF9ub2RlJTIwMA==",highlighted:"my_app.py ... --log_level warning --log_level_replica error --log_on_each_node 0",wrap:!1}}),pn=new q({props:{code:"bXlfYXBwLnB5JTIwLi4uJTIwLS1sb2dfbGV2ZWwlMjBlcnJvciUyMC0tbG9nX2xldmVsX3JlcGxpY2ElMjBlcnJvciUyMC0tbG9nX29uX2VhY2hfbm9kZSUyMDA=",highlighted:"my_app.py ... --log_level error --log_level_replica error --log_on_each_node 0",wrap:!1}}),hn=new P({props:{title:"Randomness",local:"randomness",headingTag:"h2"}}),_n=new P({props:{title:"Specific GPUs Selection",local:"specific-gpus-selection",headingTag:"h2"}}),Tn=new q({props:{code:"dG9yY2hydW4lMjAtLW5wcm9jX3Blcl9ub2RlJTNEMiUyMCUyMHRyYWluZXItcHJvZ3JhbS5weSUyMC4uLg==",highlighted:"torchrun --nproc_per_node=2  trainer-program.py ...",wrap:!1}}),wn=new q({props:{code:"YWNjZWxlcmF0ZSUyMGxhdW5jaCUyMC0tbnVtX3Byb2Nlc3NlcyUyMDIlMjB0cmFpbmVyLXByb2dyYW0ucHklMjAuLi4=",highlighted:"accelerate launch --num_processes 2 trainer-program.py ...",wrap:!1}}),xn=new q({props:{code:"ZGVlcHNwZWVkJTIwLS1udW1fZ3B1cyUyMDIlMjB0cmFpbmVyLXByb2dyYW0ucHklMjAuLi4=",highlighted:"deepspeed --num_gpus 2 trainer-program.py ...",wrap:!1}}),Cn=new q({props:{code:"Q1VEQV9WSVNJQkxFX0RFVklDRVMlM0QwJTJDMiUyMHRvcmNocnVuJTIwdHJhaW5lci1wcm9ncmFtLnB5JTIwLi4u",highlighted:"CUDA_VISIBLE_DEVICES=0,2 torchrun trainer-program.py ...",wrap:!1}}),Un=new q({props:{code:"Q1VEQV9WSVNJQkxFX0RFVklDRVMlM0QyJTJDMCUyMHRvcmNocnVuJTIwdHJhaW5lci1wcm9ncmFtLnB5JTIwLi4u",highlighted:"CUDA_VISIBLE_DEVICES=2,0 torchrun trainer-program.py ...",wrap:!1}}),Ln=new q({props:{code:"Q1VEQV9WSVNJQkxFX0RFVklDRVMlM0QyJTJDMCUyMHB5dGhvbiUyMHRyYWluZXItcHJvZ3JhbS5weSUyMC4uLg==",highlighted:"CUDA_VISIBLE_DEVICES=2,0 python trainer-program.py ...",wrap:!1}}),Wn=new q({props:{code:"Q1VEQV9WSVNJQkxFX0RFVklDRVMlM0QlMjBweXRob24lMjB0cmFpbmVyLXByb2dyYW0ucHklMjAuLi4=",highlighted:"CUDA_VISIBLE_DEVICES= python trainer-program.py ...",wrap:!1}}),Nn=new q({props:{code:"ZXhwb3J0JTIwQ1VEQV9WSVNJQkxFX0RFVklDRVMlM0QwJTJDMiUwQXRvcmNocnVuJTIwdHJhaW5lci1wcm9ncmFtLnB5JTIwLi4u",highlighted:`<span class="hljs-built_in">export</span> CUDA_VISIBLE_DEVICES=0,2
torchrun trainer-program.py ...`,wrap:!1}}),Bn=new q({props:{code:"ZXhwb3J0JTIwQ1VEQV9ERVZJQ0VfT1JERVIlM0RQQ0lfQlVTX0lE",highlighted:'<span class="hljs-built_in">export</span> CUDA_DEVICE_ORDER=PCI_BUS_ID',wrap:!1}}),Vn=new q({props:{code:"ZXhwb3J0JTIwQ1VEQV9ERVZJQ0VfT1JERVIlM0RGQVNURVNUX0ZJUlNU",highlighted:'<span class="hljs-built_in">export</span> CUDA_DEVICE_ORDER=FASTEST_FIRST',wrap:!1}}),Gn=new q({props:{code:"ZXhwb3J0JTIwQ1VEQV9WSVNJQkxFX0RFVklDRVMlM0QxJTJDMA==",highlighted:'<span class="hljs-built_in">export</span> CUDA_VISIBLE_DEVICES=1,0',wrap:!1}}),Yn=new P({props:{title:"Trainer Integrations",local:"trainer-integrations",headingTag:"h2"}}),oa=new P({props:{title:"CUDA Extension Installation Notes",local:"cuda-extension-installation-notes",headingTag:"h3"}}),sa=new q({props:{code:"cGlwJTIwaW5zdGFsbCUyMGRlZXBzcGVlZA==",highlighted:"pip install deepspeed",wrap:!1}}),da=new P({props:{title:"Possible problem #1",local:"possible-problem-1",headingTag:"h4"}}),ua=new q({props:{code:"d2hpY2glMjBudmNj",highlighted:'<span class="hljs-built_in">which</span> nvcc',wrap:!1}}),ga=new P({props:{title:"Possible problem #2",local:"possible-problem-2",headingTag:"h4"}}),_a=new q({props:{code:"JTJGdXNyJTJGbG9jYWwlMkZjdWRhLTEwLjIlMEElMkZ1c3IlMkZsb2NhbCUyRmN1ZGEtMTEuMA==",highlighted:`/usr/local/cuda-10.2
/usr/local/cuda-11.0`,wrap:!1}}),Ta=new q({props:{code:"ZWNobyUyMCUyNFBBVEglMEFlY2hvJTIwJTI0TERfTElCUkFSWV9QQVRI",highlighted:`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span>
<span class="hljs-built_in">echo</span> <span class="hljs-variable">$LD_LIBRARY_PATH</span>`,wrap:!1}}),$a=new q({props:{code:"ZXhwb3J0JTIwUEFUSCUzRCUyRnVzciUyRmxvY2FsJTJGY3VkYS0xMC4yJTJGYmluJTNBJTI0UEFUSCUwQWV4cG9ydCUyMExEX0xJQlJBUllfUEFUSCUzRCUyRnVzciUyRmxvY2FsJTJGY3VkYS0xMC4yJTJGbGliNjQlM0ElMjRMRF9MSUJSQVJZX1BBVEg=",highlighted:`<span class="hljs-built_in">export</span> PATH=/usr/local/cuda-10.2/bin:<span class="hljs-variable">$PATH</span>
<span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64:<span class="hljs-variable">$LD_LIBRARY_PATH</span>`,wrap:!1}}),Aa=new P({props:{title:"Possible problem #3",local:"possible-problem-3",headingTag:"h4"}}),Ua=new q({props:{code:"c3VkbyUyMGxuJTIwLXMlMjAlMkZ1c3IlMkZiaW4lMkZnY2MtNyUyMCUyMCUyRnVzciUyRmxvY2FsJTJGY3VkYS0xMC4yJTJGYmluJTJGZ2NjJTBBc3VkbyUyMGxuJTIwLXMlMjAlMkZ1c3IlMkZiaW4lMkZnJTJCJTJCLTclMjAlMjAlMkZ1c3IlMkZsb2NhbCUyRmN1ZGEtMTAuMiUyRmJpbiUyRmclMkIlMkI=",highlighted:`sudo <span class="hljs-built_in">ln</span> -s /usr/bin/gcc-7  /usr/local/cuda-10.2/bin/gcc
sudo <span class="hljs-built_in">ln</span> -s /usr/bin/g++-7  /usr/local/cuda-10.2/bin/g++`,wrap:!1}}),La=new P({props:{title:"PyTorch Fully Sharded Data parallel",local:"pytorch-fully-sharded-data-parallel",headingTag:"h3"}}),Ra=new P({props:{title:"PyTorch/XLA Fully Sharded Data parallel",local:"pytorchxla-fully-sharded-data-parallel",headingTag:"h3"}}),Ga=new P({props:{title:"Using Trainer for accelerated PyTorch Training on Mac",local:"using-trainer-for-accelerated-pytorch-training-on-mac",headingTag:"h3"}}),vt=new jt({props:{warning:!1,$$slots:{default:[Zb]},$$scope:{ctx:C}}}),tr=new q({props:{code:"ZXhwb3J0JTIwVEFTS19OQU1FJTNEbXJwYyUwQSUwQXB5dGhvbiUyMGV4YW1wbGVzJTJGcHl0b3JjaCUyRnRleHQtY2xhc3NpZmljYXRpb24lMkZydW5fZ2x1ZS5weSUyMCU1QyUwQSUyMCUyMC0tbW9kZWxfbmFtZV9vcl9wYXRoJTIwZ29vZ2xlLWJlcnQlMkZiZXJ0LWJhc2UtY2FzZWQlMjAlNUMlMEElMjAlMjAtLXRhc2tfbmFtZSUyMCUyNFRBU0tfTkFNRSUyMCU1QyUwQSUyMCUyMC0tZG9fdHJhaW4lMjAlNUMlMEElMjAlMjAtLWRvX2V2YWwlMjAlNUMlMEElMjAlMjAtLW1heF9zZXFfbGVuZ3RoJTIwMTI4JTIwJTVDJTBBJTIwJTIwLS1wZXJfZGV2aWNlX3RyYWluX2JhdGNoX3NpemUlMjAzMiUyMCU1QyUwQSUyMCUyMC0tbGVhcm5pbmdfcmF0ZSUyMDJlLTUlMjAlNUMlMEElMjAlMjAtLW51bV90cmFpbl9lcG9jaHMlMjAzJTIwJTVDJTBBJTIwJTIwLS1vdXRwdXRfZGlyJTIwJTJGdG1wJTJGJTI0VEFTS19OQU1FJTJGJTIwJTVDJTBBJTIwJTIwLS1vdmVyd3JpdGVfb3V0cHV0X2Rpcg==",highlighted:`<span class="hljs-built_in">export</span> TASK_NAME=mrpc

python examples/pytorch/text-classification/run_glue.py \\
  --model_name_or_path google-bert/bert-base-cased \\
  --task_name <span class="hljs-variable">$TASK_NAME</span> \\
  --do_train \\
  --do_eval \\
  --max_seq_length 128 \\
  --per_device_train_batch_size 32 \\
  --learning_rate 2e-5 \\
  --num_train_epochs 3 \\
  --output_dir /tmp/<span class="hljs-variable">$TASK_NAME</span>/ \\
  --overwrite_output_dir`,wrap:!1}}),rr=new P({props:{title:"Using Accelerate Launcher with Trainer",local:"using-accelerate-launcher-with-trainer",headingTag:"h2"}}),dr=new q({props:{code:"Y29tcHV0ZV9lbnZpcm9ubWVudCUzQSUyMExPQ0FMX01BQ0hJTkUlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMEFkaXN0cmlidXRlZF90eXBlJTNBJTIwTVVMVElfR1BVJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTBBZG93bmNhc3RfYmYxNiUzQSUyMCdubyclMEFncHVfaWRzJTNBJTIwYWxsJTBBbWFjaGluZV9yYW5rJTNBJTIwMCUyMCUyM2NoYW5nZSUyMHJhbmslMjBhcyUyMHBlciUyMHRoZSUyMG5vZGUlMEFtYWluX3Byb2Nlc3NfaXAlM0ElMjAxOTIuMTY4LjIwLjElMEFtYWluX3Byb2Nlc3NfcG9ydCUzQSUyMDk4OTglMEFtYWluX3RyYWluaW5nX2Z1bmN0aW9uJTNBJTIwbWFpbiUwQW1peGVkX3ByZWNpc2lvbiUzQSUyMGZwMTYlMEFudW1fbWFjaGluZXMlM0ElMjAyJTBBbnVtX3Byb2Nlc3NlcyUzQSUyMDglMEFyZHp2X2JhY2tlbmQlM0ElMjBzdGF0aWMlMEFzYW1lX25ldHdvcmslM0ElMjB0cnVlJTBBdHB1X2VudiUzQSUyMCU1QiU1RCUwQXRwdV91c2VfY2x1c3RlciUzQSUyMGZhbHNlJTBBdHB1X3VzZV9zdWRvJTNBJTIwZmFsc2UlMEF1c2VfY3B1JTNBJTIwZmFsc2U=",highlighted:`<span class="hljs-attr">compute_environment:</span> <span class="hljs-string">LOCAL_MACHINE</span>                                                                                             
<span class="hljs-attr">distributed_type:</span> <span class="hljs-string">MULTI_GPU</span>                                                                                                    
<span class="hljs-attr">downcast_bf16:</span> <span class="hljs-string">&#x27;no&#x27;</span>
<span class="hljs-attr">gpu_ids:</span> <span class="hljs-string">all</span>
<span class="hljs-attr">machine_rank:</span> <span class="hljs-number">0</span> <span class="hljs-comment">#change rank as per the node</span>
<span class="hljs-attr">main_process_ip:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.20</span><span class="hljs-number">.1</span>
<span class="hljs-attr">main_process_port:</span> <span class="hljs-number">9898</span>
<span class="hljs-attr">main_training_function:</span> <span class="hljs-string">main</span>
<span class="hljs-attr">mixed_precision:</span> <span class="hljs-string">fp16</span>
<span class="hljs-attr">num_machines:</span> <span class="hljs-number">2</span>
<span class="hljs-attr">num_processes:</span> <span class="hljs-number">8</span>
<span class="hljs-attr">rdzv_backend:</span> <span class="hljs-string">static</span>
<span class="hljs-attr">same_network:</span> <span class="hljs-literal">true</span>
<span class="hljs-attr">tpu_env:</span> []
<span class="hljs-attr">tpu_use_cluster:</span> <span class="hljs-literal">false</span>
<span class="hljs-attr">tpu_use_sudo:</span> <span class="hljs-literal">false</span>
<span class="hljs-attr">use_cpu:</span> <span class="hljs-literal">false</span>`,wrap:!1}}),cr=new q({props:{code:"Y29tcHV0ZV9lbnZpcm9ubWVudCUzQSUyMExPQ0FMX01BQ0hJTkUlMEFkaXN0cmlidXRlZF90eXBlJTNBJTIwRlNEUCUwQWRvd25jYXN0X2JmMTYlM0ElMjAnbm8nJTBBZnNkcF9jb25maWclM0ElMEElMjAlMjBmc2RwX2F1dG9fd3JhcF9wb2xpY3klM0ElMjBUUkFOU0ZPUk1FUl9CQVNFRF9XUkFQJTBBJTIwJTIwZnNkcF9iYWNrd2FyZF9wcmVmZXRjaF9wb2xpY3klM0ElMjBCQUNLV0FSRF9QUkUlMEElMjAlMjBmc2RwX2ZvcndhcmRfcHJlZmV0Y2glM0ElMjB0cnVlJTBBJTIwJTIwZnNkcF9vZmZsb2FkX3BhcmFtcyUzQSUyMGZhbHNlJTBBJTIwJTIwZnNkcF9zaGFyZGluZ19zdHJhdGVneSUzQSUyMDElMEElMjAlMjBmc2RwX3N0YXRlX2RpY3RfdHlwZSUzQSUyMEZVTExfU1RBVEVfRElDVCUwQSUyMCUyMGZzZHBfc3luY19tb2R1bGVfc3RhdGVzJTNBJTIwdHJ1ZSUwQSUyMCUyMGZzZHBfdHJhbnNmb3JtZXJfbGF5ZXJfY2xzX3RvX3dyYXAlM0ElMjBCZXJ0TGF5ZXIlMEElMjAlMjBmc2RwX3VzZV9vcmlnX3BhcmFtcyUzQSUyMHRydWUlMEFtYWNoaW5lX3JhbmslM0ElMjAwJTBBbWFpbl90cmFpbmluZ19mdW5jdGlvbiUzQSUyMG1haW4lMEFtaXhlZF9wcmVjaXNpb24lM0ElMjBiZjE2JTBBbnVtX21hY2hpbmVzJTNBJTIwMSUwQW51bV9wcm9jZXNzZXMlM0ElMjAyJTBBcmR6dl9iYWNrZW5kJTNBJTIwc3RhdGljJTBBc2FtZV9uZXR3b3JrJTNBJTIwdHJ1ZSUwQXRwdV9lbnYlM0ElMjAlNUIlNUQlMEF0cHVfdXNlX2NsdXN0ZXIlM0ElMjBmYWxzZSUwQXRwdV91c2Vfc3VkbyUzQSUyMGZhbHNlJTBBdXNlX2NwdSUzQSUyMGZhbHNl",highlighted:`<span class="hljs-attr">compute_environment:</span> <span class="hljs-string">LOCAL_MACHINE</span>
<span class="hljs-attr">distributed_type:</span> <span class="hljs-string">FSDP</span>
<span class="hljs-attr">downcast_bf16:</span> <span class="hljs-string">&#x27;no&#x27;</span>
<span class="hljs-attr">fsdp_config:</span>
  <span class="hljs-attr">fsdp_auto_wrap_policy:</span> <span class="hljs-string">TRANSFORMER_BASED_WRAP</span>
  <span class="hljs-attr">fsdp_backward_prefetch_policy:</span> <span class="hljs-string">BACKWARD_PRE</span>
  <span class="hljs-attr">fsdp_forward_prefetch:</span> <span class="hljs-literal">true</span>
  <span class="hljs-attr">fsdp_offload_params:</span> <span class="hljs-literal">false</span>
  <span class="hljs-attr">fsdp_sharding_strategy:</span> <span class="hljs-number">1</span>
  <span class="hljs-attr">fsdp_state_dict_type:</span> <span class="hljs-string">FULL_STATE_DICT</span>
  <span class="hljs-attr">fsdp_sync_module_states:</span> <span class="hljs-literal">true</span>
  <span class="hljs-attr">fsdp_transformer_layer_cls_to_wrap:</span> <span class="hljs-string">BertLayer</span>
  <span class="hljs-attr">fsdp_use_orig_params:</span> <span class="hljs-literal">true</span>
<span class="hljs-attr">machine_rank:</span> <span class="hljs-number">0</span>
<span class="hljs-attr">main_training_function:</span> <span class="hljs-string">main</span>
<span class="hljs-attr">mixed_precision:</span> <span class="hljs-string">bf16</span>
<span class="hljs-attr">num_machines:</span> <span class="hljs-number">1</span>
<span class="hljs-attr">num_processes:</span> <span class="hljs-number">2</span>
<span class="hljs-attr">rdzv_backend:</span> <span class="hljs-string">static</span>
<span class="hljs-attr">same_network:</span> <span class="hljs-literal">true</span>
<span class="hljs-attr">tpu_env:</span> []
<span class="hljs-attr">tpu_use_cluster:</span> <span class="hljs-literal">false</span>
<span class="hljs-attr">tpu_use_sudo:</span> <span class="hljs-literal">false</span>
<span class="hljs-attr">use_cpu:</span> <span class="hljs-literal">false</span>`,wrap:!1}}),mr=new q({props:{code:"Y29tcHV0ZV9lbnZpcm9ubWVudCUzQSUyMExPQ0FMX01BQ0hJTkUlMEFkZWVwc3BlZWRfY29uZmlnJTNBJTBBJTIwJTIwZGVlcHNwZWVkX2NvbmZpZ19maWxlJTNBJTIwJTJGaG9tZSUyRnVzZXIlMkZjb25maWdzJTJGZHNfemVybzNfY29uZmlnLmpzb24lMEElMjAlMjB6ZXJvM19pbml0X2ZsYWclM0ElMjB0cnVlJTBBZGlzdHJpYnV0ZWRfdHlwZSUzQSUyMERFRVBTUEVFRCUwQWRvd25jYXN0X2JmMTYlM0ElMjAnbm8nJTBBbWFjaGluZV9yYW5rJTNBJTIwMCUwQW1haW5fdHJhaW5pbmdfZnVuY3Rpb24lM0ElMjBtYWluJTBBbnVtX21hY2hpbmVzJTNBJTIwMSUwQW51bV9wcm9jZXNzZXMlM0ElMjA0JTBBcmR6dl9iYWNrZW5kJTNBJTIwc3RhdGljJTBBc2FtZV9uZXR3b3JrJTNBJTIwdHJ1ZSUwQXRwdV9lbnYlM0ElMjAlNUIlNUQlMEF0cHVfdXNlX2NsdXN0ZXIlM0ElMjBmYWxzZSUwQXRwdV91c2Vfc3VkbyUzQSUyMGZhbHNlJTBBdXNlX2NwdSUzQSUyMGZhbHNl",highlighted:`<span class="hljs-attr">compute_environment:</span> <span class="hljs-string">LOCAL_MACHINE</span>
<span class="hljs-attr">deepspeed_config:</span>
  <span class="hljs-attr">deepspeed_config_file:</span> <span class="hljs-string">/home/user/configs/ds_zero3_config.json</span>
  <span class="hljs-attr">zero3_init_flag:</span> <span class="hljs-literal">true</span>
<span class="hljs-attr">distributed_type:</span> <span class="hljs-string">DEEPSPEED</span>
<span class="hljs-attr">downcast_bf16:</span> <span class="hljs-string">&#x27;no&#x27;</span>
<span class="hljs-attr">machine_rank:</span> <span class="hljs-number">0</span>
<span class="hljs-attr">main_training_function:</span> <span class="hljs-string">main</span>
<span class="hljs-attr">num_machines:</span> <span class="hljs-number">1</span>
<span class="hljs-attr">num_processes:</span> <span class="hljs-number">4</span>
<span class="hljs-attr">rdzv_backend:</span> <span class="hljs-string">static</span>
<span class="hljs-attr">same_network:</span> <span class="hljs-literal">true</span>
<span class="hljs-attr">tpu_env:</span> []
<span class="hljs-attr">tpu_use_cluster:</span> <span class="hljs-literal">false</span>
<span class="hljs-attr">tpu_use_sudo:</span> <span class="hljs-literal">false</span>
<span class="hljs-attr">use_cpu:</span> <span class="hljs-literal">false</span>`,wrap:!1}}),pr=new q({props:{code:"Y29tcHV0ZV9lbnZpcm9ubWVudCUzQSUyMExPQ0FMX01BQ0hJTkUlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMEFkZWVwc3BlZWRfY29uZmlnJTNBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTBBJTIwJTIwZ3JhZGllbnRfYWNjdW11bGF0aW9uX3N0ZXBzJTNBJTIwMSUwQSUyMCUyMGdyYWRpZW50X2NsaXBwaW5nJTNBJTIwMC43JTBBJTIwJTIwb2ZmbG9hZF9vcHRpbWl6ZXJfZGV2aWNlJTNBJTIwY3B1JTBBJTIwJTIwb2ZmbG9hZF9wYXJhbV9kZXZpY2UlM0ElMjBjcHUlMEElMjAlMjB6ZXJvM19pbml0X2ZsYWclM0ElMjB0cnVlJTBBJTIwJTIwemVyb19zdGFnZSUzQSUyMDIlMEFkaXN0cmlidXRlZF90eXBlJTNBJTIwREVFUFNQRUVEJTBBZG93bmNhc3RfYmYxNiUzQSUyMCdubyclMEFtYWNoaW5lX3JhbmslM0ElMjAwJTBBbWFpbl90cmFpbmluZ19mdW5jdGlvbiUzQSUyMG1haW4lMEFtaXhlZF9wcmVjaXNpb24lM0ElMjBiZjE2JTBBbnVtX21hY2hpbmVzJTNBJTIwMSUwQW51bV9wcm9jZXNzZXMlM0ElMjA0JTBBcmR6dl9iYWNrZW5kJTNBJTIwc3RhdGljJTBBc2FtZV9uZXR3b3JrJTNBJTIwdHJ1ZSUwQXRwdV9lbnYlM0ElMjAlNUIlNUQlMEF0cHVfdXNlX2NsdXN0ZXIlM0ElMjBmYWxzZSUwQXRwdV91c2Vfc3VkbyUzQSUyMGZhbHNlJTBBdXNlX2NwdSUzQSUyMGZhbHNl",highlighted:`<span class="hljs-attr">compute_environment:</span> <span class="hljs-string">LOCAL_MACHINE</span>                                                                                             
<span class="hljs-attr">deepspeed_config:</span>                                                                                                              
  <span class="hljs-attr">gradient_accumulation_steps:</span> <span class="hljs-number">1</span>
  <span class="hljs-attr">gradient_clipping:</span> <span class="hljs-number">0.7</span>
  <span class="hljs-attr">offload_optimizer_device:</span> <span class="hljs-string">cpu</span>
  <span class="hljs-attr">offload_param_device:</span> <span class="hljs-string">cpu</span>
  <span class="hljs-attr">zero3_init_flag:</span> <span class="hljs-literal">true</span>
  <span class="hljs-attr">zero_stage:</span> <span class="hljs-number">2</span>
<span class="hljs-attr">distributed_type:</span> <span class="hljs-string">DEEPSPEED</span>
<span class="hljs-attr">downcast_bf16:</span> <span class="hljs-string">&#x27;no&#x27;</span>
<span class="hljs-attr">machine_rank:</span> <span class="hljs-number">0</span>
<span class="hljs-attr">main_training_function:</span> <span class="hljs-string">main</span>
<span class="hljs-attr">mixed_precision:</span> <span class="hljs-string">bf16</span>
<span class="hljs-attr">num_machines:</span> <span class="hljs-number">1</span>
<span class="hljs-attr">num_processes:</span> <span class="hljs-number">4</span>
<span class="hljs-attr">rdzv_backend:</span> <span class="hljs-string">static</span>
<span class="hljs-attr">same_network:</span> <span class="hljs-literal">true</span>
<span class="hljs-attr">tpu_env:</span> []
<span class="hljs-attr">tpu_use_cluster:</span> <span class="hljs-literal">false</span>
<span class="hljs-attr">tpu_use_sudo:</span> <span class="hljs-literal">false</span>
<span class="hljs-attr">use_cpu:</span> <span class="hljs-literal">false</span>`,wrap:!1}}),ur=new q({props:{code:"Y2QlMjB0cmFuc2Zvcm1lcnMlMEElMEFhY2NlbGVyYXRlJTIwbGF1bmNoJTIwJTVDJTBBLiUyRmV4YW1wbGVzJTJGcHl0b3JjaCUyRnRleHQtY2xhc3NpZmljYXRpb24lMkZydW5fZ2x1ZS5weSUyMCU1QyUwQS0tbW9kZWxfbmFtZV9vcl9wYXRoJTIwZ29vZ2xlLWJlcnQlMkZiZXJ0LWJhc2UtY2FzZWQlMjAlNUMlMEEtLXRhc2tfbmFtZSUyMCUyNFRBU0tfTkFNRSUyMCU1QyUwQS0tZG9fdHJhaW4lMjAlNUMlMEEtLWRvX2V2YWwlMjAlNUMlMEEtLW1heF9zZXFfbGVuZ3RoJTIwMTI4JTIwJTVDJTBBLS1wZXJfZGV2aWNlX3RyYWluX2JhdGNoX3NpemUlMjAxNiUyMCU1QyUwQS0tbGVhcm5pbmdfcmF0ZSUyMDVlLTUlMjAlNUMlMEEtLW51bV90cmFpbl9lcG9jaHMlMjAzJTIwJTVDJTBBLS1vdXRwdXRfZGlyJTIwJTJGdG1wJTJGJTI0VEFTS19OQU1FJTJGJTIwJTVDJTBBLS1vdmVyd3JpdGVfb3V0cHV0X2Rpcg==",highlighted:`<span class="hljs-built_in">cd</span> transformers

accelerate launch \\
./examples/pytorch/text-classification/run_glue.py \\
--model_name_or_path google-bert/bert-base-cased \\
--task_name <span class="hljs-variable">$TASK_NAME</span> \\
--do_train \\
--do_eval \\
--max_seq_length 128 \\
--per_device_train_batch_size 16 \\
--learning_rate 5e-5 \\
--num_train_epochs 3 \\
--output_dir /tmp/<span class="hljs-variable">$TASK_NAME</span>/ \\
--overwrite_output_dir`,wrap:!1}}),hr=new q({props:{code:"Y2QlMjB0cmFuc2Zvcm1lcnMlMEElMEFhY2NlbGVyYXRlJTIwbGF1bmNoJTIwLS1udW1fcHJvY2Vzc2VzJTNEMiUyMCU1QyUwQS0tdXNlX2ZzZHAlMjAlNUMlMEEtLW1peGVkX3ByZWNpc2lvbiUzRGJmMTYlMjAlNUMlMEEtLWZzZHBfYXV0b193cmFwX3BvbGljeSUzRFRSQU5TRk9STUVSX0JBU0VEX1dSQVAlMjAlMjAlNUMlMEEtLWZzZHBfdHJhbnNmb3JtZXJfbGF5ZXJfY2xzX3RvX3dyYXAlM0QlMjJCZXJ0TGF5ZXIlMjIlMjAlNUMlMEEtLWZzZHBfc2hhcmRpbmdfc3RyYXRlZ3klM0QxJTIwJTVDJTBBLS1mc2RwX3N0YXRlX2RpY3RfdHlwZSUzREZVTExfU1RBVEVfRElDVCUyMCU1QyUwQS4lMkZleGFtcGxlcyUyRnB5dG9yY2glMkZ0ZXh0LWNsYXNzaWZpY2F0aW9uJTJGcnVuX2dsdWUucHklMEEtLW1vZGVsX25hbWVfb3JfcGF0aCUyMGdvb2dsZS1iZXJ0JTJGYmVydC1iYXNlLWNhc2VkJTIwJTVDJTBBLS10YXNrX25hbWUlMjAlMjRUQVNLX05BTUUlMjAlNUMlMEEtLWRvX3RyYWluJTIwJTVDJTBBLS1kb19ldmFsJTIwJTVDJTBBLS1tYXhfc2VxX2xlbmd0aCUyMDEyOCUyMCU1QyUwQS0tcGVyX2RldmljZV90cmFpbl9iYXRjaF9zaXplJTIwMTYlMjAlNUMlMEEtLWxlYXJuaW5nX3JhdGUlMjA1ZS01JTIwJTVDJTBBLS1udW1fdHJhaW5fZXBvY2hzJTIwMyUyMCU1QyUwQS0tb3V0cHV0X2RpciUyMCUyRnRtcCUyRiUyNFRBU0tfTkFNRSUyRiUyMCU1QyUwQS0tb3ZlcndyaXRlX291dHB1dF9kaXI=",highlighted:`<span class="hljs-built_in">cd</span> transformers

accelerate launch --num_processes=2 \\
--use_fsdp \\
--mixed_precision=bf16 \\
--fsdp_auto_wrap_policy=TRANSFORMER_BASED_WRAP  \\
--fsdp_transformer_layer_cls_to_wrap=<span class="hljs-string">&quot;BertLayer&quot;</span> \\
--fsdp_sharding_strategy=1 \\
--fsdp_state_dict_type=FULL_STATE_DICT \\
./examples/pytorch/text-classification/run_glue.py
--model_name_or_path google-bert/bert-base-cased \\
--task_name <span class="hljs-variable">$TASK_NAME</span> \\
--do_train \\
--do_eval \\
--max_seq_length 128 \\
--per_device_train_batch_size 16 \\
--learning_rate 5e-5 \\
--num_train_epochs 3 \\
--output_dir /tmp/<span class="hljs-variable">$TASK_NAME</span>/ \\
--overwrite_output_dir`,wrap:!1}}),{c(){m=s("meta"),k=n(),v=s("p"),b=n(),p(M.$$.fragment),c=n(),j=s("p"),j.innerHTML=$h,Xi=n(),At=s("p"),At.innerHTML=kh,Gi=n(),qt=s("p"),qt.innerHTML=jh,Qi=n(),Ct=s("p"),Ct.innerHTML=Ah,Oi=n(),Jt=s("ul"),Jt.innerHTML=qh,Yi=n(),p(Ue.$$.fragment),Ki=n(),It=s("p"),It.innerHTML=Ch,el=n(),p(Ut.$$.fragment),tl=n(),St=s("p"),St.innerHTML=Jh,ol=n(),p(Pt.$$.fragment),nl=n(),T=s("div"),p(Lt.$$.fragment),em=n(),$r=s("p"),$r.textContent=Ih,tm=n(),kr=s("p"),kr.textContent=Uh,om=n(),jr=s("ul"),jr.innerHTML=Sh,nm=n(),Se=s("div"),p(Ft.$$.fragment),am=n(),Ar=s("p"),Ar.innerHTML=Ph,rm=n(),Pe=s("div"),p(Wt.$$.fragment),sm=n(),qr=s("p"),qr.innerHTML=Lh,im=n(),ee=s("div"),p(zt.$$.fragment),lm=n(),Cr=s("p"),Cr.textContent=Fh,dm=n(),Jr=s("p"),Jr.textContent=Wh,cm=n(),Le=s("div"),p(Nt.$$.fragment),mm=n(),Ir=s("p"),Ir.textContent=zh,pm=n(),Fe=s("div"),p(Dt.$$.fragment),um=n(),Ur=s("p"),Ur.innerHTML=Nh,hm=n(),te=s("div"),p(Ht.$$.fragment),gm=n(),Sr=s("p"),Sr.textContent=Dh,fm=n(),Pr=s("p"),Pr.innerHTML=Hh,_m=n(),oe=s("div"),p(Rt.$$.fragment),bm=n(),Lr=s("p"),Lr.textContent=Rh,vm=n(),Fr=s("p"),Fr.innerHTML=Eh,Tm=n(),We=s("div"),p(Et.$$.fragment),ym=n(),Wr=s("p"),Wr.textContent=Bh,wm=n(),H=s("div"),p(Bt.$$.fragment),xm=n(),zr=s("p"),zr.textContent=Vh,Mm=n(),Nr=s("p"),Nr.innerHTML=Zh,$m=n(),Dr=s("p"),Dr.textContent=Xh,km=n(),ne=s("div"),p(Vt.$$.fragment),jm=n(),Hr=s("p"),Hr.innerHTML=Gh,Am=n(),Rr=s("p"),Rr.textContent=Qh,qm=n(),ze=s("div"),p(Zt.$$.fragment),Cm=n(),Er=s("p"),Er.innerHTML=Oh,Jm=n(),ae=s("div"),p(Xt.$$.fragment),Im=n(),Br=s("p"),Br.textContent=Yh,Um=n(),Vr=s("p"),Vr.textContent=Kh,Sm=n(),re=s("div"),p(Gt.$$.fragment),Pm=n(),Zr=s("p"),Zr.innerHTML=eg,Lm=n(),Xr=s("p"),Xr.textContent=tg,Fm=n(),Ne=s("div"),p(Qt.$$.fragment),Wm=n(),Gr=s("p"),Gr.textContent=og,zm=n(),se=s("div"),p(Ot.$$.fragment),Nm=n(),Qr=s("p"),Qr.innerHTML=ng,Dm=n(),Or=s("p"),Or.textContent=ag,Hm=n(),R=s("div"),p(Yt.$$.fragment),Rm=n(),Yr=s("p"),Yr.innerHTML=rg,Em=n(),Kr=s("p"),Kr.innerHTML=sg,Bm=n(),es=s("p"),es.textContent=ig,Vm=n(),ie=s("div"),p(Kt.$$.fragment),Zm=n(),ts=s("p"),ts.innerHTML=lg,Xm=n(),p(De.$$.fragment),Gm=n(),He=s("div"),p(eo.$$.fragment),Qm=n(),os=s("p"),os.innerHTML=dg,Om=n(),Re=s("div"),p(to.$$.fragment),Ym=n(),ns=s("p"),ns.textContent=cg,Km=n(),Ee=s("div"),p(oo.$$.fragment),ep=n(),as=s("p"),as.innerHTML=mg,tp=n(),le=s("div"),p(no.$$.fragment),op=n(),rs=s("p"),rs.innerHTML=pg,np=n(),ss=s("p"),ss.textContent=ug,ap=n(),J=s("div"),p(ao.$$.fragment),rp=n(),is=s("p"),is.textContent=hg,sp=n(),ls=s("p"),ls.textContent=gg,ip=n(),ds=s("p"),ds.textContent=fg,lp=n(),cs=s("p"),cs.innerHTML=_g,dp=n(),p(Be.$$.fragment),cp=n(),ms=s("p"),ms.innerHTML=bg,mp=n(),ps=s("ul"),ps.innerHTML=vg,pp=n(),us=s("p"),us.textContent=Tg,up=n(),hs=s("p"),hs.textContent=yg,hp=n(),gs=s("p"),gs.innerHTML=wg,gp=n(),fs=s("p"),fs.innerHTML=xg,fp=n(),_s=s("p"),_s.innerHTML=Mg,_p=n(),bs=s("p"),bs.innerHTML=$g,bp=n(),vs=s("p"),vs.innerHTML=kg,vp=n(),Ts=s("p"),Ts.textContent=jg,Tp=n(),Ve=s("div"),p(ro.$$.fragment),yp=n(),ys=s("p"),ys.textContent=Ag,wp=n(),Ze=s("div"),p(so.$$.fragment),xp=n(),ws=s("p"),ws.innerHTML=qg,Mp=n(),Xe=s("div"),p(io.$$.fragment),$p=n(),xs=s("p"),xs.innerHTML=Cg,kp=n(),de=s("div"),p(lo.$$.fragment),jp=n(),Ms=s("p"),Ms.innerHTML=Jg,Ap=n(),$s=s("p"),$s.innerHTML=Ig,qp=n(),F=s("div"),p(co.$$.fragment),Cp=n(),ks=s("p"),ks.textContent=Ug,Jp=n(),js=s("p"),js.innerHTML=Sg,Ip=n(),p(Ge.$$.fragment),Up=n(),As=s("p"),As.innerHTML=Pg,Sp=n(),qs=s("ul"),qs.innerHTML=Lg,Pp=n(),ce=s("div"),p(mo.$$.fragment),Lp=n(),Cs=s("p"),Cs.innerHTML=Fg,Fp=n(),Js=s("p"),Js.textContent=Wg,Wp=n(),me=s("div"),p(po.$$.fragment),zp=n(),Is=s("p"),Is.innerHTML=zg,Np=n(),Us=s("p"),Us.textContent=Ng,Dp=n(),Qe=s("div"),p(uo.$$.fragment),Hp=n(),Ss=s("p"),Ss.textContent=Dg,Rp=n(),Oe=s("div"),p(ho.$$.fragment),Ep=n(),Ps=s("p"),Ps.innerHTML=Hg,Bp=n(),Ye=s("div"),p(go.$$.fragment),Vp=n(),Ls=s("p"),Ls.innerHTML=Rg,Zp=n(),E=s("div"),p(fo.$$.fragment),Xp=n(),Fs=s("p"),Fs.innerHTML=Eg,Gp=n(),Ws=s("p"),Ws.textContent=Bg,Qp=n(),zs=s("p"),zs.innerHTML=Vg,Op=n(),pe=s("div"),p(_o.$$.fragment),Yp=n(),Ns=s("p"),Ns.innerHTML=Zg,Kp=n(),Ds=s("p"),Ds.textContent=Xg,eu=n(),ue=s("div"),p(bo.$$.fragment),tu=n(),Hs=s("p"),Hs.textContent=Gg,ou=n(),Rs=s("p"),Rs.textContent=Qg,nu=n(),Ke=s("div"),p(vo.$$.fragment),au=n(),Es=s("p"),Es.textContent=Og,ru=n(),he=s("div"),p(To.$$.fragment),su=n(),Bs=s("p"),Bs.textContent=Yg,iu=n(),Vs=s("p"),Vs.textContent=Kg,al=n(),p(yo.$$.fragment),rl=n(),O=s("div"),p(wo.$$.fragment),lu=n(),B=s("div"),p(xo.$$.fragment),du=n(),Zs=s("p"),Zs.textContent=ef,cu=n(),Xs=s("p"),Xs.innerHTML=tf,mu=n(),Gs=s("p"),Gs.textContent=of,pu=n(),W=s("div"),p(Mo.$$.fragment),uu=n(),Qs=s("p"),Qs.textContent=nf,hu=n(),Os=s("p"),Os.innerHTML=af,gu=n(),p(et.$$.fragment),fu=n(),Ys=s("p"),Ys.innerHTML=rf,_u=n(),Ks=s("ul"),Ks.innerHTML=sf,sl=n(),p($o.$$.fragment),il=n(),A=s("div"),p(ko.$$.fragment),bu=n(),ei=s("p"),ei.innerHTML=lf,vu=n(),ti=s("p"),ti.innerHTML=df,Tu=n(),N=s("div"),p(jo.$$.fragment),yu=n(),oi=s("p"),oi.textContent=cf,wu=n(),ni=s("p"),ni.innerHTML=mf,xu=n(),ai=s("p"),ai.innerHTML=pf,Mu=n(),ri=s("p"),ri.innerHTML=uf,$u=n(),tt=s("div"),p(Ao.$$.fragment),ku=n(),si=s("p"),si.textContent=hf,ju=n(),ge=s("div"),p(qo.$$.fragment),Au=n(),ii=s("p"),ii.textContent=gf,qu=n(),li=s("p"),li.innerHTML=ff,Cu=n(),fe=s("div"),p(Co.$$.fragment),Ju=n(),di=s("p"),di.textContent=_f,Iu=n(),p(ot.$$.fragment),Uu=n(),_e=s("div"),p(Jo.$$.fragment),Su=n(),ci=s("p"),ci.textContent=bf,Pu=n(),p(nt.$$.fragment),Lu=n(),be=s("div"),p(Io.$$.fragment),Fu=n(),mi=s("p"),mi.textContent=vf,Wu=n(),p(at.$$.fragment),zu=n(),ve=s("div"),p(Uo.$$.fragment),Nu=n(),pi=s("p"),pi.textContent=Tf,Du=n(),p(rt.$$.fragment),Hu=n(),Te=s("div"),p(So.$$.fragment),Ru=n(),ui=s("p"),ui.textContent=yf,Eu=n(),p(st.$$.fragment),Bu=n(),V=s("div"),p(Po.$$.fragment),Vu=n(),hi=s("p"),hi.textContent=wf,Zu=n(),p(it.$$.fragment),Xu=n(),p(lt.$$.fragment),Gu=n(),ye=s("div"),p(Lo.$$.fragment),Qu=n(),gi=s("p"),gi.textContent=xf,Ou=n(),p(dt.$$.fragment),Yu=n(),Z=s("div"),p(Fo.$$.fragment),Ku=n(),fi=s("p"),fi.textContent=Mf,eh=n(),p(ct.$$.fragment),th=n(),p(mt.$$.fragment),oh=n(),X=s("div"),p(Wo.$$.fragment),nh=n(),_i=s("p"),_i.textContent=$f,ah=n(),p(pt.$$.fragment),rh=n(),p(ut.$$.fragment),sh=n(),ht=s("div"),p(zo.$$.fragment),ih=n(),bi=s("p"),bi.innerHTML=kf,lh=n(),gt=s("div"),p(No.$$.fragment),dh=n(),vi=s("p"),vi.textContent=jf,ch=n(),ft=s("div"),p(Do.$$.fragment),mh=n(),Ti=s("p"),Ti.textContent=Af,ll=n(),p(Ho.$$.fragment),dl=n(),D=s("div"),p(Ro.$$.fragment),ph=n(),yi=s("p"),yi.innerHTML=qf,uh=n(),wi=s("p"),wi.innerHTML=Cf,hh=n(),_t=s("div"),p(Eo.$$.fragment),gh=n(),xi=s("p"),xi.innerHTML=Jf,cl=n(),p(Bo.$$.fragment),ml=n(),Vo=s("p"),Vo.innerHTML=If,pl=n(),Zo=s("p"),Zo.innerHTML=Uf,ul=n(),Xo=s("ul"),Xo.innerHTML=Sf,hl=n(),Go=s("p"),Go.innerHTML=Pf,gl=n(),Qo=s("ul"),Qo.innerHTML=Lf,fl=n(),p(Oo.$$.fragment),_l=n(),Yo=s("p"),Yo.innerHTML=Ff,bl=n(),Ko=s("p"),Ko.innerHTML=Wf,vl=n(),en=s("ul"),en.innerHTML=zf,Tl=n(),tn=s("p"),tn.innerHTML=Nf,yl=n(),on=s("p"),on.innerHTML=Df,wl=n(),nn=s("p"),nn.textContent=Hf,xl=n(),p(an.$$.fragment),Ml=n(),rn=s("p"),rn.textContent=Rf,$l=n(),p(sn.$$.fragment),kl=n(),ln=s("p"),ln.textContent=Ef,jl=n(),p(dn.$$.fragment),Al=n(),cn=s("p"),cn.textContent=Bf,ql=n(),mn=s("p"),mn.textContent=Vf,Cl=n(),p(pn.$$.fragment),Jl=n(),un=s("p"),un.innerHTML=Zf,Il=n(),p(hn.$$.fragment),Ul=n(),gn=s("p"),gn.innerHTML=Xf,Sl=n(),fn=s("p"),fn.innerHTML=Gf,Pl=n(),p(_n.$$.fragment),Ll=n(),bn=s("p"),bn.textContent=Qf,Fl=n(),vn=s("p"),vn.innerHTML=Of,Wl=n(),p(Tn.$$.fragment),zl=n(),yn=s("p"),yn.innerHTML=Yf,Nl=n(),p(wn.$$.fragment),Dl=n(),p(xn.$$.fragment),Hl=n(),Mn=s("p"),Mn.innerHTML=Kf,Rl=n(),$n=s("p"),$n.textContent=e_,El=n(),kn=s("p"),kn.textContent=t_,Bl=n(),jn=s("p"),jn.innerHTML=o_,Vl=n(),An=s("p"),An.innerHTML=n_,Zl=n(),qn=s("p"),qn.textContent=a_,Xl=n(),p(Cn.$$.fragment),Gl=n(),Jn=s("p"),Jn.innerHTML=r_,Ql=n(),In=s("p"),In.textContent=s_,Ol=n(),p(Un.$$.fragment),Yl=n(),Sn=s("p"),Sn.innerHTML=i_,Kl=n(),Pn=s("p"),Pn.innerHTML=l_,ed=n(),p(Ln.$$.fragment),td=n(),Fn=s("p"),Fn.textContent=d_,od=n(),p(Wn.$$.fragment),nd=n(),zn=s("p"),zn.textContent=c_,ad=n(),p(Nn.$$.fragment),rd=n(),Dn=s("p"),Dn.textContent=m_,sd=n(),Hn=s("p"),Hn.innerHTML=p_,id=n(),Rn=s("p"),Rn.innerHTML=u_,ld=n(),En=s("ol"),En.innerHTML=h_,dd=n(),p(Bn.$$.fragment),cd=n(),bt=s("ol"),bt.innerHTML=g_,md=n(),p(Vn.$$.fragment),pd=n(),Zn=s("p"),Zn.innerHTML=f_,ud=n(),Xn=s("p"),Xn.textContent=__,hd=n(),p(Gn.$$.fragment),gd=n(),Qn=s("p"),Qn.textContent=b_,fd=n(),On=s("p"),On.innerHTML=v_,_d=n(),p(Yn.$$.fragment),bd=n(),Kn=s("p"),Kn.innerHTML=T_,vd=n(),ea=s("p"),ea.innerHTML=y_,Td=n(),ta=s("p"),ta.innerHTML=w_,yd=n(),Mi=s("a"),wd=n(),p(oa.$$.fragment),xd=n(),na=s("p"),na.textContent=x_,Md=n(),aa=s("p"),aa.innerHTML=M_,$d=n(),ra=s("p"),ra.textContent=$_,kd=n(),p(sa.$$.fragment),jd=n(),ia=s("p"),ia.textContent=k_,Ad=n(),la=s("p"),la.innerHTML=j_,qd=n(),p(da.$$.fragment),Cd=n(),ca=s("p"),ca.textContent=A_,Jd=n(),ma=s("p"),ma.innerHTML=q_,Id=n(),pa=s("p"),pa.innerHTML=C_,Ud=n(),p(ua.$$.fragment),Sd=n(),ha=s("p"),ha.innerHTML=J_,Pd=n(),p(ga.$$.fragment),Ld=n(),fa=s("p"),fa.textContent=I_,Fd=n(),p(_a.$$.fragment),Wd=n(),ba=s("p"),ba.innerHTML=U_,zd=n(),va=s("p"),va.textContent=S_,Nd=n(),p(Ta.$$.fragment),Dd=n(),ya=s("p"),ya.textContent=P_,Hd=n(),wa=s("p"),wa.innerHTML=L_,Rd=n(),xa=s("p"),xa.innerHTML=F_,Ed=n(),Ma=s("p"),Ma.textContent=W_,Bd=n(),p($a.$$.fragment),Vd=n(),ka=s("p"),ka.textContent=z_,Zd=n(),ja=s("p"),ja.innerHTML=N_,Xd=n(),p(Aa.$$.fragment),Gd=n(),qa=s("p"),qa.innerHTML=D_,Qd=n(),Ca=s("p"),Ca.textContent=H_,Od=n(),Ja=s("p"),Ja.textContent=R_,Yd=n(),Ia=s("p"),Ia.textContent=E_,Kd=n(),p(Ua.$$.fragment),ec=n(),Sa=s("p"),Sa.innerHTML=B_,tc=n(),Pa=s("p"),Pa.textContent=V_,oc=n(),p(La.$$.fragment),nc=n(),Fa=s("p"),Fa.innerHTML=Z_,ac=n(),Wa=s("p"),Wa.innerHTML=X_,rc=n(),za=s("p"),za.innerHTML=G_,sc=n(),Na=s("ul"),Na.innerHTML=Q_,ic=n(),Da=s("p"),Da.innerHTML=O_,lc=n(),Ha=s("ul"),Ha.innerHTML=Y_,dc=n(),p(Ra.$$.fragment),cc=n(),Ea=s("p"),Ea.innerHTML=K_,mc=n(),Ba=s("p"),Ba.innerHTML=eb,pc=n(),Va=s("p"),Va.innerHTML=tb,uc=n(),Za=s("p"),Za.innerHTML=ob,hc=n(),Xa=s("ul"),Xa.innerHTML=nb,gc=n(),p(Ga.$$.fragment),fc=n(),Qa=s("p"),Qa.innerHTML=ab,_c=n(),p(vt.$$.fragment),bc=n(),Oa=s("p"),Oa.innerHTML=rb,vc=n(),Ya=s("ol"),Ya.innerHTML=sb,Tc=n(),Ka=s("p"),Ka.innerHTML=ib,yc=n(),er=s("p"),er.innerHTML=lb,wc=n(),p(tr.$$.fragment),xc=n(),or=s("p"),or.innerHTML=db,Mc=n(),nr=s("ol"),nr.innerHTML=cb,$c=n(),ar=s("p"),ar.innerHTML=mb,kc=n(),p(rr.$$.fragment),jc=n(),sr=s("p"),sr.textContent=pb,Ac=n(),ir=s("ul"),ir.innerHTML=ub,qc=n(),lr=s("p"),lr.textContent=hb,Cc=n(),we=s("ol"),$i=s("li"),$i.innerHTML=gb,fh=n(),S=s("li"),ki=s("p"),ki.innerHTML=fb,_h=n(),p(dr.$$.fragment),bh=n(),ji=s("p"),ji.textContent=_b,vh=n(),p(cr.$$.fragment),Th=n(),Ai=s("p"),Ai.textContent=bb,yh=n(),p(mr.$$.fragment),wh=n(),qi=s("p"),qi.textContent=vb,xh=n(),p(pr.$$.fragment),Mh=n(),Ci=s("li"),Ci.innerHTML=Tb,Jc=n(),p(ur.$$.fragment),Ic=n(),Tt=s("ol"),Tt.innerHTML=yb,Uc=n(),p(hr.$$.fragment),Sc=n(),gr=s("p"),gr.innerHTML=wb,Pc=n(),fr=s("p"),fr.textContent=xb,Lc=n(),_r=s("p"),_r.innerHTML=Mb,Fc=n(),Zi=s("p"),this.h()},l(e){const r=qb("svelte-u9bgzb",document.head);m=i(r,"META",{name:!0,content:!0}),r.forEach(t),k=a(e),v=i(e,"P",{}),w(v).forEach(t),b=a(e),u(M.$$.fragment,e),c=a(e),j=i(e,"P",{"data-svelte-h":!0}),d(j)!=="svelte-1d62t2r"&&(j.innerHTML=$h),Xi=a(e),At=i(e,"P",{"data-svelte-h":!0}),d(At)!=="svelte-ekjv40"&&(At.innerHTML=kh),Gi=a(e),qt=i(e,"P",{"data-svelte-h":!0}),d(qt)!=="svelte-16xv1n8"&&(qt.innerHTML=jh),Qi=a(e),Ct=i(e,"P",{"data-svelte-h":!0}),d(Ct)!=="svelte-1yxcgj"&&(Ct.innerHTML=Ah),Oi=a(e),Jt=i(e,"UL",{"data-svelte-h":!0}),d(Jt)!=="svelte-16yyzkt"&&(Jt.innerHTML=qh),Yi=a(e),u(Ue.$$.fragment,e),Ki=a(e),It=i(e,"P",{"data-svelte-h":!0}),d(It)!=="svelte-13n9c6p"&&(It.innerHTML=Ch),el=a(e),u(Ut.$$.fragment,e),tl=a(e),St=i(e,"P",{"data-svelte-h":!0}),d(St)!=="svelte-61pht6"&&(St.innerHTML=Jh),ol=a(e),u(Pt.$$.fragment,e),nl=a(e),T=i(e,"DIV",{class:!0});var y=w(T);u(Lt.$$.fragment,y),em=a(y),$r=i(y,"P",{"data-svelte-h":!0}),d($r)!=="svelte-xa06uv"&&($r.textContent=Ih),tm=a(y),kr=i(y,"P",{"data-svelte-h":!0}),d(kr)!=="svelte-1tbd587"&&(kr.textContent=Uh),om=a(y),jr=i(y,"UL",{"data-svelte-h":!0}),d(jr)!=="svelte-ui27ky"&&(jr.innerHTML=Sh),nm=a(y),Se=i(y,"DIV",{class:!0});var br=w(Se);u(Ft.$$.fragment,br),am=a(br),Ar=i(br,"P",{"data-svelte-h":!0}),d(Ar)!=="svelte-160c8ip"&&(Ar.innerHTML=Ph),br.forEach(t),rm=a(y),Pe=i(y,"DIV",{class:!0});var vr=w(Pe);u(Wt.$$.fragment,vr),sm=a(vr),qr=i(vr,"P",{"data-svelte-h":!0}),d(qr)!=="svelte-9kwitf"&&(qr.innerHTML=Lh),vr.forEach(t),im=a(y),ee=i(y,"DIV",{class:!0});var $e=w(ee);u(zt.$$.fragment,$e),lm=a($e),Cr=i($e,"P",{"data-svelte-h":!0}),d(Cr)!=="svelte-1feheyo"&&(Cr.textContent=Fh),dm=a($e),Jr=i($e,"P",{"data-svelte-h":!0}),d(Jr)!=="svelte-1be1oij"&&(Jr.textContent=Wh),$e.forEach(t),cm=a(y),Le=i(y,"DIV",{class:!0});var Tr=w(Le);u(Nt.$$.fragment,Tr),mm=a(Tr),Ir=i(Tr,"P",{"data-svelte-h":!0}),d(Ir)!=="svelte-1agg8ch"&&(Ir.textContent=zh),Tr.forEach(t),pm=a(y),Fe=i(y,"DIV",{class:!0});var yr=w(Fe);u(Dt.$$.fragment,yr),um=a(yr),Ur=i(yr,"P",{"data-svelte-h":!0}),d(Ur)!=="svelte-1mh859w"&&(Ur.innerHTML=Nh),yr.forEach(t),hm=a(y),te=i(y,"DIV",{class:!0});var ke=w(te);u(Ht.$$.fragment,ke),gm=a(ke),Sr=i(ke,"P",{"data-svelte-h":!0}),d(Sr)!=="svelte-1w438iv"&&(Sr.textContent=Dh),fm=a(ke),Pr=i(ke,"P",{"data-svelte-h":!0}),d(Pr)!=="svelte-nadplw"&&(Pr.innerHTML=Hh),ke.forEach(t),_m=a(y),oe=i(y,"DIV",{class:!0});var je=w(oe);u(Rt.$$.fragment,je),bm=a(je),Lr=i(je,"P",{"data-svelte-h":!0}),d(Lr)!=="svelte-wdco14"&&(Lr.textContent=Rh),vm=a(je),Fr=i(je,"P",{"data-svelte-h":!0}),d(Fr)!=="svelte-zasfqr"&&(Fr.innerHTML=Eh),je.forEach(t),Tm=a(y),We=i(y,"DIV",{class:!0});var wr=w(We);u(Et.$$.fragment,wr),ym=a(wr),Wr=i(wr,"P",{"data-svelte-h":!0}),d(Wr)!=="svelte-qi4mtl"&&(Wr.textContent=Bh),wr.forEach(t),wm=a(y),H=i(y,"DIV",{class:!0});var Y=w(H);u(Bt.$$.fragment,Y),xm=a(Y),zr=i(Y,"P",{"data-svelte-h":!0}),d(zr)!=="svelte-1mcvryw"&&(zr.textContent=Vh),Mm=a(Y),Nr=i(Y,"P",{"data-svelte-h":!0}),d(Nr)!=="svelte-1339kj6"&&(Nr.innerHTML=Zh),$m=a(Y),Dr=i(Y,"P",{"data-svelte-h":!0}),d(Dr)!=="svelte-1h30111"&&(Dr.textContent=Xh),Y.forEach(t),km=a(y),ne=i(y,"DIV",{class:!0});var Ae=w(ne);u(Vt.$$.fragment,Ae),jm=a(Ae),Hr=i(Ae,"P",{"data-svelte-h":!0}),d(Hr)!=="svelte-1v5gmc1"&&(Hr.innerHTML=Gh),Am=a(Ae),Rr=i(Ae,"P",{"data-svelte-h":!0}),d(Rr)!=="svelte-1tyo99t"&&(Rr.textContent=Qh),Ae.forEach(t),qm=a(y),ze=i(y,"DIV",{class:!0});var xr=w(ze);u(Zt.$$.fragment,xr),Cm=a(xr),Er=i(xr,"P",{"data-svelte-h":!0}),d(Er)!=="svelte-1t8hxz0"&&(Er.innerHTML=Oh),xr.forEach(t),Jm=a(y),ae=i(y,"DIV",{class:!0});var qe=w(ae);u(Xt.$$.fragment,qe),Im=a(qe),Br=i(qe,"P",{"data-svelte-h":!0}),d(Br)!=="svelte-yguuq6"&&(Br.textContent=Yh),Um=a(qe),Vr=i(qe,"P",{"data-svelte-h":!0}),d(Vr)!=="svelte-452p7a"&&(Vr.textContent=Kh),qe.forEach(t),Sm=a(y),re=i(y,"DIV",{class:!0});var Ce=w(re);u(Gt.$$.fragment,Ce),Pm=a(Ce),Zr=i(Ce,"P",{"data-svelte-h":!0}),d(Zr)!=="svelte-xesobz"&&(Zr.innerHTML=eg),Lm=a(Ce),Xr=i(Ce,"P",{"data-svelte-h":!0}),d(Xr)!=="svelte-1v6sccr"&&(Xr.textContent=tg),Ce.forEach(t),Fm=a(y),Ne=i(y,"DIV",{class:!0});var Mr=w(Ne);u(Qt.$$.fragment,Mr),Wm=a(Mr),Gr=i(Mr,"P",{"data-svelte-h":!0}),d(Gr)!=="svelte-1enq7q"&&(Gr.textContent=og),Mr.forEach(t),zm=a(y),se=i(y,"DIV",{class:!0});var Je=w(se);u(Ot.$$.fragment,Je),Nm=a(Je),Qr=i(Je,"P",{"data-svelte-h":!0}),d(Qr)!=="svelte-upvtbd"&&(Qr.innerHTML=ng),Dm=a(Je),Or=i(Je,"P",{"data-svelte-h":!0}),d(Or)!=="svelte-1v6sccr"&&(Or.textContent=ag),Je.forEach(t),Hm=a(y),R=i(y,"DIV",{class:!0});var K=w(R);u(Yt.$$.fragment,K),Rm=a(K),Yr=i(K,"P",{"data-svelte-h":!0}),d(Yr)!=="svelte-dkae9b"&&(Yr.innerHTML=rg),Em=a(K),Kr=i(K,"P",{"data-svelte-h":!0}),d(Kr)!=="svelte-2uvyde"&&(Kr.innerHTML=sg),Bm=a(K),es=i(K,"P",{"data-svelte-h":!0}),d(es)!=="svelte-1v6sccr"&&(es.textContent=ig),K.forEach(t),Vm=a(y),ie=i(y,"DIV",{class:!0});var Ie=w(ie);u(Kt.$$.fragment,Ie),Zm=a(Ie),ts=i(Ie,"P",{"data-svelte-h":!0}),d(ts)!=="svelte-mf62ka"&&(ts.innerHTML=lg),Xm=a(Ie),u(De.$$.fragment,Ie),Ie.forEach(t),Gm=a(y),He=i(y,"DIV",{class:!0});var zc=w(He);u(eo.$$.fragment,zc),Qm=a(zc),os=i(zc,"P",{"data-svelte-h":!0}),d(os)!=="svelte-rjlxwe"&&(os.innerHTML=dg),zc.forEach(t),Om=a(y),Re=i(y,"DIV",{class:!0});var Nc=w(Re);u(to.$$.fragment,Nc),Ym=a(Nc),ns=i(Nc,"P",{"data-svelte-h":!0}),d(ns)!=="svelte-16imdke"&&(ns.textContent=cg),Nc.forEach(t),Km=a(y),Ee=i(y,"DIV",{class:!0});var Dc=w(Ee);u(oo.$$.fragment,Dc),ep=a(Dc),as=i(Dc,"P",{"data-svelte-h":!0}),d(as)!=="svelte-1s7jdq8"&&(as.innerHTML=mg),Dc.forEach(t),tp=a(y),le=i(y,"DIV",{class:!0});var Ji=w(le);u(no.$$.fragment,Ji),op=a(Ji),rs=i(Ji,"P",{"data-svelte-h":!0}),d(rs)!=="svelte-19fk55y"&&(rs.innerHTML=pg),np=a(Ji),ss=i(Ji,"P",{"data-svelte-h":!0}),d(ss)!=="svelte-1tz9xhn"&&(ss.textContent=ug),Ji.forEach(t),ap=a(y),J=i(y,"DIV",{class:!0});var U=w(J);u(ao.$$.fragment,U),rp=a(U),is=i(U,"P",{"data-svelte-h":!0}),d(is)!=="svelte-1q4m3ey"&&(is.textContent=hg),sp=a(U),ls=i(U,"P",{"data-svelte-h":!0}),d(ls)!=="svelte-5vrny9"&&(ls.textContent=gg),ip=a(U),ds=i(U,"P",{"data-svelte-h":!0}),d(ds)!=="svelte-k63f70"&&(ds.textContent=fg),lp=a(U),cs=i(U,"P",{"data-svelte-h":!0}),d(cs)!=="svelte-y2g1lw"&&(cs.innerHTML=_g),dp=a(U),u(Be.$$.fragment,U),cp=a(U),ms=i(U,"P",{"data-svelte-h":!0}),d(ms)!=="svelte-ny4g3p"&&(ms.innerHTML=bg),mp=a(U),ps=i(U,"UL",{"data-svelte-h":!0}),d(ps)!=="svelte-9luch7"&&(ps.innerHTML=vg),pp=a(U),us=i(U,"P",{"data-svelte-h":!0}),d(us)!=="svelte-100tlvw"&&(us.textContent=Tg),up=a(U),hs=i(U,"P",{"data-svelte-h":!0}),d(hs)!=="svelte-1d82c6u"&&(hs.textContent=yg),hp=a(U),gs=i(U,"P",{"data-svelte-h":!0}),d(gs)!=="svelte-d1rr2j"&&(gs.innerHTML=wg),gp=a(U),fs=i(U,"P",{"data-svelte-h":!0}),d(fs)!=="svelte-m7v5wt"&&(fs.innerHTML=xg),fp=a(U),_s=i(U,"P",{"data-svelte-h":!0}),d(_s)!=="svelte-19ms89f"&&(_s.innerHTML=Mg),_p=a(U),bs=i(U,"P",{"data-svelte-h":!0}),d(bs)!=="svelte-1lmh4zl"&&(bs.innerHTML=$g),bp=a(U),vs=i(U,"P",{"data-svelte-h":!0}),d(vs)!=="svelte-1lc0sbr"&&(vs.innerHTML=kg),vp=a(U),Ts=i(U,"P",{"data-svelte-h":!0}),d(Ts)!=="svelte-1ocu6t3"&&(Ts.textContent=jg),U.forEach(t),Tp=a(y),Ve=i(y,"DIV",{class:!0});var Hc=w(Ve);u(ro.$$.fragment,Hc),yp=a(Hc),ys=i(Hc,"P",{"data-svelte-h":!0}),d(ys)!=="svelte-otcx5b"&&(ys.textContent=Ag),Hc.forEach(t),wp=a(y),Ze=i(y,"DIV",{class:!0});var Rc=w(Ze);u(so.$$.fragment,Rc),xp=a(Rc),ws=i(Rc,"P",{"data-svelte-h":!0}),d(ws)!=="svelte-19inmpu"&&(ws.innerHTML=qg),Rc.forEach(t),Mp=a(y),Xe=i(y,"DIV",{class:!0});var Ec=w(Xe);u(io.$$.fragment,Ec),$p=a(Ec),xs=i(Ec,"P",{"data-svelte-h":!0}),d(xs)!=="svelte-tkw811"&&(xs.innerHTML=Cg),Ec.forEach(t),kp=a(y),de=i(y,"DIV",{class:!0});var Ii=w(de);u(lo.$$.fragment,Ii),jp=a(Ii),Ms=i(Ii,"P",{"data-svelte-h":!0}),d(Ms)!=="svelte-15nla44"&&(Ms.innerHTML=Jg),Ap=a(Ii),$s=i(Ii,"P",{"data-svelte-h":!0}),d($s)!=="svelte-1ojzwr1"&&($s.innerHTML=Ig),Ii.forEach(t),qp=a(y),F=i(y,"DIV",{class:!0});var G=w(F);u(co.$$.fragment,G),Cp=a(G),ks=i(G,"P",{"data-svelte-h":!0}),d(ks)!=="svelte-1b6cpoy"&&(ks.textContent=Ug),Jp=a(G),js=i(G,"P",{"data-svelte-h":!0}),d(js)!=="svelte-o30dtk"&&(js.innerHTML=Sg),Ip=a(G),u(Ge.$$.fragment,G),Up=a(G),As=i(G,"P",{"data-svelte-h":!0}),d(As)!=="svelte-1t1ea6f"&&(As.innerHTML=Pg),Sp=a(G),qs=i(G,"UL",{"data-svelte-h":!0}),d(qs)!=="svelte-15ctb4a"&&(qs.innerHTML=Lg),G.forEach(t),Pp=a(y),ce=i(y,"DIV",{class:!0});var Ui=w(ce);u(mo.$$.fragment,Ui),Lp=a(Ui),Cs=i(Ui,"P",{"data-svelte-h":!0}),d(Cs)!=="svelte-1v5gmc1"&&(Cs.innerHTML=Fg),Fp=a(Ui),Js=i(Ui,"P",{"data-svelte-h":!0}),d(Js)!=="svelte-1tyo99t"&&(Js.textContent=Wg),Ui.forEach(t),Wp=a(y),me=i(y,"DIV",{class:!0});var Si=w(me);u(po.$$.fragment,Si),zp=a(Si),Is=i(Si,"P",{"data-svelte-h":!0}),d(Is)!=="svelte-1y56pc5"&&(Is.innerHTML=zg),Np=a(Si),Us=i(Si,"P",{"data-svelte-h":!0}),d(Us)!=="svelte-qjfexy"&&(Us.textContent=Ng),Si.forEach(t),Dp=a(y),Qe=i(y,"DIV",{class:!0});var Bc=w(Qe);u(uo.$$.fragment,Bc),Hp=a(Bc),Ss=i(Bc,"P",{"data-svelte-h":!0}),d(Ss)!=="svelte-o5qc7e"&&(Ss.textContent=Dg),Bc.forEach(t),Rp=a(y),Oe=i(y,"DIV",{class:!0});var Vc=w(Oe);u(ho.$$.fragment,Vc),Ep=a(Vc),Ps=i(Vc,"P",{"data-svelte-h":!0}),d(Ps)!=="svelte-1jhnoxo"&&(Ps.innerHTML=Hg),Vc.forEach(t),Bp=a(y),Ye=i(y,"DIV",{class:!0});var Zc=w(Ye);u(go.$$.fragment,Zc),Vp=a(Zc),Ls=i(Zc,"P",{"data-svelte-h":!0}),d(Ls)!=="svelte-n6cq1h"&&(Ls.innerHTML=Rg),Zc.forEach(t),Zp=a(y),E=i(y,"DIV",{class:!0});var yt=w(E);u(fo.$$.fragment,yt),Xp=a(yt),Fs=i(yt,"P",{"data-svelte-h":!0}),d(Fs)!=="svelte-9dohab"&&(Fs.innerHTML=Eg),Gp=a(yt),Ws=i(yt,"P",{"data-svelte-h":!0}),d(Ws)!=="svelte-5vrny9"&&(Ws.textContent=Bg),Qp=a(yt),zs=i(yt,"P",{"data-svelte-h":!0}),d(zs)!=="svelte-1jouhcv"&&(zs.innerHTML=Vg),yt.forEach(t),Op=a(y),pe=i(y,"DIV",{class:!0});var Pi=w(pe);u(_o.$$.fragment,Pi),Yp=a(Pi),Ns=i(Pi,"P",{"data-svelte-h":!0}),d(Ns)!=="svelte-r8h4ov"&&(Ns.innerHTML=Zg),Kp=a(Pi),Ds=i(Pi,"P",{"data-svelte-h":!0}),d(Ds)!=="svelte-1e6bius"&&(Ds.textContent=Xg),Pi.forEach(t),eu=a(y),ue=i(y,"DIV",{class:!0});var Li=w(ue);u(bo.$$.fragment,Li),tu=a(Li),Hs=i(Li,"P",{"data-svelte-h":!0}),d(Hs)!=="svelte-1g3hgx9"&&(Hs.textContent=Gg),ou=a(Li),Rs=i(Li,"P",{"data-svelte-h":!0}),d(Rs)!=="svelte-5vrny9"&&(Rs.textContent=Qg),Li.forEach(t),nu=a(y),Ke=i(y,"DIV",{class:!0});var Xc=w(Ke);u(vo.$$.fragment,Xc),au=a(Xc),Es=i(Xc,"P",{"data-svelte-h":!0}),d(Es)!=="svelte-1cilnet"&&(Es.textContent=Og),Xc.forEach(t),ru=a(y),he=i(y,"DIV",{class:!0});var Fi=w(he);u(To.$$.fragment,Fi),su=a(Fi),Bs=i(Fi,"P",{"data-svelte-h":!0}),d(Bs)!=="svelte-4qplkw"&&(Bs.textContent=Yg),iu=a(Fi),Vs=i(Fi,"P",{"data-svelte-h":!0}),d(Vs)!=="svelte-qjfexy"&&(Vs.textContent=Kg),Fi.forEach(t),y.forEach(t),al=a(e),u(yo.$$.fragment,e),rl=a(e),O=i(e,"DIV",{class:!0});var Wi=w(O);u(wo.$$.fragment,Wi),lu=a(Wi),B=i(Wi,"DIV",{class:!0});var wt=w(B);u(xo.$$.fragment,wt),du=a(wt),Zs=i(wt,"P",{"data-svelte-h":!0}),d(Zs)!=="svelte-1mcvryw"&&(Zs.textContent=ef),cu=a(wt),Xs=i(wt,"P",{"data-svelte-h":!0}),d(Xs)!=="svelte-1339kj6"&&(Xs.innerHTML=tf),mu=a(wt),Gs=i(wt,"P",{"data-svelte-h":!0}),d(Gs)!=="svelte-1h30111"&&(Gs.textContent=of),wt.forEach(t),pu=a(Wi),W=i(Wi,"DIV",{class:!0});var Q=w(W);u(Mo.$$.fragment,Q),uu=a(Q),Qs=i(Q,"P",{"data-svelte-h":!0}),d(Qs)!=="svelte-1b6cpoy"&&(Qs.textContent=nf),hu=a(Q),Os=i(Q,"P",{"data-svelte-h":!0}),d(Os)!=="svelte-o30dtk"&&(Os.innerHTML=af),gu=a(Q),u(et.$$.fragment,Q),fu=a(Q),Ys=i(Q,"P",{"data-svelte-h":!0}),d(Ys)!=="svelte-1t1ea6f"&&(Ys.innerHTML=rf),_u=a(Q),Ks=i(Q,"UL",{"data-svelte-h":!0}),d(Ks)!=="svelte-15ctb4a"&&(Ks.innerHTML=sf),Q.forEach(t),Wi.forEach(t),sl=a(e),u($o.$$.fragment,e),il=a(e),A=i(e,"DIV",{class:!0});var I=w(A);u(ko.$$.fragment,I),bu=a(I),ei=i(I,"P",{"data-svelte-h":!0}),d(ei)!=="svelte-avfxjl"&&(ei.innerHTML=lf),vu=a(I),ti=i(I,"P",{"data-svelte-h":!0}),d(ti)!=="svelte-reujti"&&(ti.innerHTML=df),Tu=a(I),N=i(I,"DIV",{class:!0});var xe=w(N);u(jo.$$.fragment,xe),yu=a(xe),oi=i(xe,"P",{"data-svelte-h":!0}),d(oi)!=="svelte-hj8f41"&&(oi.textContent=cf),wu=a(xe),ni=i(xe,"P",{"data-svelte-h":!0}),d(ni)!=="svelte-1iq1lj0"&&(ni.innerHTML=mf),xu=a(xe),ai=i(xe,"P",{"data-svelte-h":!0}),d(ai)!=="svelte-18bal86"&&(ai.innerHTML=pf),Mu=a(xe),ri=i(xe,"P",{"data-svelte-h":!0}),d(ri)!=="svelte-oacj0p"&&(ri.innerHTML=uf),xe.forEach(t),$u=a(I),tt=i(I,"DIV",{class:!0});var Gc=w(tt);u(Ao.$$.fragment,Gc),ku=a(Gc),si=i(Gc,"P",{"data-svelte-h":!0}),d(si)!=="svelte-9pbc1"&&(si.textContent=hf),Gc.forEach(t),ju=a(I),ge=i(I,"DIV",{class:!0});var zi=w(ge);u(qo.$$.fragment,zi),Au=a(zi),ii=i(zi,"P",{"data-svelte-h":!0}),d(ii)!=="svelte-13fy4lg"&&(ii.textContent=gf),qu=a(zi),li=i(zi,"P",{"data-svelte-h":!0}),d(li)!=="svelte-1aa165w"&&(li.innerHTML=ff),zi.forEach(t),Cu=a(I),fe=i(I,"DIV",{class:!0});var Ni=w(fe);u(Co.$$.fragment,Ni),Ju=a(Ni),di=i(Ni,"P",{"data-svelte-h":!0}),d(di)!=="svelte-12p68tr"&&(di.textContent=_f),Iu=a(Ni),u(ot.$$.fragment,Ni),Ni.forEach(t),Uu=a(I),_e=i(I,"DIV",{class:!0});var Di=w(_e);u(Jo.$$.fragment,Di),Su=a(Di),ci=i(Di,"P",{"data-svelte-h":!0}),d(ci)!=="svelte-9ywrxl"&&(ci.textContent=bf),Pu=a(Di),u(nt.$$.fragment,Di),Di.forEach(t),Lu=a(I),be=i(I,"DIV",{class:!0});var Hi=w(be);u(Io.$$.fragment,Hi),Fu=a(Hi),mi=i(Hi,"P",{"data-svelte-h":!0}),d(mi)!=="svelte-1lwqsi8"&&(mi.textContent=vf),Wu=a(Hi),u(at.$$.fragment,Hi),Hi.forEach(t),zu=a(I),ve=i(I,"DIV",{class:!0});var Ri=w(ve);u(Uo.$$.fragment,Ri),Nu=a(Ri),pi=i(Ri,"P",{"data-svelte-h":!0}),d(pi)!=="svelte-mc54aq"&&(pi.textContent=Tf),Du=a(Ri),u(rt.$$.fragment,Ri),Ri.forEach(t),Hu=a(I),Te=i(I,"DIV",{class:!0});var Ei=w(Te);u(So.$$.fragment,Ei),Ru=a(Ei),ui=i(Ei,"P",{"data-svelte-h":!0}),d(ui)!=="svelte-18hco78"&&(ui.textContent=yf),Eu=a(Ei),u(st.$$.fragment,Ei),Ei.forEach(t),Bu=a(I),V=i(I,"DIV",{class:!0});var xt=w(V);u(Po.$$.fragment,xt),Vu=a(xt),hi=i(xt,"P",{"data-svelte-h":!0}),d(hi)!=="svelte-y1tcex"&&(hi.textContent=wf),Zu=a(xt),u(it.$$.fragment,xt),Xu=a(xt),u(lt.$$.fragment,xt),xt.forEach(t),Gu=a(I),ye=i(I,"DIV",{class:!0});var Bi=w(ye);u(Lo.$$.fragment,Bi),Qu=a(Bi),gi=i(Bi,"P",{"data-svelte-h":!0}),d(gi)!=="svelte-1duj623"&&(gi.textContent=xf),Ou=a(Bi),u(dt.$$.fragment,Bi),Bi.forEach(t),Yu=a(I),Z=i(I,"DIV",{class:!0});var Mt=w(Z);u(Fo.$$.fragment,Mt),Ku=a(Mt),fi=i(Mt,"P",{"data-svelte-h":!0}),d(fi)!=="svelte-lhuo6p"&&(fi.textContent=Mf),eh=a(Mt),u(ct.$$.fragment,Mt),th=a(Mt),u(mt.$$.fragment,Mt),Mt.forEach(t),oh=a(I),X=i(I,"DIV",{class:!0});var $t=w(X);u(Wo.$$.fragment,$t),nh=a($t),_i=i($t,"P",{"data-svelte-h":!0}),d(_i)!=="svelte-1h65v06"&&(_i.textContent=$f),ah=a($t),u(pt.$$.fragment,$t),rh=a($t),u(ut.$$.fragment,$t),$t.forEach(t),sh=a(I),ht=i(I,"DIV",{class:!0});var Qc=w(ht);u(zo.$$.fragment,Qc),ih=a(Qc),bi=i(Qc,"P",{"data-svelte-h":!0}),d(bi)!=="svelte-1ciob6u"&&(bi.innerHTML=kf),Qc.forEach(t),lh=a(I),gt=i(I,"DIV",{class:!0});var Oc=w(gt);u(No.$$.fragment,Oc),dh=a(Oc),vi=i(Oc,"P",{"data-svelte-h":!0}),d(vi)!=="svelte-5ayq1f"&&(vi.textContent=jf),Oc.forEach(t),ch=a(I),ft=i(I,"DIV",{class:!0});var Yc=w(ft);u(Do.$$.fragment,Yc),mh=a(Yc),Ti=i(Yc,"P",{"data-svelte-h":!0}),d(Ti)!=="svelte-lg45ly"&&(Ti.textContent=Af),Yc.forEach(t),I.forEach(t),ll=a(e),u(Ho.$$.fragment,e),dl=a(e),D=i(e,"DIV",{class:!0});var kt=w(D);u(Ro.$$.fragment,kt),ph=a(kt),yi=i(kt,"P",{"data-svelte-h":!0}),d(yi)!=="svelte-avfxjl"&&(yi.innerHTML=qf),uh=a(kt),wi=i(kt,"P",{"data-svelte-h":!0}),d(wi)!=="svelte-reujti"&&(wi.innerHTML=Cf),hh=a(kt),_t=i(kt,"DIV",{class:!0});var Kc=w(_t);u(Eo.$$.fragment,Kc),gh=a(Kc),xi=i(Kc,"P",{"data-svelte-h":!0}),d(xi)!=="svelte-yrflrv"&&(xi.innerHTML=Jf),Kc.forEach(t),kt.forEach(t),cl=a(e),u(Bo.$$.fragment,e),ml=a(e),Vo=i(e,"P",{"data-svelte-h":!0}),d(Vo)!=="svelte-153b74n"&&(Vo.innerHTML=If),pl=a(e),Zo=i(e,"P",{"data-svelte-h":!0}),d(Zo)!=="svelte-oaqib5"&&(Zo.innerHTML=Uf),ul=a(e),Xo=i(e,"UL",{"data-svelte-h":!0}),d(Xo)!=="svelte-916bei"&&(Xo.innerHTML=Sf),hl=a(e),Go=i(e,"P",{"data-svelte-h":!0}),d(Go)!=="svelte-1wqo1wa"&&(Go.innerHTML=Pf),gl=a(e),Qo=i(e,"UL",{"data-svelte-h":!0}),d(Qo)!=="svelte-10b42xx"&&(Qo.innerHTML=Lf),fl=a(e),u(Oo.$$.fragment,e),_l=a(e),Yo=i(e,"P",{"data-svelte-h":!0}),d(Yo)!=="svelte-1k0yyu8"&&(Yo.innerHTML=Ff),bl=a(e),Ko=i(e,"P",{"data-svelte-h":!0}),d(Ko)!=="svelte-3280i"&&(Ko.innerHTML=Wf),vl=a(e),en=i(e,"UL",{"data-svelte-h":!0}),d(en)!=="svelte-1oc2993"&&(en.innerHTML=zf),Tl=a(e),tn=i(e,"P",{"data-svelte-h":!0}),d(tn)!=="svelte-16ajg4c"&&(tn.innerHTML=Nf),yl=a(e),on=i(e,"P",{"data-svelte-h":!0}),d(on)!=="svelte-1b2ug2r"&&(on.innerHTML=Df),wl=a(e),nn=i(e,"P",{"data-svelte-h":!0}),d(nn)!=="svelte-b1cyl1"&&(nn.textContent=Hf),xl=a(e),u(an.$$.fragment,e),Ml=a(e),rn=i(e,"P",{"data-svelte-h":!0}),d(rn)!=="svelte-158ul19"&&(rn.textContent=Rf),$l=a(e),u(sn.$$.fragment,e),kl=a(e),ln=i(e,"P",{"data-svelte-h":!0}),d(ln)!=="svelte-39j1pw"&&(ln.textContent=Ef),jl=a(e),u(dn.$$.fragment,e),Al=a(e),cn=i(e,"P",{"data-svelte-h":!0}),d(cn)!=="svelte-10ob9cd"&&(cn.textContent=Bf),ql=a(e),mn=i(e,"P",{"data-svelte-h":!0}),d(mn)!=="svelte-17oadqh"&&(mn.textContent=Vf),Cl=a(e),u(pn.$$.fragment,e),Jl=a(e),un=i(e,"P",{"data-svelte-h":!0}),d(un)!=="svelte-p5a0cn"&&(un.innerHTML=Zf),Il=a(e),u(hn.$$.fragment,e),Ul=a(e),gn=i(e,"P",{"data-svelte-h":!0}),d(gn)!=="svelte-fwp0fy"&&(gn.innerHTML=Xf),Sl=a(e),fn=i(e,"P",{"data-svelte-h":!0}),d(fn)!=="svelte-9a5jkf"&&(fn.innerHTML=Gf),Pl=a(e),u(_n.$$.fragment,e),Ll=a(e),bn=i(e,"P",{"data-svelte-h":!0}),d(bn)!=="svelte-1t3prdi"&&(bn.textContent=Qf),Fl=a(e),vn=i(e,"P",{"data-svelte-h":!0}),d(vn)!=="svelte-1g9lqne"&&(vn.innerHTML=Of),Wl=a(e),u(Tn.$$.fragment,e),zl=a(e),yn=i(e,"P",{"data-svelte-h":!0}),d(yn)!=="svelte-prxp89"&&(yn.innerHTML=Yf),Nl=a(e),u(wn.$$.fragment,e),Dl=a(e),u(xn.$$.fragment,e),Hl=a(e),Mn=i(e,"P",{"data-svelte-h":!0}),d(Mn)!=="svelte-r16s7e"&&(Mn.innerHTML=Kf),Rl=a(e),$n=i(e,"P",{"data-svelte-h":!0}),d($n)!=="svelte-1pscmms"&&($n.textContent=e_),El=a(e),kn=i(e,"P",{"data-svelte-h":!0}),d(kn)!=="svelte-x2zsim"&&(kn.textContent=t_),Bl=a(e),jn=i(e,"P",{"data-svelte-h":!0}),d(jn)!=="svelte-1w89bwu"&&(jn.innerHTML=o_),Vl=a(e),An=i(e,"P",{"data-svelte-h":!0}),d(An)!=="svelte-bedgig"&&(An.innerHTML=n_),Zl=a(e),qn=i(e,"P",{"data-svelte-h":!0}),d(qn)!=="svelte-q6f5iy"&&(qn.textContent=a_),Xl=a(e),u(Cn.$$.fragment,e),Gl=a(e),Jn=i(e,"P",{"data-svelte-h":!0}),d(Jn)!=="svelte-1n99pvz"&&(Jn.innerHTML=r_),Ql=a(e),In=i(e,"P",{"data-svelte-h":!0}),d(In)!=="svelte-1du7k8i"&&(In.textContent=s_),Ol=a(e),u(Un.$$.fragment,e),Yl=a(e),Sn=i(e,"P",{"data-svelte-h":!0}),d(Sn)!=="svelte-12s0023"&&(Sn.innerHTML=i_),Kl=a(e),Pn=i(e,"P",{"data-svelte-h":!0}),d(Pn)!=="svelte-1j1qci1"&&(Pn.innerHTML=l_),ed=a(e),u(Ln.$$.fragment,e),td=a(e),Fn=i(e,"P",{"data-svelte-h":!0}),d(Fn)!=="svelte-1y5pus4"&&(Fn.textContent=d_),od=a(e),u(Wn.$$.fragment,e),nd=a(e),zn=i(e,"P",{"data-svelte-h":!0}),d(zn)!=="svelte-qkjpro"&&(zn.textContent=c_),ad=a(e),u(Nn.$$.fragment,e),rd=a(e),Dn=i(e,"P",{"data-svelte-h":!0}),d(Dn)!=="svelte-i9jvqe"&&(Dn.textContent=m_),sd=a(e),Hn=i(e,"P",{"data-svelte-h":!0}),d(Hn)!=="svelte-sdywfx"&&(Hn.innerHTML=p_),id=a(e),Rn=i(e,"P",{"data-svelte-h":!0}),d(Rn)!=="svelte-u9jroz"&&(Rn.innerHTML=u_),ld=a(e),En=i(e,"OL",{"data-svelte-h":!0}),d(En)!=="svelte-16yy4mu"&&(En.innerHTML=h_),dd=a(e),u(Bn.$$.fragment,e),cd=a(e),bt=i(e,"OL",{start:!0,"data-svelte-h":!0}),d(bt)!=="svelte-1ofccde"&&(bt.innerHTML=g_),md=a(e),u(Vn.$$.fragment,e),pd=a(e),Zn=i(e,"P",{"data-svelte-h":!0}),d(Zn)!=="svelte-p7aheh"&&(Zn.innerHTML=f_),ud=a(e),Xn=i(e,"P",{"data-svelte-h":!0}),d(Xn)!=="svelte-5d27sm"&&(Xn.textContent=__),hd=a(e),u(Gn.$$.fragment,e),gd=a(e),Qn=i(e,"P",{"data-svelte-h":!0}),d(Qn)!=="svelte-1ntxvwj"&&(Qn.textContent=b_),fd=a(e),On=i(e,"P",{"data-svelte-h":!0}),d(On)!=="svelte-1plx2ga"&&(On.innerHTML=v_),_d=a(e),u(Yn.$$.fragment,e),bd=a(e),Kn=i(e,"P",{"data-svelte-h":!0}),d(Kn)!=="svelte-1wm4foo"&&(Kn.innerHTML=T_),vd=a(e),ea=i(e,"P",{"data-svelte-h":!0}),d(ea)!=="svelte-1eh1jw4"&&(ea.innerHTML=y_),Td=a(e),ta=i(e,"P",{"data-svelte-h":!0}),d(ta)!=="svelte-v0ylqq"&&(ta.innerHTML=w_),yd=a(e),Mi=i(e,"A",{id:!0}),w(Mi).forEach(t),wd=a(e),u(oa.$$.fragment,e),xd=a(e),na=i(e,"P",{"data-svelte-h":!0}),d(na)!=="svelte-hfwhfb"&&(na.textContent=x_),Md=a(e),aa=i(e,"P",{"data-svelte-h":!0}),d(aa)!=="svelte-1q5pqfc"&&(aa.innerHTML=M_),$d=a(e),ra=i(e,"P",{"data-svelte-h":!0}),d(ra)!=="svelte-1mzwnwz"&&(ra.textContent=$_),kd=a(e),u(sa.$$.fragment,e),jd=a(e),ia=i(e,"P",{"data-svelte-h":!0}),d(ia)!=="svelte-1jfi0g2"&&(ia.textContent=k_),Ad=a(e),la=i(e,"P",{"data-svelte-h":!0}),d(la)!=="svelte-pmbo8s"&&(la.innerHTML=j_),qd=a(e),u(da.$$.fragment,e),Cd=a(e),ca=i(e,"P",{"data-svelte-h":!0}),d(ca)!=="svelte-1l75krc"&&(ca.textContent=A_),Jd=a(e),ma=i(e,"P",{"data-svelte-h":!0}),d(ma)!=="svelte-j2athw"&&(ma.innerHTML=q_),Id=a(e),pa=i(e,"P",{"data-svelte-h":!0}),d(pa)!=="svelte-bjuui7"&&(pa.innerHTML=C_),Ud=a(e),u(ua.$$.fragment,e),Sd=a(e),ha=i(e,"P",{"data-svelte-h":!0}),d(ha)!=="svelte-lqof29"&&(ha.innerHTML=J_),Pd=a(e),u(ga.$$.fragment,e),Ld=a(e),fa=i(e,"P",{"data-svelte-h":!0}),d(fa)!=="svelte-1ilnvy8"&&(fa.textContent=I_),Fd=a(e),u(_a.$$.fragment,e),Wd=a(e),ba=i(e,"P",{"data-svelte-h":!0}),d(ba)!=="svelte-149kmv4"&&(ba.innerHTML=U_),zd=a(e),va=i(e,"P",{"data-svelte-h":!0}),d(va)!=="svelte-1xw0mza"&&(va.textContent=S_),Nd=a(e),u(Ta.$$.fragment,e),Dd=a(e),ya=i(e,"P",{"data-svelte-h":!0}),d(ya)!=="svelte-pzu29d"&&(ya.textContent=P_),Hd=a(e),wa=i(e,"P",{"data-svelte-h":!0}),d(wa)!=="svelte-1m452o3"&&(wa.innerHTML=L_),Rd=a(e),xa=i(e,"P",{"data-svelte-h":!0}),d(xa)!=="svelte-1l6ec03"&&(xa.innerHTML=F_),Ed=a(e),Ma=i(e,"P",{"data-svelte-h":!0}),d(Ma)!=="svelte-kncnhn"&&(Ma.textContent=W_),Bd=a(e),u($a.$$.fragment,e),Vd=a(e),ka=i(e,"P",{"data-svelte-h":!0}),d(ka)!=="svelte-1v382du"&&(ka.textContent=z_),Zd=a(e),ja=i(e,"P",{"data-svelte-h":!0}),d(ja)!=="svelte-l7u2i5"&&(ja.innerHTML=N_),Xd=a(e),u(Aa.$$.fragment,e),Gd=a(e),qa=i(e,"P",{"data-svelte-h":!0}),d(qa)!=="svelte-zhec86"&&(qa.innerHTML=D_),Qd=a(e),Ca=i(e,"P",{"data-svelte-h":!0}),d(Ca)!=="svelte-1uevych"&&(Ca.textContent=H_),Od=a(e),Ja=i(e,"P",{"data-svelte-h":!0}),d(Ja)!=="svelte-8ojk81"&&(Ja.textContent=R_),Yd=a(e),Ia=i(e,"P",{"data-svelte-h":!0}),d(Ia)!=="svelte-xc9mqa"&&(Ia.textContent=E_),Kd=a(e),u(Ua.$$.fragment,e),ec=a(e),Sa=i(e,"P",{"data-svelte-h":!0}),d(Sa)!=="svelte-3v21r6"&&(Sa.innerHTML=B_),tc=a(e),Pa=i(e,"P",{"data-svelte-h":!0}),d(Pa)!=="svelte-1xxfc0k"&&(Pa.textContent=V_),oc=a(e),u(La.$$.fragment,e),nc=a(e),Fa=i(e,"P",{"data-svelte-h":!0}),d(Fa)!=="svelte-1nr5ht4"&&(Fa.innerHTML=Z_),ac=a(e),Wa=i(e,"P",{"data-svelte-h":!0}),d(Wa)!=="svelte-8irvk8"&&(Wa.innerHTML=X_),rc=a(e),za=i(e,"P",{"data-svelte-h":!0}),d(za)!=="svelte-1utwfd"&&(za.innerHTML=G_),sc=a(e),Na=i(e,"UL",{"data-svelte-h":!0}),d(Na)!=="svelte-mvddf9"&&(Na.innerHTML=Q_),ic=a(e),Da=i(e,"P",{"data-svelte-h":!0}),d(Da)!=="svelte-1pkkwp2"&&(Da.innerHTML=O_),lc=a(e),Ha=i(e,"UL",{"data-svelte-h":!0}),d(Ha)!=="svelte-qac4ha"&&(Ha.innerHTML=Y_),dc=a(e),u(Ra.$$.fragment,e),cc=a(e),Ea=i(e,"P",{"data-svelte-h":!0}),d(Ea)!=="svelte-suy5cd"&&(Ea.innerHTML=K_),mc=a(e),Ba=i(e,"P",{"data-svelte-h":!0}),d(Ba)!=="svelte-1v8munl"&&(Ba.innerHTML=eb),pc=a(e),Va=i(e,"P",{"data-svelte-h":!0}),d(Va)!=="svelte-1utwfd"&&(Va.innerHTML=tb),uc=a(e),Za=i(e,"P",{"data-svelte-h":!0}),d(Za)!=="svelte-m6vzvd"&&(Za.innerHTML=ob),hc=a(e),Xa=i(e,"UL",{"data-svelte-h":!0}),d(Xa)!=="svelte-g2qgyp"&&(Xa.innerHTML=nb),gc=a(e),u(Ga.$$.fragment,e),fc=a(e),Qa=i(e,"P",{"data-svelte-h":!0}),d(Qa)!=="svelte-sywrc2"&&(Qa.innerHTML=ab),_c=a(e),u(vt.$$.fragment,e),bc=a(e),Oa=i(e,"P",{"data-svelte-h":!0}),d(Oa)!=="svelte-1g8h0y8"&&(Oa.innerHTML=rb),vc=a(e),Ya=i(e,"OL",{"data-svelte-h":!0}),d(Ya)!=="svelte-ywc5bg"&&(Ya.innerHTML=sb),Tc=a(e),Ka=i(e,"P",{"data-svelte-h":!0}),d(Ka)!=="svelte-5c7loz"&&(Ka.innerHTML=ib),yc=a(e),er=i(e,"P",{"data-svelte-h":!0}),d(er)!=="svelte-9t0yzq"&&(er.innerHTML=lb),wc=a(e),u(tr.$$.fragment,e),xc=a(e),or=i(e,"P",{"data-svelte-h":!0}),d(or)!=="svelte-1l4ri0y"&&(or.innerHTML=db),Mc=a(e),nr=i(e,"OL",{"data-svelte-h":!0}),d(nr)!=="svelte-4nvgol"&&(nr.innerHTML=cb),$c=a(e),ar=i(e,"P",{"data-svelte-h":!0}),d(ar)!=="svelte-av4hth"&&(ar.innerHTML=mb),kc=a(e),u(rr.$$.fragment,e),jc=a(e),sr=i(e,"P",{"data-svelte-h":!0}),d(sr)!=="svelte-1y53bvn"&&(sr.textContent=pb),Ac=a(e),ir=i(e,"UL",{"data-svelte-h":!0}),d(ir)!=="svelte-wla250"&&(ir.innerHTML=ub),qc=a(e),lr=i(e,"P",{"data-svelte-h":!0}),d(lr)!=="svelte-fl7riu"&&(lr.textContent=hb),Cc=a(e),we=i(e,"OL",{});var Vi=w(we);$i=i(Vi,"LI",{"data-svelte-h":!0}),d($i)!=="svelte-8f6lnl"&&($i.innerHTML=gb),fh=a(Vi),S=i(Vi,"LI",{});var z=w(S);ki=i(z,"P",{"data-svelte-h":!0}),d(ki)!=="svelte-2hzsoi"&&(ki.innerHTML=fb),_h=a(z),u(dr.$$.fragment,z),bh=a(z),ji=i(z,"P",{"data-svelte-h":!0}),d(ji)!=="svelte-1j5721n"&&(ji.textContent=_b),vh=a(z),u(cr.$$.fragment,z),Th=a(z),Ai=i(z,"P",{"data-svelte-h":!0}),d(Ai)!=="svelte-13ygjw6"&&(Ai.textContent=bb),yh=a(z),u(mr.$$.fragment,z),wh=a(z),qi=i(z,"P",{"data-svelte-h":!0}),d(qi)!=="svelte-e9i9xb"&&(qi.textContent=vb),xh=a(z),u(pr.$$.fragment,z),z.forEach(t),Mh=a(Vi),Ci=i(Vi,"LI",{"data-svelte-h":!0}),d(Ci)!=="svelte-z4cdgz"&&(Ci.innerHTML=Tb),Vi.forEach(t),Jc=a(e),u(ur.$$.fragment,e),Ic=a(e),Tt=i(e,"OL",{start:!0,"data-svelte-h":!0}),d(Tt)!=="svelte-64naim"&&(Tt.innerHTML=yb),Uc=a(e),u(hr.$$.fragment,e),Sc=a(e),gr=i(e,"P",{"data-svelte-h":!0}),d(gr)!=="svelte-1efr8k9"&&(gr.innerHTML=wb),Pc=a(e),fr=i(e,"P",{"data-svelte-h":!0}),d(fr)!=="svelte-zyvuq3"&&(fr.textContent=xb),Lc=a(e),_r=i(e,"P",{"data-svelte-h":!0}),d(_r)!=="svelte-f4ziqx"&&(_r.innerHTML=Mb),Fc=a(e),Zi=i(e,"P",{}),w(Zi).forEach(t),this.h()},h(){x(m,"name","hf:doc:metadata"),x(m,"content",Gb),x(Se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(bt,"start","2"),x(Mi,"id","zero-install-notes"),x(Tt,"start","4")},m(e,r){o(document.head,m),l(e,k,r),l(e,v,r),l(e,b,r),h(M,e,r),l(e,c,r),l(e,j,r),l(e,Xi,r),l(e,At,r),l(e,Gi,r),l(e,qt,r),l(e,Qi,r),l(e,Ct,r),l(e,Oi,r),l(e,Jt,r),l(e,Yi,r),h(Ue,e,r),l(e,Ki,r),l(e,It,r),l(e,el,r),h(Ut,e,r),l(e,tl,r),l(e,St,r),l(e,ol,r),h(Pt,e,r),l(e,nl,r),l(e,T,r),h(Lt,T,null),o(T,em),o(T,$r),o(T,tm),o(T,kr),o(T,om),o(T,jr),o(T,nm),o(T,Se),h(Ft,Se,null),o(Se,am),o(Se,Ar),o(T,rm),o(T,Pe),h(Wt,Pe,null),o(Pe,sm),o(Pe,qr),o(T,im),o(T,ee),h(zt,ee,null),o(ee,lm),o(ee,Cr),o(ee,dm),o(ee,Jr),o(T,cm),o(T,Le),h(Nt,Le,null),o(Le,mm),o(Le,Ir),o(T,pm),o(T,Fe),h(Dt,Fe,null),o(Fe,um),o(Fe,Ur),o(T,hm),o(T,te),h(Ht,te,null),o(te,gm),o(te,Sr),o(te,fm),o(te,Pr),o(T,_m),o(T,oe),h(Rt,oe,null),o(oe,bm),o(oe,Lr),o(oe,vm),o(oe,Fr),o(T,Tm),o(T,We),h(Et,We,null),o(We,ym),o(We,Wr),o(T,wm),o(T,H),h(Bt,H,null),o(H,xm),o(H,zr),o(H,Mm),o(H,Nr),o(H,$m),o(H,Dr),o(T,km),o(T,ne),h(Vt,ne,null),o(ne,jm),o(ne,Hr),o(ne,Am),o(ne,Rr),o(T,qm),o(T,ze),h(Zt,ze,null),o(ze,Cm),o(ze,Er),o(T,Jm),o(T,ae),h(Xt,ae,null),o(ae,Im),o(ae,Br),o(ae,Um),o(ae,Vr),o(T,Sm),o(T,re),h(Gt,re,null),o(re,Pm),o(re,Zr),o(re,Lm),o(re,Xr),o(T,Fm),o(T,Ne),h(Qt,Ne,null),o(Ne,Wm),o(Ne,Gr),o(T,zm),o(T,se),h(Ot,se,null),o(se,Nm),o(se,Qr),o(se,Dm),o(se,Or),o(T,Hm),o(T,R),h(Yt,R,null),o(R,Rm),o(R,Yr),o(R,Em),o(R,Kr),o(R,Bm),o(R,es),o(T,Vm),o(T,ie),h(Kt,ie,null),o(ie,Zm),o(ie,ts),o(ie,Xm),h(De,ie,null),o(T,Gm),o(T,He),h(eo,He,null),o(He,Qm),o(He,os),o(T,Om),o(T,Re),h(to,Re,null),o(Re,Ym),o(Re,ns),o(T,Km),o(T,Ee),h(oo,Ee,null),o(Ee,ep),o(Ee,as),o(T,tp),o(T,le),h(no,le,null),o(le,op),o(le,rs),o(le,np),o(le,ss),o(T,ap),o(T,J),h(ao,J,null),o(J,rp),o(J,is),o(J,sp),o(J,ls),o(J,ip),o(J,ds),o(J,lp),o(J,cs),o(J,dp),h(Be,J,null),o(J,cp),o(J,ms),o(J,mp),o(J,ps),o(J,pp),o(J,us),o(J,up),o(J,hs),o(J,hp),o(J,gs),o(J,gp),o(J,fs),o(J,fp),o(J,_s),o(J,_p),o(J,bs),o(J,bp),o(J,vs),o(J,vp),o(J,Ts),o(T,Tp),o(T,Ve),h(ro,Ve,null),o(Ve,yp),o(Ve,ys),o(T,wp),o(T,Ze),h(so,Ze,null),o(Ze,xp),o(Ze,ws),o(T,Mp),o(T,Xe),h(io,Xe,null),o(Xe,$p),o(Xe,xs),o(T,kp),o(T,de),h(lo,de,null),o(de,jp),o(de,Ms),o(de,Ap),o(de,$s),o(T,qp),o(T,F),h(co,F,null),o(F,Cp),o(F,ks),o(F,Jp),o(F,js),o(F,Ip),h(Ge,F,null),o(F,Up),o(F,As),o(F,Sp),o(F,qs),o(T,Pp),o(T,ce),h(mo,ce,null),o(ce,Lp),o(ce,Cs),o(ce,Fp),o(ce,Js),o(T,Wp),o(T,me),h(po,me,null),o(me,zp),o(me,Is),o(me,Np),o(me,Us),o(T,Dp),o(T,Qe),h(uo,Qe,null),o(Qe,Hp),o(Qe,Ss),o(T,Rp),o(T,Oe),h(ho,Oe,null),o(Oe,Ep),o(Oe,Ps),o(T,Bp),o(T,Ye),h(go,Ye,null),o(Ye,Vp),o(Ye,Ls),o(T,Zp),o(T,E),h(fo,E,null),o(E,Xp),o(E,Fs),o(E,Gp),o(E,Ws),o(E,Qp),o(E,zs),o(T,Op),o(T,pe),h(_o,pe,null),o(pe,Yp),o(pe,Ns),o(pe,Kp),o(pe,Ds),o(T,eu),o(T,ue),h(bo,ue,null),o(ue,tu),o(ue,Hs),o(ue,ou),o(ue,Rs),o(T,nu),o(T,Ke),h(vo,Ke,null),o(Ke,au),o(Ke,Es),o(T,ru),o(T,he),h(To,he,null),o(he,su),o(he,Bs),o(he,iu),o(he,Vs),l(e,al,r),h(yo,e,r),l(e,rl,r),l(e,O,r),h(wo,O,null),o(O,lu),o(O,B),h(xo,B,null),o(B,du),o(B,Zs),o(B,cu),o(B,Xs),o(B,mu),o(B,Gs),o(O,pu),o(O,W),h(Mo,W,null),o(W,uu),o(W,Qs),o(W,hu),o(W,Os),o(W,gu),h(et,W,null),o(W,fu),o(W,Ys),o(W,_u),o(W,Ks),l(e,sl,r),h($o,e,r),l(e,il,r),l(e,A,r),h(ko,A,null),o(A,bu),o(A,ei),o(A,vu),o(A,ti),o(A,Tu),o(A,N),h(jo,N,null),o(N,yu),o(N,oi),o(N,wu),o(N,ni),o(N,xu),o(N,ai),o(N,Mu),o(N,ri),o(A,$u),o(A,tt),h(Ao,tt,null),o(tt,ku),o(tt,si),o(A,ju),o(A,ge),h(qo,ge,null),o(ge,Au),o(ge,ii),o(ge,qu),o(ge,li),o(A,Cu),o(A,fe),h(Co,fe,null),o(fe,Ju),o(fe,di),o(fe,Iu),h(ot,fe,null),o(A,Uu),o(A,_e),h(Jo,_e,null),o(_e,Su),o(_e,ci),o(_e,Pu),h(nt,_e,null),o(A,Lu),o(A,be),h(Io,be,null),o(be,Fu),o(be,mi),o(be,Wu),h(at,be,null),o(A,zu),o(A,ve),h(Uo,ve,null),o(ve,Nu),o(ve,pi),o(ve,Du),h(rt,ve,null),o(A,Hu),o(A,Te),h(So,Te,null),o(Te,Ru),o(Te,ui),o(Te,Eu),h(st,Te,null),o(A,Bu),o(A,V),h(Po,V,null),o(V,Vu),o(V,hi),o(V,Zu),h(it,V,null),o(V,Xu),h(lt,V,null),o(A,Gu),o(A,ye),h(Lo,ye,null),o(ye,Qu),o(ye,gi),o(ye,Ou),h(dt,ye,null),o(A,Yu),o(A,Z),h(Fo,Z,null),o(Z,Ku),o(Z,fi),o(Z,eh),h(ct,Z,null),o(Z,th),h(mt,Z,null),o(A,oh),o(A,X),h(Wo,X,null),o(X,nh),o(X,_i),o(X,ah),h(pt,X,null),o(X,rh),h(ut,X,null),o(A,sh),o(A,ht),h(zo,ht,null),o(ht,ih),o(ht,bi),o(A,lh),o(A,gt),h(No,gt,null),o(gt,dh),o(gt,vi),o(A,ch),o(A,ft),h(Do,ft,null),o(ft,mh),o(ft,Ti),l(e,ll,r),h(Ho,e,r),l(e,dl,r),l(e,D,r),h(Ro,D,null),o(D,ph),o(D,yi),o(D,uh),o(D,wi),o(D,hh),o(D,_t),h(Eo,_t,null),o(_t,gh),o(_t,xi),l(e,cl,r),h(Bo,e,r),l(e,ml,r),l(e,Vo,r),l(e,pl,r),l(e,Zo,r),l(e,ul,r),l(e,Xo,r),l(e,hl,r),l(e,Go,r),l(e,gl,r),l(e,Qo,r),l(e,fl,r),h(Oo,e,r),l(e,_l,r),l(e,Yo,r),l(e,bl,r),l(e,Ko,r),l(e,vl,r),l(e,en,r),l(e,Tl,r),l(e,tn,r),l(e,yl,r),l(e,on,r),l(e,wl,r),l(e,nn,r),l(e,xl,r),h(an,e,r),l(e,Ml,r),l(e,rn,r),l(e,$l,r),h(sn,e,r),l(e,kl,r),l(e,ln,r),l(e,jl,r),h(dn,e,r),l(e,Al,r),l(e,cn,r),l(e,ql,r),l(e,mn,r),l(e,Cl,r),h(pn,e,r),l(e,Jl,r),l(e,un,r),l(e,Il,r),h(hn,e,r),l(e,Ul,r),l(e,gn,r),l(e,Sl,r),l(e,fn,r),l(e,Pl,r),h(_n,e,r),l(e,Ll,r),l(e,bn,r),l(e,Fl,r),l(e,vn,r),l(e,Wl,r),h(Tn,e,r),l(e,zl,r),l(e,yn,r),l(e,Nl,r),h(wn,e,r),l(e,Dl,r),h(xn,e,r),l(e,Hl,r),l(e,Mn,r),l(e,Rl,r),l(e,$n,r),l(e,El,r),l(e,kn,r),l(e,Bl,r),l(e,jn,r),l(e,Vl,r),l(e,An,r),l(e,Zl,r),l(e,qn,r),l(e,Xl,r),h(Cn,e,r),l(e,Gl,r),l(e,Jn,r),l(e,Ql,r),l(e,In,r),l(e,Ol,r),h(Un,e,r),l(e,Yl,r),l(e,Sn,r),l(e,Kl,r),l(e,Pn,r),l(e,ed,r),h(Ln,e,r),l(e,td,r),l(e,Fn,r),l(e,od,r),h(Wn,e,r),l(e,nd,r),l(e,zn,r),l(e,ad,r),h(Nn,e,r),l(e,rd,r),l(e,Dn,r),l(e,sd,r),l(e,Hn,r),l(e,id,r),l(e,Rn,r),l(e,ld,r),l(e,En,r),l(e,dd,r),h(Bn,e,r),l(e,cd,r),l(e,bt,r),l(e,md,r),h(Vn,e,r),l(e,pd,r),l(e,Zn,r),l(e,ud,r),l(e,Xn,r),l(e,hd,r),h(Gn,e,r),l(e,gd,r),l(e,Qn,r),l(e,fd,r),l(e,On,r),l(e,_d,r),h(Yn,e,r),l(e,bd,r),l(e,Kn,r),l(e,vd,r),l(e,ea,r),l(e,Td,r),l(e,ta,r),l(e,yd,r),l(e,Mi,r),l(e,wd,r),h(oa,e,r),l(e,xd,r),l(e,na,r),l(e,Md,r),l(e,aa,r),l(e,$d,r),l(e,ra,r),l(e,kd,r),h(sa,e,r),l(e,jd,r),l(e,ia,r),l(e,Ad,r),l(e,la,r),l(e,qd,r),h(da,e,r),l(e,Cd,r),l(e,ca,r),l(e,Jd,r),l(e,ma,r),l(e,Id,r),l(e,pa,r),l(e,Ud,r),h(ua,e,r),l(e,Sd,r),l(e,ha,r),l(e,Pd,r),h(ga,e,r),l(e,Ld,r),l(e,fa,r),l(e,Fd,r),h(_a,e,r),l(e,Wd,r),l(e,ba,r),l(e,zd,r),l(e,va,r),l(e,Nd,r),h(Ta,e,r),l(e,Dd,r),l(e,ya,r),l(e,Hd,r),l(e,wa,r),l(e,Rd,r),l(e,xa,r),l(e,Ed,r),l(e,Ma,r),l(e,Bd,r),h($a,e,r),l(e,Vd,r),l(e,ka,r),l(e,Zd,r),l(e,ja,r),l(e,Xd,r),h(Aa,e,r),l(e,Gd,r),l(e,qa,r),l(e,Qd,r),l(e,Ca,r),l(e,Od,r),l(e,Ja,r),l(e,Yd,r),l(e,Ia,r),l(e,Kd,r),h(Ua,e,r),l(e,ec,r),l(e,Sa,r),l(e,tc,r),l(e,Pa,r),l(e,oc,r),h(La,e,r),l(e,nc,r),l(e,Fa,r),l(e,ac,r),l(e,Wa,r),l(e,rc,r),l(e,za,r),l(e,sc,r),l(e,Na,r),l(e,ic,r),l(e,Da,r),l(e,lc,r),l(e,Ha,r),l(e,dc,r),h(Ra,e,r),l(e,cc,r),l(e,Ea,r),l(e,mc,r),l(e,Ba,r),l(e,pc,r),l(e,Va,r),l(e,uc,r),l(e,Za,r),l(e,hc,r),l(e,Xa,r),l(e,gc,r),h(Ga,e,r),l(e,fc,r),l(e,Qa,r),l(e,_c,r),h(vt,e,r),l(e,bc,r),l(e,Oa,r),l(e,vc,r),l(e,Ya,r),l(e,Tc,r),l(e,Ka,r),l(e,yc,r),l(e,er,r),l(e,wc,r),h(tr,e,r),l(e,xc,r),l(e,or,r),l(e,Mc,r),l(e,nr,r),l(e,$c,r),l(e,ar,r),l(e,kc,r),h(rr,e,r),l(e,jc,r),l(e,sr,r),l(e,Ac,r),l(e,ir,r),l(e,qc,r),l(e,lr,r),l(e,Cc,r),l(e,we,r),o(we,$i),o(we,fh),o(we,S),o(S,ki),o(S,_h),h(dr,S,null),o(S,bh),o(S,ji),o(S,vh),h(cr,S,null),o(S,Th),o(S,Ai),o(S,yh),h(mr,S,null),o(S,wh),o(S,qi),o(S,xh),h(pr,S,null),o(we,Mh),o(we,Ci),l(e,Jc,r),h(ur,e,r),l(e,Ic,r),l(e,Tt,r),l(e,Uc,r),h(hr,e,r),l(e,Sc,r),l(e,gr,r),l(e,Pc,r),l(e,fr,r),l(e,Lc,r),l(e,_r,r),l(e,Fc,r),l(e,Zi,r),Wc=!0},p(e,[r]){const y={};r&2&&(y.$$scope={dirty:r,ctx:e}),Ue.$set(y);const br={};r&2&&(br.$$scope={dirty:r,ctx:e}),De.$set(br);const vr={};r&2&&(vr.$$scope={dirty:r,ctx:e}),Be.$set(vr);const $e={};r&2&&($e.$$scope={dirty:r,ctx:e}),Ge.$set($e);const Tr={};r&2&&(Tr.$$scope={dirty:r,ctx:e}),et.$set(Tr);const yr={};r&2&&(yr.$$scope={dirty:r,ctx:e}),ot.$set(yr);const ke={};r&2&&(ke.$$scope={dirty:r,ctx:e}),nt.$set(ke);const je={};r&2&&(je.$$scope={dirty:r,ctx:e}),at.$set(je);const wr={};r&2&&(wr.$$scope={dirty:r,ctx:e}),rt.$set(wr);const Y={};r&2&&(Y.$$scope={dirty:r,ctx:e}),st.$set(Y);const Ae={};r&2&&(Ae.$$scope={dirty:r,ctx:e}),it.$set(Ae);const xr={};r&2&&(xr.$$scope={dirty:r,ctx:e}),lt.$set(xr);const qe={};r&2&&(qe.$$scope={dirty:r,ctx:e}),dt.$set(qe);const Ce={};r&2&&(Ce.$$scope={dirty:r,ctx:e}),ct.$set(Ce);const Mr={};r&2&&(Mr.$$scope={dirty:r,ctx:e}),mt.$set(Mr);const Je={};r&2&&(Je.$$scope={dirty:r,ctx:e}),pt.$set(Je);const K={};r&2&&(K.$$scope={dirty:r,ctx:e}),ut.$set(K);const Ie={};r&2&&(Ie.$$scope={dirty:r,ctx:e}),vt.$set(Ie)},i(e){Wc||(g(M.$$.fragment,e),g(Ue.$$.fragment,e),g(Ut.$$.fragment,e),g(Pt.$$.fragment,e),g(Lt.$$.fragment,e),g(Ft.$$.fragment,e),g(Wt.$$.fragment,e),g(zt.$$.fragment,e),g(Nt.$$.fragment,e),g(Dt.$$.fragment,e),g(Ht.$$.fragment,e),g(Rt.$$.fragment,e),g(Et.$$.fragment,e),g(Bt.$$.fragment,e),g(Vt.$$.fragment,e),g(Zt.$$.fragment,e),g(Xt.$$.fragment,e),g(Gt.$$.fragment,e),g(Qt.$$.fragment,e),g(Ot.$$.fragment,e),g(Yt.$$.fragment,e),g(Kt.$$.fragment,e),g(De.$$.fragment,e),g(eo.$$.fragment,e),g(to.$$.fragment,e),g(oo.$$.fragment,e),g(no.$$.fragment,e),g(ao.$$.fragment,e),g(Be.$$.fragment,e),g(ro.$$.fragment,e),g(so.$$.fragment,e),g(io.$$.fragment,e),g(lo.$$.fragment,e),g(co.$$.fragment,e),g(Ge.$$.fragment,e),g(mo.$$.fragment,e),g(po.$$.fragment,e),g(uo.$$.fragment,e),g(ho.$$.fragment,e),g(go.$$.fragment,e),g(fo.$$.fragment,e),g(_o.$$.fragment,e),g(bo.$$.fragment,e),g(vo.$$.fragment,e),g(To.$$.fragment,e),g(yo.$$.fragment,e),g(wo.$$.fragment,e),g(xo.$$.fragment,e),g(Mo.$$.fragment,e),g(et.$$.fragment,e),g($o.$$.fragment,e),g(ko.$$.fragment,e),g(jo.$$.fragment,e),g(Ao.$$.fragment,e),g(qo.$$.fragment,e),g(Co.$$.fragment,e),g(ot.$$.fragment,e),g(Jo.$$.fragment,e),g(nt.$$.fragment,e),g(Io.$$.fragment,e),g(at.$$.fragment,e),g(Uo.$$.fragment,e),g(rt.$$.fragment,e),g(So.$$.fragment,e),g(st.$$.fragment,e),g(Po.$$.fragment,e),g(it.$$.fragment,e),g(lt.$$.fragment,e),g(Lo.$$.fragment,e),g(dt.$$.fragment,e),g(Fo.$$.fragment,e),g(ct.$$.fragment,e),g(mt.$$.fragment,e),g(Wo.$$.fragment,e),g(pt.$$.fragment,e),g(ut.$$.fragment,e),g(zo.$$.fragment,e),g(No.$$.fragment,e),g(Do.$$.fragment,e),g(Ho.$$.fragment,e),g(Ro.$$.fragment,e),g(Eo.$$.fragment,e),g(Bo.$$.fragment,e),g(Oo.$$.fragment,e),g(an.$$.fragment,e),g(sn.$$.fragment,e),g(dn.$$.fragment,e),g(pn.$$.fragment,e),g(hn.$$.fragment,e),g(_n.$$.fragment,e),g(Tn.$$.fragment,e),g(wn.$$.fragment,e),g(xn.$$.fragment,e),g(Cn.$$.fragment,e),g(Un.$$.fragment,e),g(Ln.$$.fragment,e),g(Wn.$$.fragment,e),g(Nn.$$.fragment,e),g(Bn.$$.fragment,e),g(Vn.$$.fragment,e),g(Gn.$$.fragment,e),g(Yn.$$.fragment,e),g(oa.$$.fragment,e),g(sa.$$.fragment,e),g(da.$$.fragment,e),g(ua.$$.fragment,e),g(ga.$$.fragment,e),g(_a.$$.fragment,e),g(Ta.$$.fragment,e),g($a.$$.fragment,e),g(Aa.$$.fragment,e),g(Ua.$$.fragment,e),g(La.$$.fragment,e),g(Ra.$$.fragment,e),g(Ga.$$.fragment,e),g(vt.$$.fragment,e),g(tr.$$.fragment,e),g(rr.$$.fragment,e),g(dr.$$.fragment,e),g(cr.$$.fragment,e),g(mr.$$.fragment,e),g(pr.$$.fragment,e),g(ur.$$.fragment,e),g(hr.$$.fragment,e),Wc=!0)},o(e){f(M.$$.fragment,e),f(Ue.$$.fragment,e),f(Ut.$$.fragment,e),f(Pt.$$.fragment,e),f(Lt.$$.fragment,e),f(Ft.$$.fragment,e),f(Wt.$$.fragment,e),f(zt.$$.fragment,e),f(Nt.$$.fragment,e),f(Dt.$$.fragment,e),f(Ht.$$.fragment,e),f(Rt.$$.fragment,e),f(Et.$$.fragment,e),f(Bt.$$.fragment,e),f(Vt.$$.fragment,e),f(Zt.$$.fragment,e),f(Xt.$$.fragment,e),f(Gt.$$.fragment,e),f(Qt.$$.fragment,e),f(Ot.$$.fragment,e),f(Yt.$$.fragment,e),f(Kt.$$.fragment,e),f(De.$$.fragment,e),f(eo.$$.fragment,e),f(to.$$.fragment,e),f(oo.$$.fragment,e),f(no.$$.fragment,e),f(ao.$$.fragment,e),f(Be.$$.fragment,e),f(ro.$$.fragment,e),f(so.$$.fragment,e),f(io.$$.fragment,e),f(lo.$$.fragment,e),f(co.$$.fragment,e),f(Ge.$$.fragment,e),f(mo.$$.fragment,e),f(po.$$.fragment,e),f(uo.$$.fragment,e),f(ho.$$.fragment,e),f(go.$$.fragment,e),f(fo.$$.fragment,e),f(_o.$$.fragment,e),f(bo.$$.fragment,e),f(vo.$$.fragment,e),f(To.$$.fragment,e),f(yo.$$.fragment,e),f(wo.$$.fragment,e),f(xo.$$.fragment,e),f(Mo.$$.fragment,e),f(et.$$.fragment,e),f($o.$$.fragment,e),f(ko.$$.fragment,e),f(jo.$$.fragment,e),f(Ao.$$.fragment,e),f(qo.$$.fragment,e),f(Co.$$.fragment,e),f(ot.$$.fragment,e),f(Jo.$$.fragment,e),f(nt.$$.fragment,e),f(Io.$$.fragment,e),f(at.$$.fragment,e),f(Uo.$$.fragment,e),f(rt.$$.fragment,e),f(So.$$.fragment,e),f(st.$$.fragment,e),f(Po.$$.fragment,e),f(it.$$.fragment,e),f(lt.$$.fragment,e),f(Lo.$$.fragment,e),f(dt.$$.fragment,e),f(Fo.$$.fragment,e),f(ct.$$.fragment,e),f(mt.$$.fragment,e),f(Wo.$$.fragment,e),f(pt.$$.fragment,e),f(ut.$$.fragment,e),f(zo.$$.fragment,e),f(No.$$.fragment,e),f(Do.$$.fragment,e),f(Ho.$$.fragment,e),f(Ro.$$.fragment,e),f(Eo.$$.fragment,e),f(Bo.$$.fragment,e),f(Oo.$$.fragment,e),f(an.$$.fragment,e),f(sn.$$.fragment,e),f(dn.$$.fragment,e),f(pn.$$.fragment,e),f(hn.$$.fragment,e),f(_n.$$.fragment,e),f(Tn.$$.fragment,e),f(wn.$$.fragment,e),f(xn.$$.fragment,e),f(Cn.$$.fragment,e),f(Un.$$.fragment,e),f(Ln.$$.fragment,e),f(Wn.$$.fragment,e),f(Nn.$$.fragment,e),f(Bn.$$.fragment,e),f(Vn.$$.fragment,e),f(Gn.$$.fragment,e),f(Yn.$$.fragment,e),f(oa.$$.fragment,e),f(sa.$$.fragment,e),f(da.$$.fragment,e),f(ua.$$.fragment,e),f(ga.$$.fragment,e),f(_a.$$.fragment,e),f(Ta.$$.fragment,e),f($a.$$.fragment,e),f(Aa.$$.fragment,e),f(Ua.$$.fragment,e),f(La.$$.fragment,e),f(Ra.$$.fragment,e),f(Ga.$$.fragment,e),f(vt.$$.fragment,e),f(tr.$$.fragment,e),f(rr.$$.fragment,e),f(dr.$$.fragment,e),f(cr.$$.fragment,e),f(mr.$$.fragment,e),f(pr.$$.fragment,e),f(ur.$$.fragment,e),f(hr.$$.fragment,e),Wc=!1},d(e){e&&(t(k),t(v),t(b),t(c),t(j),t(Xi),t(At),t(Gi),t(qt),t(Qi),t(Ct),t(Oi),t(Jt),t(Yi),t(Ki),t(It),t(el),t(tl),t(St),t(ol),t(nl),t(T),t(al),t(rl),t(O),t(sl),t(il),t(A),t(ll),t(dl),t(D),t(cl),t(ml),t(Vo),t(pl),t(Zo),t(ul),t(Xo),t(hl),t(Go),t(gl),t(Qo),t(fl),t(_l),t(Yo),t(bl),t(Ko),t(vl),t(en),t(Tl),t(tn),t(yl),t(on),t(wl),t(nn),t(xl),t(Ml),t(rn),t($l),t(kl),t(ln),t(jl),t(Al),t(cn),t(ql),t(mn),t(Cl),t(Jl),t(un),t(Il),t(Ul),t(gn),t(Sl),t(fn),t(Pl),t(Ll),t(bn),t(Fl),t(vn),t(Wl),t(zl),t(yn),t(Nl),t(Dl),t(Hl),t(Mn),t(Rl),t($n),t(El),t(kn),t(Bl),t(jn),t(Vl),t(An),t(Zl),t(qn),t(Xl),t(Gl),t(Jn),t(Ql),t(In),t(Ol),t(Yl),t(Sn),t(Kl),t(Pn),t(ed),t(td),t(Fn),t(od),t(nd),t(zn),t(ad),t(rd),t(Dn),t(sd),t(Hn),t(id),t(Rn),t(ld),t(En),t(dd),t(cd),t(bt),t(md),t(pd),t(Zn),t(ud),t(Xn),t(hd),t(gd),t(Qn),t(fd),t(On),t(_d),t(bd),t(Kn),t(vd),t(ea),t(Td),t(ta),t(yd),t(Mi),t(wd),t(xd),t(na),t(Md),t(aa),t($d),t(ra),t(kd),t(jd),t(ia),t(Ad),t(la),t(qd),t(Cd),t(ca),t(Jd),t(ma),t(Id),t(pa),t(Ud),t(Sd),t(ha),t(Pd),t(Ld),t(fa),t(Fd),t(Wd),t(ba),t(zd),t(va),t(Nd),t(Dd),t(ya),t(Hd),t(wa),t(Rd),t(xa),t(Ed),t(Ma),t(Bd),t(Vd),t(ka),t(Zd),t(ja),t(Xd),t(Gd),t(qa),t(Qd),t(Ca),t(Od),t(Ja),t(Yd),t(Ia),t(Kd),t(ec),t(Sa),t(tc),t(Pa),t(oc),t(nc),t(Fa),t(ac),t(Wa),t(rc),t(za),t(sc),t(Na),t(ic),t(Da),t(lc),t(Ha),t(dc),t(cc),t(Ea),t(mc),t(Ba),t(pc),t(Va),t(uc),t(Za),t(hc),t(Xa),t(gc),t(fc),t(Qa),t(_c),t(bc),t(Oa),t(vc),t(Ya),t(Tc),t(Ka),t(yc),t(er),t(wc),t(xc),t(or),t(Mc),t(nr),t($c),t(ar),t(kc),t(jc),t(sr),t(Ac),t(ir),t(qc),t(lr),t(Cc),t(we),t(Jc),t(Ic),t(Tt),t(Uc),t(Sc),t(gr),t(Pc),t(fr),t(Lc),t(_r),t(Fc),t(Zi)),t(m),_(M,e),_(Ue,e),_(Ut,e),_(Pt,e),_(Lt),_(Ft),_(Wt),_(zt),_(Nt),_(Dt),_(Ht),_(Rt),_(Et),_(Bt),_(Vt),_(Zt),_(Xt),_(Gt),_(Qt),_(Ot),_(Yt),_(Kt),_(De),_(eo),_(to),_(oo),_(no),_(ao),_(Be),_(ro),_(so),_(io),_(lo),_(co),_(Ge),_(mo),_(po),_(uo),_(ho),_(go),_(fo),_(_o),_(bo),_(vo),_(To),_(yo,e),_(wo),_(xo),_(Mo),_(et),_($o,e),_(ko),_(jo),_(Ao),_(qo),_(Co),_(ot),_(Jo),_(nt),_(Io),_(at),_(Uo),_(rt),_(So),_(st),_(Po),_(it),_(lt),_(Lo),_(dt),_(Fo),_(ct),_(mt),_(Wo),_(pt),_(ut),_(zo),_(No),_(Do),_(Ho,e),_(Ro),_(Eo),_(Bo,e),_(Oo,e),_(an,e),_(sn,e),_(dn,e),_(pn,e),_(hn,e),_(_n,e),_(Tn,e),_(wn,e),_(xn,e),_(Cn,e),_(Un,e),_(Ln,e),_(Wn,e),_(Nn,e),_(Bn,e),_(Vn,e),_(Gn,e),_(Yn,e),_(oa,e),_(sa,e),_(da,e),_(ua,e),_(ga,e),_(_a,e),_(Ta,e),_($a,e),_(Aa,e),_(Ua,e),_(La,e),_(Ra,e),_(Ga,e),_(vt,e),_(tr,e),_(rr,e),_(dr),_(cr),_(mr),_(pr),_(ur,e),_(hr,e)}}}const Gb='{"title":"Trainer","local":"trainer","sections":[{"title":"Trainer","local":"transformers.Trainer","sections":[],"depth":2},{"title":"Seq2SeqTrainer","local":"transformers.Seq2SeqTrainer","sections":[],"depth":2},{"title":"TrainingArguments","local":"transformers.TrainingArguments","sections":[],"depth":2},{"title":"Seq2SeqTrainingArguments","local":"transformers.Seq2SeqTrainingArguments","sections":[],"depth":2},{"title":"Checkpoints","local":"checkpoints","sections":[],"depth":2},{"title":"Logging","local":"logging","sections":[],"depth":2},{"title":"Randomness","local":"randomness","sections":[],"depth":2},{"title":"Specific GPUs Selection","local":"specific-gpus-selection","sections":[],"depth":2},{"title":"Trainer Integrations","local":"trainer-integrations","sections":[{"title":"CUDA Extension Installation Notes","local":"cuda-extension-installation-notes","sections":[{"title":"Possible problem #1","local":"possible-problem-1","sections":[],"depth":4},{"title":"Possible problem #2","local":"possible-problem-2","sections":[],"depth":4},{"title":"Possible problem #3","local":"possible-problem-3","sections":[],"depth":4}],"depth":3},{"title":"PyTorch Fully Sharded Data parallel","local":"pytorch-fully-sharded-data-parallel","sections":[],"depth":3},{"title":"PyTorch/XLA Fully Sharded Data parallel","local":"pytorchxla-fully-sharded-data-parallel","sections":[],"depth":3},{"title":"Using Trainer for accelerated PyTorch Training on Mac","local":"using-trainer-for-accelerated-pytorch-training-on-mac","sections":[],"depth":3}],"depth":2},{"title":"Using Accelerate Launcher with Trainer","local":"using-accelerate-launcher-with-trainer","sections":[],"depth":2}],"depth":1}';function Qb(C){return kb(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class av extends jb{constructor(m){super(),Ab(this,m,Qb,Xb,$b,{})}}export{av as component};
