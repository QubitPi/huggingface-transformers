import{s as no,o as lo,n as er}from"../chunks/scheduler.9bc65507.js";import{S as io,i as mo,g as n,s as a,r as p,A as co,h as l,f as t,c as o,j as x,u as f,x as d,k as $,y as s,a as i,v as u,d as h,t as g,w as _}from"../chunks/index.707bf1b6.js";import{T as oa}from"../chunks/Tip.c2ecdbf4.js";import{D as M}from"../chunks/Docstring.17db21ae.js";import{C as rr}from"../chunks/CodeBlock.54a9f38d.js";import{E as na}from"../chunks/ExampleCodeBlock.4f515aa9.js";import{H as pe}from"../chunks/Heading.342b1fa6.js";function po(U){let m,T=`This class method is simply calling the feature extractor
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.from_pretrained">from_pretrained()</a>, image processor
<a href="/docs/transformers/main/en/main_classes/image_processor#transformers.ImageProcessingMixin">ImageProcessingMixin</a> and the tokenizer
<code>~tokenization_utils_base.PreTrainedTokenizer.from_pretrained</code> methods. Please refer to the docstrings of the
methods above for more information.`;return{c(){m=n("p"),m.innerHTML=T},l(v){m=l(v,"P",{"data-svelte-h":!0}),d(m)!=="svelte-1ob8jsn"&&(m.innerHTML=T)},m(v,b){i(v,m,b)},p:er,d(v){v&&t(m)}}}function fo(U){let m,T="Examples:",v,b,P;return b=new rr({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Qcm9jZXNzb3IlMEElMEFwcm9jZXNzb3IlMjAlM0QlMjBBdXRvUHJvY2Vzc29yLmZyb21fcHJldHJhaW5lZCglMjJnb29nbGUtYmVydCUyRmJlcnQtYmFzZS1jYXNlZCUyMiklMEElMEElMjMlMjBQdXNoJTIwdGhlJTIwcHJvY2Vzc29yJTIwdG8lMjB5b3VyJTIwbmFtZXNwYWNlJTIwd2l0aCUyMHRoZSUyMG5hbWUlMjAlMjJteS1maW5ldHVuZWQtYmVydCUyMi4lMEFwcm9jZXNzb3IucHVzaF90b19odWIoJTIybXktZmluZXR1bmVkLWJlcnQlMjIpJTBBJTBBJTIzJTIwUHVzaCUyMHRoZSUyMHByb2Nlc3NvciUyMHRvJTIwYW4lMjBvcmdhbml6YXRpb24lMjB3aXRoJTIwdGhlJTIwbmFtZSUyMCUyMm15LWZpbmV0dW5lZC1iZXJ0JTIyLiUwQXByb2Nlc3Nvci5wdXNoX3RvX2h1YiglMjJodWdnaW5nZmFjZSUyRm15LWZpbmV0dW5lZC1iZXJ0JTIyKQ==",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the processor to your namespace with the name &quot;my-finetuned-bert&quot;.</span>
processor.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the processor to an organization with the name &quot;my-finetuned-bert&quot;.</span>
processor.push_to_hub(<span class="hljs-string">&quot;huggingface/my-finetuned-bert&quot;</span>)`,wrap:!1}}),{c(){m=n("p"),m.textContent=T,v=a(),p(b.$$.fragment)},l(c){m=l(c,"P",{"data-svelte-h":!0}),d(m)!=="svelte-kvfsh7"&&(m.textContent=T),v=o(c),f(b.$$.fragment,c)},m(c,I){i(c,m,I),i(c,v,I),u(b,c,I),P=!0},p:er,i(c){P||(h(b.$$.fragment,c),P=!0)},o(c){g(b.$$.fragment,c),P=!1},d(c){c&&(t(m),t(v)),_(b,c)}}}function uo(U){let m,T="This API is experimental and may have some slight breaking changes in the next releases.";return{c(){m=n("p"),m.textContent=T},l(v){m=l(v,"P",{"data-svelte-h":!0}),d(m)!=="svelte-15rpg4"&&(m.textContent=T)},m(v,b){i(v,m,b)},p:er,d(v){v&&t(m)}}}function ho(U){let m,T=`This class method is simply calling <a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a>. Please refer to the docstrings of the
methods above for more information.`;return{c(){m=n("p"),m.innerHTML=T},l(v){m=l(v,"P",{"data-svelte-h":!0}),d(m)!=="svelte-1qvfzw2"&&(m.innerHTML=T)},m(v,b){i(v,m,b)},p:er,d(v){v&&t(m)}}}function go(U){let m,T="Examples:",v,b,P;return b=new rr({props:{code:"aW1wb3J0JTIwdGVuc29yZmxvd19kYXRhc2V0cyUyMGFzJTIwdGZkcyUwQSUwQWRhdGFzZXQlMjAlM0QlMjB0ZmRzLmxvYWQoJTIyc3F1YWQlMjIpJTBBJTBBdHJhaW5pbmdfZXhhbXBsZXMlMjAlM0QlMjBnZXRfZXhhbXBsZXNfZnJvbV9kYXRhc2V0KGRhdGFzZXQlMkMlMjBldmFsdWF0ZSUzREZhbHNlKSUwQWV2YWx1YXRpb25fZXhhbXBsZXMlMjAlM0QlMjBnZXRfZXhhbXBsZXNfZnJvbV9kYXRhc2V0KGRhdGFzZXQlMkMlMjBldmFsdWF0ZSUzRFRydWUp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow_datasets <span class="hljs-keyword">as</span> tfds

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = tfds.load(<span class="hljs-string">&quot;squad&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>training_examples = get_examples_from_dataset(dataset, evaluate=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>evaluation_examples = get_examples_from_dataset(dataset, evaluate=<span class="hljs-literal">True</span>)`,wrap:!1}}),{c(){m=n("p"),m.textContent=T,v=a(),p(b.$$.fragment)},l(c){m=l(c,"P",{"data-svelte-h":!0}),d(m)!=="svelte-kvfsh7"&&(m.textContent=T),v=o(c),f(b.$$.fragment,c)},m(c,I){i(c,m,I),i(c,v,I),u(b,c,I),P=!0},p:er,i(c){P||(h(b.$$.fragment,c),P=!0)},o(c){g(b.$$.fragment,c),P=!1},d(c){c&&(t(m),t(v)),_(b,c)}}}function _o(U){let m,T="Example:",v,b,P;return b=new rr({props:{code:"cHJvY2Vzc29yJTIwJTNEJTIwU3F1YWRWMlByb2Nlc3NvcigpJTBBZXhhbXBsZXMlMjAlM0QlMjBwcm9jZXNzb3IuZ2V0X2Rldl9leGFtcGxlcyhkYXRhX2RpciklMEElMEFmZWF0dXJlcyUyMCUzRCUyMHNxdWFkX2NvbnZlcnRfZXhhbXBsZXNfdG9fZmVhdHVyZXMoJTBBJTIwJTIwJTIwJTIwZXhhbXBsZXMlM0RleGFtcGxlcyUyQyUwQSUyMCUyMCUyMCUyMHRva2VuaXplciUzRHRva2VuaXplciUyQyUwQSUyMCUyMCUyMCUyMG1heF9zZXFfbGVuZ3RoJTNEYXJncy5tYXhfc2VxX2xlbmd0aCUyQyUwQSUyMCUyMCUyMCUyMGRvY19zdHJpZGUlM0RhcmdzLmRvY19zdHJpZGUlMkMlMEElMjAlMjAlMjAlMjBtYXhfcXVlcnlfbGVuZ3RoJTNEYXJncy5tYXhfcXVlcnlfbGVuZ3RoJTJDJTBBJTIwJTIwJTIwJTIwaXNfdHJhaW5pbmclM0Rub3QlMjBldmFsdWF0ZSUyQyUwQSk=",highlighted:`processor = SquadV2Processor()
examples = processor.get_dev_examples(data_dir)

features = squad_convert_examples_to_features(
    examples=examples,
    tokenizer=tokenizer,
    max_seq_length=args.max_seq_length,
    doc_stride=args.doc_stride,
    max_query_length=args.max_query_length,
    is_training=<span class="hljs-keyword">not</span> evaluate,
)`,wrap:!1}}),{c(){m=n("p"),m.textContent=T,v=a(),p(b.$$.fragment)},l(c){m=l(c,"P",{"data-svelte-h":!0}),d(m)!=="svelte-11lpom8"&&(m.textContent=T),v=o(c),f(b.$$.fragment,c)},m(c,I){i(c,m,I),i(c,v,I),u(b,c,I),P=!0},p:er,i(c){P||(h(b.$$.fragment,c),P=!0)},o(c){g(b.$$.fragment,c),P=!1},d(c){c&&(t(m),t(v)),_(b,c)}}}function vo(U){let m,T,v,b,P,c,I,la="Processors can mean two different things in the Transformers library:",sr,fe,ia=`<li>the objects that pre-process inputs for multi-modal models such as <a href="../model_doc/wav2vec2">Wav2Vec2</a> (speech and text)
or <a href="../model_doc/clip">CLIP</a> (text and vision)</li> <li>deprecated objects that were used in older versions of the library to preprocess data for GLUE or SQUAD.</li>`,ar,ue,or,he,da=`Any multi-modal model will require an object to encode or decode the data that groups several modalities (among text,
vision and audio). This is handled by objects called processors, which group together two or more processing objects
such as tokenizers (for the text modality), image processors (for vision) and feature extractors (for audio).`,nr,ge,ma="Those processors inherit from the following base class that implements the saving and loading functionality:",lr,y,_e,ns,yt,ca="This is a mixin used to provide saving/loading functionality for all processor classes.",ls,S,ve,is,Mt,pa="Instantiates a type of <code>~processing_utils.ProcessingMixin</code> from a Python dictionary of parameters.",ds,Z,be,ms,wt,fa="Instantiate a processor associated with a pretrained model.",cs,D,ps,R,xe,fs,Tt,ua=`From a <code>pretrained_model_name_or_path</code>, resolve to a dictionary of parameters, to be used for instantiating a
processor of type <code>~processing_utils.ProcessingMixin</code> using <code>from_args_and_dict</code>.`,us,q,$e,hs,Pt,ha="Upload the processor files to the ðŸ¤— Model Hub.",gs,G,_s,V,ye,vs,Ct,ga=`Register this class with a given auto class. This should only be used for custom feature extractors as the ones
in the library are already mapped with <code>AutoProcessor</code>.`,bs,W,xs,E,Me,$s,It,_a=`Saves the attributes of this processor (feature extractor, tokenizerâ€¦) in the specified directory so that it
can be reloaded using the <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTProcessor.from_pretrained">from_pretrained()</a> method.`,ys,A,Ms,Y,we,ws,kt,va="Serializes this instance to a Python dictionary.",Ts,O,Te,Ps,Xt,ba="Save this instance to a JSON file.",Cs,K,Pe,Is,Ut,xa="Serializes this instance to a JSON string.",ir,Ce,dr,Ie,$a=`All processors follow the same architecture which is that of the
<a href="/docs/transformers/main/en/main_classes/processors#transformers.DataProcessor">DataProcessor</a>. The processor returns a list of
<a href="/docs/transformers/main/en/main_classes/processors#transformers.InputExample">InputExample</a>. These
<a href="/docs/transformers/main/en/main_classes/processors#transformers.InputExample">InputExample</a> can be converted to
<a href="/docs/transformers/main/en/main_classes/processors#transformers.InputFeatures">InputFeatures</a> in order to be fed to the model.`,mr,C,ke,ks,Jt,ya="Base class for data converters for sequence classification data sets.",Xs,ee,Xe,Us,jt,Ma='Gets a collection of <a href="/docs/transformers/main/en/main_classes/processors#transformers.InputExample">InputExample</a> for the dev set.',Js,te,Ue,js,Lt,wa="Gets an example from a dict with tensorflow tensors.",Ls,re,Je,Zs,Zt,Ta="Gets the list of labels for this data set.",qs,se,je,Vs,qt,Pa='Gets a collection of <a href="/docs/transformers/main/en/main_classes/processors#transformers.InputExample">InputExample</a> for the test set.',Es,ae,Le,zs,Vt,Ca='Gets a collection of <a href="/docs/transformers/main/en/main_classes/processors#transformers.InputExample">InputExample</a> for the train set.',Hs,oe,Ze,Qs,Et,Ia=`Some tensorflow_datasets datasets are not formatted the same way the GLUE datasets are. This method converts
examples to the correct format.`,cr,J,qe,Ns,zt,ka="A single training/test example for simple sequence classification.",Bs,ne,Ve,Fs,Ht,Xa="Serializes this instance to a JSON string.",pr,j,Ee,Ss,Qt,Ua="A single set of features of data. Property names are the same names as the corresponding inputs to a model.",Ds,le,ze,Rs,Nt,Ja="Serializes this instance to a JSON string.",fr,He,ur,Qe,ja=`<a href="https://gluebenchmark.com/" rel="nofollow">General Language Understanding Evaluation (GLUE)</a> is a benchmark that evaluates the
performance of models across a diverse set of existing NLU tasks. It was released together with the paper <a href="https://openreview.net/pdf?id=rJ4km2R5t7" rel="nofollow">GLUE: A
multi-task benchmark and analysis platform for natural language understanding</a>`,hr,Ne,La=`This library hosts a total of 10 processors for the following tasks: MRPC, MNLI, MNLI (mismatched), CoLA, SST2, STSB,
QQP, QNLI, RTE and WNLI.`,gr,Be,Za="Those processors are:",_r,Fe,qa="<li><code>~data.processors.utils.MrpcProcessor</code></li> <li><code>~data.processors.utils.MnliProcessor</code></li> <li><code>~data.processors.utils.MnliMismatchedProcessor</code></li> <li><code>~data.processors.utils.Sst2Processor</code></li> <li><code>~data.processors.utils.StsbProcessor</code></li> <li><code>~data.processors.utils.QqpProcessor</code></li> <li><code>~data.processors.utils.QnliProcessor</code></li> <li><code>~data.processors.utils.RteProcessor</code></li> <li><code>~data.processors.utils.WnliProcessor</code></li>",vr,Se,Va=`Additionally, the following method can be used to load values from a data file and convert them to a list of
<a href="/docs/transformers/main/en/main_classes/processors#transformers.InputExample">InputExample</a>.`,br,Q,De,Gs,Bt,Ea="Loads a data file into a list of <code>InputFeatures</code>",xr,Re,$r,Ge,za=`<a href="https://www.nyu.edu/projects/bowman/xnli/" rel="nofollow">The Cross-Lingual NLI Corpus (XNLI)</a> is a benchmark that evaluates the
quality of cross-lingual text representations. XNLI is crowd-sourced dataset based on <a href="http://www.nyu.edu/projects/bowman/multinli/" rel="nofollow"><em>MultiNLI</em></a>: pairs of text are labeled with textual entailment annotations for 15
different languages (including both high-resource language such as English and low-resource languages such as Swahili).`,yr,We,Ha='It was released together with the paper <a href="https://arxiv.org/abs/1809.05053" rel="nofollow">XNLI: Evaluating Cross-lingual Sentence Representations</a>',Mr,Ae,Qa="This library hosts the processor to load the XNLI data:",wr,Ye,Na="<li><code>~data.processors.utils.XnliProcessor</code></li>",Tr,Oe,Ba="Please note that since the gold labels are available on the test set, evaluation is performed on the test set.",Pr,Ke,Fa='An example using these processors is given in the <a href="https://github.com/huggingface/transformers/tree/main/examples/pytorch/text-classification/run_xnli.py" rel="nofollow">run_xnli.py</a> script.',Cr,et,Ir,tt,Sa=`<a href="https://rajpurkar.github.io/SQuAD-explorer//" rel="nofollow">The Stanford Question Answering Dataset (SQuAD)</a> is a benchmark that
evaluates the performance of models on question answering. Two versions are available, v1.1 and v2.0. The first version
(v1.1) was released together with the paper <a href="https://arxiv.org/abs/1606.05250" rel="nofollow">SQuAD: 100,000+ Questions for Machine Comprehension of Text</a>. The second version (v2.0) was released alongside the paper <a href="https://arxiv.org/abs/1806.03822" rel="nofollow">Know What You Donâ€™t
Know: Unanswerable Questions for SQuAD</a>.`,kr,rt,Da="This library hosts a processor for each of the two versions:",Xr,st,Ur,at,Ra="Those processors are:",Jr,ot,Ga="<li><code>~data.processors.utils.SquadV1Processor</code></li> <li><code>~data.processors.utils.SquadV2Processor</code></li>",jr,nt,Wa="They both inherit from the abstract class <code>~data.processors.utils.SquadProcessor</code>",Lr,X,lt,Ws,Ft,Aa=`Processor for the SQuAD data set. overridden by SquadV1Processor and SquadV2Processor, used by the version 1.1 and
version 2.0 of SQuAD, respectively.`,As,ie,it,Ys,St,Ya="Returns the evaluation example from the data directory.",Os,z,dt,Ks,Dt,Oa="Creates a list of <code>SquadExample</code> using a TFDS dataset.",ea,de,ta,me,mt,ra,Rt,Ka="Returns the training examples from the data directory.",Zr,ct,eo=`Additionally, the following method can be used to convert SQuAD examples into
<code>~data.processors.utils.SquadFeatures</code> that can be used as model inputs.`,qr,L,pt,sa,Gt,to=`Converts a list of examples into a list of features that can be directly given as input to a model. It is
model-dependant and takes advantage of many of the tokenizerâ€™s features to create the modelâ€™s inputs.`,aa,ce,Vr,ft,ro=`These processors as well as the aforementioned method can be used with files containing the data as well as with the
<em>tensorflow_datasets</em> package. Examples are given below.`,Er,ut,zr,ht,so="Here is an example using the processors as well as the conversion method using data files:",Hr,gt,Qr,_t,ao="Using <em>tensorflow_datasets</em> is as easy as using a data file:",Nr,vt,Br,bt,oo='Another example using these processors is given in the <a href="https://github.com/huggingface/transformers/tree/main/examples/legacy/question-answering/run_squad.py" rel="nofollow">run_squad.py</a> script.',Fr,tr,Sr;return P=new pe({props:{title:"Processors",local:"processors",headingTag:"h1"}}),ue=new pe({props:{title:"Multi-modal processors",local:"transformers.ProcessorMixin",headingTag:"h2"}}),_e=new M({props:{name:"class transformers.ProcessorMixin",anchor:"transformers.ProcessorMixin",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/processing_utils.py#L56"}}),ve=new M({props:{name:"from_args_and_dict",anchor:"transformers.ProcessorMixin.from_args_and_dict",parameters:[{name:"args",val:""},{name:"processor_dict",val:": Dict"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ProcessorMixin.from_args_and_dict.processor_dict",description:`<strong>processor_dict</strong> (<code>Dict[str, Any]</code>) &#x2014;
Dictionary that will be used to instantiate the processor object. Such a dictionary can be
retrieved from a pretrained checkpoint by leveraging the
<code>~processing_utils.ProcessingMixin.to_dict</code> method.`,name:"processor_dict"},{anchor:"transformers.ProcessorMixin.from_args_and_dict.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>) &#x2014;
Additional parameters from which to initialize the processor object.`,name:"kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/processing_utils.py#L365",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The processor object instantiated from those
parameters.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>~processing_utils.ProcessingMixin</code></p>
`}}),be=new M({props:{name:"from_pretrained",anchor:"transformers.ProcessorMixin.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": Union"},{name:"cache_dir",val:": Union = None"},{name:"force_download",val:": bool = False"},{name:"local_files_only",val:": bool = False"},{name:"token",val:": Union = None"},{name:"revision",val:": str = 'main'"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ProcessorMixin.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.
**kwargs &#x2014;
Additional keyword arguments passed along to both
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.from_pretrained">from_pretrained()</a> and
<code>~tokenization_utils_base.PreTrainedTokenizer.from_pretrained</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/processing_utils.py#L406"}}),D=new oa({props:{$$slots:{default:[po]},$$scope:{ctx:U}}}),xe=new M({props:{name:"get_processor_dict",anchor:"transformers.ProcessorMixin.get_processor_dict",parameters:[{name:"pretrained_model_name_or_path",val:": Union"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ProcessorMixin.get_processor_dict.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The identifier of the pre-trained checkpoint from which we want the dictionary of parameters.`,name:"pretrained_model_name_or_path"},{anchor:"transformers.ProcessorMixin.get_processor_dict.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&quot;</code>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co, you can
specify the folder name here.`,name:"subfolder"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/processing_utils.py#L256",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The dictionary(ies) that will be used to instantiate the processor object.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>Tuple[Dict, Dict]</code></p>
`}}),$e=new M({props:{name:"push_to_hub",anchor:"transformers.ProcessorMixin.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"use_temp_dir",val:": Optional = None"},{name:"commit_message",val:": Optional = None"},{name:"private",val:": Optional = None"},{name:"token",val:": Union = None"},{name:"max_shard_size",val:": Union = '5GB'"},{name:"create_pr",val:": bool = False"},{name:"safe_serialization",val:": bool = True"},{name:"revision",val:": str = None"},{name:"commit_description",val:": str = None"},{name:"tags",val:": Optional = None"},{name:"**deprecated_kwargs",val:""}],parametersDescription:[{anchor:"transformers.ProcessorMixin.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The name of the repository you want to push your processor to. It should contain your organization name
when pushing to a given organization.`,name:"repo_id"},{anchor:"transformers.ProcessorMixin.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to use a temporary directory to store the files saved before they are pushed to the Hub.
Will default to <code>True</code> if there is no directory named like <code>repo_id</code>, <code>False</code> otherwise.`,name:"use_temp_dir"},{anchor:"transformers.ProcessorMixin.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;Upload processor&quot;</code>.`,name:"commit_message"},{anchor:"transformers.ProcessorMixin.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private.`,name:"private"},{anchor:"transformers.ProcessorMixin.push_to_hub.token",description:`<strong>token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if <code>repo_url</code>
is not specified.`,name:"token"},{anchor:"transformers.ProcessorMixin.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;5GB&quot;</code>) &#x2014;
Only applicable for models. The maximum size for a checkpoint before being sharded. Checkpoints shard
will then be each of size lower than this size. If expressed as a string, needs to be digits followed
by a unit (like <code>&quot;5MB&quot;</code>). We default it to <code>&quot;5GB&quot;</code> so that users can easily load models on free-tier
Google Colab instances without any CPU OOM issues.`,name:"max_shard_size"},{anchor:"transformers.ProcessorMixin.push_to_hub.create_pr",description:`<strong>create_pr</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to create a PR with the uploaded files or directly commit.`,name:"create_pr"},{anchor:"transformers.ProcessorMixin.push_to_hub.safe_serialization",description:`<strong>safe_serialization</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to convert the model weights in safetensors format for safer serialization.`,name:"safe_serialization"},{anchor:"transformers.ProcessorMixin.push_to_hub.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Branch to push the uploaded files to.`,name:"revision"},{anchor:"transformers.ProcessorMixin.push_to_hub.commit_description",description:`<strong>commit_description</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The description of the commit that will be created`,name:"commit_description"},{anchor:"transformers.ProcessorMixin.push_to_hub.tags",description:`<strong>tags</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
List of tags to push on the Hub.`,name:"tags"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/utils/hub.py#L768"}}),G=new na({props:{anchor:"transformers.ProcessorMixin.push_to_hub.example",$$slots:{default:[fo]},$$scope:{ctx:U}}}),ye=new M({props:{name:"register_for_auto_class",anchor:"transformers.ProcessorMixin.register_for_auto_class",parameters:[{name:"auto_class",val:" = 'AutoProcessor'"}],parametersDescription:[{anchor:"transformers.ProcessorMixin.register_for_auto_class.auto_class",description:`<strong>auto_class</strong> (<code>str</code> or <code>type</code>, <em>optional</em>, defaults to <code>&quot;AutoProcessor&quot;</code>) &#x2014;
The auto class to register this new feature extractor with.`,name:"auto_class"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/processing_utils.py#L470"}}),W=new oa({props:{warning:!0,$$slots:{default:[uo]},$$scope:{ctx:U}}}),Me=new M({props:{name:"save_pretrained",anchor:"transformers.ProcessorMixin.save_pretrained",parameters:[{name:"save_directory",val:""},{name:"push_to_hub",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ProcessorMixin.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory where the feature extractor JSON file and the tokenizer files will be saved (directory will
be created if it does not exist).`,name:"save_directory"},{anchor:"transformers.ProcessorMixin.save_pretrained.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push your model to the Hugging Face model hub after saving it. You can specify the
repository you want to push to with <code>repo_id</code> (will default to the name of <code>save_directory</code> in your
namespace).`,name:"push_to_hub"},{anchor:"transformers.ProcessorMixin.save_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
Additional key word arguments passed along to the <a href="/docs/transformers/main/en/main_classes/model#transformers.utils.PushToHubMixin.push_to_hub">push_to_hub()</a> method.`,name:"kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/processing_utils.py#L167"}}),A=new oa({props:{$$slots:{default:[ho]},$$scope:{ctx:U}}}),we=new M({props:{name:"to_dict",anchor:"transformers.ProcessorMixin.to_dict",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/processing_utils.py#L102",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Dictionary of all the attributes that make up this processor instance.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>Dict[str, Any]</code></p>
`}}),Te=new M({props:{name:"to_json_file",anchor:"transformers.ProcessorMixin.to_json_file",parameters:[{name:"json_file_path",val:": Union"}],parametersDescription:[{anchor:"transformers.ProcessorMixin.to_json_file.json_file_path",description:`<strong>json_file_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Path to the JSON file in which this processor instance&#x2019;s parameters will be saved.`,name:"json_file_path"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/processing_utils.py#L151"}}),Pe=new M({props:{name:"to_json_string",anchor:"transformers.ProcessorMixin.to_json_string",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/processing_utils.py#L140",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>String containing all the attributes that make up this feature_extractor instance in JSON format.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>str</code></p>
`}}),Ce=new pe({props:{title:"Deprecated processors",local:"transformers.DataProcessor",headingTag:"h2"}}),ke=new M({props:{name:"class transformers.DataProcessor",anchor:"transformers.DataProcessor",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L80"}}),Xe=new M({props:{name:"get_dev_examples",anchor:"transformers.DataProcessor.get_dev_examples",parameters:[{name:"data_dir",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L97"}}),Ue=new M({props:{name:"get_example_from_tensor_dict",anchor:"transformers.DataProcessor.get_example_from_tensor_dict",parameters:[{name:"tensor_dict",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L83"}}),Je=new M({props:{name:"get_labels",anchor:"transformers.DataProcessor.get_labels",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L105"}}),je=new M({props:{name:"get_test_examples",anchor:"transformers.DataProcessor.get_test_examples",parameters:[{name:"data_dir",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L101"}}),Le=new M({props:{name:"get_train_examples",anchor:"transformers.DataProcessor.get_train_examples",parameters:[{name:"data_dir",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L93"}}),Ze=new M({props:{name:"tfds_map",anchor:"transformers.DataProcessor.tfds_map",parameters:[{name:"example",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L109"}}),qe=new M({props:{name:"class transformers.InputExample",anchor:"transformers.InputExample",parameters:[{name:"guid",val:": str"},{name:"text_a",val:": str"},{name:"text_b",val:": Optional = None"},{name:"label",val:": Optional = None"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L29"}}),Ve=new M({props:{name:"to_json_string",anchor:"transformers.InputExample.to_json_string",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L49"}}),Ee=new M({props:{name:"class transformers.InputFeatures",anchor:"transformers.InputFeatures",parameters:[{name:"input_ids",val:": List"},{name:"attention_mask",val:": Optional = None"},{name:"token_type_ids",val:": Optional = None"},{name:"label",val:": Union = None"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L54"}}),ze=new M({props:{name:"to_json_string",anchor:"transformers.InputFeatures.to_json_string",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/utils.py#L75"}}),He=new pe({props:{title:"GLUE",local:"transformers.glue_convert_examples_to_features",headingTag:"h2"}}),De=new M({props:{name:"transformers.glue_convert_examples_to_features",anchor:"transformers.glue_convert_examples_to_features",parameters:[{name:"examples",val:": Union"},{name:"tokenizer",val:": PreTrainedTokenizer"},{name:"max_length",val:": Optional = None"},{name:"task",val:" = None"},{name:"label_list",val:" = None"},{name:"output_mode",val:" = None"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/glue.py#L41",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>If the <code>examples</code> input is a <code>tf.data.Dataset</code>, will return a <code>tf.data.Dataset</code> containing the task-specific
features. If the input is a list of <code>InputExamples</code>, will return a list of task-specific <code>InputFeatures</code> which
can be fed to the model.</p>
`}}),Re=new pe({props:{title:"XNLI",local:"xnli",headingTag:"h2"}}),et=new pe({props:{title:"SQuAD",local:"squad",headingTag:"h2"}}),st=new pe({props:{title:"Processors",local:"transformers.data.processors.squad.SquadProcessor",headingTag:"h3"}}),lt=new M({props:{name:"class transformers.data.processors.squad.SquadProcessor",anchor:"transformers.data.processors.squad.SquadProcessor",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/squad.py#L541"}}),it=new M({props:{name:"get_dev_examples",anchor:"transformers.data.processors.squad.SquadProcessor.get_dev_examples",parameters:[{name:"data_dir",val:""},{name:"filename",val:" = None"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/squad.py#L629"}}),dt=new M({props:{name:"get_examples_from_dataset",anchor:"transformers.data.processors.squad.SquadProcessor.get_examples_from_dataset",parameters:[{name:"dataset",val:""},{name:"evaluate",val:" = False"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/squad.py#L574",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>List of SquadExample</p>
`}}),de=new na({props:{anchor:"transformers.data.processors.squad.SquadProcessor.get_examples_from_dataset.example",$$slots:{default:[go]},$$scope:{ctx:U}}}),mt=new M({props:{name:"get_train_examples",anchor:"transformers.data.processors.squad.SquadProcessor.get_train_examples",parameters:[{name:"data_dir",val:""},{name:"filename",val:" = None"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/squad.py#L607"}}),pt=new M({props:{name:"transformers.squad_convert_examples_to_features",anchor:"transformers.squad_convert_examples_to_features",parameters:[{name:"examples",val:""},{name:"tokenizer",val:""},{name:"max_seq_length",val:""},{name:"doc_stride",val:""},{name:"max_query_length",val:""},{name:"is_training",val:""},{name:"padding_strategy",val:" = 'max_length'"},{name:"return_dataset",val:" = False"},{name:"threads",val:" = 1"},{name:"tqdm_enabled",val:" = True"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/data/processors/squad.py#L316",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>list of <code>SquadFeatures</code></p>
`}}),ce=new na({props:{anchor:"transformers.squad_convert_examples_to_features.example",$$slots:{default:[_o]},$$scope:{ctx:U}}}),ut=new pe({props:{title:"Example usage",local:"example-usage",headingTag:"h3"}}),gt=new rr({props:{code:"JTIzJTIwTG9hZGluZyUyMGElMjBWMiUyMHByb2Nlc3NvciUwQXByb2Nlc3NvciUyMCUzRCUyMFNxdWFkVjJQcm9jZXNzb3IoKSUwQWV4YW1wbGVzJTIwJTNEJTIwcHJvY2Vzc29yLmdldF9kZXZfZXhhbXBsZXMoc3F1YWRfdjJfZGF0YV9kaXIpJTBBJTBBJTIzJTIwTG9hZGluZyUyMGElMjBWMSUyMHByb2Nlc3NvciUwQXByb2Nlc3NvciUyMCUzRCUyMFNxdWFkVjFQcm9jZXNzb3IoKSUwQWV4YW1wbGVzJTIwJTNEJTIwcHJvY2Vzc29yLmdldF9kZXZfZXhhbXBsZXMoc3F1YWRfdjFfZGF0YV9kaXIpJTBBJTBBZmVhdHVyZXMlMjAlM0QlMjBzcXVhZF9jb252ZXJ0X2V4YW1wbGVzX3RvX2ZlYXR1cmVzKCUwQSUyMCUyMCUyMCUyMGV4YW1wbGVzJTNEZXhhbXBsZXMlMkMlMEElMjAlMjAlMjAlMjB0b2tlbml6ZXIlM0R0b2tlbml6ZXIlMkMlMEElMjAlMjAlMjAlMjBtYXhfc2VxX2xlbmd0aCUzRG1heF9zZXFfbGVuZ3RoJTJDJTBBJTIwJTIwJTIwJTIwZG9jX3N0cmlkZSUzRGFyZ3MuZG9jX3N0cmlkZSUyQyUwQSUyMCUyMCUyMCUyMG1heF9xdWVyeV9sZW5ndGglM0RtYXhfcXVlcnlfbGVuZ3RoJTJDJTBBJTIwJTIwJTIwJTIwaXNfdHJhaW5pbmclM0Rub3QlMjBldmFsdWF0ZSUyQyUwQSk=",highlighted:`<span class="hljs-comment"># Loading a V2 processor</span>
processor = SquadV2Processor()
examples = processor.get_dev_examples(squad_v2_data_dir)

<span class="hljs-comment"># Loading a V1 processor</span>
processor = SquadV1Processor()
examples = processor.get_dev_examples(squad_v1_data_dir)

features = squad_convert_examples_to_features(
    examples=examples,
    tokenizer=tokenizer,
    max_seq_length=max_seq_length,
    doc_stride=args.doc_stride,
    max_query_length=max_query_length,
    is_training=<span class="hljs-keyword">not</span> evaluate,
)`,wrap:!1}}),vt=new rr({props:{code:"JTIzJTIwdGVuc29yZmxvd19kYXRhc2V0cyUyMG9ubHklMjBoYW5kbGUlMjBTcXVhZCUyMFYxLiUwQXRmZHNfZXhhbXBsZXMlMjAlM0QlMjB0ZmRzLmxvYWQoJTIyc3F1YWQlMjIpJTBBZXhhbXBsZXMlMjAlM0QlMjBTcXVhZFYxUHJvY2Vzc29yKCkuZ2V0X2V4YW1wbGVzX2Zyb21fZGF0YXNldCh0ZmRzX2V4YW1wbGVzJTJDJTIwZXZhbHVhdGUlM0RldmFsdWF0ZSklMEElMEFmZWF0dXJlcyUyMCUzRCUyMHNxdWFkX2NvbnZlcnRfZXhhbXBsZXNfdG9fZmVhdHVyZXMoJTBBJTIwJTIwJTIwJTIwZXhhbXBsZXMlM0RleGFtcGxlcyUyQyUwQSUyMCUyMCUyMCUyMHRva2VuaXplciUzRHRva2VuaXplciUyQyUwQSUyMCUyMCUyMCUyMG1heF9zZXFfbGVuZ3RoJTNEbWF4X3NlcV9sZW5ndGglMkMlMEElMjAlMjAlMjAlMjBkb2Nfc3RyaWRlJTNEYXJncy5kb2Nfc3RyaWRlJTJDJTBBJTIwJTIwJTIwJTIwbWF4X3F1ZXJ5X2xlbmd0aCUzRG1heF9xdWVyeV9sZW5ndGglMkMlMEElMjAlMjAlMjAlMjBpc190cmFpbmluZyUzRG5vdCUyMGV2YWx1YXRlJTJDJTBBKQ==",highlighted:`<span class="hljs-comment"># tensorflow_datasets only handle Squad V1.</span>
tfds_examples = tfds.load(<span class="hljs-string">&quot;squad&quot;</span>)
examples = SquadV1Processor().get_examples_from_dataset(tfds_examples, evaluate=evaluate)

features = squad_convert_examples_to_features(
    examples=examples,
    tokenizer=tokenizer,
    max_seq_length=max_seq_length,
    doc_stride=args.doc_stride,
    max_query_length=max_query_length,
    is_training=<span class="hljs-keyword">not</span> evaluate,
)`,wrap:!1}}),{c(){m=n("meta"),T=a(),v=n("p"),b=a(),p(P.$$.fragment),c=a(),I=n("p"),I.textContent=la,sr=a(),fe=n("ul"),fe.innerHTML=ia,ar=a(),p(ue.$$.fragment),or=a(),he=n("p"),he.textContent=da,nr=a(),ge=n("p"),ge.textContent=ma,lr=a(),y=n("div"),p(_e.$$.fragment),ns=a(),yt=n("p"),yt.textContent=ca,ls=a(),S=n("div"),p(ve.$$.fragment),is=a(),Mt=n("p"),Mt.innerHTML=pa,ds=a(),Z=n("div"),p(be.$$.fragment),ms=a(),wt=n("p"),wt.textContent=fa,cs=a(),p(D.$$.fragment),ps=a(),R=n("div"),p(xe.$$.fragment),fs=a(),Tt=n("p"),Tt.innerHTML=ua,us=a(),q=n("div"),p($e.$$.fragment),hs=a(),Pt=n("p"),Pt.textContent=ha,gs=a(),p(G.$$.fragment),_s=a(),V=n("div"),p(ye.$$.fragment),vs=a(),Ct=n("p"),Ct.innerHTML=ga,bs=a(),p(W.$$.fragment),xs=a(),E=n("div"),p(Me.$$.fragment),$s=a(),It=n("p"),It.innerHTML=_a,ys=a(),p(A.$$.fragment),Ms=a(),Y=n("div"),p(we.$$.fragment),ws=a(),kt=n("p"),kt.textContent=va,Ts=a(),O=n("div"),p(Te.$$.fragment),Ps=a(),Xt=n("p"),Xt.textContent=ba,Cs=a(),K=n("div"),p(Pe.$$.fragment),Is=a(),Ut=n("p"),Ut.textContent=xa,ir=a(),p(Ce.$$.fragment),dr=a(),Ie=n("p"),Ie.innerHTML=$a,mr=a(),C=n("div"),p(ke.$$.fragment),ks=a(),Jt=n("p"),Jt.textContent=ya,Xs=a(),ee=n("div"),p(Xe.$$.fragment),Us=a(),jt=n("p"),jt.innerHTML=Ma,Js=a(),te=n("div"),p(Ue.$$.fragment),js=a(),Lt=n("p"),Lt.textContent=wa,Ls=a(),re=n("div"),p(Je.$$.fragment),Zs=a(),Zt=n("p"),Zt.textContent=Ta,qs=a(),se=n("div"),p(je.$$.fragment),Vs=a(),qt=n("p"),qt.innerHTML=Pa,Es=a(),ae=n("div"),p(Le.$$.fragment),zs=a(),Vt=n("p"),Vt.innerHTML=Ca,Hs=a(),oe=n("div"),p(Ze.$$.fragment),Qs=a(),Et=n("p"),Et.textContent=Ia,cr=a(),J=n("div"),p(qe.$$.fragment),Ns=a(),zt=n("p"),zt.textContent=ka,Bs=a(),ne=n("div"),p(Ve.$$.fragment),Fs=a(),Ht=n("p"),Ht.textContent=Xa,pr=a(),j=n("div"),p(Ee.$$.fragment),Ss=a(),Qt=n("p"),Qt.textContent=Ua,Ds=a(),le=n("div"),p(ze.$$.fragment),Rs=a(),Nt=n("p"),Nt.textContent=Ja,fr=a(),p(He.$$.fragment),ur=a(),Qe=n("p"),Qe.innerHTML=ja,hr=a(),Ne=n("p"),Ne.textContent=La,gr=a(),Be=n("p"),Be.textContent=Za,_r=a(),Fe=n("ul"),Fe.innerHTML=qa,vr=a(),Se=n("p"),Se.innerHTML=Va,br=a(),Q=n("div"),p(De.$$.fragment),Gs=a(),Bt=n("p"),Bt.innerHTML=Ea,xr=a(),p(Re.$$.fragment),$r=a(),Ge=n("p"),Ge.innerHTML=za,yr=a(),We=n("p"),We.innerHTML=Ha,Mr=a(),Ae=n("p"),Ae.textContent=Qa,wr=a(),Ye=n("ul"),Ye.innerHTML=Na,Tr=a(),Oe=n("p"),Oe.textContent=Ba,Pr=a(),Ke=n("p"),Ke.innerHTML=Fa,Cr=a(),p(et.$$.fragment),Ir=a(),tt=n("p"),tt.innerHTML=Sa,kr=a(),rt=n("p"),rt.textContent=Da,Xr=a(),p(st.$$.fragment),Ur=a(),at=n("p"),at.textContent=Ra,Jr=a(),ot=n("ul"),ot.innerHTML=Ga,jr=a(),nt=n("p"),nt.innerHTML=Wa,Lr=a(),X=n("div"),p(lt.$$.fragment),Ws=a(),Ft=n("p"),Ft.textContent=Aa,As=a(),ie=n("div"),p(it.$$.fragment),Ys=a(),St=n("p"),St.textContent=Ya,Os=a(),z=n("div"),p(dt.$$.fragment),Ks=a(),Dt=n("p"),Dt.innerHTML=Oa,ea=a(),p(de.$$.fragment),ta=a(),me=n("div"),p(mt.$$.fragment),ra=a(),Rt=n("p"),Rt.textContent=Ka,Zr=a(),ct=n("p"),ct.innerHTML=eo,qr=a(),L=n("div"),p(pt.$$.fragment),sa=a(),Gt=n("p"),Gt.textContent=to,aa=a(),p(ce.$$.fragment),Vr=a(),ft=n("p"),ft.innerHTML=ro,Er=a(),p(ut.$$.fragment),zr=a(),ht=n("p"),ht.textContent=so,Hr=a(),p(gt.$$.fragment),Qr=a(),_t=n("p"),_t.innerHTML=ao,Nr=a(),p(vt.$$.fragment),Br=a(),bt=n("p"),bt.innerHTML=oo,Fr=a(),tr=n("p"),this.h()},l(e){const r=co("svelte-u9bgzb",document.head);m=l(r,"META",{name:!0,content:!0}),r.forEach(t),T=o(e),v=l(e,"P",{}),x(v).forEach(t),b=o(e),f(P.$$.fragment,e),c=o(e),I=l(e,"P",{"data-svelte-h":!0}),d(I)!=="svelte-8nvl5z"&&(I.textContent=la),sr=o(e),fe=l(e,"UL",{"data-svelte-h":!0}),d(fe)!=="svelte-1r5mt3j"&&(fe.innerHTML=ia),ar=o(e),f(ue.$$.fragment,e),or=o(e),he=l(e,"P",{"data-svelte-h":!0}),d(he)!=="svelte-16hpp4n"&&(he.textContent=da),nr=o(e),ge=l(e,"P",{"data-svelte-h":!0}),d(ge)!=="svelte-x3ucqc"&&(ge.textContent=ma),lr=o(e),y=l(e,"DIV",{class:!0});var w=x(y);f(_e.$$.fragment,w),ns=o(w),yt=l(w,"P",{"data-svelte-h":!0}),d(yt)!=="svelte-1s4wckx"&&(yt.textContent=ca),ls=o(w),S=l(w,"DIV",{class:!0});var xt=x(S);f(ve.$$.fragment,xt),is=o(xt),Mt=l(xt,"P",{"data-svelte-h":!0}),d(Mt)!=="svelte-1i2d3vx"&&(Mt.innerHTML=pa),xt.forEach(t),ds=o(w),Z=l(w,"DIV",{class:!0});var N=x(Z);f(be.$$.fragment,N),ms=o(N),wt=l(N,"P",{"data-svelte-h":!0}),d(wt)!=="svelte-1cj8dcb"&&(wt.textContent=fa),cs=o(N),f(D.$$.fragment,N),N.forEach(t),ps=o(w),R=l(w,"DIV",{class:!0});var $t=x(R);f(xe.$$.fragment,$t),fs=o($t),Tt=l($t,"P",{"data-svelte-h":!0}),d(Tt)!=="svelte-hsvutq"&&(Tt.innerHTML=ua),$t.forEach(t),us=o(w),q=l(w,"DIV",{class:!0});var B=x(q);f($e.$$.fragment,B),hs=o(B),Pt=l(B,"P",{"data-svelte-h":!0}),d(Pt)!=="svelte-1cwsjho"&&(Pt.textContent=ha),gs=o(B),f(G.$$.fragment,B),B.forEach(t),_s=o(w),V=l(w,"DIV",{class:!0});var F=x(V);f(ye.$$.fragment,F),vs=o(F),Ct=l(F,"P",{"data-svelte-h":!0}),d(Ct)!=="svelte-hhsvto"&&(Ct.innerHTML=ga),bs=o(F),f(W.$$.fragment,F),F.forEach(t),xs=o(w),E=l(w,"DIV",{class:!0});var Wt=x(E);f(Me.$$.fragment,Wt),$s=o(Wt),It=l(Wt,"P",{"data-svelte-h":!0}),d(It)!=="svelte-pd1tp5"&&(It.innerHTML=_a),ys=o(Wt),f(A.$$.fragment,Wt),Wt.forEach(t),Ms=o(w),Y=l(w,"DIV",{class:!0});var Dr=x(Y);f(we.$$.fragment,Dr),ws=o(Dr),kt=l(Dr,"P",{"data-svelte-h":!0}),d(kt)!=="svelte-1ww3wqq"&&(kt.textContent=va),Dr.forEach(t),Ts=o(w),O=l(w,"DIV",{class:!0});var Rr=x(O);f(Te.$$.fragment,Rr),Ps=o(Rr),Xt=l(Rr,"P",{"data-svelte-h":!0}),d(Xt)!=="svelte-1g70y32"&&(Xt.textContent=ba),Rr.forEach(t),Cs=o(w),K=l(w,"DIV",{class:!0});var Gr=x(K);f(Pe.$$.fragment,Gr),Is=o(Gr),Ut=l(Gr,"P",{"data-svelte-h":!0}),d(Ut)!=="svelte-5ayq1f"&&(Ut.textContent=xa),Gr.forEach(t),w.forEach(t),ir=o(e),f(Ce.$$.fragment,e),dr=o(e),Ie=l(e,"P",{"data-svelte-h":!0}),d(Ie)!=="svelte-48co4p"&&(Ie.innerHTML=$a),mr=o(e),C=l(e,"DIV",{class:!0});var k=x(C);f(ke.$$.fragment,k),ks=o(k),Jt=l(k,"P",{"data-svelte-h":!0}),d(Jt)!=="svelte-1bsw04k"&&(Jt.textContent=ya),Xs=o(k),ee=l(k,"DIV",{class:!0});var Wr=x(ee);f(Xe.$$.fragment,Wr),Us=o(Wr),jt=l(Wr,"P",{"data-svelte-h":!0}),d(jt)!=="svelte-fiwhzw"&&(jt.innerHTML=Ma),Wr.forEach(t),Js=o(k),te=l(k,"DIV",{class:!0});var Ar=x(te);f(Ue.$$.fragment,Ar),js=o(Ar),Lt=l(Ar,"P",{"data-svelte-h":!0}),d(Lt)!=="svelte-pplryq"&&(Lt.textContent=wa),Ar.forEach(t),Ls=o(k),re=l(k,"DIV",{class:!0});var Yr=x(re);f(Je.$$.fragment,Yr),Zs=o(Yr),Zt=l(Yr,"P",{"data-svelte-h":!0}),d(Zt)!=="svelte-3oqyjr"&&(Zt.textContent=Ta),Yr.forEach(t),qs=o(k),se=l(k,"DIV",{class:!0});var Or=x(se);f(je.$$.fragment,Or),Vs=o(Or),qt=l(Or,"P",{"data-svelte-h":!0}),d(qt)!=="svelte-cbpgrz"&&(qt.innerHTML=Pa),Or.forEach(t),Es=o(k),ae=l(k,"DIV",{class:!0});var Kr=x(ae);f(Le.$$.fragment,Kr),zs=o(Kr),Vt=l(Kr,"P",{"data-svelte-h":!0}),d(Vt)!=="svelte-xngr19"&&(Vt.innerHTML=Ca),Kr.forEach(t),Hs=o(k),oe=l(k,"DIV",{class:!0});var es=x(oe);f(Ze.$$.fragment,es),Qs=o(es),Et=l(es,"P",{"data-svelte-h":!0}),d(Et)!=="svelte-1jevh15"&&(Et.textContent=Ia),es.forEach(t),k.forEach(t),cr=o(e),J=l(e,"DIV",{class:!0});var At=x(J);f(qe.$$.fragment,At),Ns=o(At),zt=l(At,"P",{"data-svelte-h":!0}),d(zt)!=="svelte-vkt0pi"&&(zt.textContent=ka),Bs=o(At),ne=l(At,"DIV",{class:!0});var ts=x(ne);f(Ve.$$.fragment,ts),Fs=o(ts),Ht=l(ts,"P",{"data-svelte-h":!0}),d(Ht)!=="svelte-5ayq1f"&&(Ht.textContent=Xa),ts.forEach(t),At.forEach(t),pr=o(e),j=l(e,"DIV",{class:!0});var Yt=x(j);f(Ee.$$.fragment,Yt),Ss=o(Yt),Qt=l(Yt,"P",{"data-svelte-h":!0}),d(Qt)!=="svelte-168wf64"&&(Qt.textContent=Ua),Ds=o(Yt),le=l(Yt,"DIV",{class:!0});var rs=x(le);f(ze.$$.fragment,rs),Rs=o(rs),Nt=l(rs,"P",{"data-svelte-h":!0}),d(Nt)!=="svelte-5ayq1f"&&(Nt.textContent=Ja),rs.forEach(t),Yt.forEach(t),fr=o(e),f(He.$$.fragment,e),ur=o(e),Qe=l(e,"P",{"data-svelte-h":!0}),d(Qe)!=="svelte-pgkk87"&&(Qe.innerHTML=ja),hr=o(e),Ne=l(e,"P",{"data-svelte-h":!0}),d(Ne)!=="svelte-1iz8kjk"&&(Ne.textContent=La),gr=o(e),Be=l(e,"P",{"data-svelte-h":!0}),d(Be)!=="svelte-ejlsq2"&&(Be.textContent=Za),_r=o(e),Fe=l(e,"UL",{"data-svelte-h":!0}),d(Fe)!=="svelte-my8qym"&&(Fe.innerHTML=qa),vr=o(e),Se=l(e,"P",{"data-svelte-h":!0}),d(Se)!=="svelte-1ocpnlg"&&(Se.innerHTML=Va),br=o(e),Q=l(e,"DIV",{class:!0});var ss=x(Q);f(De.$$.fragment,ss),Gs=o(ss),Bt=l(ss,"P",{"data-svelte-h":!0}),d(Bt)!=="svelte-5lvrve"&&(Bt.innerHTML=Ea),ss.forEach(t),xr=o(e),f(Re.$$.fragment,e),$r=o(e),Ge=l(e,"P",{"data-svelte-h":!0}),d(Ge)!=="svelte-9mlx1z"&&(Ge.innerHTML=za),yr=o(e),We=l(e,"P",{"data-svelte-h":!0}),d(We)!=="svelte-1qabksm"&&(We.innerHTML=Ha),Mr=o(e),Ae=l(e,"P",{"data-svelte-h":!0}),d(Ae)!=="svelte-uho2qa"&&(Ae.textContent=Qa),wr=o(e),Ye=l(e,"UL",{"data-svelte-h":!0}),d(Ye)!=="svelte-1e2xq99"&&(Ye.innerHTML=Na),Tr=o(e),Oe=l(e,"P",{"data-svelte-h":!0}),d(Oe)!=="svelte-sz5yy2"&&(Oe.textContent=Ba),Pr=o(e),Ke=l(e,"P",{"data-svelte-h":!0}),d(Ke)!=="svelte-1mss3di"&&(Ke.innerHTML=Fa),Cr=o(e),f(et.$$.fragment,e),Ir=o(e),tt=l(e,"P",{"data-svelte-h":!0}),d(tt)!=="svelte-1i4abtq"&&(tt.innerHTML=Sa),kr=o(e),rt=l(e,"P",{"data-svelte-h":!0}),d(rt)!=="svelte-zxdzom"&&(rt.textContent=Da),Xr=o(e),f(st.$$.fragment,e),Ur=o(e),at=l(e,"P",{"data-svelte-h":!0}),d(at)!=="svelte-ejlsq2"&&(at.textContent=Ra),Jr=o(e),ot=l(e,"UL",{"data-svelte-h":!0}),d(ot)!=="svelte-1qiv3qf"&&(ot.innerHTML=Ga),jr=o(e),nt=l(e,"P",{"data-svelte-h":!0}),d(nt)!=="svelte-1r22nj6"&&(nt.innerHTML=Wa),Lr=o(e),X=l(e,"DIV",{class:!0});var H=x(X);f(lt.$$.fragment,H),Ws=o(H),Ft=l(H,"P",{"data-svelte-h":!0}),d(Ft)!=="svelte-173gxyd"&&(Ft.textContent=Aa),As=o(H),ie=l(H,"DIV",{class:!0});var as=x(ie);f(it.$$.fragment,as),Ys=o(as),St=l(as,"P",{"data-svelte-h":!0}),d(St)!=="svelte-wmaktk"&&(St.textContent=Ya),as.forEach(t),Os=o(H),z=l(H,"DIV",{class:!0});var Ot=x(z);f(dt.$$.fragment,Ot),Ks=o(Ot),Dt=l(Ot,"P",{"data-svelte-h":!0}),d(Dt)!=="svelte-11nqnea"&&(Dt.innerHTML=Oa),ea=o(Ot),f(de.$$.fragment,Ot),Ot.forEach(t),ta=o(H),me=l(H,"DIV",{class:!0});var os=x(me);f(mt.$$.fragment,os),ra=o(os),Rt=l(os,"P",{"data-svelte-h":!0}),d(Rt)!=="svelte-d5zv1x"&&(Rt.textContent=Ka),os.forEach(t),H.forEach(t),Zr=o(e),ct=l(e,"P",{"data-svelte-h":!0}),d(ct)!=="svelte-12wzh89"&&(ct.innerHTML=eo),qr=o(e),L=l(e,"DIV",{class:!0});var Kt=x(L);f(pt.$$.fragment,Kt),sa=o(Kt),Gt=l(Kt,"P",{"data-svelte-h":!0}),d(Gt)!=="svelte-169nh0g"&&(Gt.textContent=to),aa=o(Kt),f(ce.$$.fragment,Kt),Kt.forEach(t),Vr=o(e),ft=l(e,"P",{"data-svelte-h":!0}),d(ft)!=="svelte-2mj9lk"&&(ft.innerHTML=ro),Er=o(e),f(ut.$$.fragment,e),zr=o(e),ht=l(e,"P",{"data-svelte-h":!0}),d(ht)!=="svelte-1q119ra"&&(ht.textContent=so),Hr=o(e),f(gt.$$.fragment,e),Qr=o(e),_t=l(e,"P",{"data-svelte-h":!0}),d(_t)!=="svelte-9ecb4t"&&(_t.innerHTML=ao),Nr=o(e),f(vt.$$.fragment,e),Br=o(e),bt=l(e,"P",{"data-svelte-h":!0}),d(bt)!=="svelte-8lr0dh"&&(bt.innerHTML=oo),Fr=o(e),tr=l(e,"P",{}),x(tr).forEach(t),this.h()},h(){$(m,"name","hf:doc:metadata"),$(m,"content",bo),$(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,r){s(document.head,m),i(e,T,r),i(e,v,r),i(e,b,r),u(P,e,r),i(e,c,r),i(e,I,r),i(e,sr,r),i(e,fe,r),i(e,ar,r),u(ue,e,r),i(e,or,r),i(e,he,r),i(e,nr,r),i(e,ge,r),i(e,lr,r),i(e,y,r),u(_e,y,null),s(y,ns),s(y,yt),s(y,ls),s(y,S),u(ve,S,null),s(S,is),s(S,Mt),s(y,ds),s(y,Z),u(be,Z,null),s(Z,ms),s(Z,wt),s(Z,cs),u(D,Z,null),s(y,ps),s(y,R),u(xe,R,null),s(R,fs),s(R,Tt),s(y,us),s(y,q),u($e,q,null),s(q,hs),s(q,Pt),s(q,gs),u(G,q,null),s(y,_s),s(y,V),u(ye,V,null),s(V,vs),s(V,Ct),s(V,bs),u(W,V,null),s(y,xs),s(y,E),u(Me,E,null),s(E,$s),s(E,It),s(E,ys),u(A,E,null),s(y,Ms),s(y,Y),u(we,Y,null),s(Y,ws),s(Y,kt),s(y,Ts),s(y,O),u(Te,O,null),s(O,Ps),s(O,Xt),s(y,Cs),s(y,K),u(Pe,K,null),s(K,Is),s(K,Ut),i(e,ir,r),u(Ce,e,r),i(e,dr,r),i(e,Ie,r),i(e,mr,r),i(e,C,r),u(ke,C,null),s(C,ks),s(C,Jt),s(C,Xs),s(C,ee),u(Xe,ee,null),s(ee,Us),s(ee,jt),s(C,Js),s(C,te),u(Ue,te,null),s(te,js),s(te,Lt),s(C,Ls),s(C,re),u(Je,re,null),s(re,Zs),s(re,Zt),s(C,qs),s(C,se),u(je,se,null),s(se,Vs),s(se,qt),s(C,Es),s(C,ae),u(Le,ae,null),s(ae,zs),s(ae,Vt),s(C,Hs),s(C,oe),u(Ze,oe,null),s(oe,Qs),s(oe,Et),i(e,cr,r),i(e,J,r),u(qe,J,null),s(J,Ns),s(J,zt),s(J,Bs),s(J,ne),u(Ve,ne,null),s(ne,Fs),s(ne,Ht),i(e,pr,r),i(e,j,r),u(Ee,j,null),s(j,Ss),s(j,Qt),s(j,Ds),s(j,le),u(ze,le,null),s(le,Rs),s(le,Nt),i(e,fr,r),u(He,e,r),i(e,ur,r),i(e,Qe,r),i(e,hr,r),i(e,Ne,r),i(e,gr,r),i(e,Be,r),i(e,_r,r),i(e,Fe,r),i(e,vr,r),i(e,Se,r),i(e,br,r),i(e,Q,r),u(De,Q,null),s(Q,Gs),s(Q,Bt),i(e,xr,r),u(Re,e,r),i(e,$r,r),i(e,Ge,r),i(e,yr,r),i(e,We,r),i(e,Mr,r),i(e,Ae,r),i(e,wr,r),i(e,Ye,r),i(e,Tr,r),i(e,Oe,r),i(e,Pr,r),i(e,Ke,r),i(e,Cr,r),u(et,e,r),i(e,Ir,r),i(e,tt,r),i(e,kr,r),i(e,rt,r),i(e,Xr,r),u(st,e,r),i(e,Ur,r),i(e,at,r),i(e,Jr,r),i(e,ot,r),i(e,jr,r),i(e,nt,r),i(e,Lr,r),i(e,X,r),u(lt,X,null),s(X,Ws),s(X,Ft),s(X,As),s(X,ie),u(it,ie,null),s(ie,Ys),s(ie,St),s(X,Os),s(X,z),u(dt,z,null),s(z,Ks),s(z,Dt),s(z,ea),u(de,z,null),s(X,ta),s(X,me),u(mt,me,null),s(me,ra),s(me,Rt),i(e,Zr,r),i(e,ct,r),i(e,qr,r),i(e,L,r),u(pt,L,null),s(L,sa),s(L,Gt),s(L,aa),u(ce,L,null),i(e,Vr,r),i(e,ft,r),i(e,Er,r),u(ut,e,r),i(e,zr,r),i(e,ht,r),i(e,Hr,r),u(gt,e,r),i(e,Qr,r),i(e,_t,r),i(e,Nr,r),u(vt,e,r),i(e,Br,r),i(e,bt,r),i(e,Fr,r),i(e,tr,r),Sr=!0},p(e,[r]){const w={};r&2&&(w.$$scope={dirty:r,ctx:e}),D.$set(w);const xt={};r&2&&(xt.$$scope={dirty:r,ctx:e}),G.$set(xt);const N={};r&2&&(N.$$scope={dirty:r,ctx:e}),W.$set(N);const $t={};r&2&&($t.$$scope={dirty:r,ctx:e}),A.$set($t);const B={};r&2&&(B.$$scope={dirty:r,ctx:e}),de.$set(B);const F={};r&2&&(F.$$scope={dirty:r,ctx:e}),ce.$set(F)},i(e){Sr||(h(P.$$.fragment,e),h(ue.$$.fragment,e),h(_e.$$.fragment,e),h(ve.$$.fragment,e),h(be.$$.fragment,e),h(D.$$.fragment,e),h(xe.$$.fragment,e),h($e.$$.fragment,e),h(G.$$.fragment,e),h(ye.$$.fragment,e),h(W.$$.fragment,e),h(Me.$$.fragment,e),h(A.$$.fragment,e),h(we.$$.fragment,e),h(Te.$$.fragment,e),h(Pe.$$.fragment,e),h(Ce.$$.fragment,e),h(ke.$$.fragment,e),h(Xe.$$.fragment,e),h(Ue.$$.fragment,e),h(Je.$$.fragment,e),h(je.$$.fragment,e),h(Le.$$.fragment,e),h(Ze.$$.fragment,e),h(qe.$$.fragment,e),h(Ve.$$.fragment,e),h(Ee.$$.fragment,e),h(ze.$$.fragment,e),h(He.$$.fragment,e),h(De.$$.fragment,e),h(Re.$$.fragment,e),h(et.$$.fragment,e),h(st.$$.fragment,e),h(lt.$$.fragment,e),h(it.$$.fragment,e),h(dt.$$.fragment,e),h(de.$$.fragment,e),h(mt.$$.fragment,e),h(pt.$$.fragment,e),h(ce.$$.fragment,e),h(ut.$$.fragment,e),h(gt.$$.fragment,e),h(vt.$$.fragment,e),Sr=!0)},o(e){g(P.$$.fragment,e),g(ue.$$.fragment,e),g(_e.$$.fragment,e),g(ve.$$.fragment,e),g(be.$$.fragment,e),g(D.$$.fragment,e),g(xe.$$.fragment,e),g($e.$$.fragment,e),g(G.$$.fragment,e),g(ye.$$.fragment,e),g(W.$$.fragment,e),g(Me.$$.fragment,e),g(A.$$.fragment,e),g(we.$$.fragment,e),g(Te.$$.fragment,e),g(Pe.$$.fragment,e),g(Ce.$$.fragment,e),g(ke.$$.fragment,e),g(Xe.$$.fragment,e),g(Ue.$$.fragment,e),g(Je.$$.fragment,e),g(je.$$.fragment,e),g(Le.$$.fragment,e),g(Ze.$$.fragment,e),g(qe.$$.fragment,e),g(Ve.$$.fragment,e),g(Ee.$$.fragment,e),g(ze.$$.fragment,e),g(He.$$.fragment,e),g(De.$$.fragment,e),g(Re.$$.fragment,e),g(et.$$.fragment,e),g(st.$$.fragment,e),g(lt.$$.fragment,e),g(it.$$.fragment,e),g(dt.$$.fragment,e),g(de.$$.fragment,e),g(mt.$$.fragment,e),g(pt.$$.fragment,e),g(ce.$$.fragment,e),g(ut.$$.fragment,e),g(gt.$$.fragment,e),g(vt.$$.fragment,e),Sr=!1},d(e){e&&(t(T),t(v),t(b),t(c),t(I),t(sr),t(fe),t(ar),t(or),t(he),t(nr),t(ge),t(lr),t(y),t(ir),t(dr),t(Ie),t(mr),t(C),t(cr),t(J),t(pr),t(j),t(fr),t(ur),t(Qe),t(hr),t(Ne),t(gr),t(Be),t(_r),t(Fe),t(vr),t(Se),t(br),t(Q),t(xr),t($r),t(Ge),t(yr),t(We),t(Mr),t(Ae),t(wr),t(Ye),t(Tr),t(Oe),t(Pr),t(Ke),t(Cr),t(Ir),t(tt),t(kr),t(rt),t(Xr),t(Ur),t(at),t(Jr),t(ot),t(jr),t(nt),t(Lr),t(X),t(Zr),t(ct),t(qr),t(L),t(Vr),t(ft),t(Er),t(zr),t(ht),t(Hr),t(Qr),t(_t),t(Nr),t(Br),t(bt),t(Fr),t(tr)),t(m),_(P,e),_(ue,e),_(_e),_(ve),_(be),_(D),_(xe),_($e),_(G),_(ye),_(W),_(Me),_(A),_(we),_(Te),_(Pe),_(Ce,e),_(ke),_(Xe),_(Ue),_(Je),_(je),_(Le),_(Ze),_(qe),_(Ve),_(Ee),_(ze),_(He,e),_(De),_(Re,e),_(et,e),_(st,e),_(lt),_(it),_(dt),_(de),_(mt),_(pt),_(ce),_(ut,e),_(gt,e),_(vt,e)}}}const bo='{"title":"Processors","local":"processors","sections":[{"title":"Multi-modal processors","local":"transformers.ProcessorMixin","sections":[],"depth":2},{"title":"Deprecated processors","local":"transformers.DataProcessor","sections":[],"depth":2},{"title":"GLUE","local":"transformers.glue_convert_examples_to_features","sections":[],"depth":2},{"title":"XNLI","local":"xnli","sections":[],"depth":2},{"title":"SQuAD","local":"squad","sections":[{"title":"Processors","local":"transformers.data.processors.squad.SquadProcessor","sections":[],"depth":3},{"title":"Example usage","local":"example-usage","sections":[],"depth":3}],"depth":2}],"depth":1}';function xo(U){return lo(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Io extends io{constructor(m){super(),mo(this,m,xo,vo,no,{})}}export{Io as component};
