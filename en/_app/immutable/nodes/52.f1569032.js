import{s as uw,o as Tw,n as $}from"../chunks/scheduler.9bc65507.js";import{S as bw,i as yw,g as i,s,r as f,A as ww,h as l,f as a,c as o,j as k,u as g,x as m,k as U,y as n,a as d,v as u,d as T,t as b,w as y}from"../chunks/index.707bf1b6.js";import{T as Zd}from"../chunks/Tip.c2ecdbf4.js";import{D as v}from"../chunks/Docstring.17db21ae.js";import{C as j}from"../chunks/CodeBlock.54a9f38d.js";import{E as P}from"../chunks/ExampleCodeBlock.4f515aa9.js";import{H as J}from"../chunks/Heading.342b1fa6.js";function _w(M){let r,x="Examples:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTJDJTIwQXV0b01vZGVsRm9yVG9rZW5DbGFzc2lmaWNhdGlvbiUyQyUyMEF1dG9Ub2tlbml6ZXIlMEElMEElMjMlMjBTZW50aW1lbnQlMjBhbmFseXNpcyUyMHBpcGVsaW5lJTBBYW5hbHl6ZXIlMjAlM0QlMjBwaXBlbGluZSglMjJzZW50aW1lbnQtYW5hbHlzaXMlMjIpJTBBJTBBJTIzJTIwUXVlc3Rpb24lMjBhbnN3ZXJpbmclMjBwaXBlbGluZSUyQyUyMHNwZWNpZnlpbmclMjB0aGUlMjBjaGVja3BvaW50JTIwaWRlbnRpZmllciUwQW9yYWNsZSUyMCUzRCUyMHBpcGVsaW5lKCUwQSUyMCUyMCUyMCUyMCUyMnF1ZXN0aW9uLWFuc3dlcmluZyUyMiUyQyUyMG1vZGVsJTNEJTIyZGlzdGlsYmVydCUyRmRpc3RpbGJlcnQtYmFzZS1jYXNlZC1kaXN0aWxsZWQtc3F1YWQlMjIlMkMlMjB0b2tlbml6ZXIlM0QlMjJnb29nbGUtYmVydCUyRmJlcnQtYmFzZS1jYXNlZCUyMiUwQSklMEElMEElMjMlMjBOYW1lZCUyMGVudGl0eSUyMHJlY29nbml0aW9uJTIwcGlwZWxpbmUlMkMlMjBwYXNzaW5nJTIwaW4lMjBhJTIwc3BlY2lmaWMlMjBtb2RlbCUyMGFuZCUyMHRva2VuaXplciUwQW1vZGVsJTIwJTNEJTIwQXV0b01vZGVsRm9yVG9rZW5DbGFzc2lmaWNhdGlvbi5mcm9tX3ByZXRyYWluZWQoJTIyZGJtZHolMkZiZXJ0LWxhcmdlLWNhc2VkLWZpbmV0dW5lZC1jb25sbDAzLWVuZ2xpc2glMjIpJTBBdG9rZW5pemVyJTIwJTNEJTIwQXV0b1Rva2VuaXplci5mcm9tX3ByZXRyYWluZWQoJTIyZ29vZ2xlLWJlcnQlMkZiZXJ0LWJhc2UtY2FzZWQlMjIpJTBBcmVjb2duaXplciUyMCUzRCUyMHBpcGVsaW5lKCUyMm5lciUyMiUyQyUyMG1vZGVsJTNEbW9kZWwlMkMlMjB0b2tlbml6ZXIlM0R0b2tlbml6ZXIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline, AutoModelForTokenClassification, AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Sentiment analysis pipeline</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>analyzer = pipeline(<span class="hljs-string">&quot;sentiment-analysis&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Question answering pipeline, specifying the checkpoint identifier</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>oracle = pipeline(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;question-answering&quot;</span>, model=<span class="hljs-string">&quot;distilbert/distilbert-base-cased-distilled-squad&quot;</span>, tokenizer=<span class="hljs-string">&quot;google-bert/bert-base-cased&quot;</span>
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Named entity recognition pipeline, passing in a specific model and tokenizer</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-large-cased-finetuned-conll03-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>recognizer = pipeline(<span class="hljs-string">&quot;ner&quot;</span>, model=model, tokenizer=tokenizer)`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-kvfsh7"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function xw(M){let r,x=`However, this is not automatically a win for performance. It can be either a 10x speedup or 5x slowdown depending
on hardware, data and the actual model being used.`,h,c,w="Example where it’s mostly a speedup:";return{c(){r=i("p"),r.textContent=x,h=s(),c=i("p"),c.textContent=w},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-gpletg"&&(r.textContent=x),h=o(t),c=l(t,"P",{"data-svelte-h":!0}),m(c)!=="svelte-1aumu59"&&(c.textContent=w)},m(t,_){d(t,r,_),d(t,h,_),d(t,c,_)},p:$,d(t){t&&(a(r),a(h),a(c))}}}function Mw(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBY2xhc3NpZmllciUyMCUzRCUyMHBpcGVsaW5lKG1vZGVsJTNEJTIyc3VwZXJiJTJGd2F2MnZlYzItYmFzZS1zdXBlcmIta3MlMjIpJTBBY2xhc3NpZmllciglMjJodHRwcyUzQSUyRiUyRmh1Z2dpbmdmYWNlLmNvJTJGZGF0YXNldHMlMkZOYXJzaWwlMkZhc3JfZHVtbXklMkZyZXNvbHZlJTJGbWFpbiUyRjEuZmxhYyUyMik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(model=<span class="hljs-string">&quot;superb/wav2vec2-base-superb-ks&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;https://huggingface.co/datasets/Narsil/asr_dummy/resolve/main/1.flac&quot;</span>)
[{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.997</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;_unknown_&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.002</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;left&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.0</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;yes&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.0</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;down&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.0</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;stop&#x27;</span>}]`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function kw(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBdHJhbnNjcmliZXIlMjAlM0QlMjBwaXBlbGluZShtb2RlbCUzRCUyMm9wZW5haSUyRndoaXNwZXItYmFzZSUyMiklMEF0cmFuc2NyaWJlciglMjJodHRwcyUzQSUyRiUyRmh1Z2dpbmdmYWNlLmNvJTJGZGF0YXNldHMlMkZOYXJzaWwlMkZhc3JfZHVtbXklMkZyZXNvbHZlJTJGbWFpbiUyRjEuZmxhYyUyMik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>transcriber = pipeline(model=<span class="hljs-string">&quot;openai/whisper-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>transcriber(<span class="hljs-string">&quot;https://huggingface.co/datasets/Narsil/asr_dummy/resolve/main/1.flac&quot;</span>)
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27; He hoped there would be stew for dinner, turnips and carrots and bruised potatoes and fat mutton pieces to be ladled out in thick, peppered flour-fatten sauce.&#x27;</span>}`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Uw(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBcGlwZSUyMCUzRCUyMHBpcGVsaW5lKG1vZGVsJTNEJTIyc3VubyUyRmJhcmstc21hbGwlMjIpJTBBb3V0cHV0JTIwJTNEJTIwcGlwZSglMjJIZXklMjBpdCdzJTIwSHVnZ2luZ0ZhY2UlMjBvbiUyMHRoZSUyMHBob25lISUyMiklMEElMEFhdWRpbyUyMCUzRCUyMG91dHB1dCU1QiUyMmF1ZGlvJTIyJTVEJTBBc2FtcGxpbmdfcmF0ZSUyMCUzRCUyMG91dHB1dCU1QiUyMnNhbXBsaW5nX3JhdGUlMjIlNUQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>pipe = pipeline(model=<span class="hljs-string">&quot;suno/bark-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>output = pipe(<span class="hljs-string">&quot;Hey it&#x27;s HuggingFace on the phone!&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>audio = output[<span class="hljs-string">&quot;audio&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sampling_rate = output[<span class="hljs-string">&quot;sampling_rate&quot;</span>]`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function vw(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBbXVzaWNfZ2VuZXJhdG9yJTIwJTNEJTIwcGlwZWxpbmUodGFzayUzRCUyMnRleHQtdG8tYXVkaW8lMjIlMkMlMjBtb2RlbCUzRCUyMmZhY2Vib29rJTJGbXVzaWNnZW4tc21hbGwlMjIlMkMlMjBmcmFtZXdvcmslM0QlMjJwdCUyMiklMEElMEElMjMlMjBkaXZlcnNpZnklMjB0aGUlMjBtdXNpYyUyMGdlbmVyYXRpb24lMjBieSUyMGFkZGluZyUyMHJhbmRvbW5lc3MlMjB3aXRoJTIwYSUyMGhpZ2glMjB0ZW1wZXJhdHVyZSUyMGFuZCUyMHNldCUyMGElMjBtYXhpbXVtJTIwbXVzaWMlMjBsZW5ndGglMEFnZW5lcmF0ZV9rd2FyZ3MlMjAlM0QlMjAlN0IlMEElMjAlMjAlMjAlMjAlMjJkb19zYW1wbGUlMjIlM0ElMjBUcnVlJTJDJTBBJTIwJTIwJTIwJTIwJTIydGVtcGVyYXR1cmUlMjIlM0ElMjAwLjclMkMlMEElMjAlMjAlMjAlMjAlMjJtYXhfbmV3X3Rva2VucyUyMiUzQSUyMDM1JTJDJTBBJTdEJTBBJTBBb3V0cHV0cyUyMCUzRCUyMG11c2ljX2dlbmVyYXRvciglMjJUZWNobm8lMjBtdXNpYyUyMHdpdGglMjBoaWdoJTIwbWVsb2RpYyUyMHJpZmZzJTIyJTJDJTIwZ2VuZXJhdGVfa3dhcmdzJTNEZ2VuZXJhdGVfa3dhcmdzKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>music_generator = pipeline(task=<span class="hljs-string">&quot;text-to-audio&quot;</span>, model=<span class="hljs-string">&quot;facebook/musicgen-small&quot;</span>, framework=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># diversify the music generation by adding randomness with a high temperature and set a maximum music length</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>generate_kwargs = {
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;do_sample&quot;</span>: <span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;temperature&quot;</span>: <span class="hljs-number">0.7</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;max_new_tokens&quot;</span>: <span class="hljs-number">35</span>,
<span class="hljs-meta">... </span>}

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = music_generator(<span class="hljs-string">&quot;Techno music with high melodic riffs&quot;</span>, generate_kwargs=generate_kwargs)`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function jw(M){let r,x=`You can specify parameters passed to the model by using <code>TextToAudioPipeline.__call__.forward_params</code> or
<code>TextToAudioPipeline.__call__.generate_kwargs</code>.`,h,c,w;return c=new P({props:{anchor:"transformers.TextToAudioPipeline.example-2",$$slots:{default:[vw]},$$scope:{ctx:M}}}),{c(){r=i("p"),r.innerHTML=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-1g6q8re"&&(r.innerHTML=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p(t,_){const sc={};_&2&&(sc.$$scope={dirty:_,ctx:t}),c.$set(sc)},i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Jw(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBJTBBZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJhc2hyYXElMkZlc2M1MCUyMiklMEFhdWRpbyUyMCUzRCUyMG5leHQoaXRlcihkYXRhc2V0JTVCJTIydHJhaW4lMjIlNUQlNUIlMjJhdWRpbyUyMiU1RCkpJTVCJTIyYXJyYXklMjIlNUQlMEFjbGFzc2lmaWVyJTIwJTNEJTIwcGlwZWxpbmUodGFzayUzRCUyMnplcm8tc2hvdC1hdWRpby1jbGFzc2lmaWNhdGlvbiUyMiUyQyUyMG1vZGVsJTNEJTIybGFpb24lMkZjbGFwLWh0c2F0LXVuZnVzZWQlMjIpJTBBY2xhc3NpZmllcihhdWRpbyUyQyUyMGNhbmRpZGF0ZV9sYWJlbHMlM0QlNUIlMjJTb3VuZCUyMG9mJTIwYSUyMGRvZyUyMiUyQyUyMCUyMlNvdW5kJTIwb2YlMjB2YWNjdW0lMjBjbGVhbmVyJTIyJTVEKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;ashraq/esc50&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>audio = <span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;audio&quot;</span>]))[<span class="hljs-string">&quot;array&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(task=<span class="hljs-string">&quot;zero-shot-audio-classification&quot;</span>, model=<span class="hljs-string">&quot;laion/clap-htsat-unfused&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>classifier(audio, candidate_labels=[<span class="hljs-string">&quot;Sound of a dog&quot;</span>, <span class="hljs-string">&quot;Sound of vaccum cleaner&quot;</span>])
[{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9996</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;Sound of a dog&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.0004</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;Sound of vaccum cleaner&#x27;</span>}]`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function $w(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBZGVwdGhfZXN0aW1hdG9yJTIwJTNEJTIwcGlwZWxpbmUodGFzayUzRCUyMmRlcHRoLWVzdGltYXRpb24lMjIlMkMlMjBtb2RlbCUzRCUyMkxpaGVZb3VuZyUyRmRlcHRoLWFueXRoaW5nLWJhc2UtaGYlMjIpJTBBb3V0cHV0JTIwJTNEJTIwZGVwdGhfZXN0aW1hdG9yKCUyMmh0dHAlM0ElMkYlMkZpbWFnZXMuY29jb2RhdGFzZXQub3JnJTJGdmFsMjAxNyUyRjAwMDAwMDAzOTc2OS5qcGclMjIpJTBBJTIzJTIwVGhpcyUyMGlzJTIwYSUyMHRlbnNvciUyMHdpdGglMjB0aGUlMjB2YWx1ZXMlMjBiZWluZyUyMHRoZSUyMGRlcHRoJTIwZXhwcmVzc2VkJTIwaW4lMjBtZXRlcnMlMjBmb3IlMjBlYWNoJTIwcGl4ZWwlMEFvdXRwdXQlNUIlMjJwcmVkaWN0ZWRfZGVwdGglMjIlNUQuc2hhcGU=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>depth_estimator = pipeline(task=<span class="hljs-string">&quot;depth-estimation&quot;</span>, model=<span class="hljs-string">&quot;LiheYoung/depth-anything-base-hf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>output = depth_estimator(<span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># This is a tensor with the values being the depth expressed in meters for each pixel</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>output[<span class="hljs-string">&quot;predicted_depth&quot;</span>].shape
torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">384</span>, <span class="hljs-number">384</span>])`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Pw(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBY2xhc3NpZmllciUyMCUzRCUyMHBpcGVsaW5lKG1vZGVsJTNEJTIybWljcm9zb2Z0JTJGYmVpdC1iYXNlLXBhdGNoMTYtMjI0LXB0MjJrLWZ0MjJrJTIyKSUwQWNsYXNzaWZpZXIoJTIyaHR0cHMlM0ElMkYlMkZodWdnaW5nZmFjZS5jbyUyRmRhdGFzZXRzJTJGTmFyc2lsJTJGaW1hZ2VfZHVtbXklMkZyYXclMkZtYWluJTJGcGFycm90cy5wbmclMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(model=<span class="hljs-string">&quot;microsoft/beit-base-patch16-224-pt22k-ft22k&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;https://huggingface.co/datasets/Narsil/image_dummy/raw/main/parrots.png&quot;</span>)
[{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.442</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;macaw&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.088</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;popinjay&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.075</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;parrot&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.073</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;parodist, lampooner&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.046</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;poll, poll_parrot&#x27;</span>}]`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Cw(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBc2VnbWVudGVyJTIwJTNEJTIwcGlwZWxpbmUobW9kZWwlM0QlMjJmYWNlYm9vayUyRmRldHItcmVzbmV0LTUwLXBhbm9wdGljJTIyKSUwQXNlZ21lbnRzJTIwJTNEJTIwc2VnbWVudGVyKCUyMmh0dHBzJTNBJTJGJTJGaHVnZ2luZ2ZhY2UuY28lMkZkYXRhc2V0cyUyRk5hcnNpbCUyRmltYWdlX2R1bW15JTJGcmF3JTJGbWFpbiUyRnBhcnJvdHMucG5nJTIyKSUwQWxlbihzZWdtZW50cyklMEElMEFzZWdtZW50cyU1QjAlNUQlNUIlMjJsYWJlbCUyMiU1RCUwQSUwQXNlZ21lbnRzJTVCMSU1RCU1QiUyMmxhYmVsJTIyJTVEJTBBJTBBdHlwZShzZWdtZW50cyU1QjAlNUQlNUIlMjJtYXNrJTIyJTVEKSUyMCUyMCUyMyUyMFRoaXMlMjBpcyUyMGElMjBibGFjayUyMGFuZCUyMHdoaXRlJTIwbWFzayUyMHNob3dpbmclMjB3aGVyZSUyMGlzJTIwdGhlJTIwYmlyZCUyMG9uJTIwdGhlJTIwb3JpZ2luYWwlMjBpbWFnZS4lMEElMEFzZWdtZW50cyU1QjAlNUQlNUIlMjJtYXNrJTIyJTVELnNpemU=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>segmenter = pipeline(model=<span class="hljs-string">&quot;facebook/detr-resnet-50-panoptic&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>segments = segmenter(<span class="hljs-string">&quot;https://huggingface.co/datasets/Narsil/image_dummy/raw/main/parrots.png&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(segments)
<span class="hljs-number">2</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>segments[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;label&quot;</span>]
<span class="hljs-string">&#x27;bird&#x27;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>segments[<span class="hljs-number">1</span>][<span class="hljs-string">&quot;label&quot;</span>]
<span class="hljs-string">&#x27;bird&#x27;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(segments[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;mask&quot;</span>])  <span class="hljs-comment"># This is a black and white mask showing where is the bird on the original image.</span>
&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;PIL.Image.Image&#x27;</span>&gt;

<span class="hljs-meta">&gt;&gt;&gt; </span>segments[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;mask&quot;</span>].size
(<span class="hljs-number">768</span>, <span class="hljs-number">512</span>)`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Iw(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMFBJTCUyMGltcG9ydCUyMEltYWdlJTBBaW1wb3J0JTIwcmVxdWVzdHMlMEElMEFmcm9tJTIwdHJhbnNmb3JtZXJzJTIwaW1wb3J0JTIwcGlwZWxpbmUlMEElMEF1cHNjYWxlciUyMCUzRCUyMHBpcGVsaW5lKCUyMmltYWdlLXRvLWltYWdlJTIyJTJDJTIwbW9kZWwlM0QlMjJjYWlkYXMlMkZzd2luMlNSLWNsYXNzaWNhbC1zci14Mi02NCUyMiklMEFpbWclMjAlM0QlMjBJbWFnZS5vcGVuKHJlcXVlc3RzLmdldCglMjJodHRwJTNBJTJGJTJGaW1hZ2VzLmNvY29kYXRhc2V0Lm9yZyUyRnZhbDIwMTclMkYwMDAwMDAwMzk3NjkuanBnJTIyJTJDJTIwc3RyZWFtJTNEVHJ1ZSkucmF3KSUwQWltZyUyMCUzRCUyMGltZy5yZXNpemUoKDY0JTJDJTIwNjQpKSUwQXVwc2NhbGVkX2ltZyUyMCUzRCUyMHVwc2NhbGVyKGltZyklMEFpbWcuc2l6ZSUwQSUwQXVwc2NhbGVkX2ltZy5zaXpl",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>upscaler = pipeline(<span class="hljs-string">&quot;image-to-image&quot;</span>, model=<span class="hljs-string">&quot;caidas/swin2SR-classical-sr-x2-64&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>img = Image.<span class="hljs-built_in">open</span>(requests.get(<span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>, stream=<span class="hljs-literal">True</span>).raw)
<span class="hljs-meta">&gt;&gt;&gt; </span>img = img.resize((<span class="hljs-number">64</span>, <span class="hljs-number">64</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>upscaled_img = upscaler(img)
<span class="hljs-meta">&gt;&gt;&gt; </span>img.size
(<span class="hljs-number">64</span>, <span class="hljs-number">64</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>upscaled_img.size
(<span class="hljs-number">144</span>, <span class="hljs-number">144</span>)`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function qw(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBZGV0ZWN0b3IlMjAlM0QlMjBwaXBlbGluZShtb2RlbCUzRCUyMmZhY2Vib29rJTJGZGV0ci1yZXNuZXQtNTAlMjIpJTBBZGV0ZWN0b3IoJTIyaHR0cHMlM0ElMkYlMkZodWdnaW5nZmFjZS5jbyUyRmRhdGFzZXRzJTJGTmFyc2lsJTJGaW1hZ2VfZHVtbXklMkZyYXclMkZtYWluJTJGcGFycm90cy5wbmclMjIpJTBBJTBBJTIzJTIweCUyQyUyMHklMjAlMjBhcmUlMjBleHByZXNzZWQlMjByZWxhdGl2ZSUyMHRvJTIwdGhlJTIwdG9wJTIwbGVmdCUyMGhhbmQlMjBjb3JuZXIu",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>detector = pipeline(model=<span class="hljs-string">&quot;facebook/detr-resnet-50&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>detector(<span class="hljs-string">&quot;https://huggingface.co/datasets/Narsil/image_dummy/raw/main/parrots.png&quot;</span>)
[{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.997</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;bird&#x27;</span>, <span class="hljs-string">&#x27;box&#x27;</span>: {<span class="hljs-string">&#x27;xmin&#x27;</span>: <span class="hljs-number">69</span>, <span class="hljs-string">&#x27;ymin&#x27;</span>: <span class="hljs-number">171</span>, <span class="hljs-string">&#x27;xmax&#x27;</span>: <span class="hljs-number">396</span>, <span class="hljs-string">&#x27;ymax&#x27;</span>: <span class="hljs-number">507</span>}}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.999</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;bird&#x27;</span>, <span class="hljs-string">&#x27;box&#x27;</span>: {<span class="hljs-string">&#x27;xmin&#x27;</span>: <span class="hljs-number">398</span>, <span class="hljs-string">&#x27;ymin&#x27;</span>: <span class="hljs-number">105</span>, <span class="hljs-string">&#x27;xmax&#x27;</span>: <span class="hljs-number">767</span>, <span class="hljs-string">&#x27;ymax&#x27;</span>: <span class="hljs-number">507</span>}}]

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># x, y  are expressed relative to the top left hand corner.</span>`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Gw(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBY2xhc3NpZmllciUyMCUzRCUyMHBpcGVsaW5lKG1vZGVsJTNEJTIyZ29vZ2xlJTJGc2lnbGlwLXNvNDAwbS1wYXRjaDE0LTM4NCUyMiklMEFjbGFzc2lmaWVyKCUwQSUyMCUyMCUyMCUyMCUyMmh0dHBzJTNBJTJGJTJGaHVnZ2luZ2ZhY2UuY28lMkZkYXRhc2V0cyUyRk5hcnNpbCUyRmltYWdlX2R1bW15JTJGcmF3JTJGbWFpbiUyRnBhcnJvdHMucG5nJTIyJTJDJTBBJTIwJTIwJTIwJTIwY2FuZGlkYXRlX2xhYmVscyUzRCU1QiUyMmFuaW1hbHMlMjIlMkMlMjAlMjJodW1hbnMlMjIlMkMlMjAlMjJsYW5kc2NhcGUlMjIlNUQlMkMlMEEpJTBBJTBBY2xhc3NpZmllciglMEElMjAlMjAlMjAlMjAlMjJodHRwcyUzQSUyRiUyRmh1Z2dpbmdmYWNlLmNvJTJGZGF0YXNldHMlMkZOYXJzaWwlMkZpbWFnZV9kdW1teSUyRnJhdyUyRm1haW4lMkZwYXJyb3RzLnBuZyUyMiUyQyUwQSUyMCUyMCUyMCUyMGNhbmRpZGF0ZV9sYWJlbHMlM0QlNUIlMjJibGFjayUyMGFuZCUyMHdoaXRlJTIyJTJDJTIwJTIycGhvdG9yZWFsaXN0JTIyJTJDJTIwJTIycGFpbnRpbmclMjIlNUQlMkMlMEEp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(model=<span class="hljs-string">&quot;google/siglip-so400m-patch14-384&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>classifier(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;https://huggingface.co/datasets/Narsil/image_dummy/raw/main/parrots.png&quot;</span>,
<span class="hljs-meta">... </span>    candidate_labels=[<span class="hljs-string">&quot;animals&quot;</span>, <span class="hljs-string">&quot;humans&quot;</span>, <span class="hljs-string">&quot;landscape&quot;</span>],
<span class="hljs-meta">... </span>)
[{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.965</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;animals&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.03</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;humans&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.005</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;landscape&#x27;</span>}]

<span class="hljs-meta">&gt;&gt;&gt; </span>classifier(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;https://huggingface.co/datasets/Narsil/image_dummy/raw/main/parrots.png&quot;</span>,
<span class="hljs-meta">... </span>    candidate_labels=[<span class="hljs-string">&quot;black and white&quot;</span>, <span class="hljs-string">&quot;photorealist&quot;</span>, <span class="hljs-string">&quot;painting&quot;</span>],
<span class="hljs-meta">... </span>)
[{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.996</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;black and white&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.003</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;photorealist&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.0</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;painting&#x27;</span>}]`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Zw(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBZGV0ZWN0b3IlMjAlM0QlMjBwaXBlbGluZShtb2RlbCUzRCUyMmdvb2dsZSUyRm93bHZpdC1iYXNlLXBhdGNoMzIlMjIlMkMlMjB0YXNrJTNEJTIyemVyby1zaG90LW9iamVjdC1kZXRlY3Rpb24lMjIpJTBBZGV0ZWN0b3IoJTBBJTIwJTIwJTIwJTIwJTIyaHR0cCUzQSUyRiUyRmltYWdlcy5jb2NvZGF0YXNldC5vcmclMkZ2YWwyMDE3JTJGMDAwMDAwMDM5NzY5LmpwZyUyMiUyQyUwQSUyMCUyMCUyMCUyMGNhbmRpZGF0ZV9sYWJlbHMlM0QlNUIlMjJjYXQlMjIlMkMlMjAlMjJjb3VjaCUyMiU1RCUyQyUwQSklMEElMEFkZXRlY3RvciglMEElMjAlMjAlMjAlMjAlMjJodHRwcyUzQSUyRiUyRmh1Z2dpbmdmYWNlLmNvJTJGZGF0YXNldHMlMkZOYXJzaWwlMkZpbWFnZV9kdW1teSUyRnJhdyUyRm1haW4lMkZwYXJyb3RzLnBuZyUyMiUyQyUwQSUyMCUyMCUyMCUyMGNhbmRpZGF0ZV9sYWJlbHMlM0QlNUIlMjJoZWFkJTIyJTJDJTIwJTIyYmlyZCUyMiU1RCUyQyUwQSk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>detector = pipeline(model=<span class="hljs-string">&quot;google/owlvit-base-patch32&quot;</span>, task=<span class="hljs-string">&quot;zero-shot-object-detection&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>detector(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>,
<span class="hljs-meta">... </span>    candidate_labels=[<span class="hljs-string">&quot;cat&quot;</span>, <span class="hljs-string">&quot;couch&quot;</span>],
<span class="hljs-meta">... </span>)
[{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.287</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;box&#x27;</span>: {<span class="hljs-string">&#x27;xmin&#x27;</span>: <span class="hljs-number">324</span>, <span class="hljs-string">&#x27;ymin&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;xmax&#x27;</span>: <span class="hljs-number">640</span>, <span class="hljs-string">&#x27;ymax&#x27;</span>: <span class="hljs-number">373</span>}}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.254</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;box&#x27;</span>: {<span class="hljs-string">&#x27;xmin&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ymin&#x27;</span>: <span class="hljs-number">55</span>, <span class="hljs-string">&#x27;xmax&#x27;</span>: <span class="hljs-number">315</span>, <span class="hljs-string">&#x27;ymax&#x27;</span>: <span class="hljs-number">472</span>}}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.121</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;couch&#x27;</span>, <span class="hljs-string">&#x27;box&#x27;</span>: {<span class="hljs-string">&#x27;xmin&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;ymin&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;xmax&#x27;</span>: <span class="hljs-number">642</span>, <span class="hljs-string">&#x27;ymax&#x27;</span>: <span class="hljs-number">476</span>}}]

<span class="hljs-meta">&gt;&gt;&gt; </span>detector(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;https://huggingface.co/datasets/Narsil/image_dummy/raw/main/parrots.png&quot;</span>,
<span class="hljs-meta">... </span>    candidate_labels=[<span class="hljs-string">&quot;head&quot;</span>, <span class="hljs-string">&quot;bird&quot;</span>],
<span class="hljs-meta">... </span>)
[{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.119</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;bird&#x27;</span>, <span class="hljs-string">&#x27;box&#x27;</span>: {<span class="hljs-string">&#x27;xmin&#x27;</span>: <span class="hljs-number">71</span>, <span class="hljs-string">&#x27;ymin&#x27;</span>: <span class="hljs-number">170</span>, <span class="hljs-string">&#x27;xmax&#x27;</span>: <span class="hljs-number">410</span>, <span class="hljs-string">&#x27;ymax&#x27;</span>: <span class="hljs-number">508</span>}}]`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function zw(M){let r,x="Usage:",h,c,w;return c=new j({props:{code:"Y29udmVyc2F0aW9uJTIwJTNEJTIwQ29udmVyc2F0aW9uKCUyMkdvaW5nJTIwdG8lMjB0aGUlMjBtb3ZpZXMlMjB0b25pZ2h0JTIwLSUyMGFueSUyMHN1Z2dlc3Rpb25zJTNGJTIyKSUwQWNvbnZlcnNhdGlvbi5hZGRfbWVzc2FnZSglN0IlMjJyb2xlJTIyJTNBJTIwJTIyYXNzaXN0YW50JTIyJTJDJTIwJTIyY29udGVudCUyMiUzQSUyMCUyMlRoZSUyMEJpZyUyMGxlYm93c2tpLiUyMiU3RCklMEFjb252ZXJzYXRpb24uYWRkX21lc3NhZ2UoJTdCJTIycm9sZSUyMiUzQSUyMCUyMnVzZXIlMjIlMkMlMjAlMjJjb250ZW50JTIyJTNBJTIwJTIySXMlMjBpdCUyMGdvb2QlM0YlMjIlN0Qp",highlighted:`conversation = Conversation(<span class="hljs-string">&quot;Going to the movies tonight - any suggestions?&quot;</span>)
conversation.add_message({<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;assistant&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;The Big lebowski.&quot;</span>})
conversation.add_message({<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;Is it good?&quot;</span>})`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-5wyjqd"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Fw(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTJDJTIwQ29udmVyc2F0aW9uJTBBJTBBY2hhdGJvdCUyMCUzRCUyMHBpcGVsaW5lKG1vZGVsJTNEJTIyZmFjZWJvb2slMkZibGVuZGVyYm90LTQwME0tZGlzdGlsbCUyMiklMEElMjMlMjBDb252ZXJzYXRpb24lMjBvYmplY3RzJTIwaW5pdGlhbGl6ZWQlMjB3aXRoJTIwYSUyMHN0cmluZyUyMHdpbGwlMjB0cmVhdCUyMGl0JTIwYXMlMjBhJTIwdXNlciUyMG1lc3NhZ2UlMEFjb252ZXJzYXRpb24lMjAlM0QlMjBDb252ZXJzYXRpb24oJTIySSdtJTIwbG9va2luZyUyMGZvciUyMGElMjBtb3ZpZSUyMC0lMjB3aGF0J3MlMjB5b3VyJTIwZmF2b3VyaXRlJTIwb25lJTNGJTIyKSUwQWNvbnZlcnNhdGlvbiUyMCUzRCUyMGNoYXRib3QoY29udmVyc2F0aW9uKSUwQWNvbnZlcnNhdGlvbi5tZXNzYWdlcyU1Qi0xJTVEJTVCJTIyY29udGVudCUyMiU1RCUwQSUwQWNvbnZlcnNhdGlvbi5hZGRfbWVzc2FnZSglN0IlMjJyb2xlJTIyJTNBJTIwJTIydXNlciUyMiUyQyUyMCUyMmNvbnRlbnQlMjIlM0ElMjAlMjJUaGF0J3MlMjBpbnRlcmVzdGluZyUyQyUyMHdoeSUyMGRvJTIweW91JTIwbGlrZSUyMGFjdGlvbiUyMG1vdmllcyUzRiUyMiU3RCklMEFjb252ZXJzYXRpb24lMjAlM0QlMjBjaGF0Ym90KGNvbnZlcnNhdGlvbiklMEFjb252ZXJzYXRpb24ubWVzc2FnZXMlNUItMSU1RCU1QiUyMmNvbnRlbnQlMjIlNUQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline, Conversation
<span class="hljs-comment"># Any model with a chat template can be used in a ConversationalPipeline.</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>chatbot = pipeline(model=<span class="hljs-string">&quot;facebook/blenderbot-400M-distill&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Conversation objects initialized with a string will treat it as a user message</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>conversation = Conversation(<span class="hljs-string">&quot;I&#x27;m looking for a movie - what&#x27;s your favourite one?&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>conversation = chatbot(conversation)
<span class="hljs-meta">&gt;&gt;&gt; </span>conversation.messages[-<span class="hljs-number">1</span>][<span class="hljs-string">&quot;content&quot;</span>]
<span class="hljs-string">&quot;I don&#x27;t really have a favorite movie, but I do like action movies. What about you?&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>conversation.add_message({<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;That&#x27;s interesting, why do you like action movies?&quot;</span>})
<span class="hljs-meta">&gt;&gt;&gt; </span>conversation = chatbot(conversation)
<span class="hljs-meta">&gt;&gt;&gt; </span>conversation.messages[-<span class="hljs-number">1</span>][<span class="hljs-string">&quot;content&quot;</span>]
<span class="hljs-string">&quot; I think it&#x27;s just because they&#x27;re so fast-paced and action-fantastic.&quot;</span>`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Rw(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBZmlsbF9tYXNrZXIlMjAlM0QlMjBwaXBlbGluZShtb2RlbCUzRCUyMmdvb2dsZS1iZXJ0JTJGYmVydC1iYXNlLXVuY2FzZWQlMjIpJTBBZmlsbF9tYXNrZXIoJTIyVGhpcyUyMGlzJTIwYSUyMHNpbXBsZSUyMCU1Qk1BU0slNUQuJTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>fill_masker = pipeline(model=<span class="hljs-string">&quot;google-bert/bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>fill_masker(<span class="hljs-string">&quot;This is a simple [MASK].&quot;</span>)
[{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.042</span>, <span class="hljs-string">&#x27;token&#x27;</span>: <span class="hljs-number">3291</span>, <span class="hljs-string">&#x27;token_str&#x27;</span>: <span class="hljs-string">&#x27;problem&#x27;</span>, <span class="hljs-string">&#x27;sequence&#x27;</span>: <span class="hljs-string">&#x27;this is a simple problem.&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.031</span>, <span class="hljs-string">&#x27;token&#x27;</span>: <span class="hljs-number">3160</span>, <span class="hljs-string">&#x27;token_str&#x27;</span>: <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;sequence&#x27;</span>: <span class="hljs-string">&#x27;this is a simple question.&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.03</span>, <span class="hljs-string">&#x27;token&#x27;</span>: <span class="hljs-number">8522</span>, <span class="hljs-string">&#x27;token_str&#x27;</span>: <span class="hljs-string">&#x27;equation&#x27;</span>, <span class="hljs-string">&#x27;sequence&#x27;</span>: <span class="hljs-string">&#x27;this is a simple equation.&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.027</span>, <span class="hljs-string">&#x27;token&#x27;</span>: <span class="hljs-number">2028</span>, <span class="hljs-string">&#x27;token_str&#x27;</span>: <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;sequence&#x27;</span>: <span class="hljs-string">&#x27;this is a simple one.&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.024</span>, <span class="hljs-string">&#x27;token&#x27;</span>: <span class="hljs-number">3627</span>, <span class="hljs-string">&#x27;token_str&#x27;</span>: <span class="hljs-string">&#x27;rule&#x27;</span>, <span class="hljs-string">&#x27;sequence&#x27;</span>: <span class="hljs-string">&#x27;this is a simple rule.&#x27;</span>}]`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Dw(M){let r,x=`This pipeline only works for inputs with exactly one token masked. Experimental: We added support for multiple
masks. The returned values are raw model output, and correspond to disjoint probabilities where one might expect
joint probabilities (See <a href="https://github.com/huggingface/transformers/pull/10222" rel="nofollow">discussion</a>).`;return{c(){r=i("p"),r.innerHTML=x},l(h){r=l(h,"P",{"data-svelte-h":!0}),m(r)!=="svelte-126iymh"&&(r.innerHTML=x)},m(h,c){d(h,r,c)},p:$,d(h){h&&a(r)}}}function Bw(M){let r,x="This pipeline now supports tokenizer_kwargs. For example try:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBZmlsbF9tYXNrZXIlMjAlM0QlMjBwaXBlbGluZShtb2RlbCUzRCUyMmdvb2dsZS1iZXJ0JTJGYmVydC1iYXNlLXVuY2FzZWQlMjIpJTBBdG9rZW5pemVyX2t3YXJncyUyMCUzRCUyMCU3QiUyMnRydW5jYXRpb24lMjIlM0ElMjBUcnVlJTdEJTBBZmlsbF9tYXNrZXIoJTBBJTIwJTIwJTIwJTIwJTIyVGhpcyUyMGlzJTIwYSUyMHNpbXBsZSUyMCU1Qk1BU0slNUQuJTIwJTIyJTIwJTJCJTIwJTIyLi4ud2l0aCUyMGElMjBsYXJnZSUyMGFtb3VudCUyMG9mJTIwcmVwZWF0ZWQlMjB0ZXh0JTIwYXBwZW5kZWQuJTIwJTIyJTIwKiUyMDEwMCUyQyUwQSUyMCUyMCUyMCUyMHRva2VuaXplcl9rd2FyZ3MlM0R0b2tlbml6ZXJfa3dhcmdzJTJDJTBBKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>fill_masker = pipeline(model=<span class="hljs-string">&quot;google-bert/bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer_kwargs = {<span class="hljs-string">&quot;truncation&quot;</span>: <span class="hljs-literal">True</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>fill_masker(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;This is a simple [MASK]. &quot;</span> + <span class="hljs-string">&quot;...with a large amount of repeated text appended. &quot;</span> * <span class="hljs-number">100</span>,
<span class="hljs-meta">... </span>    tokenizer_kwargs=tokenizer_kwargs,
<span class="hljs-meta">... </span>)`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-1pudxyz"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Nw(M){let r,x;return r=new P({props:{anchor:"transformers.FillMaskPipeline.example-2",$$slots:{default:[Bw]},$$scope:{ctx:M}}}),{c(){f(r.$$.fragment)},l(h){g(r.$$.fragment,h)},m(h,c){u(r,h,c),x=!0},p(h,c){const w={};c&2&&(w.$$scope={dirty:c,ctx:h}),r.$set(w)},i(h){x||(T(r.$$.fragment,h),x=!0)},o(h){b(r.$$.fragment,h),x=!1},d(h){y(r,h)}}}function Aw(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBb3JhY2xlJTIwJTNEJTIwcGlwZWxpbmUobW9kZWwlM0QlMjJkZWVwc2V0JTJGcm9iZXJ0YS1iYXNlLXNxdWFkMiUyMiklMEFvcmFjbGUocXVlc3Rpb24lM0QlMjJXaGVyZSUyMGRvJTIwSSUyMGxpdmUlM0YlMjIlMkMlMjBjb250ZXh0JTNEJTIyTXklMjBuYW1lJTIwaXMlMjBXb2xmZ2FuZyUyMGFuZCUyMEklMjBsaXZlJTIwaW4lMjBCZXJsaW4lMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>oracle = pipeline(model=<span class="hljs-string">&quot;deepset/roberta-base-squad2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>oracle(question=<span class="hljs-string">&quot;Where do I live?&quot;</span>, context=<span class="hljs-string">&quot;My name is Wolfgang and I live in Berlin&quot;</span>)
{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9191</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">34</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;answer&#x27;</span>: <span class="hljs-string">&#x27;Berlin&#x27;</span>}`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Vw(M){let r,x="Usage:",h,c,w;return c=new j({props:{code:"JTIzJTIwdXNlJTIwYmFydCUyMGluJTIwcHl0b3JjaCUwQXN1bW1hcml6ZXIlMjAlM0QlMjBwaXBlbGluZSglMjJzdW1tYXJpemF0aW9uJTIyKSUwQXN1bW1hcml6ZXIoJTIyQW4lMjBhcHBsZSUyMGElMjBkYXklMkMlMjBrZWVwcyUyMHRoZSUyMGRvY3RvciUyMGF3YXklMjIlMkMlMjBtaW5fbGVuZ3RoJTNENSUyQyUyMG1heF9sZW5ndGglM0QyMCklMEElMEElMjMlMjB1c2UlMjB0NSUyMGluJTIwdGYlMEFzdW1tYXJpemVyJTIwJTNEJTIwcGlwZWxpbmUoJTIyc3VtbWFyaXphdGlvbiUyMiUyQyUyMG1vZGVsJTNEJTIyZ29vZ2xlLXQ1JTJGdDUtYmFzZSUyMiUyQyUyMHRva2VuaXplciUzRCUyMmdvb2dsZS10NSUyRnQ1LWJhc2UlMjIlMkMlMjBmcmFtZXdvcmslM0QlMjJ0ZiUyMiklMEFzdW1tYXJpemVyKCUyMkFuJTIwYXBwbGUlMjBhJTIwZGF5JTJDJTIwa2VlcHMlMjB0aGUlMjBkb2N0b3IlMjBhd2F5JTIyJTJDJTIwbWluX2xlbmd0aCUzRDUlMkMlMjBtYXhfbGVuZ3RoJTNEMjAp",highlighted:`<span class="hljs-comment"># use bart in pytorch</span>
summarizer = pipeline(<span class="hljs-string">&quot;summarization&quot;</span>)
summarizer(<span class="hljs-string">&quot;An apple a day, keeps the doctor away&quot;</span>, min_length=<span class="hljs-number">5</span>, max_length=<span class="hljs-number">20</span>)

<span class="hljs-comment"># use t5 in tf</span>
summarizer = pipeline(<span class="hljs-string">&quot;summarization&quot;</span>, model=<span class="hljs-string">&quot;google-t5/t5-base&quot;</span>, tokenizer=<span class="hljs-string">&quot;google-t5/t5-base&quot;</span>, framework=<span class="hljs-string">&quot;tf&quot;</span>)
summarizer(<span class="hljs-string">&quot;An apple a day, keeps the doctor away&quot;</span>, min_length=<span class="hljs-number">5</span>, max_length=<span class="hljs-number">20</span>)`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-5wyjqd"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Sw(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBb3JhY2xlJTIwJTNEJTIwcGlwZWxpbmUobW9kZWwlM0QlMjJnb29nbGUlMkZ0YXBhcy1iYXNlLWZpbmV0dW5lZC13dHElMjIpJTBBdGFibGUlMjAlM0QlMjAlN0IlMEElMjAlMjAlMjAlMjAlMjJSZXBvc2l0b3J5JTIyJTNBJTIwJTVCJTIyVHJhbnNmb3JtZXJzJTIyJTJDJTIwJTIyRGF0YXNldHMlMjIlMkMlMjAlMjJUb2tlbml6ZXJzJTIyJTVEJTJDJTBBJTIwJTIwJTIwJTIwJTIyU3RhcnMlMjIlM0ElMjAlNUIlMjIzNjU0MiUyMiUyQyUyMCUyMjQ1MTIlMjIlMkMlMjAlMjIzOTM0JTIyJTVEJTJDJTBBJTIwJTIwJTIwJTIwJTIyQ29udHJpYnV0b3JzJTIyJTNBJTIwJTVCJTIyNjUxJTIyJTJDJTIwJTIyNzclMjIlMkMlMjAlMjIzNCUyMiU1RCUyQyUwQSUyMCUyMCUyMCUyMCUyMlByb2dyYW1taW5nJTIwbGFuZ3VhZ2UlMjIlM0ElMjAlNUIlMjJQeXRob24lMjIlMkMlMjAlMjJQeXRob24lMjIlMkMlMjAlMjJSdXN0JTJDJTIwUHl0aG9uJTIwYW5kJTIwTm9kZUpTJTIyJTVEJTJDJTBBJTdEJTBBb3JhY2xlKHF1ZXJ5JTNEJTIySG93JTIwbWFueSUyMHN0YXJzJTIwZG9lcyUyMHRoZSUyMHRyYW5zZm9ybWVycyUyMHJlcG9zaXRvcnklMjBoYXZlJTNGJTIyJTJDJTIwdGFibGUlM0R0YWJsZSk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>oracle = pipeline(model=<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>table = {
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Repository&quot;</span>: [<span class="hljs-string">&quot;Transformers&quot;</span>, <span class="hljs-string">&quot;Datasets&quot;</span>, <span class="hljs-string">&quot;Tokenizers&quot;</span>],
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Stars&quot;</span>: [<span class="hljs-string">&quot;36542&quot;</span>, <span class="hljs-string">&quot;4512&quot;</span>, <span class="hljs-string">&quot;3934&quot;</span>],
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Contributors&quot;</span>: [<span class="hljs-string">&quot;651&quot;</span>, <span class="hljs-string">&quot;77&quot;</span>, <span class="hljs-string">&quot;34&quot;</span>],
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Programming language&quot;</span>: [<span class="hljs-string">&quot;Python&quot;</span>, <span class="hljs-string">&quot;Python&quot;</span>, <span class="hljs-string">&quot;Rust, Python and NodeJS&quot;</span>],
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>oracle(query=<span class="hljs-string">&quot;How many stars does the transformers repository have?&quot;</span>, table=table)
{<span class="hljs-string">&#x27;answer&#x27;</span>: <span class="hljs-string">&#x27;AVERAGE &gt; 36542&#x27;</span>, <span class="hljs-string">&#x27;coordinates&#x27;</span>: [(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)], <span class="hljs-string">&#x27;cells&#x27;</span>: [<span class="hljs-string">&#x27;36542&#x27;</span>], <span class="hljs-string">&#x27;aggregator&#x27;</span>: <span class="hljs-string">&#x27;AVERAGE&#x27;</span>}`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Ww(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZGF0YSUyMCUzRCUyMCU3QiUwQSUyMCUyMCUyMCUyMCUyMmFjdG9ycyUyMiUzQSUyMCU1QiUyMmJyYWQlMjBwaXR0JTIyJTJDJTIwJTIybGVvbmFyZG8lMjBkaSUyMGNhcHJpbyUyMiUyQyUyMCUyMmdlb3JnZSUyMGNsb29uZXklMjIlNUQlMkMlMEElMjAlMjAlMjAlMjAlMjJhZ2UlMjIlM0ElMjAlNUIlMjI1NiUyMiUyQyUyMCUyMjQ1JTIyJTJDJTIwJTIyNTklMjIlNUQlMkMlMEElMjAlMjAlMjAlMjAlMjJudW1iZXIlMjBvZiUyMG1vdmllcyUyMiUzQSUyMCU1QiUyMjg3JTIyJTJDJTIwJTIyNTMlMjIlMkMlMjAlMjI2OSUyMiU1RCUyQyUwQSUyMCUyMCUyMCUyMCUyMmRhdGUlMjBvZiUyMGJpcnRoJTIyJTNBJTIwJTVCJTIyNyUyMGZlYnJ1YXJ5JTIwMTk2NyUyMiUyQyUyMCUyMjEwJTIwanVuZSUyMDE5OTYlMjIlMkMlMjAlMjIyOCUyMG5vdmVtYmVyJTIwMTk2NyUyMiU1RCUyQyUwQSU3RA==",highlighted:`data = {
    <span class="hljs-string">&quot;actors&quot;</span>: [<span class="hljs-string">&quot;brad pitt&quot;</span>, <span class="hljs-string">&quot;leonardo di caprio&quot;</span>, <span class="hljs-string">&quot;george clooney&quot;</span>],
    <span class="hljs-string">&quot;age&quot;</span>: [<span class="hljs-string">&quot;56&quot;</span>, <span class="hljs-string">&quot;45&quot;</span>, <span class="hljs-string">&quot;59&quot;</span>],
    <span class="hljs-string">&quot;number of movies&quot;</span>: [<span class="hljs-string">&quot;87&quot;</span>, <span class="hljs-string">&quot;53&quot;</span>, <span class="hljs-string">&quot;69&quot;</span>],
    <span class="hljs-string">&quot;date of birth&quot;</span>: [<span class="hljs-string">&quot;7 february 1967&quot;</span>, <span class="hljs-string">&quot;10 june 1996&quot;</span>, <span class="hljs-string">&quot;28 november 1967&quot;</span>],
}`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Lw(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"aW1wb3J0JTIwcGFuZGFzJTIwYXMlMjBwZCUwQSUwQXRhYmxlJTIwJTNEJTIwcGQuRGF0YUZyYW1lLmZyb21fZGljdChkYXRhKQ==",highlighted:`<span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd

table = pd.DataFrame.from_dict(data)`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Hw(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBY2xhc3NpZmllciUyMCUzRCUyMHBpcGVsaW5lKG1vZGVsJTNEJTIyZGlzdGlsYmVydCUyRmRpc3RpbGJlcnQtYmFzZS11bmNhc2VkLWZpbmV0dW5lZC1zc3QtMi1lbmdsaXNoJTIyKSUwQWNsYXNzaWZpZXIoJTIyVGhpcyUyMG1vdmllJTIwaXMlMjBkaXNndXN0aW5nbHklMjBnb29kJTIwISUyMiklMEElMEFjbGFzc2lmaWVyKCUyMkRpcmVjdG9yJTIwdHJpZWQlMjB0b28lMjBtdWNoLiUyMik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(model=<span class="hljs-string">&quot;distilbert/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;This movie is disgustingly good !&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">1.0</span>}]

<span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;Director tried too much.&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;NEGATIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.996</span>}]`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Yw(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBZ2VuZXJhdG9yJTIwJTNEJTIwcGlwZWxpbmUobW9kZWwlM0QlMjJvcGVuYWktY29tbXVuaXR5JTJGZ3B0MiUyMiklMEFnZW5lcmF0b3IoJTIySSUyMGNhbid0JTIwYmVsaWV2ZSUyMHlvdSUyMGRpZCUyMHN1Y2glMjBhJTIwJTIyJTJDJTIwZG9fc2FtcGxlJTNERmFsc2UpJTBBJTBBJTIzJTIwVGhlc2UlMjBwYXJhbWV0ZXJzJTIwd2lsbCUyMHJldHVybiUyMHN1Z2dlc3Rpb25zJTJDJTIwYW5kJTIwb25seSUyMHRoZSUyMG5ld2x5JTIwY3JlYXRlZCUyMHRleHQlMjBtYWtpbmclMjBpdCUyMGVhc2llciUyMGZvciUyMHByb21wdGluZyUyMHN1Z2dlc3Rpb25zLiUwQW91dHB1dHMlMjAlM0QlMjBnZW5lcmF0b3IoJTIyTXklMjB0YXJ0JTIwbmVlZHMlMjBzb21lJTIyJTJDJTIwbnVtX3JldHVybl9zZXF1ZW5jZXMlM0Q0JTJDJTIwcmV0dXJuX2Z1bGxfdGV4dCUzREZhbHNlKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>generator = pipeline(model=<span class="hljs-string">&quot;openai-community/gpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>generator(<span class="hljs-string">&quot;I can&#x27;t believe you did such a &quot;</span>, do_sample=<span class="hljs-literal">False</span>)
[{<span class="hljs-string">&#x27;generated_text&#x27;</span>: <span class="hljs-string">&quot;I can&#x27;t believe you did such a icky thing to me. I&#x27;m so sorry. I&#x27;m so sorry. I&#x27;m so sorry. I&#x27;m so sorry. I&#x27;m so sorry. I&#x27;m so sorry. I&#x27;m so sorry. I&quot;</span>}]

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># These parameters will return suggestions, and only the newly created text making it easier for prompting suggestions.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = generator(<span class="hljs-string">&quot;My tart needs some&quot;</span>, num_return_sequences=<span class="hljs-number">4</span>, return_full_text=<span class="hljs-literal">False</span>)`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Ow(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBZ2VuZXJhdG9yJTIwJTNEJTIwcGlwZWxpbmUobW9kZWwlM0QlMjJtcm04NDg4JTJGdDUtYmFzZS1maW5ldHVuZWQtcXVlc3Rpb24tZ2VuZXJhdGlvbi1hcCUyMiklMEFnZW5lcmF0b3IoJTBBJTIwJTIwJTIwJTIwJTIyYW5zd2VyJTNBJTIwTWFudWVsJTIwY29udGV4dCUzQSUyME1hbnVlbCUyMGhhcyUyMGNyZWF0ZWQlMjBSdVBFUlRhLWJhc2UlMjB3aXRoJTIwdGhlJTIwc3VwcG9ydCUyMG9mJTIwSEYtVHJhbnNmb3JtZXJzJTIwYW5kJTIwR29vZ2xlJTIyJTBBKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>generator = pipeline(model=<span class="hljs-string">&quot;mrm8488/t5-base-finetuned-question-generation-ap&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>generator(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;answer: Manuel context: Manuel has created RuPERTa-base with the support of HF-Transformers and Google&quot;</span>
<span class="hljs-meta">... </span>)
[{<span class="hljs-string">&#x27;generated_text&#x27;</span>: <span class="hljs-string">&#x27;question: Who created the RuPERTa-base?&#x27;</span>}]`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Ew(M){let r,x="Usage:",h,c,w;return c=new j({props:{code:"dGV4dDJ0ZXh0X2dlbmVyYXRvciUyMCUzRCUyMHBpcGVsaW5lKCUyMnRleHQydGV4dC1nZW5lcmF0aW9uJTIyKSUwQXRleHQydGV4dF9nZW5lcmF0b3IoJTIycXVlc3Rpb24lM0ElMjBXaGF0JTIwaXMlMjA0MiUyMCUzRiUyMGNvbnRleHQlM0ElMjA0MiUyMGlzJTIwdGhlJTIwYW5zd2VyJTIwdG8lMjBsaWZlJTJDJTIwdGhlJTIwdW5pdmVyc2UlMjBhbmQlMjBldmVyeXRoaW5nJTIyKQ==",highlighted:`text2text_generator = pipeline(<span class="hljs-string">&quot;text2text-generation&quot;</span>)
text2text_generator(<span class="hljs-string">&quot;question: What is 42 ? context: 42 is the answer to life, the universe and everything&quot;</span>)`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-5wyjqd"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Qw(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBdG9rZW5fY2xhc3NpZmllciUyMCUzRCUyMHBpcGVsaW5lKG1vZGVsJTNEJTIySmVhbi1CYXB0aXN0ZSUyRmNhbWVtYmVydC1uZXIlMjIlMkMlMjBhZ2dyZWdhdGlvbl9zdHJhdGVneSUzRCUyMnNpbXBsZSUyMiklMEFzZW50ZW5jZSUyMCUzRCUyMCUyMkplJTIwbSdhcHBlbGxlJTIwamVhbi1iYXB0aXN0ZSUyMGV0JTIwamUlMjB2aXMlMjAlQzMlQTAlMjBtb250ciVDMyVBOWFsJTIyJTBBdG9rZW5zJTIwJTNEJTIwdG9rZW5fY2xhc3NpZmllcihzZW50ZW5jZSklMEF0b2tlbnMlMEElMEF0b2tlbiUyMCUzRCUyMHRva2VucyU1QjAlNUQlMEElMjMlMjBTdGFydCUyMGFuZCUyMGVuZCUyMHByb3ZpZGUlMjBhbiUyMGVhc3klMjB3YXklMjB0byUyMGhpZ2hsaWdodCUyMHdvcmRzJTIwaW4lMjB0aGUlMjBvcmlnaW5hbCUyMHRleHQuJTBBc2VudGVuY2UlNUJ0b2tlbiU1QiUyMnN0YXJ0JTIyJTVEJTIwJTNBJTIwdG9rZW4lNUIlMjJlbmQlMjIlNUQlNUQlMEElMEElMjMlMjBTb21lJTIwbW9kZWxzJTIwdXNlJTIwdGhlJTIwc2FtZSUyMGlkZWElMjB0byUyMGRvJTIwcGFydCUyMG9mJTIwc3BlZWNoLiUwQXN5bnRheGVyJTIwJTNEJTIwcGlwZWxpbmUobW9kZWwlM0QlMjJ2YmxhZ29qZSUyRmJlcnQtZW5nbGlzaC11bmNhc2VkLWZpbmV0dW5lZC1wb3MlMjIlMkMlMjBhZ2dyZWdhdGlvbl9zdHJhdGVneSUzRCUyMnNpbXBsZSUyMiklMEFzeW50YXhlciglMjJNeSUyMG5hbWUlMjBpcyUyMFNhcmFoJTIwYW5kJTIwSSUyMGxpdmUlMjBpbiUyMExvbmRvbiUyMik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>token_classifier = pipeline(model=<span class="hljs-string">&quot;Jean-Baptiste/camembert-ner&quot;</span>, aggregation_strategy=<span class="hljs-string">&quot;simple&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sentence = <span class="hljs-string">&quot;Je m&#x27;appelle jean-baptiste et je vis à montréal&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokens = token_classifier(sentence)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokens
[{<span class="hljs-string">&#x27;entity_group&#x27;</span>: <span class="hljs-string">&#x27;PER&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9931</span>, <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;jean-baptiste&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">12</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">26</span>}, {<span class="hljs-string">&#x27;entity_group&#x27;</span>: <span class="hljs-string">&#x27;LOC&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.998</span>, <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;montréal&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">38</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">47</span>}]

<span class="hljs-meta">&gt;&gt;&gt; </span>token = tokens[<span class="hljs-number">0</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Start and end provide an easy way to highlight words in the original text.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>sentence[token[<span class="hljs-string">&quot;start&quot;</span>] : token[<span class="hljs-string">&quot;end&quot;</span>]]
<span class="hljs-string">&#x27; jean-baptiste&#x27;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Some models use the same idea to do part of speech.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>syntaxer = pipeline(model=<span class="hljs-string">&quot;vblagoje/bert-english-uncased-finetuned-pos&quot;</span>, aggregation_strategy=<span class="hljs-string">&quot;simple&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>syntaxer(<span class="hljs-string">&quot;My name is Sarah and I live in London&quot;</span>)
[{<span class="hljs-string">&#x27;entity_group&#x27;</span>: <span class="hljs-string">&#x27;PRON&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.999</span>, <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;my&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">2</span>}, {<span class="hljs-string">&#x27;entity_group&#x27;</span>: <span class="hljs-string">&#x27;NOUN&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.997</span>, <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">7</span>}, {<span class="hljs-string">&#x27;entity_group&#x27;</span>: <span class="hljs-string">&#x27;AUX&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.994</span>, <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">10</span>}, {<span class="hljs-string">&#x27;entity_group&#x27;</span>: <span class="hljs-string">&#x27;PROPN&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.999</span>, <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;sarah&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">11</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">16</span>}, {<span class="hljs-string">&#x27;entity_group&#x27;</span>: <span class="hljs-string">&#x27;CCONJ&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.999</span>, <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">17</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">20</span>}, {<span class="hljs-string">&#x27;entity_group&#x27;</span>: <span class="hljs-string">&#x27;PRON&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.999</span>, <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">21</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">22</span>}, {<span class="hljs-string">&#x27;entity_group&#x27;</span>: <span class="hljs-string">&#x27;VERB&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.998</span>, <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;live&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">23</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">27</span>}, {<span class="hljs-string">&#x27;entity_group&#x27;</span>: <span class="hljs-string">&#x27;ADP&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.999</span>, <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;in&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">30</span>}, {<span class="hljs-string">&#x27;entity_group&#x27;</span>: <span class="hljs-string">&#x27;PROPN&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.999</span>, <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;london&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">31</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">37</span>}]`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Xw(M){let r,x="Usage:",h,c,w;return c=new j({props:{code:"ZW5fZnJfdHJhbnNsYXRvciUyMCUzRCUyMHBpcGVsaW5lKCUyMnRyYW5zbGF0aW9uX2VuX3RvX2ZyJTIyKSUwQWVuX2ZyX3RyYW5zbGF0b3IoJTIySG93JTIwb2xkJTIwYXJlJTIweW91JTNGJTIyKQ==",highlighted:`en_fr_translator = pipeline(<span class="hljs-string">&quot;translation_en_to_fr&quot;</span>)
en_fr_translator(<span class="hljs-string">&quot;How old are you?&quot;</span>)`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-5wyjqd"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function Kw(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBb3JhY2xlJTIwJTNEJTIwcGlwZWxpbmUobW9kZWwlM0QlMjJmYWNlYm9vayUyRmJhcnQtbGFyZ2UtbW5saSUyMiklMEFvcmFjbGUoJTBBJTIwJTIwJTIwJTIwJTIySSUyMGhhdmUlMjBhJTIwcHJvYmxlbSUyMHdpdGglMjBteSUyMGlwaG9uZSUyMHRoYXQlMjBuZWVkcyUyMHRvJTIwYmUlMjByZXNvbHZlZCUyMGFzYXAhISUyMiUyQyUwQSUyMCUyMCUyMCUyMGNhbmRpZGF0ZV9sYWJlbHMlM0QlNUIlMjJ1cmdlbnQlMjIlMkMlMjAlMjJub3QlMjB1cmdlbnQlMjIlMkMlMjAlMjJwaG9uZSUyMiUyQyUyMCUyMnRhYmxldCUyMiUyQyUyMCUyMmNvbXB1dGVyJTIyJTVEJTJDJTBBKSUwQSUwQW9yYWNsZSglMEElMjAlMjAlMjAlMjAlMjJJJTIwaGF2ZSUyMGElMjBwcm9ibGVtJTIwd2l0aCUyMG15JTIwaXBob25lJTIwdGhhdCUyMG5lZWRzJTIwdG8lMjBiZSUyMHJlc29sdmVkJTIwYXNhcCEhJTIyJTJDJTBBJTIwJTIwJTIwJTIwY2FuZGlkYXRlX2xhYmVscyUzRCU1QiUyMmVuZ2xpc2glMjIlMkMlMjAlMjJnZXJtYW4lMjIlNUQlMkMlMEEp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>oracle = pipeline(model=<span class="hljs-string">&quot;facebook/bart-large-mnli&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>oracle(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;I have a problem with my iphone that needs to be resolved asap!!&quot;</span>,
<span class="hljs-meta">... </span>    candidate_labels=[<span class="hljs-string">&quot;urgent&quot;</span>, <span class="hljs-string">&quot;not urgent&quot;</span>, <span class="hljs-string">&quot;phone&quot;</span>, <span class="hljs-string">&quot;tablet&quot;</span>, <span class="hljs-string">&quot;computer&quot;</span>],
<span class="hljs-meta">... </span>)
{<span class="hljs-string">&#x27;sequence&#x27;</span>: <span class="hljs-string">&#x27;I have a problem with my iphone that needs to be resolved asap!!&#x27;</span>, <span class="hljs-string">&#x27;labels&#x27;</span>: [<span class="hljs-string">&#x27;urgent&#x27;</span>, <span class="hljs-string">&#x27;phone&#x27;</span>, <span class="hljs-string">&#x27;computer&#x27;</span>, <span class="hljs-string">&#x27;not urgent&#x27;</span>, <span class="hljs-string">&#x27;tablet&#x27;</span>], <span class="hljs-string">&#x27;scores&#x27;</span>: [<span class="hljs-number">0.504</span>, <span class="hljs-number">0.479</span>, <span class="hljs-number">0.013</span>, <span class="hljs-number">0.003</span>, <span class="hljs-number">0.002</span>]}

<span class="hljs-meta">&gt;&gt;&gt; </span>oracle(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;I have a problem with my iphone that needs to be resolved asap!!&quot;</span>,
<span class="hljs-meta">... </span>    candidate_labels=[<span class="hljs-string">&quot;english&quot;</span>, <span class="hljs-string">&quot;german&quot;</span>],
<span class="hljs-meta">... </span>)
{<span class="hljs-string">&#x27;sequence&#x27;</span>: <span class="hljs-string">&#x27;I have a problem with my iphone that needs to be resolved asap!!&#x27;</span>, <span class="hljs-string">&#x27;labels&#x27;</span>: [<span class="hljs-string">&#x27;english&#x27;</span>, <span class="hljs-string">&#x27;german&#x27;</span>], <span class="hljs-string">&#x27;scores&#x27;</span>: [<span class="hljs-number">0.814</span>, <span class="hljs-number">0.186</span>]}`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function e_(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBZG9jdW1lbnRfcWElMjAlM0QlMjBwaXBlbGluZShtb2RlbCUzRCUyMmltcGlyYSUyRmxheW91dGxtLWRvY3VtZW50LXFhJTIyKSUwQWRvY3VtZW50X3FhKCUwQSUyMCUyMCUyMCUyMGltYWdlJTNEJTIyaHR0cHMlM0ElMkYlMkZodWdnaW5nZmFjZS5jbyUyRnNwYWNlcyUyRmltcGlyYSUyRmRvY3F1ZXJ5JTJGcmVzb2x2ZSUyRjIzNTkyMjNjMTgzN2E3NTg3NDAyYmRhMGYyNjQzMzgyYTZlZWZlYWIlMkZpbnZvaWNlLnBuZyUyMiUyQyUwQSUyMCUyMCUyMCUyMHF1ZXN0aW9uJTNEJTIyV2hhdCUyMGlzJTIwdGhlJTIwaW52b2ljZSUyMG51bWJlciUzRiUyMiUyQyUwQSk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>document_qa = pipeline(model=<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>document_qa(
<span class="hljs-meta">... </span>    image=<span class="hljs-string">&quot;https://huggingface.co/spaces/impira/docquery/resolve/2359223c1837a7587402bda0f2643382a6eefeab/invoice.png&quot;</span>,
<span class="hljs-meta">... </span>    question=<span class="hljs-string">&quot;What is the invoice number?&quot;</span>,
<span class="hljs-meta">... </span>)
[{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.425</span>, <span class="hljs-string">&#x27;answer&#x27;</span>: <span class="hljs-string">&#x27;us-001&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">16</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">16</span>}]`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function t_(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBZXh0cmFjdG9yJTIwJTNEJTIwcGlwZWxpbmUobW9kZWwlM0QlMjJnb29nbGUtYmVydCUyRmJlcnQtYmFzZS11bmNhc2VkJTIyJTJDJTIwdGFzayUzRCUyMmZlYXR1cmUtZXh0cmFjdGlvbiUyMiklMEFyZXN1bHQlMjAlM0QlMjBleHRyYWN0b3IoJTIyVGhpcyUyMGlzJTIwYSUyMHNpbXBsZSUyMHRlc3QuJTIyJTJDJTIwcmV0dXJuX3RlbnNvcnMlM0RUcnVlKSUwQXJlc3VsdC5zaGFwZSUyMCUyMCUyMyUyMFRoaXMlMjBpcyUyMGElMjB0ZW5zb3IlMjBvZiUyMHNoYXBlJTIwJTVCMSUyQyUyMHNlcXVlbmNlX2xlbnRoJTJDJTIwaGlkZGVuX2RpbWVuc2lvbiU1RCUyMHJlcHJlc2VudGluZyUyMHRoZSUyMGlucHV0JTIwc3RyaW5nLg==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>extractor = pipeline(model=<span class="hljs-string">&quot;google-bert/bert-base-uncased&quot;</span>, task=<span class="hljs-string">&quot;feature-extraction&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>result = extractor(<span class="hljs-string">&quot;This is a simple test.&quot;</span>, return_tensors=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>result.shape  <span class="hljs-comment"># This is a tensor of shape [1, sequence_lenth, hidden_dimension] representing the input string.</span>
torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">768</span>])`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function n_(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBZXh0cmFjdG9yJTIwJTNEJTIwcGlwZWxpbmUobW9kZWwlM0QlMjJnb29nbGUlMkZ2aXQtYmFzZS1wYXRjaDE2LTIyNCUyMiUyQyUyMHRhc2slM0QlMjJpbWFnZS1mZWF0dXJlLWV4dHJhY3Rpb24lMjIpJTBBcmVzdWx0JTIwJTNEJTIwZXh0cmFjdG9yKCUyMmh0dHBzJTNBJTJGJTJGaHVnZ2luZ2ZhY2UuY28lMkZkYXRhc2V0cyUyRk5hcnNpbCUyRmltYWdlX2R1bW15JTJGcmF3JTJGbWFpbiUyRnBhcnJvdHMucG5nJTIyJTJDJTIwcmV0dXJuX3RlbnNvcnMlM0RUcnVlKSUwQXJlc3VsdC5zaGFwZSUyMCUyMCUyMyUyMFRoaXMlMjBpcyUyMGElMjB0ZW5zb3IlMjBvZiUyMHNoYXBlJTIwJTVCMSUyQyUyMHNlcXVlbmNlX2xlbnRoJTJDJTIwaGlkZGVuX2RpbWVuc2lvbiU1RCUyMHJlcHJlc2VudGluZyUyMHRoZSUyMGlucHV0JTIwaW1hZ2Uu",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>extractor = pipeline(model=<span class="hljs-string">&quot;google/vit-base-patch16-224&quot;</span>, task=<span class="hljs-string">&quot;image-feature-extraction&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>result = extractor(<span class="hljs-string">&quot;https://huggingface.co/datasets/Narsil/image_dummy/raw/main/parrots.png&quot;</span>, return_tensors=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>result.shape  <span class="hljs-comment"># This is a tensor of shape [1, sequence_lenth, hidden_dimension] representing the input image.</span>
torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">197</span>, <span class="hljs-number">768</span>])`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function s_(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBY2FwdGlvbmVyJTIwJTNEJTIwcGlwZWxpbmUobW9kZWwlM0QlMjJ5ZHNoaWVoJTJGdml0LWdwdDItY29jby1lbiUyMiklMEFjYXB0aW9uZXIoJTIyaHR0cHMlM0ElMkYlMkZodWdnaW5nZmFjZS5jbyUyRmRhdGFzZXRzJTJGTmFyc2lsJTJGaW1hZ2VfZHVtbXklMkZyYXclMkZtYWluJTJGcGFycm90cy5wbmclMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>captioner = pipeline(model=<span class="hljs-string">&quot;ydshieh/vit-gpt2-coco-en&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>captioner(<span class="hljs-string">&quot;https://huggingface.co/datasets/Narsil/image_dummy/raw/main/parrots.png&quot;</span>)
[{<span class="hljs-string">&#x27;generated_text&#x27;</span>: <span class="hljs-string">&#x27;two birds are standing next to each other &#x27;</span>}]`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function o_(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBZ2VuZXJhdG9yJTIwJTNEJTIwcGlwZWxpbmUobW9kZWwlM0QlMjJmYWNlYm9vayUyRnNhbS12aXQtYmFzZSUyMiUyQyUyMHRhc2slM0QlMjJtYXNrLWdlbmVyYXRpb24lMjIpJTBBb3V0cHV0cyUyMCUzRCUyMGdlbmVyYXRvciglMEElMjAlMjAlMjAlMjAlMjJodHRwJTNBJTJGJTJGaW1hZ2VzLmNvY29kYXRhc2V0Lm9yZyUyRnZhbDIwMTclMkYwMDAwMDAwMzk3NjkuanBnJTIyJTJDJTBBKSUwQSUwQW91dHB1dHMlMjAlM0QlMjBnZW5lcmF0b3IoJTBBJTIwJTIwJTIwJTIwJTIyaHR0cHMlM0ElMkYlMkZodWdnaW5nZmFjZS5jbyUyRmRhdGFzZXRzJTJGTmFyc2lsJTJGaW1hZ2VfZHVtbXklMkZyYXclMkZtYWluJTJGcGFycm90cy5wbmclMjIlMkMlMjBwb2ludHNfcGVyX2JhdGNoJTNEMTI4JTBBKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>generator = pipeline(model=<span class="hljs-string">&quot;facebook/sam-vit-base&quot;</span>, task=<span class="hljs-string">&quot;mask-generation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = generator(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>,
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = generator(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;https://huggingface.co/datasets/Narsil/image_dummy/raw/main/parrots.png&quot;</span>, points_per_batch=<span class="hljs-number">128</span>
<span class="hljs-meta">... </span>)`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function a_(M){let r,x="Example:",h,c,w;return c=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBb3JhY2xlJTIwJTNEJTIwcGlwZWxpbmUobW9kZWwlM0QlMjJkYW5kZWxpbiUyRnZpbHQtYjMyLWZpbmV0dW5lZC12cWElMjIpJTBBaW1hZ2VfdXJsJTIwJTNEJTIwJTIyaHR0cHMlM0ElMkYlMkZodWdnaW5nZmFjZS5jbyUyRmRhdGFzZXRzJTJGTmFyc2lsJTJGaW1hZ2VfZHVtbXklMkZyYXclMkZtYWluJTJGbGVuYS5wbmclMjIlMEFvcmFjbGUocXVlc3Rpb24lM0QlMjJXaGF0JTIwaXMlMjBzaGUlMjB3ZWFyaW5nJTIwJTNGJTIyJTJDJTIwaW1hZ2UlM0RpbWFnZV91cmwpJTBBJTBBb3JhY2xlKHF1ZXN0aW9uJTNEJTIyV2hhdCUyMGlzJTIwc2hlJTIwd2VhcmluZyUyMCUzRiUyMiUyQyUyMGltYWdlJTNEaW1hZ2VfdXJsJTJDJTIwdG9wX2slM0QxKSUwQSUwQW9yYWNsZShxdWVzdGlvbiUzRCUyMklzJTIwdGhpcyUyMGElMjBwZXJzb24lMjAlM0YlMjIlMkMlMjBpbWFnZSUzRGltYWdlX3VybCUyQyUyMHRvcF9rJTNEMSklMEElMEFvcmFjbGUocXVlc3Rpb24lM0QlMjJJcyUyMHRoaXMlMjBhJTIwbWFuJTIwJTNGJTIyJTJDJTIwaW1hZ2UlM0RpbWFnZV91cmwlMkMlMjB0b3BfayUzRDEp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>oracle = pipeline(model=<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image_url = <span class="hljs-string">&quot;https://huggingface.co/datasets/Narsil/image_dummy/raw/main/lena.png&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>oracle(question=<span class="hljs-string">&quot;What is she wearing ?&quot;</span>, image=image_url)
[{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.948</span>, <span class="hljs-string">&#x27;answer&#x27;</span>: <span class="hljs-string">&#x27;hat&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.009</span>, <span class="hljs-string">&#x27;answer&#x27;</span>: <span class="hljs-string">&#x27;fedora&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.003</span>, <span class="hljs-string">&#x27;answer&#x27;</span>: <span class="hljs-string">&#x27;clothes&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.003</span>, <span class="hljs-string">&#x27;answer&#x27;</span>: <span class="hljs-string">&#x27;sun hat&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.002</span>, <span class="hljs-string">&#x27;answer&#x27;</span>: <span class="hljs-string">&#x27;nothing&#x27;</span>}]

<span class="hljs-meta">&gt;&gt;&gt; </span>oracle(question=<span class="hljs-string">&quot;What is she wearing ?&quot;</span>, image=image_url, top_k=<span class="hljs-number">1</span>)
[{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.948</span>, <span class="hljs-string">&#x27;answer&#x27;</span>: <span class="hljs-string">&#x27;hat&#x27;</span>}]

<span class="hljs-meta">&gt;&gt;&gt; </span>oracle(question=<span class="hljs-string">&quot;Is this a person ?&quot;</span>, image=image_url, top_k=<span class="hljs-number">1</span>)
[{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.993</span>, <span class="hljs-string">&#x27;answer&#x27;</span>: <span class="hljs-string">&#x27;yes&#x27;</span>}]

<span class="hljs-meta">&gt;&gt;&gt; </span>oracle(question=<span class="hljs-string">&quot;Is this a man ?&quot;</span>, image=image_url, top_k=<span class="hljs-number">1</span>)
[{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.996</span>, <span class="hljs-string">&#x27;answer&#x27;</span>: <span class="hljs-string">&#x27;no&#x27;</span>}]`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-11lpom8"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function r_(M){let r,x="Examples:",h,c,w;return c=new j({props:{code:"JTIzJTIwRXhwbGljaXRseSUyMGFzayUyMGZvciUyMHRlbnNvciUyMGFsbG9jYXRpb24lMjBvbiUyMENVREElMjBkZXZpY2UlMjAlM0EwJTBBcGlwZSUyMCUzRCUyMHBpcGVsaW5lKC4uLiUyQyUyMGRldmljZSUzRDApJTBBd2l0aCUyMHBpcGUuZGV2aWNlX3BsYWNlbWVudCgpJTNBJTBBJTIwJTIwJTIwJTIwJTIzJTIwRXZlcnklMjBmcmFtZXdvcmslMjBzcGVjaWZpYyUyMHRlbnNvciUyMGFsbG9jYXRpb24lMjB3aWxsJTIwYmUlMjBkb25lJTIwb24lMjB0aGUlMjByZXF1ZXN0JTIwZGV2aWNlJTBBJTIwJTIwJTIwJTIwb3V0cHV0JTIwJTNEJTIwcGlwZSguLi4p",highlighted:`<span class="hljs-comment"># Explicitly ask for tensor allocation on CUDA device :0</span>
pipe = pipeline(..., device=<span class="hljs-number">0</span>)
<span class="hljs-keyword">with</span> pipe.device_placement():
    <span class="hljs-comment"># Every framework specific tensor allocation will be done on the request device</span>
    output = pipe(...)`,wrap:!1}}),{c(){r=i("p"),r.textContent=x,h=s(),f(c.$$.fragment)},l(t){r=l(t,"P",{"data-svelte-h":!0}),m(r)!=="svelte-kvfsh7"&&(r.textContent=x),h=o(t),g(c.$$.fragment,t)},m(t,_){d(t,r,_),d(t,h,_),u(c,t,_),w=!0},p:$,i(t){w||(T(c.$$.fragment,t),w=!0)},o(t){b(c.$$.fragment,t),w=!1},d(t){t&&(a(r),a(h)),y(c,t)}}}function i_(M){let r,x,h,c,w,t,_,sc=`The pipelines are a great and easy way to use models for inference. These pipelines are objects that abstract most of
the complex code from the library, offering a simple API dedicated to several tasks, including Named Entity
Recognition, Masked Language Modeling, Sentiment Analysis, Feature Extraction and Question Answering. See the
<a href="../task_summary">task summary</a> for examples of use.`,ac,xn,ju="There are two categories of pipeline abstractions to be aware about:",rc,Mn,Ju='<li>The <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> which is the most powerful object encapsulating all other pipelines.</li> <li>Task-specific pipelines are available for <a href="#audio">audio</a>, <a href="#computer-vision">computer vision</a>, <a href="#natural-language-processing">natural language processing</a>, and <a href="#multimodal">multimodal</a> tasks.</li>',ic,kn,lc,Un,$u=`The <em>pipeline</em> abstraction is a wrapper around all the other available pipelines. It is instantiated as any other
pipeline but can provide additional quality of life.`,cc,vn,Pu="Simple call on one item:",pc,jn,dc,Jn,Cu=`If you want to use a specific model from the <a href="https://huggingface.co" rel="nofollow">hub</a> you can ignore the task if the model on
the hub already defines it:`,mc,$n,hc,Pn,Iu="To call a pipeline on many items, you can call it with a <em>list</em>.",fc,Cn,gc,In,qu=`To iterate over full datasets it is recommended to use a <code>dataset</code> directly. This means you don’t need to allocate
the whole dataset at once, nor do you need to do batching yourself. This should work just as fast as custom loops on
GPU. If it doesn’t don’t hesitate to create an issue.`,uc,qn,Tc,Gn,Gu="For ease of use, a generator is also possible:",bc,Zn,yc,Me,zn,zd,Ba,Zu='Utility factory method to build a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.Pipeline">Pipeline</a>.',Fd,Na,zu="Pipelines are made of:",Rd,Aa,Fu='<li>A <a href="tokenizer">tokenizer</a> in charge of mapping raw textual input to token.</li> <li>A <a href="model">model</a> to make predictions from the inputs.</li> <li>Some (optional) post processing for enhancing model’s output.</li>',Dd,Oe,wc,Fn,_c,Rn,Ru=`All pipelines can use batching. This will work
whenever the pipeline uses its streaming ability (so when passing lists or <code>Dataset</code> or <code>generator</code>).`,xc,Dn,Mc,Ee,kc,Bn,Uc,Nn,vc,An,Du="Example where it’s most a slowdown:",jc,Vn,Jc,Sn,Bu=`This is a occasional very long sentence compared to the other. In that case, the <strong>whole</strong> batch will need to be 400
tokens long, so the whole batch will be [64, 400] instead of [64, 4], leading to the high slowdown. Even worse, on
bigger batches, the program simply crashes.`,$c,Wn,Pc,Ln,Nu=`There are no good (general) solutions for this problem, and your mileage may vary depending on your use cases. Rule of
thumb:`,Cc,Hn,Au="For users, a rule of thumb is:",Ic,Yn,Vu=`<li><p><strong>Measure performance on your load, with your hardware. Measure, measure, and keep measuring. Real numbers are the
only way to go.</strong></p></li> <li><p>If you are latency constrained (live product doing inference), don’t batch.</p></li> <li><p>If you are using CPU, don’t batch.</p></li> <li><p>If you are using throughput (you want to run your model on a bunch of static data), on GPU, then:</p> <ul><li>If you have no clue about the size of the sequence_length (“natural” data), by default don’t batch, measure and
try tentatively to add it, add OOM checks to recover when it will fail (and it will at some point if you don’t
control the sequence_length.)</li> <li>If your sequence_length is super regular, then batching is more likely to be VERY interesting, measure and push
it until you get OOMs.</li> <li>The larger the GPU the more likely batching is going to be more interesting</li></ul></li> <li><p>As soon as you enable batching, make sure you can handle OOMs nicely.</p></li>`,qc,On,Gc,En,Su=`<code>zero-shot-classification</code> and <code>question-answering</code> are slightly specific in the sense, that a single input might yield
multiple forward pass of a model. Under normal circumstances, this would yield issues with <code>batch_size</code> argument.`,Zc,Qn,Wu=`In order to circumvent this issue, both of these pipelines are a bit specific, they are <code>ChunkPipeline</code> instead of
regular <code>Pipeline</code>. In short:`,zc,Xn,Fc,Kn,Lu="Now becomes:",Rc,es,Dc,ts,Hu=`This should be very transparent to your code because the pipelines are used in
the same way.`,Bc,ns,Yu=`This is a simplified view, since the pipeline can handle automatically the batch to ! Meaning you don’t have to care
about how many forward passes you inputs are actually going to trigger, you can optimize the <code>batch_size</code>
independently of the inputs. The caveats from the previous section still apply.`,Nc,ss,Ac,os,Ou="If you want to override a specific pipeline.",Vc,as,Eu=`Don’t hesitate to create an issue for your task at hand, the goal of the pipeline is to be easy to use and support most
cases, so <code>transformers</code> could maybe support your use case.`,Sc,rs,Qu="If you want to try simply you can:",Wc,is,Xu="<li>Subclass your pipeline of choice</li>",Lc,ls,Hc,cs,Ku="That should enable you to do all the custom code you want.",Yc,ps,Oc,ds,eT='<a href="../add_new_pipeline">Implementing a new pipeline</a>',Ec,ms,Qc,hs,tT="Pipelines available for audio tasks include the following.",Xc,fs,Kc,S,gs,Bd,Va,nT=`Audio classification pipeline using any <code>AutoModelForAudioClassification</code>. This pipeline predicts the class of a
raw waveform or an audio file. In case of an audio file, ffmpeg should be installed to support multiple audio
formats.`,Nd,Qe,Ad,Sa,sT='Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>',Vd,Wa,oT=`This pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task identifier:
<code>&quot;audio-classification&quot;</code>.`,Sd,La,aT=`See the list of available models on
<a href="https://huggingface.co/models?filter=audio-classification" rel="nofollow">huggingface.co/models</a>.`,Wd,Xe,us,Ld,Ha,rT=`Classify the sequence(s) given as inputs. See the <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.AutomaticSpeechRecognitionPipeline">AutomaticSpeechRecognitionPipeline</a> documentation for more
information.`,ep,Ts,tp,le,bs,Hd,Ya,iT="Pipeline that aims at extracting spoken text contained within some audio.",Yd,Oa,lT=`The input can be either a raw waveform or a audio file. In case of the audio file, ffmpeg should be installed for
to support multiple audio formats`,Od,Ke,Ed,Ea,cT='Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>',Qd,et,ys,Xd,Qa,pT=`Transcribe the audio sequence(s) given as inputs to text. See the <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.AutomaticSpeechRecognitionPipeline">AutomaticSpeechRecognitionPipeline</a>
documentation for more information.`,np,ws,sp,D,_s,Kd,Xa,dT=`Text-to-audio generation pipeline using any <code>AutoModelForTextToWaveform</code> or <code>AutoModelForTextToSpectrogram</code>. This
pipeline generates an audio file from an input text and optional other conditional inputs.`,em,tt,tm,Ka,mT='Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>',nm,nt,sm,er,hT=`This pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task identifiers: <code>&quot;text-to-speech&quot;</code> or
<code>&quot;text-to-audio&quot;</code>.`,om,tr,fT='See the list of available models on <a href="https://huggingface.co/models?filter=text-to-speech" rel="nofollow">huggingface.co/models</a>.',am,st,xs,rm,nr,gT='Generates speech/audio from the inputs. See the <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.TextToAudioPipeline">TextToAudioPipeline</a> documentation for more information.',op,Ms,ap,ke,ks,im,sr,uT=`Zero shot audio classification pipeline using <code>ClapModel</code>. This pipeline predicts the class of an audio when you
provide an audio and a set of <code>candidate_labels</code>.`,lm,ot,cm,or,TT=`Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a> This audio
classification pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task identifier:
<code>&quot;zero-shot-audio-classification&quot;</code>. See the list of available models on
<a href="https://huggingface.co/models?filter=zero-shot-audio-classification" rel="nofollow">huggingface.co/models</a>.`,pm,at,Us,dm,ar,bT="Assign labels to the audio(s) passed as inputs.",rp,vs,ip,js,yT="Pipelines available for computer vision tasks include the following.",lp,Js,cp,W,$s,mm,rr,wT="Depth estimation pipeline using any <code>AutoModelForDepthEstimation</code>. This pipeline predicts the depth of an image.",hm,rt,fm,ir,_T='Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>',gm,lr,xT=`This depth estimation pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task identifier:
<code>&quot;depth-estimation&quot;</code>.`,um,cr,MT='See the list of available models on <a href="https://huggingface.co/models?filter=depth-estimation" rel="nofollow">huggingface.co/models</a>.',Tm,it,Ps,bm,pr,kT="Predict the depth(s) of the image(s) passed as inputs.",pp,Cs,dp,L,Is,ym,dr,UT=`Image classification pipeline using any <code>AutoModelForImageClassification</code>. This pipeline predicts the class of an
image.`,wm,lt,_m,mr,vT='Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>',xm,hr,jT=`This image classification pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task identifier:
<code>&quot;image-classification&quot;</code>.`,Mm,fr,JT=`See the list of available models on
<a href="https://huggingface.co/models?filter=image-classification" rel="nofollow">huggingface.co/models</a>.`,km,ct,qs,Um,gr,$T="Assign labels to the image(s) passed as inputs.",mp,Gs,hp,ce,Zs,vm,ur,PT=`Image segmentation pipeline using any <code>AutoModelForXXXSegmentation</code>. This pipeline predicts masks of objects and
their classes.`,jm,pt,Jm,Tr,CT=`This image segmentation pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task identifier:
<code>&quot;image-segmentation&quot;</code>.`,$m,br,IT=`See the list of available models on
<a href="https://huggingface.co/models?filter=image-segmentation" rel="nofollow">huggingface.co/models</a>.`,Pm,dt,zs,Cm,yr,qT="Perform segmentation (detect masks & classes) in the image(s) passed as inputs.",fp,Fs,gp,pe,Rs,Im,wr,GT=`Image to Image pipeline using any <code>AutoModelForImageToImage</code>. This pipeline generates an image based on a previous
image input.`,qm,mt,Gm,_r,ZT=`This image to image pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task identifier:
<code>&quot;image-to-image&quot;</code>.`,Zm,xr,zT='See the list of available models on <a href="https://huggingface.co/models?filter=image-to-image" rel="nofollow">huggingface.co/models</a>.',zm,ht,Ds,Fm,Mr,FT="Transform the image(s) passed as inputs.",up,Bs,Tp,H,Ns,Rm,kr,RT=`Object detection pipeline using any <code>AutoModelForObjectDetection</code>. This pipeline predicts bounding boxes of objects
and their classes.`,Dm,ft,Bm,Ur,DT='Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>',Nm,vr,BT=`This object detection pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task identifier:
<code>&quot;object-detection&quot;</code>.`,Am,jr,NT='See the list of available models on <a href="https://huggingface.co/models?filter=object-detection" rel="nofollow">huggingface.co/models</a>.',Vm,gt,As,Sm,Jr,AT="Detect objects (bounding boxes & classes) in the image(s) passed as inputs.",bp,Vs,yp,Ue,Ss,Wm,$r,VT=`Video classification pipeline using any <code>AutoModelForVideoClassification</code>. This pipeline predicts the class of a
video.`,Lm,Pr,ST=`This video classification pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task identifier:
<code>&quot;video-classification&quot;</code>.`,Hm,Cr,WT=`See the list of available models on
<a href="https://huggingface.co/models?filter=video-classification" rel="nofollow">huggingface.co/models</a>.`,Ym,ut,Ws,Om,Ir,LT="Assign labels to the video(s) passed as inputs.",wp,Ls,_p,Y,Hs,Em,qr,HT=`Zero shot image classification pipeline using <code>CLIPModel</code>. This pipeline predicts the class of an image when you
provide an image and a set of <code>candidate_labels</code>.`,Qm,Tt,Xm,Gr,YT='Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>',Km,Zr,OT=`This image classification pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task identifier:
<code>&quot;zero-shot-image-classification&quot;</code>.`,eh,zr,ET=`See the list of available models on
<a href="https://huggingface.co/models?filter=zero-shot-image-classification" rel="nofollow">huggingface.co/models</a>.`,th,bt,Ys,nh,Fr,QT="Assign labels to the image(s) passed as inputs.",xp,Os,Mp,O,Es,sh,Rr,XT=`Zero shot object detection pipeline using <code>OwlViTForObjectDetection</code>. This pipeline predicts bounding boxes of
objects when you provide an image and a set of <code>candidate_labels</code>.`,oh,yt,ah,Dr,KT='Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>',rh,Br,eb=`This object detection pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task identifier:
<code>&quot;zero-shot-object-detection&quot;</code>.`,ih,Nr,tb=`See the list of available models on
<a href="https://huggingface.co/models?filter=zero-shot-object-detection" rel="nofollow">huggingface.co/models</a>.`,lh,wt,Qs,ch,Ar,nb="Detect objects (bounding boxes & classes) in the image(s) passed as inputs.",kp,Xs,Up,Ks,sb="Pipelines available for natural language processing tasks include the following.",vp,eo,jp,de,to,ph,Vr,ob=`Utility class containing a conversation and its history. This class is meant to be used as an input to the
<a href="/docs/transformers/main/en/main_classes/pipelines#transformers.ConversationalPipeline">ConversationalPipeline</a>. The conversation contains several utility functions to manage the addition of new user
inputs and generated model responses.`,dh,_t,mh,xt,no,hh,Sr,ab=`Add a user input to the conversation for the next round. This is a legacy method that assumes that inputs must
alternate user/assistant/user/assistant, and so will not add multiple user messages in succession. We recommend
just using <code>add_message</code> with role “user” instead.`,fh,Mt,so,gh,Wr,rb="This is a legacy method. We recommend just using <code>add_message</code> with an appropriate role instead.",uh,kt,oo,Th,Lr,ib=`This is a legacy method, as the Conversation no longer distinguishes between processed and unprocessed user
input. We set a counter here to keep behaviour mostly backward-compatible, but in general you should just read
the messages directly when writing new code.`,Jp,E,ao,bh,Hr,lb="Multi-turn conversational pipeline.",yh,Ut,wh,Yr,cb='Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>',_h,Or,pb=`This conversational pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task identifier:
<code>&quot;conversational&quot;</code>.`,xh,Er,db=`This pipeline can be used with any model that has a <a href="https://huggingface.co/docs/transformers/chat_templating" rel="nofollow">chat
template</a> set.`,Mh,vt,ro,kh,Qr,mb="Generate responses for the conversation(s) given as inputs.",$p,io,Pp,G,lo,Uh,Xr,hb=`Masked language modeling prediction pipeline using any <code>ModelWithLMHead</code>. See the <a href="../task_summary#masked-language-modeling">masked language modeling
examples</a> for more information.`,vh,jt,jh,Kr,fb='Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>',Jh,ei,gb=`This mask filling pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task identifier:
<code>&quot;fill-mask&quot;</code>.`,$h,ti,ub=`The models that this pipeline can use are models that have been trained with a masked language modeling objective,
which includes the bi-directional models in the library. See the up-to-date list of available models on
<a href="https://huggingface.co/models?filter=fill-mask" rel="nofollow">huggingface.co/models</a>.`,Ph,Jt,Ch,$t,Ih,Pt,co,qh,ni,Tb="Fill the masked token in the text(s) given as inputs.",Cp,po,Ip,Z,mo,Gh,si,bb=`Question Answering pipeline using any <code>ModelForQuestionAnswering</code>. See the <a href="../task_summary#question-answering">question answering
examples</a> for more information.`,Zh,Ct,zh,oi,yb='Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>',Fh,ai,wb=`This question answering pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task identifier:
<code>&quot;question-answering&quot;</code>.`,Rh,ri,_b=`The models that this pipeline can use are models that have been fine-tuned on a question answering task. See the
up-to-date list of available models on
<a href="https://huggingface.co/models?filter=question-answering" rel="nofollow">huggingface.co/models</a>.`,Dh,It,ho,Bh,ii,xb="Answer the question(s) given as inputs by using the context(s).",Nh,Se,fo,Ah,li,Mb=`QuestionAnsweringPipeline leverages the <code>SquadExample</code> internally. This helper method encapsulate all the
logic for converting question(s) and context(s) to <code>SquadExample</code>.`,Vh,ci,kb="We currently support extractive question answering.",Sh,qt,go,Wh,pi,Ub="When decoding from token probabilities, this method maps token indexes to actual word in the initial context.",qp,uo,Gp,me,To,Lh,di,vb="Summarize news articles and other documents.",Hh,mi,jb=`This summarizing pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task identifier:
<code>&quot;summarization&quot;</code>.`,Yh,hi,Jb=`The models that this pipeline can use are models that have been fine-tuned on a summarization task, which is
currently, ’<em>bart-large-cnn</em>’, ’<em>google-t5/t5-small</em>’, ’<em>google-t5/t5-base</em>’, ’<em>google-t5/t5-large</em>’, ’<em>google-t5/t5-3b</em>’, ’<em>google-t5/t5-11b</em>’. See the up-to-date
list of available models on <a href="https://huggingface.co/models?filter=summarization" rel="nofollow">huggingface.co/models</a>. For a list
of available parameters, see the <a href="https://huggingface.co/docs/transformers/en/main_classes/text_generation#transformers.generation.GenerationMixin.generate" rel="nofollow">following
documentation</a>`,Oh,Gt,Eh,Zt,bo,Qh,fi,$b="Summarize the text(s) given as inputs.",Zp,yo,zp,Q,wo,Xh,gi,Pb=`Table Question Answering pipeline using a <code>ModelForTableQuestionAnswering</code>. This pipeline is only available in
PyTorch.`,Kh,zt,ef,ui,Cb='Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>',tf,Ti,Ib=`This tabular question answering pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task
identifier: <code>&quot;table-question-answering&quot;</code>.`,nf,bi,qb=`The models that this pipeline can use are models that have been fine-tuned on a tabular question answering task.
See the up-to-date list of available models on
<a href="https://huggingface.co/models?filter=table-question-answering" rel="nofollow">huggingface.co/models</a>.`,sf,ae,_o,of,yi,Gb="Answers queries according to a table. The pipeline accepts several types of inputs which are detailed below:",af,wi,Zb="<li><code>pipeline(table, query)</code></li> <li><code>pipeline(table, [query])</code></li> <li><code>pipeline(table=table, query=query)</code></li> <li><code>pipeline(table=table, query=[query])</code></li> <li><code>pipeline({&quot;table&quot;: table, &quot;query&quot;: query})</code></li> <li><code>pipeline({&quot;table&quot;: table, &quot;query&quot;: [query]})</code></li> <li><code>pipeline([{&quot;table&quot;: table, &quot;query&quot;: query}, {&quot;table&quot;: table, &quot;query&quot;: query}])</code></li>",rf,_i,zb="The <code>table</code> argument should be a dict or a DataFrame built from that dict, containing the whole table:",lf,Ft,cf,xi,Fb="This dictionary can be passed in as such, or can be converted to a pandas DataFrame:",pf,Rt,Fp,xo,Rp,B,Mo,df,Mi,Rb=`Text classification pipeline using any <code>ModelForSequenceClassification</code>. See the <a href="../task_summary#sequence-classification">sequence classification
examples</a> for more information.`,mf,Dt,hf,ki,Db='Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>',ff,Ui,Bb=`This text classification pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task identifier:
<code>&quot;sentiment-analysis&quot;</code> (for classifying sequences according to positive or negative sentiments).`,gf,vi,Nb=`If multiple classification labels are available (<code>model.config.num_labels &gt;= 2</code>), the pipeline will run a softmax
over the results. If there is a single label, the pipeline will run a sigmoid over the result.`,uf,ji,Ab=`The models that this pipeline can use are models that have been fine-tuned on a sequence classification task. See
the up-to-date list of available models on
<a href="https://huggingface.co/models?filter=text-classification" rel="nofollow">huggingface.co/models</a>.`,Tf,Bt,ko,bf,Ji,Vb="Classify the text(s) given as inputs.",Dp,Uo,Bp,X,vo,yf,$i,Sb=`Language generation pipeline using any <code>ModelWithLMHead</code>. This pipeline predicts the words that will follow a
specified text prompt. It can also accept one or more chats. Each chat takes the form of a list of dicts,
where each dict contains “role” and “content” keys.`,wf,Nt,_f,Pi,Wb=`Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>. You can pass text
generation parameters to this pipeline to control stopping criteria, decoding strategy, and more. Learn more about
text generation parameters in <a href="../generation_strategies">Text generation strategies</a> and <a href="text_generation">Text
generation</a>.`,xf,Ci,Lb=`This language generation pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task identifier:
<code>&quot;text-generation&quot;</code>.`,Mf,Ii,Hb=`The models that this pipeline can use are models that have been trained with an autoregressive language modeling
objective, which includes the uni-directional models in the library (e.g. openai-community/gpt2). See the list of available models
on <a href="https://huggingface.co/models?filter=text-generation" rel="nofollow">huggingface.co/models</a>.`,kf,At,jo,Uf,qi,Yb="Complete the prompt(s) given as inputs.",Np,Jo,Ap,z,$o,vf,Gi,Ob="Pipeline for text to text generation using seq2seq models.",jf,Vt,Jf,Zi,Eb=`Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>. You can pass text
generation parameters to this pipeline to control stopping criteria, decoding strategy, and more. Learn more about
text generation parameters in <a href="../generation_strategies">Text generation strategies</a> and <a href="text_generation">Text
generation</a>.`,$f,zi,Qb=`This Text2TextGenerationPipeline pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task
identifier: <code>&quot;text2text-generation&quot;</code>.`,Pf,Fi,Xb=`The models that this pipeline can use are models that have been fine-tuned on a translation task. See the
up-to-date list of available models on
<a href="https://huggingface.co/models?filter=text2text-generation" rel="nofollow">huggingface.co/models</a>. For a list of available
parameters, see the <a href="https://huggingface.co/docs/transformers/en/main_classes/text_generation#transformers.generation.GenerationMixin.generate" rel="nofollow">following
documentation</a>`,Cf,St,If,Wt,Po,qf,Ri,Kb="Generate the output text(s) using text(s) given as inputs.",Gf,Lt,Co,Zf,Di,ey="Checks whether there might be something wrong with given input with regard to the model.",Vp,Io,Sp,q,qo,zf,Bi,ty=`Named Entity Recognition pipeline using any <code>ModelForTokenClassification</code>. See the <a href="../task_summary#named-entity-recognition">named entity recognition
examples</a> for more information.`,Ff,Ht,Rf,Ni,ny='Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>',Df,Ai,sy=`This token recognition pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task identifier:
<code>&quot;ner&quot;</code> (for predicting the classes of tokens in a sequence: person, organisation, location or miscellaneous).`,Bf,Vi,oy=`The models that this pipeline can use are models that have been fine-tuned on a token classification task. See the
up-to-date list of available models on
<a href="https://huggingface.co/models?filter=token-classification" rel="nofollow">huggingface.co/models</a>.`,Nf,Yt,Go,Af,Si,ay="Classify each token of the text(s) given as inputs.",Vf,We,Zo,Sf,Wi,ry="Override tokens from a given word that disagree to force agreement on word boundaries.",Wf,Li,iy=`Example: micro|soft| com|pany| B-ENT I-NAME I-ENT I-ENT will be rewritten with first strategy as microsoft|
company| B-ENT I-ENT`,Lf,Ot,zo,Hf,Hi,ly="Fuse various numpy arrays into dicts with all the information needed for aggregation",Yf,Et,Fo,Of,Yi,cy="Find and group together the adjacent tokens with the same entity predicted.",Ef,Qt,Ro,Qf,Oi,py="Group together the adjacent tokens with the same entity predicted.",Wp,Do,Lp,he,Bo,Xf,Ei,dy="Translates from one language to another.",Kf,Qi,my=`This translation pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task identifier:
<code>&quot;translation_xx_to_yy&quot;</code>.`,eg,Xi,hy=`The models that this pipeline can use are models that have been fine-tuned on a translation task. See the
up-to-date list of available models on <a href="https://huggingface.co/models?filter=translation" rel="nofollow">huggingface.co/models</a>.
For a list of available parameters, see the <a href="https://huggingface.co/docs/transformers/en/main_classes/text_generation#transformers.generation.GenerationMixin.generate" rel="nofollow">following
documentation</a>`,tg,Xt,ng,Kt,No,sg,Ki,fy="Translate the text(s) given as inputs.",Hp,Ao,Yp,N,Vo,og,el,gy=`NLI-based zero-shot classification pipeline using a <code>ModelForSequenceClassification</code> trained on NLI (natural
language inference) tasks. Equivalent of <code>text-classification</code> pipelines, but these models don’t require a
hardcoded number of potential classes, they can be chosen at runtime. It usually means it’s slower but it is
<strong>much</strong> more flexible.`,ag,tl,uy=`Any combination of sequences and labels can be passed and each combination will be posed as a premise/hypothesis
pair and passed to the pretrained model. Then, the logit for <em>entailment</em> is taken as the logit for the candidate
label being valid. Any NLI model can be used, but the id of the <em>entailment</em> label must be included in the model
config’s :attr:<em>~transformers.PretrainedConfig.label2id</em>.`,rg,en,ig,nl,Ty='Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>',lg,sl,by=`This NLI pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task identifier:
<code>&quot;zero-shot-classification&quot;</code>.`,cg,ol,yy=`The models that this pipeline can use are models that have been fine-tuned on an NLI task. See the up-to-date list
of available models on <a href="https://huggingface.co/models?search=nli" rel="nofollow">huggingface.co/models</a>.`,pg,tn,So,dg,al,wy=`Classify the sequence(s) given as inputs. See the <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.ZeroShotClassificationPipeline">ZeroShotClassificationPipeline</a> documentation for more
information.`,Op,Wo,Ep,Lo,_y="Pipelines available for multimodal tasks include the following.",Qp,Ho,Xp,K,Yo,mg,rl,xy=`Document Question Answering pipeline using any <code>AutoModelForDocumentQuestionAnswering</code>. The inputs/outputs are
similar to the (extractive) question answering pipeline; however, the pipeline takes an image (and optional OCR’d
words/boxes) as input instead of text context.`,hg,nn,fg,il,My='Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>',gg,ll,ky=`This document question answering pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task
identifier: <code>&quot;document-question-answering&quot;</code>.`,ug,cl,Uy=`The models that this pipeline can use are models that have been fine-tuned on a document question answering task.
See the up-to-date list of available models on
<a href="https://huggingface.co/models?filter=document-question-answering" rel="nofollow">huggingface.co/models</a>.`,Tg,Ae,Oo,bg,pl,vy=`Answer the question(s) given as inputs by using the document(s). A document is defined as an image and an
optional list of (word, box) tuples which represent the text in the document. If the <code>word_boxes</code> are not
provided, it will use the Tesseract OCR engine (if available) to extract the words and boxes automatically for
LayoutLM-like models which require them as input. For Donut, no OCR is run.`,yg,dl,jy="You can invoke the pipeline several ways:",wg,ml,Jy="<li><code>pipeline(image=image, question=question)</code></li> <li><code>pipeline(image=image, question=question, word_boxes=word_boxes)</code></li> <li><code>pipeline([{&quot;image&quot;: image, &quot;question&quot;: question}])</code></li> <li><code>pipeline([{&quot;image&quot;: image, &quot;question&quot;: question, &quot;word_boxes&quot;: word_boxes}])</code></li>",Kp,Eo,ed,ee,Qo,_g,hl,$y=`Feature extraction pipeline uses no model head. This pipeline extracts the hidden states from the base
transformer, which can be used as features in downstream tasks.`,xg,sn,Mg,fl,Py='Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>',kg,gl,Cy=`This feature extraction pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the task identifier:
<code>&quot;feature-extraction&quot;</code>.`,Ug,ul,Iy=`All models may be used for this pipeline. See a list of all models, including community-contributed models on
<a href="https://huggingface.co/models" rel="nofollow">huggingface.co/models</a>.`,vg,on,Xo,jg,Tl,qy="Extract the features of the input(s).",td,Ko,nd,te,ea,Jg,bl,Gy=`Image feature extraction pipeline uses no model head. This pipeline extracts the hidden states from the base
transformer, which can be used as features in downstream tasks.`,$g,an,Pg,yl,Zy='Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>',Cg,wl,zy=`This image feature extraction pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the task identifier:
<code>&quot;image-feature-extraction&quot;</code>.`,Ig,_l,Fy=`All vision models may be used for this pipeline. See a list of all models, including community-contributed models on
<a href="https://huggingface.co/models" rel="nofollow">huggingface.co/models</a>.`,qg,rn,ta,Gg,xl,Ry="Extract the features of the input(s).",sd,na,od,ne,sa,Zg,Ml,Dy="Image To Text pipeline using a <code>AutoModelForVision2Seq</code>. This pipeline predicts a caption for a given image.",zg,ln,Fg,kl,By='Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>',Rg,Ul,Ny=`This image to text pipeline can currently be loaded from pipeline() using the following task identifier:
“image-to-text”.`,Dg,vl,Ay=`See the list of available models on
<a href="https://huggingface.co/models?pipeline_tag=image-to-text" rel="nofollow">huggingface.co/models</a>.`,Bg,cn,oa,Ng,jl,Vy="Assign labels to the image(s) passed as inputs.",ad,aa,rd,F,ra,Ag,Jl,Sy=`Automatic mask generation for images using <code>SamForMaskGeneration</code>. This pipeline predicts binary masks for an
image, given an image. It is a <code>ChunkPipeline</code> because you can seperate the points in a mini-batch in order to
avoid OOM issues. Use the <code>points_per_batch</code> argument to control the number of points that will be processed at the
same time. Default is <code>64</code>.`,Vg,$l,Wy="The pipeline works in 3 steps:",Sg,Pl,Ly=`<li><p><code>preprocess</code>: A grid of 1024 points evenly separated is generated along with bounding boxes and point
labels.
For more details on how the points and bounding boxes are created, check the <code>_generate_crop_boxes</code>
function. The image is also preprocessed using the <code>image_processor</code>. This function <code>yields</code> a minibatch of
<code>points_per_batch</code>.</p></li> <li><p><code>forward</code>: feeds the outputs of <code>preprocess</code> to the model. The image embedding is computed only once.
Calls both <code>self.model.get_image_embeddings</code> and makes sure that the gradients are not computed, and the
tensors and models are on the same device.</p></li> <li><p><code>postprocess</code>: The most important part of the automatic mask generation happens here. Three steps
are induced:</p> <ul><li>image_processor.postprocess_masks (run on each minibatch loop): takes in the raw output masks,
resizes them according
to the image size, and transforms there to binary masks.</li> <li>image_processor.filter_masks (on each minibatch loop): uses both <code>pred_iou_thresh</code> and
<code>stability_scores</code>. Also
applies a variety of filters based on non maximum suppression to remove bad masks.</li> <li>image_processor.postprocess_masks_for_amg applies the NSM on the mask to only keep relevant ones.</li></ul></li>`,Wg,pn,Lg,Cl,Hy='Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>',Hg,Il,Yy=`This segmentation pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task identifier:
<code>&quot;mask-generation&quot;</code>.`,Yg,ql,Oy='See the list of available models on <a href="https://huggingface.co/models?filter=mask-generation" rel="nofollow">huggingface.co/models</a>.',Og,dn,ia,Eg,Gl,Ey="Generates binary segmentation masks",id,la,ld,se,ca,Qg,Zl,Qy=`Visual Question Answering pipeline using a <code>AutoModelForVisualQuestionAnswering</code>. This pipeline is currently only
available in PyTorch.`,Xg,mn,Kg,zl,Xy='Learn more about the basics of using a pipeline in the <a href="../pipeline_tutorial">pipeline tutorial</a>',eu,Fl,Ky=`This visual question answering pipeline can currently be loaded from <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline">pipeline()</a> using the following task
identifiers: <code>&quot;visual-question-answering&quot;, &quot;vqa&quot;</code>.`,tu,Rl,ew=`The models that this pipeline can use are models that have been fine-tuned on a visual question answering task. See
the up-to-date list of available models on
<a href="https://huggingface.co/models?filter=visual-question-answering" rel="nofollow">huggingface.co/models</a>.`,nu,Le,pa,su,Dl,tw=`Answers open-ended questions about images. The pipeline accepts several types of inputs which are detailed
below:`,ou,Bl,nw="<li><code>pipeline(image=image, question=question)</code></li> <li><code>pipeline({&quot;image&quot;: image, &quot;question&quot;: question})</code></li> <li><code>pipeline([{&quot;image&quot;: image, &quot;question&quot;: question}])</code></li> <li><code>pipeline([{&quot;image&quot;: image, &quot;question&quot;: question}, {&quot;image&quot;: image, &quot;question&quot;: question}])</code></li>",cd,da,pd,C,ma,au,Nl,sw=`The Pipeline class is the class from which all pipelines inherit. Refer to this class for methods shared across
different pipelines.`,ru,Al,ow=`Base class implementing pipelined operations. Pipeline workflow is defined as a sequence of the following
operations:`,iu,Vl,aw="Input -> Tokenization -> Model Inference -> Post-Processing (task dependent) -> Output",lu,Sl,rw="Pipeline supports running on CPU or GPU through the device argument (see below).",cu,Wl,iw=`Some pipeline, like for instance <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.FeatureExtractionPipeline">FeatureExtractionPipeline</a> (<code>&#39;feature-extraction&#39;</code>) output large tensor object
as nested-lists. In order to avoid dumping such large structure as textual data we provide the <code>binary_output</code>
constructor argument. If set to <code>True</code>, the output will be stored in the pickle format.`,pu,hn,ha,du,Ll,lw="Check if the model class is in supported by the pipeline.",mu,He,fa,hu,Hl,cw="Context Manager allowing tensor allocation on the user-specified device in framework agnostic way.",fu,fn,gu,gn,ga,uu,Yl,pw="Ensure PyTorch tensors are on the specified device.",Tu,un,ua,bu,Ol,dw=`Postprocess will receive the raw outputs of the <code>_forward</code> method, generally tensors, and reformat them into
something more friendly. Generally it will output a list or a dict or results (containing just strings and
numbers).`,yu,Tn,Ta,wu,El,mw="Scikit / Keras interface to transformers’ pipelines. This method will forward to <strong>call</strong>().",_u,bn,ba,xu,Ql,hw=`Preprocess will take the <code>input_</code> of a specific pipeline and return a dictionary of everything necessary for
<code>_forward</code> to run properly. It should contain at least one tensor, but might have arbitrary other items.`,Mu,yn,ya,ku,Xl,fw="Save the pipeline’s model and tokenizer.",Uu,wn,wa,vu,Kl,gw="Scikit / Keras interface to transformers’ pipelines. This method will forward to <strong>call</strong>().",dd,oc,md;return w=new J({props:{title:"Pipelines",local:"pipelines",headingTag:"h1"}}),kn=new J({props:{title:"The pipeline abstraction",local:"transformers.pipeline",headingTag:"h2"}}),jn=new j({props:{code:"cGlwZSUyMCUzRCUyMHBpcGVsaW5lKCUyMnRleHQtY2xhc3NpZmljYXRpb24lMjIpJTBBcGlwZSglMjJUaGlzJTIwcmVzdGF1cmFudCUyMGlzJTIwYXdlc29tZSUyMik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pipe = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pipe(<span class="hljs-string">&quot;This restaurant is awesome&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9998743534088135</span>}]`,wrap:!1}}),$n=new j({props:{code:"cGlwZSUyMCUzRCUyMHBpcGVsaW5lKG1vZGVsJTNEJTIyRmFjZWJvb2tBSSUyRnJvYmVydGEtbGFyZ2UtbW5saSUyMiklMEFwaXBlKCUyMlRoaXMlMjByZXN0YXVyYW50JTIwaXMlMjBhd2Vzb21lJTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pipe = pipeline(model=<span class="hljs-string">&quot;FacebookAI/roberta-large-mnli&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pipe(<span class="hljs-string">&quot;This restaurant is awesome&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;NEUTRAL&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.7313136458396912</span>}]`,wrap:!1}}),Cn=new j({props:{code:"cGlwZSUyMCUzRCUyMHBpcGVsaW5lKCUyMnRleHQtY2xhc3NpZmljYXRpb24lMjIpJTBBcGlwZSglNUIlMjJUaGlzJTIwcmVzdGF1cmFudCUyMGlzJTIwYXdlc29tZSUyMiUyQyUyMCUyMlRoaXMlMjByZXN0YXVyYW50JTIwaXMlMjBhd2Z1bCUyMiU1RCk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pipe = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pipe([<span class="hljs-string">&quot;This restaurant is awesome&quot;</span>, <span class="hljs-string">&quot;This restaurant is awful&quot;</span>])
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9998743534088135</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;NEGATIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9996669292449951</span>}]`,wrap:!1}}),qn=new j({props:{code:"aW1wb3J0JTIwZGF0YXNldHMlMEFmcm9tJTIwdHJhbnNmb3JtZXJzJTIwaW1wb3J0JTIwcGlwZWxpbmUlMEFmcm9tJTIwdHJhbnNmb3JtZXJzLnBpcGVsaW5lcy5wdF91dGlscyUyMGltcG9ydCUyMEtleURhdGFzZXQlMEFmcm9tJTIwdHFkbS5hdXRvJTIwaW1wb3J0JTIwdHFkbSUwQSUwQXBpcGUlMjAlM0QlMjBwaXBlbGluZSglMjJhdXRvbWF0aWMtc3BlZWNoLXJlY29nbml0aW9uJTIyJTJDJTIwbW9kZWwlM0QlMjJmYWNlYm9vayUyRndhdjJ2ZWMyLWJhc2UtOTYwaCUyMiUyQyUyMGRldmljZSUzRDApJTBBZGF0YXNldCUyMCUzRCUyMGRhdGFzZXRzLmxvYWRfZGF0YXNldCglMjJzdXBlcmIlMjIlMkMlMjBuYW1lJTNEJTIyYXNyJTIyJTJDJTIwc3BsaXQlM0QlMjJ0ZXN0JTIyKSUwQSUwQSUyMyUyMEtleURhdGFzZXQlMjAob25seSUyMCpwdCopJTIwd2lsbCUyMHNpbXBseSUyMHJldHVybiUyMHRoZSUyMGl0ZW0lMjBpbiUyMHRoZSUyMGRpY3QlMjByZXR1cm5lZCUyMGJ5JTIwdGhlJTIwZGF0YXNldCUyMGl0ZW0lMEElMjMlMjBhcyUyMHdlJ3JlJTIwbm90JTIwaW50ZXJlc3RlZCUyMGluJTIwdGhlJTIwKnRhcmdldColMjBwYXJ0JTIwb2YlMjB0aGUlMjBkYXRhc2V0LiUyMEZvciUyMHNlbnRlbmNlJTIwcGFpciUyMHVzZSUyMEtleVBhaXJEYXRhc2V0JTBBZm9yJTIwb3V0JTIwaW4lMjB0cWRtKHBpcGUoS2V5RGF0YXNldChkYXRhc2V0JTJDJTIwJTIyZmlsZSUyMikpKSUzQSUwQSUyMCUyMCUyMCUyMHByaW50KG91dCklMEElMjAlMjAlMjAlMjAlMjMlMjAlN0IlMjJ0ZXh0JTIyJTNBJTIwJTIyTlVNQkVSJTIwVEVOJTIwRlJFU0glMjBORUxMWSUyMElTJTIwV0FJVElORyUyME9OJTIwWU9VJTIwR09PRCUyME5JR0hUJTIwSFVTQkFORCUyMiU3RCUwQSUyMCUyMCUyMCUyMCUyMyUyMCU3QiUyMnRleHQlMjIlM0ElMjAuLi4uJTdEJTBBJTIwJTIwJTIwJTIwJTIzJTIwLi4uLg==",highlighted:`<span class="hljs-keyword">import</span> datasets
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-keyword">from</span> transformers.pipelines.pt_utils <span class="hljs-keyword">import</span> KeyDataset
<span class="hljs-keyword">from</span> tqdm.auto <span class="hljs-keyword">import</span> tqdm

pipe = pipeline(<span class="hljs-string">&quot;automatic-speech-recognition&quot;</span>, model=<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>, device=<span class="hljs-number">0</span>)
dataset = datasets.load_dataset(<span class="hljs-string">&quot;superb&quot;</span>, name=<span class="hljs-string">&quot;asr&quot;</span>, split=<span class="hljs-string">&quot;test&quot;</span>)

<span class="hljs-comment"># KeyDataset (only *pt*) will simply return the item in the dict returned by the dataset item</span>
<span class="hljs-comment"># as we&#x27;re not interested in the *target* part of the dataset. For sentence pair use KeyPairDataset</span>
<span class="hljs-keyword">for</span> out <span class="hljs-keyword">in</span> tqdm(pipe(KeyDataset(dataset, <span class="hljs-string">&quot;file&quot;</span>))):
    <span class="hljs-built_in">print</span>(out)
    <span class="hljs-comment"># {&quot;text&quot;: &quot;NUMBER TEN FRESH NELLY IS WAITING ON YOU GOOD NIGHT HUSBAND&quot;}</span>
    <span class="hljs-comment"># {&quot;text&quot;: ....}</span>
    <span class="hljs-comment"># ....</span>`,wrap:!1}}),Zn=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBcGlwZSUyMCUzRCUyMHBpcGVsaW5lKCUyMnRleHQtY2xhc3NpZmljYXRpb24lMjIpJTBBJTBBJTBBZGVmJTIwZGF0YSgpJTNBJTBBJTIwJTIwJTIwJTIwd2hpbGUlMjBUcnVlJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIzJTIwVGhpcyUyMGNvdWxkJTIwY29tZSUyMGZyb20lMjBhJTIwZGF0YXNldCUyQyUyMGElMjBkYXRhYmFzZSUyQyUyMGElMjBxdWV1ZSUyMG9yJTIwSFRUUCUyMHJlcXVlc3QlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjMlMjBpbiUyMGElMjBzZXJ2ZXIlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjMlMjBDYXZlYXQlM0ElMjBiZWNhdXNlJTIwdGhpcyUyMGlzJTIwaXRlcmF0aXZlJTJDJTIweW91JTIwY2Fubm90JTIwdXNlJTIwJTYwbnVtX3dvcmtlcnMlMjAlM0UlMjAxJTYwJTIwdmFyaWFibGUlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjMlMjB0byUyMHVzZSUyMG11bHRpcGxlJTIwdGhyZWFkcyUyMHRvJTIwcHJlcHJvY2VzcyUyMGRhdGEuJTIwWW91JTIwY2FuJTIwc3RpbGwlMjBoYXZlJTIwMSUyMHRocmVhZCUyMHRoYXQlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjMlMjBkb2VzJTIwdGhlJTIwcHJlcHJvY2Vzc2luZyUyMHdoaWxlJTIwdGhlJTIwbWFpbiUyMHJ1bnMlMjB0aGUlMjBiaWclMjBpbmZlcmVuY2UlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjB5aWVsZCUyMCUyMlRoaXMlMjBpcyUyMGElMjB0ZXN0JTIyJTBBJTBBJTBBZm9yJTIwb3V0JTIwaW4lMjBwaXBlKGRhdGEoKSklM0ElMEElMjAlMjAlMjAlMjBwcmludChvdXQpJTBBJTIwJTIwJTIwJTIwJTIzJTIwJTdCJTIydGV4dCUyMiUzQSUyMCUyMk5VTUJFUiUyMFRFTiUyMEZSRVNIJTIwTkVMTFklMjBJUyUyMFdBSVRJTkclMjBPTiUyMFlPVSUyMEdPT0QlMjBOSUdIVCUyMEhVU0JBTkQlMjIlN0QlMEElMjAlMjAlMjAlMjAlMjMlMjAlN0IlMjJ0ZXh0JTIyJTNBJTIwLi4uLiU3RCUwQSUyMCUyMCUyMCUyMCUyMyUyMC4uLi4=",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

pipe = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>)


<span class="hljs-keyword">def</span> <span class="hljs-title function_">data</span>():
    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:
        <span class="hljs-comment"># This could come from a dataset, a database, a queue or HTTP request</span>
        <span class="hljs-comment"># in a server</span>
        <span class="hljs-comment"># Caveat: because this is iterative, you cannot use \`num_workers &gt; 1\` variable</span>
        <span class="hljs-comment"># to use multiple threads to preprocess data. You can still have 1 thread that</span>
        <span class="hljs-comment"># does the preprocessing while the main runs the big inference</span>
        <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;This is a test&quot;</span>


<span class="hljs-keyword">for</span> out <span class="hljs-keyword">in</span> pipe(data()):
    <span class="hljs-built_in">print</span>(out)
    <span class="hljs-comment"># {&quot;text&quot;: &quot;NUMBER TEN FRESH NELLY IS WAITING ON YOU GOOD NIGHT HUSBAND&quot;}</span>
    <span class="hljs-comment"># {&quot;text&quot;: ....}</span>
    <span class="hljs-comment"># ....</span>`,wrap:!1}}),zn=new v({props:{name:"transformers.pipeline",anchor:"transformers.pipeline",parameters:[{name:"task",val:": str = None"},{name:"model",val:": Union = None"},{name:"config",val:": Union = None"},{name:"tokenizer",val:": Union = None"},{name:"feature_extractor",val:": Union = None"},{name:"image_processor",val:": Union = None"},{name:"framework",val:": Optional = None"},{name:"revision",val:": Optional = None"},{name:"use_fast",val:": bool = True"},{name:"token",val:": Union = None"},{name:"device",val:": Union = None"},{name:"device_map",val:" = None"},{name:"torch_dtype",val:" = None"},{name:"trust_remote_code",val:": Optional = None"},{name:"model_kwargs",val:": Dict = None"},{name:"pipeline_class",val:": Optional = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.pipeline.task",description:`<strong>task</strong> (<code>str</code>) &#x2014;
The task defining which pipeline will be returned. Currently accepted tasks are:</p>
<ul>
<li><code>&quot;audio-classification&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.AudioClassificationPipeline">AudioClassificationPipeline</a>.</li>
<li><code>&quot;automatic-speech-recognition&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.AutomaticSpeechRecognitionPipeline">AutomaticSpeechRecognitionPipeline</a>.</li>
<li><code>&quot;conversational&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.ConversationalPipeline">ConversationalPipeline</a>.</li>
<li><code>&quot;depth-estimation&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.DepthEstimationPipeline">DepthEstimationPipeline</a>.</li>
<li><code>&quot;document-question-answering&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.DocumentQuestionAnsweringPipeline">DocumentQuestionAnsweringPipeline</a>.</li>
<li><code>&quot;feature-extraction&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.FeatureExtractionPipeline">FeatureExtractionPipeline</a>.</li>
<li><code>&quot;fill-mask&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.FillMaskPipeline">FillMaskPipeline</a>:.</li>
<li><code>&quot;image-classification&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.ImageClassificationPipeline">ImageClassificationPipeline</a>.</li>
<li><code>&quot;image-feature-extraction&quot;</code>: will return an <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.ImageFeatureExtractionPipeline">ImageFeatureExtractionPipeline</a>.</li>
<li><code>&quot;image-segmentation&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.ImageSegmentationPipeline">ImageSegmentationPipeline</a>.</li>
<li><code>&quot;image-to-image&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.ImageToImagePipeline">ImageToImagePipeline</a>.</li>
<li><code>&quot;image-to-text&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.ImageToTextPipeline">ImageToTextPipeline</a>.</li>
<li><code>&quot;mask-generation&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.MaskGenerationPipeline">MaskGenerationPipeline</a>.</li>
<li><code>&quot;object-detection&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.ObjectDetectionPipeline">ObjectDetectionPipeline</a>.</li>
<li><code>&quot;question-answering&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.QuestionAnsweringPipeline">QuestionAnsweringPipeline</a>.</li>
<li><code>&quot;summarization&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.SummarizationPipeline">SummarizationPipeline</a>.</li>
<li><code>&quot;table-question-answering&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.TableQuestionAnsweringPipeline">TableQuestionAnsweringPipeline</a>.</li>
<li><code>&quot;text2text-generation&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.Text2TextGenerationPipeline">Text2TextGenerationPipeline</a>.</li>
<li><code>&quot;text-classification&quot;</code> (alias <code>&quot;sentiment-analysis&quot;</code> available): will return a
<a href="/docs/transformers/main/en/main_classes/pipelines#transformers.TextClassificationPipeline">TextClassificationPipeline</a>.</li>
<li><code>&quot;text-generation&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.TextGenerationPipeline">TextGenerationPipeline</a>:.</li>
<li><code>&quot;text-to-audio&quot;</code> (alias <code>&quot;text-to-speech&quot;</code> available): will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.TextToAudioPipeline">TextToAudioPipeline</a>:.</li>
<li><code>&quot;token-classification&quot;</code> (alias <code>&quot;ner&quot;</code> available): will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.TokenClassificationPipeline">TokenClassificationPipeline</a>.</li>
<li><code>&quot;translation&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.TranslationPipeline">TranslationPipeline</a>.</li>
<li><code>&quot;translation_xx_to_yy&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.TranslationPipeline">TranslationPipeline</a>.</li>
<li><code>&quot;video-classification&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.VideoClassificationPipeline">VideoClassificationPipeline</a>.</li>
<li><code>&quot;visual-question-answering&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.VisualQuestionAnsweringPipeline">VisualQuestionAnsweringPipeline</a>.</li>
<li><code>&quot;zero-shot-classification&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.ZeroShotClassificationPipeline">ZeroShotClassificationPipeline</a>.</li>
<li><code>&quot;zero-shot-image-classification&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.ZeroShotImageClassificationPipeline">ZeroShotImageClassificationPipeline</a>.</li>
<li><code>&quot;zero-shot-audio-classification&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.ZeroShotAudioClassificationPipeline">ZeroShotAudioClassificationPipeline</a>.</li>
<li><code>&quot;zero-shot-object-detection&quot;</code>: will return a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.ZeroShotObjectDetectionPipeline">ZeroShotObjectDetectionPipeline</a>.</li>
</ul>`,name:"task"},{anchor:"transformers.pipeline.model",description:`<strong>model</strong> (<code>str</code> or <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>, <em>optional</em>) &#x2014;
The model that will be used by the pipeline to make predictions. This can be a model identifier or an
actual instance of a pretrained model inheriting from <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> (for PyTorch) or
<a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> (for TensorFlow).</p>
<p>If not provided, the default for the <code>task</code> will be loaded.`,name:"model"},{anchor:"transformers.pipeline.config",description:`<strong>config</strong> (<code>str</code> or <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration that will be used by the pipeline to instantiate the model. This can be a model
identifier or an actual pretrained model configuration inheriting from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>.</p>
<p>If not provided, the default configuration file for the requested model will be used. That means that if
<code>model</code> is given, its default configuration will be used. However, if <code>model</code> is not supplied, this
<code>task</code>&#x2019;s default model&#x2019;s config is used instead.`,name:"config"},{anchor:"transformers.pipeline.tokenizer",description:`<strong>tokenizer</strong> (<code>str</code> or <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>, <em>optional</em>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This can be a model
identifier or an actual pretrained tokenizer inheriting from <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.</p>
<p>If not provided, the default tokenizer for the given <code>model</code> will be loaded (if it is a string). If <code>model</code>
is not specified or not a string, then the default tokenizer for <code>config</code> is loaded (if it is a string).
However, if <code>config</code> is also not given or not a string, then the default tokenizer for the given <code>task</code>
will be loaded.`,name:"tokenizer"},{anchor:"transformers.pipeline.feature_extractor",description:`<strong>feature_extractor</strong> (<code>str</code> or <code>PreTrainedFeatureExtractor</code>, <em>optional</em>) &#x2014;
The feature extractor that will be used by the pipeline to encode data for the model. This can be a model
identifier or an actual pretrained feature extractor inheriting from <code>PreTrainedFeatureExtractor</code>.</p>
<p>Feature extractors are used for non-NLP models, such as Speech or Vision models as well as multi-modal
models. Multi-modal models will also require a tokenizer to be passed.</p>
<p>If not provided, the default feature extractor for the given <code>model</code> will be loaded (if it is a string). If
<code>model</code> is not specified or not a string, then the default feature extractor for <code>config</code> is loaded (if it
is a string). However, if <code>config</code> is also not given or not a string, then the default feature extractor
for the given <code>task</code> will be loaded.`,name:"feature_extractor"},{anchor:"transformers.pipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.pipeline.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
When passing a task name or a string model identifier: The specific model version to use. It can be a
branch name, a tag name, or a commit id, since we use a git-based system for storing models and other
artifacts on huggingface.co, so <code>revision</code> can be any identifier allowed by git.`,name:"revision"},{anchor:"transformers.pipeline.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to use a Fast tokenizer if possible (a <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast">PreTrainedTokenizerFast</a>).`,name:"use_fast"},{anchor:"transformers.pipeline.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.pipeline.device",description:`<strong>device</strong> (<code>int</code> or <code>str</code> or <code>torch.device</code>) &#x2014;
Defines the device (<em>e.g.</em>, <code>&quot;cpu&quot;</code>, <code>&quot;cuda:1&quot;</code>, <code>&quot;mps&quot;</code>, or a GPU ordinal rank like <code>1</code>) on which this
pipeline will be allocated.`,name:"device"},{anchor:"transformers.pipeline.device_map",description:`<strong>device_map</strong> (<code>str</code> or <code>Dict[str, Union[int, str, torch.device]</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut). When <code>accelerate</code> library is present, set
<code>device_map=&quot;auto&quot;</code> to compute the most optimized <code>device_map</code> automatically (see
<a href="https://huggingface.co/docs/accelerate/main/en/package_reference/big_modeling#accelerate.cpu_offload" rel="nofollow">here</a>
for more information).</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>Do not use <code>device_map</code> AND <code>device</code> at the same time as they will conflict</p>

					</div>`,name:"device_map"},{anchor:"transformers.pipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>).`,name:"torch_dtype"},{anchor:"transformers.pipeline.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom code defined on the Hub in their own modeling, configuration,
tokenization or even pipeline files. This option should only be set to <code>True</code> for repositories you trust
and in which you have read the code, as it will execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.pipeline.model_kwargs",description:`<strong>model_kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
Additional dictionary of keyword arguments passed along to the model&#x2019;s <code>from_pretrained(..., **model_kwargs)</code> function.`,name:"model_kwargs"},{anchor:"transformers.pipeline.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
Additional keyword arguments passed along to the specific pipeline init (see the documentation for the
corresponding pipeline class for possible values).`,name:"kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/__init__.py#L562",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A suitable pipeline for the task.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/transformers/main/en/main_classes/pipelines#transformers.Pipeline"
>Pipeline</a></p>
`}}),Oe=new P({props:{anchor:"transformers.pipeline.example",$$slots:{default:[_w]},$$scope:{ctx:M}}}),Fn=new J({props:{title:"Pipeline batching",local:"pipeline-batching",headingTag:"h2"}}),Dn=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBZnJvbSUyMHRyYW5zZm9ybWVycy5waXBlbGluZXMucHRfdXRpbHMlMjBpbXBvcnQlMjBLZXlEYXRhc2V0JTBBaW1wb3J0JTIwZGF0YXNldHMlMEElMEFkYXRhc2V0JTIwJTNEJTIwZGF0YXNldHMubG9hZF9kYXRhc2V0KCUyMmltZGIlMjIlMkMlMjBuYW1lJTNEJTIycGxhaW5fdGV4dCUyMiUyQyUyMHNwbGl0JTNEJTIydW5zdXBlcnZpc2VkJTIyKSUwQXBpcGUlMjAlM0QlMjBwaXBlbGluZSglMjJ0ZXh0LWNsYXNzaWZpY2F0aW9uJTIyJTJDJTIwZGV2aWNlJTNEMCklMEFmb3IlMjBvdXQlMjBpbiUyMHBpcGUoS2V5RGF0YXNldChkYXRhc2V0JTJDJTIwJTIydGV4dCUyMiklMkMlMjBiYXRjaF9zaXplJTNEOCUyQyUyMHRydW5jYXRpb24lM0QlMjJvbmx5X2ZpcnN0JTIyKSUzQSUwQSUyMCUyMCUyMCUyMHByaW50KG91dCklMEElMjAlMjAlMjAlMjAlMjMlMjAlNUIlN0InbGFiZWwnJTNBJTIwJ1BPU0lUSVZFJyUyQyUyMCdzY29yZSclM0ElMjAwLjk5OTg3NDM1MzQwODgxMzUlN0QlNUQlMEElMjAlMjAlMjAlMjAlMjMlMjBFeGFjdGx5JTIwdGhlJTIwc2FtZSUyMG91dHB1dCUyMGFzJTIwYmVmb3JlJTJDJTIwYnV0JTIwdGhlJTIwY29udGVudCUyMGFyZSUyMHBhc3NlZCUwQSUyMCUyMCUyMCUyMCUyMyUyMGFzJTIwYmF0Y2hlcyUyMHRvJTIwdGhlJTIwbW9kZWw=",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-keyword">from</span> transformers.pipelines.pt_utils <span class="hljs-keyword">import</span> KeyDataset
<span class="hljs-keyword">import</span> datasets

dataset = datasets.load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>, name=<span class="hljs-string">&quot;plain_text&quot;</span>, split=<span class="hljs-string">&quot;unsupervised&quot;</span>)
pipe = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>, device=<span class="hljs-number">0</span>)
<span class="hljs-keyword">for</span> out <span class="hljs-keyword">in</span> pipe(KeyDataset(dataset, <span class="hljs-string">&quot;text&quot;</span>), batch_size=<span class="hljs-number">8</span>, truncation=<span class="hljs-string">&quot;only_first&quot;</span>):
    <span class="hljs-built_in">print</span>(out)
    <span class="hljs-comment"># [{&#x27;label&#x27;: &#x27;POSITIVE&#x27;, &#x27;score&#x27;: 0.9998743534088135}]</span>
    <span class="hljs-comment"># Exactly the same output as before, but the content are passed</span>
    <span class="hljs-comment"># as batches to the model</span>`,wrap:!1}}),Ee=new Zd({props:{warning:!0,$$slots:{default:[xw]},$$scope:{ctx:M}}}),Bn=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBZnJvbSUyMHRvcmNoLnV0aWxzLmRhdGElMjBpbXBvcnQlMjBEYXRhc2V0JTBBZnJvbSUyMHRxZG0uYXV0byUyMGltcG9ydCUyMHRxZG0lMEElMEFwaXBlJTIwJTNEJTIwcGlwZWxpbmUoJTIydGV4dC1jbGFzc2lmaWNhdGlvbiUyMiUyQyUyMGRldmljZSUzRDApJTBBJTBBJTBBY2xhc3MlMjBNeURhdGFzZXQoRGF0YXNldCklM0ElMEElMjAlMjAlMjAlMjBkZWYlMjBfX2xlbl9fKHNlbGYpJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwcmV0dXJuJTIwNTAwMCUwQSUwQSUyMCUyMCUyMCUyMGRlZiUyMF9fZ2V0aXRlbV9fKHNlbGYlMkMlMjBpKSUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHJldHVybiUyMCUyMlRoaXMlMjBpcyUyMGElMjB0ZXN0JTIyJTBBJTBBJTBBZGF0YXNldCUyMCUzRCUyME15RGF0YXNldCgpJTBBJTBBZm9yJTIwYmF0Y2hfc2l6ZSUyMGluJTIwJTVCMSUyQyUyMDglMkMlMjA2NCUyQyUyMDI1NiU1RCUzQSUwQSUyMCUyMCUyMCUyMHByaW50KCUyMi0lMjIlMjAqJTIwMzApJTBBJTIwJTIwJTIwJTIwcHJpbnQoZiUyMlN0cmVhbWluZyUyMGJhdGNoX3NpemUlM0QlN0JiYXRjaF9zaXplJTdEJTIyKSUwQSUyMCUyMCUyMCUyMGZvciUyMG91dCUyMGluJTIwdHFkbShwaXBlKGRhdGFzZXQlMkMlMjBiYXRjaF9zaXplJTNEYmF0Y2hfc2l6ZSklMkMlMjB0b3RhbCUzRGxlbihkYXRhc2V0KSklM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBwYXNz",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset
<span class="hljs-keyword">from</span> tqdm.auto <span class="hljs-keyword">import</span> tqdm

pipe = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>, device=<span class="hljs-number">0</span>)


<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):
        <span class="hljs-keyword">return</span> <span class="hljs-number">5000</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, i</span>):
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;This is a test&quot;</span>


dataset = MyDataset()

<span class="hljs-keyword">for</span> batch_size <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">64</span>, <span class="hljs-number">256</span>]:
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-&quot;</span> * <span class="hljs-number">30</span>)
    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Streaming batch_size=<span class="hljs-subst">{batch_size}</span>&quot;</span>)
    <span class="hljs-keyword">for</span> out <span class="hljs-keyword">in</span> tqdm(pipe(dataset, batch_size=batch_size), total=<span class="hljs-built_in">len</span>(dataset)):
        <span class="hljs-keyword">pass</span>`,wrap:!1}}),Nn=new j({props:{code:"JTIzJTIwT24lMjBHVFglMjA5NzAlMEEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0lMEFTdHJlYW1pbmclMjBubyUyMGJhdGNoaW5nJTBBMTAwJTI1JTdDJUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JTdDJTIwNTAwMCUyRjUwMDAlMjAlNUIwMCUzQTI2JTNDMDAlM0EwMCUyQyUyMDE4Ny41Mml0JTJGcyU1RCUwQS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSUwQVN0cmVhbWluZyUyMGJhdGNoX3NpemUlM0Q4JTBBMTAwJTI1JTdDJUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JUUyJTk2JTg4JTdDJTIwNTAwMCUyRjUwMDAlMjAlNUIwMCUzQTA0JTNDMDAlM0EwMCUyQyUyMDEyMDUuOTVpdCUyRnMlNUQlMEEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0lMEFTdHJlYW1pbmclMjBiYXRjaF9zaXplJTNENjQlMEExMDAlMjUlN0MlRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglN0MlMjA1MDAwJTJGNTAwMCUyMCU1QjAwJTNBMDIlM0MwMCUzQTAwJTJDJTIwMjQ3OC4yNGl0JTJGcyU1RCUwQS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSUwQVN0cmVhbWluZyUyMGJhdGNoX3NpemUlM0QyNTYlMEExMDAlMjUlN0MlRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglN0MlMjA1MDAwJTJGNTAwMCUyMCU1QjAwJTNBMDElM0MwMCUzQTAwJTJDJTIwMjU1NC40M2l0JTJGcyU1RCUwQShkaW1pbmlzaGluZyUyMHJldHVybnMlMkMlMjBzYXR1cmF0ZWQlMjB0aGUlMjBHUFUp",highlighted:`<span class="hljs-section"># On GTX 970
------------------------------</span>
Streaming no batching
100%|██████████████████████████████████████████████████████████████████████| 5000/5000 [00:26&lt;00:00, 187.52it/s]
<span class="hljs-code">------------------------------
Streaming batch_size=8
100%|█████████████████████████████████████████████████████████████████████| 5000/5000 [00:04&lt;00:00, 1205.95it/s]
------------------------------</span>
Streaming batch<span class="hljs-emphasis">_size=64
100%|█████████████████████████████████████████████████████████████████████| 5000/5000 [00:02&lt;00:00, 2478.24it/s]
------------------------------
Streaming batch_</span>size=256
100%|█████████████████████████████████████████████████████████████████████| 5000/5000 [00:01&lt;00:00, 2554.43it/s]
(diminishing returns, saturated the GPU)`,wrap:!1}}),Vn=new j({props:{code:"Y2xhc3MlMjBNeURhdGFzZXQoRGF0YXNldCklM0ElMEElMjAlMjAlMjAlMjBkZWYlMjBfX2xlbl9fKHNlbGYpJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwcmV0dXJuJTIwNTAwMCUwQSUwQSUyMCUyMCUyMCUyMGRlZiUyMF9fZ2V0aXRlbV9fKHNlbGYlMkMlMjBpKSUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGlmJTIwaSUyMCUyNSUyMDY0JTIwJTNEJTNEJTIwMCUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMG4lMjAlM0QlMjAxMDAlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBlbHNlJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwbiUyMCUzRCUyMDElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjByZXR1cm4lMjAlMjJUaGlzJTIwaXMlMjBhJTIwdGVzdCUyMiUyMColMjBu",highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):
        <span class="hljs-keyword">return</span> <span class="hljs-number">5000</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, i</span>):
        <span class="hljs-keyword">if</span> i % <span class="hljs-number">64</span> == <span class="hljs-number">0</span>:
            n = <span class="hljs-number">100</span>
        <span class="hljs-keyword">else</span>:
            n = <span class="hljs-number">1</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;This is a test&quot;</span> * n`,wrap:!1}}),Wn=new j({props:{code:"LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJTBBU3RyZWFtaW5nJTIwbm8lMjBiYXRjaGluZyUwQTEwMCUyNSU3QyVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCU3QyUyMDEwMDAlMkYxMDAwJTIwJTVCMDAlM0EwNSUzQzAwJTNBMDAlMkMlMjAxODMuNjlpdCUyRnMlNUQlMEEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0lMEFTdHJlYW1pbmclMjBiYXRjaF9zaXplJTNEOCUwQTEwMCUyNSU3QyVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCVFMiU5NiU4OCU3QyUyMDEwMDAlMkYxMDAwJTIwJTVCMDAlM0EwMyUzQzAwJTNBMDAlMkMlMjAyNjUuNzRpdCUyRnMlNUQlMEEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0lMEFTdHJlYW1pbmclMjBiYXRjaF9zaXplJTNENjQlMEExMDAlMjUlN0MlRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglRTIlOTYlODglN0MlMjAxMDAwJTJGMTAwMCUyMCU1QjAwJTNBMjYlM0MwMCUzQTAwJTJDJTIwMzcuODBpdCUyRnMlNUQlMEEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0lMEFTdHJlYW1pbmclMjBiYXRjaF9zaXplJTNEMjU2JTBBJTIwJTIwMCUyNSU3QyUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCU3QyUyMDAlMkYxMDAwJTIwJTVCMDAlM0EwMCUzQyUzRiUyQyUyMCUzRml0JTJGcyU1RCUwQVRyYWNlYmFjayUyMChtb3N0JTIwcmVjZW50JTIwY2FsbCUyMGxhc3QpJTNBJTBBJTIwJTIwRmlsZSUyMCUyMiUyRmhvbWUlMkZuaWNvbGFzJTJGc3JjJTJGdHJhbnNmb3JtZXJzJTJGdGVzdC5weSUyMiUyQyUyMGxpbmUlMjA0MiUyQyUyMGluJTIwJTNDbW9kdWxlJTNFJTBBJTIwJTIwJTIwJTIwZm9yJTIwb3V0JTIwaW4lMjB0cWRtKHBpcGUoZGF0YXNldCUyQyUyMGJhdGNoX3NpemUlM0QyNTYpJTJDJTIwdG90YWwlM0RsZW4oZGF0YXNldCkpJTNBJTBBLi4uLiUwQSUyMCUyMCUyMCUyMHElMjAlM0QlMjBxJTIwJTJGJTIwbWF0aC5zcXJ0KGRpbV9wZXJfaGVhZCklMjAlMjAlMjMlMjAoYnMlMkMlMjBuX2hlYWRzJTJDJTIwcV9sZW5ndGglMkMlMjBkaW1fcGVyX2hlYWQpJTBBUnVudGltZUVycm9yJTNBJTIwQ1VEQSUyMG91dCUyMG9mJTIwbWVtb3J5LiUyMFRyaWVkJTIwdG8lMjBhbGxvY2F0ZSUyMDM3Ni4wMCUyME1pQiUyMChHUFUlMjAwJTNCJTIwMy45NSUyMEdpQiUyMHRvdGFsJTIwY2FwYWNpdHklM0IlMjAxLjcyJTIwR2lCJTIwYWxyZWFkeSUyMGFsbG9jYXRlZCUzQiUyMDM1NC44OCUyME1pQiUyMGZyZWUlM0IlMjAyLjQ2JTIwR2lCJTIwcmVzZXJ2ZWQlMjBpbiUyMHRvdGFsJTIwYnklMjBQeVRvcmNoKQ==",highlighted:`<span class="hljs-comment">------------------------------</span>
Streaming no batching
<span class="hljs-number">100</span>%|█████████████████████████████████████████████████████████████████████| <span class="hljs-number">1000</span>/<span class="hljs-number">1000</span> [<span class="hljs-number">00</span>:<span class="hljs-number">05</span>&lt;<span class="hljs-number">00</span>:<span class="hljs-number">00</span>, <span class="hljs-number">183.69</span><span class="hljs-keyword">it</span>/s]
<span class="hljs-comment">------------------------------</span>
Streaming batch_size=<span class="hljs-number">8</span>
<span class="hljs-number">100</span>%|█████████████████████████████████████████████████████████████████████| <span class="hljs-number">1000</span>/<span class="hljs-number">1000</span> [<span class="hljs-number">00</span>:<span class="hljs-number">03</span>&lt;<span class="hljs-number">00</span>:<span class="hljs-number">00</span>, <span class="hljs-number">265.74</span><span class="hljs-keyword">it</span>/s]
<span class="hljs-comment">------------------------------</span>
Streaming batch_size=<span class="hljs-number">64</span>
<span class="hljs-number">100</span>%|██████████████████████████████████████████████████████████████████████| <span class="hljs-number">1000</span>/<span class="hljs-number">1000</span> [<span class="hljs-number">00</span>:<span class="hljs-number">26</span>&lt;<span class="hljs-number">00</span>:<span class="hljs-number">00</span>, <span class="hljs-number">37.80</span><span class="hljs-keyword">it</span>/s]
<span class="hljs-comment">------------------------------</span>
Streaming batch_size=<span class="hljs-number">256</span>
  <span class="hljs-number">0</span>%|                                                                                 | <span class="hljs-number">0</span>/<span class="hljs-number">1000</span> [<span class="hljs-number">00</span>:<span class="hljs-number">00</span><span class="hljs-meta">&lt;?</span>, ?<span class="hljs-keyword">it</span>/s]
Traceback (most recent call <span class="hljs-keyword">last</span>):
  File <span class="hljs-string">&quot;/home/nicolas/src/transformers/test.py&quot;</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">42</span>, <span class="hljs-keyword">in</span> &lt;module&gt;
    <span class="hljs-keyword">for</span> out <span class="hljs-keyword">in</span> tqdm(pipe(dataset, batch_size=<span class="hljs-number">256</span>), total=<span class="hljs-built_in">len</span>(dataset)):
....
    q = q / math.<span class="hljs-built_in">sqrt</span>(dim_per_head)  <span class="hljs-comment"># (bs, n_heads, q_length, dim_per_head)</span>
RuntimeError: CUDA out <span class="hljs-keyword">of</span> memory. Tried <span class="hljs-built_in">to</span> allocate <span class="hljs-number">376.00</span> MiB (GPU <span class="hljs-number">0</span>; <span class="hljs-number">3.95</span> GiB total capacity; <span class="hljs-number">1.72</span> GiB already allocated; <span class="hljs-number">354.88</span> MiB free; <span class="hljs-number">2.46</span> GiB reserved <span class="hljs-keyword">in</span> total <span class="hljs-keyword">by</span> PyTorch)`,wrap:!1}}),On=new J({props:{title:"Pipeline chunk batching",local:"pipeline-chunk-batching",headingTag:"h2"}}),Xn=new j({props:{code:"cHJlcHJvY2Vzc2VkJTIwJTNEJTIwcGlwZS5wcmVwcm9jZXNzKGlucHV0cyklMEFtb2RlbF9vdXRwdXRzJTIwJTNEJTIwcGlwZS5mb3J3YXJkKHByZXByb2Nlc3NlZCklMEFvdXRwdXRzJTIwJTNEJTIwcGlwZS5wb3N0cHJvY2Vzcyhtb2RlbF9vdXRwdXRzKQ==",highlighted:`preprocessed = pipe.preprocess(inputs)
model_outputs = pipe.forward(preprocessed)
outputs = pipe.postprocess(model_outputs)`,wrap:!1}}),es=new j({props:{code:"YWxsX21vZGVsX291dHB1dHMlMjAlM0QlMjAlNUIlNUQlMEFmb3IlMjBwcmVwcm9jZXNzZWQlMjBpbiUyMHBpcGUucHJlcHJvY2VzcyhpbnB1dHMpJTNBJTBBJTIwJTIwJTIwJTIwbW9kZWxfb3V0cHV0cyUyMCUzRCUyMHBpcGUuZm9yd2FyZChwcmVwcm9jZXNzZWQpJTBBJTIwJTIwJTIwJTIwYWxsX21vZGVsX291dHB1dHMuYXBwZW5kKG1vZGVsX291dHB1dHMpJTBBb3V0cHV0cyUyMCUzRCUyMHBpcGUucG9zdHByb2Nlc3MoYWxsX21vZGVsX291dHB1dHMp",highlighted:`all_model_outputs = []
<span class="hljs-keyword">for</span> preprocessed <span class="hljs-keyword">in</span> pipe.preprocess(inputs):
    model_outputs = pipe.forward(preprocessed)
    all_model_outputs.append(model_outputs)
outputs = pipe.postprocess(all_model_outputs)`,wrap:!1}}),ss=new J({props:{title:"Pipeline custom code",local:"pipeline-custom-code",headingTag:"h2"}}),ls=new j({props:{code:"Y2xhc3MlMjBNeVBpcGVsaW5lKFRleHRDbGFzc2lmaWNhdGlvblBpcGVsaW5lKSUzQSUwQSUyMCUyMCUyMCUyMGRlZiUyMHBvc3Rwcm9jZXNzKCklM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjMlMjBZb3VyJTIwY29kZSUyMGdvZXMlMjBoZXJlJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwc2NvcmVzJTIwJTNEJTIwc2NvcmVzJTIwKiUyMDEwMCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMyUyMEFuZCUyMGhlcmUlMEElMEElMEFteV9waXBlbGluZSUyMCUzRCUyME15UGlwZWxpbmUobW9kZWwlM0Rtb2RlbCUyQyUyMHRva2VuaXplciUzRHRva2VuaXplciUyQyUyMC4uLiklMEElMjMlMjBvciUyMGlmJTIweW91JTIwdXNlJTIwKnBpcGVsaW5lKiUyMGZ1bmN0aW9uJTJDJTIwdGhlbiUzQSUwQW15X3BpcGVsaW5lJTIwJTNEJTIwcGlwZWxpbmUobW9kZWwlM0QlMjJ4eHh4JTIyJTJDJTIwcGlwZWxpbmVfY2xhc3MlM0RNeVBpcGVsaW5lKQ==",highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPipeline</span>(<span class="hljs-title class_ inherited__">TextClassificationPipeline</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">postprocess</span>():
        <span class="hljs-comment"># Your code goes here</span>
        scores = scores * <span class="hljs-number">100</span>
        <span class="hljs-comment"># And here</span>


my_pipeline = MyPipeline(model=model, tokenizer=tokenizer, ...)
<span class="hljs-comment"># or if you use *pipeline* function, then:</span>
my_pipeline = pipeline(model=<span class="hljs-string">&quot;xxxx&quot;</span>, pipeline_class=MyPipeline)`,wrap:!1}}),ps=new J({props:{title:"Implementing a pipeline",local:"implementing-a-pipeline",headingTag:"h2"}}),ms=new J({props:{title:"Audio",local:"audio",headingTag:"h2"}}),fs=new J({props:{title:"AudioClassificationPipeline",local:"transformers.AudioClassificationPipeline",headingTag:"h3"}}),gs=new v({props:{name:"class transformers.AudioClassificationPipeline",anchor:"transformers.AudioClassificationPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AudioClassificationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.AudioClassificationPipeline.feature_extractor",description:`<strong>feature_extractor</strong> (<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.SequenceFeatureExtractor">SequenceFeatureExtractor</a>) &#x2014;
The feature extractor that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.SequenceFeatureExtractor">SequenceFeatureExtractor</a>.`,name:"feature_extractor"},{anchor:"transformers.AudioClassificationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.AudioClassificationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.AudioClassificationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.AudioClassificationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.AudioClassificationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.AudioClassificationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.AudioClassificationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.AudioClassificationPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.AudioClassificationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/audio_classification.py#L66"}}),Qe=new P({props:{anchor:"transformers.AudioClassificationPipeline.example",$$slots:{default:[Mw]},$$scope:{ctx:M}}}),us=new v({props:{name:"__call__",anchor:"transformers.AudioClassificationPipeline.__call__",parameters:[{name:"inputs",val:": Union"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AudioClassificationPipeline.__call__.inputs",description:`<strong>inputs</strong> (<code>np.ndarray</code> or <code>bytes</code> or <code>str</code> or <code>dict</code>) &#x2014;
The inputs is either :<ul>
<li><code>str</code> that is the filename of the audio file, the file will be read at the correct sampling rate
to get the waveform using <em>ffmpeg</em>. This requires <em>ffmpeg</em> to be installed on the system.</li>
<li><code>bytes</code> it is supposed to be the content of an audio file and is interpreted by <em>ffmpeg</em> in the
same way.</li>
<li>(<code>np.ndarray</code> of shape (n, ) of type <code>np.float32</code> or <code>np.float64</code>)
Raw audio at the correct sampling rate (no further check will be done)</li>
<li><code>dict</code> form can be used to pass raw audio sampled at arbitrary <code>sampling_rate</code> and let this
pipeline do the resampling. The dict must be either be in the format <code>{&quot;sampling_rate&quot;: int, &quot;raw&quot;: np.array}</code>, or <code>{&quot;sampling_rate&quot;: int, &quot;array&quot;: np.array}</code>, where the key <code>&quot;raw&quot;</code> or
<code>&quot;array&quot;</code> is used to denote the raw audio waveform.</li>
</ul>`,name:"inputs"},{anchor:"transformers.AudioClassificationPipeline.__call__.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to None) &#x2014;
The number of top labels that will be returned by the pipeline. If the provided number is <code>None</code> or
higher than the number of labels available in the model configuration, it will default to the number of
labels.`,name:"top_k"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/audio_classification.py#L103",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<ul>
<li><strong>label</strong> (<code>str</code>) — The label predicted.</li>
<li><strong>score</strong> (<code>float</code>) — The corresponding probability.</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A list of <code>dict</code> with the following keys</p>
`}}),Ts=new J({props:{title:"AutomaticSpeechRecognitionPipeline",local:"transformers.AutomaticSpeechRecognitionPipeline",headingTag:"h3"}}),bs=new v({props:{name:"class transformers.AutomaticSpeechRecognitionPipeline",anchor:"transformers.AutomaticSpeechRecognitionPipeline",parameters:[{name:"model",val:": PreTrainedModel"},{name:"feature_extractor",val:": Union = None"},{name:"tokenizer",val:": Optional = None"},{name:"decoder",val:": Union = None"},{name:"device",val:": Union = None"},{name:"torch_dtype",val:": Union = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutomaticSpeechRecognitionPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.AutomaticSpeechRecognitionPipeline.feature_extractor",description:`<strong>feature_extractor</strong> (<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.SequenceFeatureExtractor">SequenceFeatureExtractor</a>) &#x2014;
The feature extractor that will be used by the pipeline to encode waveform for the model.`,name:"feature_extractor"},{anchor:"transformers.AutomaticSpeechRecognitionPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.AutomaticSpeechRecognitionPipeline.decoder",description:`<strong>decoder</strong> (<code>pyctcdecode.BeamSearchDecoderCTC</code>, <em>optional</em>) &#x2014;
<a href="https://github.com/kensho-technologies/pyctcdecode/blob/2fd33dc37c4111417e08d89ccd23d28e9b308d19/pyctcdecode/decoder.py#L180" rel="nofollow">PyCTCDecode&#x2019;s
BeamSearchDecoderCTC</a>
can be passed for language model boosted decoding. See <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ProcessorWithLM">Wav2Vec2ProcessorWithLM</a> for more information.`,name:"decoder"},{anchor:"transformers.AutomaticSpeechRecognitionPipeline.chunk_length_s",description:`<strong>chunk_length_s</strong> (<code>float</code>, <em>optional</em>, defaults to 0) &#x2014;
The input length for in each chunk. If <code>chunk_length_s = 0</code> then chunking is disabled (default).</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>For more information on how to effectively use <code>chunk_length_s</code>, please have a look at the <a href="https://huggingface.co/blog/asr-chunking" rel="nofollow">ASR chunking
blog post</a>.</p>

					</div>`,name:"chunk_length_s"},{anchor:"transformers.AutomaticSpeechRecognitionPipeline.stride_length_s",description:`<strong>stride_length_s</strong> (<code>float</code>, <em>optional</em>, defaults to <code>chunk_length_s / 6</code>) &#x2014;
The length of stride on the left and right of each chunk. Used only with <code>chunk_length_s &gt; 0</code>. This enables
the model to <em>see</em> more context and infer letters better than without this context but the pipeline
discards the stride bits at the end to make the final reconstitution as perfect as possible.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>For more information on how to effectively use <code>stride_length_s</code>, please have a look at the <a href="https://huggingface.co/blog/asr-chunking" rel="nofollow">ASR chunking
blog post</a>.</p>

					</div>`,name:"stride_length_s"},{anchor:"transformers.AutomaticSpeechRecognitionPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed. If no framework is specified, will default to the one currently installed. If no framework is
specified and both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if
no model is provided.`,name:"framework"},{anchor:"transformers.AutomaticSpeechRecognitionPipeline.device",description:`<strong>device</strong> (Union[<code>int</code>, <code>torch.device</code>], <em>optional</em>) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to <code>None</code> will leverage CPU, a positive will run the
model on the associated CUDA device id.`,name:"device"},{anchor:"transformers.AutomaticSpeechRecognitionPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (Union[<code>int</code>, <code>torch.dtype</code>], <em>optional</em>) &#x2014;
The data-type (dtype) of the computation. Setting this to <code>None</code> will use float32 precision. Set to
<code>torch.float16</code> or <code>torch.bfloat16</code> to use half-precision in the respective dtypes.`,name:"torch_dtype"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/automatic_speech_recognition.py#L127"}}),Ke=new P({props:{anchor:"transformers.AutomaticSpeechRecognitionPipeline.example",$$slots:{default:[kw]},$$scope:{ctx:M}}}),ys=new v({props:{name:"__call__",anchor:"transformers.AutomaticSpeechRecognitionPipeline.__call__",parameters:[{name:"inputs",val:": Union"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutomaticSpeechRecognitionPipeline.__call__.inputs",description:`<strong>inputs</strong> (<code>np.ndarray</code> or <code>bytes</code> or <code>str</code> or <code>dict</code>) &#x2014;
The inputs is either :</p>
<ul>
<li><code>str</code> that is either the filename of a local audio file, or a public URL address to download the
audio file. The file will be read at the correct sampling rate to get the waveform using
<em>ffmpeg</em>. This requires <em>ffmpeg</em> to be installed on the system.</li>
<li><code>bytes</code> it is supposed to be the content of an audio file and is interpreted by <em>ffmpeg</em> in the
same way.</li>
<li>(<code>np.ndarray</code> of shape (n, ) of type <code>np.float32</code> or <code>np.float64</code>)
Raw audio at the correct sampling rate (no further check will be done)</li>
<li><code>dict</code> form can be used to pass raw audio sampled at arbitrary <code>sampling_rate</code> and let this
pipeline do the resampling. The dict must be in the format <code>{&quot;sampling_rate&quot;: int, &quot;raw&quot;: np.array}</code> with optionally a <code>&quot;stride&quot;: (left: int, right: int)</code> than can ask the pipeline to
treat the first <code>left</code> samples and last <code>right</code> samples to be ignored in decoding (but used at
inference to provide more context to the model). Only use <code>stride</code> with CTC models.</li>
</ul>`,name:"inputs"},{anchor:"transformers.AutomaticSpeechRecognitionPipeline.__call__.return_timestamps",description:`<strong>return_timestamps</strong> (<em>optional</em>, <code>str</code> or <code>bool</code>) &#x2014;
Only available for pure CTC models (Wav2Vec2, HuBERT, etc) and the Whisper model. Not available for
other sequence-to-sequence models.</p>
<p>For CTC models, timestamps can take one of two formats:</p>
<ul>
<li><code>&quot;char&quot;</code>: the pipeline will return timestamps along the text for every character in the text. For
instance, if you get <code>[{&quot;text&quot;: &quot;h&quot;, &quot;timestamp&quot;: (0.5, 0.6)}, {&quot;text&quot;: &quot;i&quot;, &quot;timestamp&quot;: (0.7, 0.9)}]</code>, then it means the model predicts that the letter &#x201C;h&#x201D; was spoken after <code>0.5</code> and before
<code>0.6</code> seconds.</li>
<li><code>&quot;word&quot;</code>: the pipeline will return timestamps along the text for every word in the text. For
instance, if you get <code>[{&quot;text&quot;: &quot;hi &quot;, &quot;timestamp&quot;: (0.5, 0.9)}, {&quot;text&quot;: &quot;there&quot;, &quot;timestamp&quot;: (1.0, 1.5)}]</code>, then it means the model predicts that the word &#x201C;hi&#x201D; was spoken after <code>0.5</code> and
before <code>0.9</code> seconds.</li>
</ul>
<p>For the Whisper model, timestamps can take one of two formats:</p>
<ul>
<li><code>&quot;word&quot;</code>: same as above for word-level CTC timestamps. Word-level timestamps are predicted
through the <em>dynamic-time warping (DTW)</em> algorithm, an approximation to word-level timestamps
by inspecting the cross-attention weights.</li>
<li><code>True</code>: the pipeline will return timestamps along the text for <em>segments</em> of words in the text.
For instance, if you get <code>[{&quot;text&quot;: &quot; Hi there!&quot;, &quot;timestamp&quot;: (0.5, 1.5)}]</code>, then it means the
model predicts that the segment &#x201C;Hi there!&#x201D; was spoken after <code>0.5</code> and before <code>1.5</code> seconds.
Note that a segment of text refers to a sequence of one or more words, rather than individual
words as with word-level timestamps.</li>
</ul>`,name:"return_timestamps"},{anchor:"transformers.AutomaticSpeechRecognitionPipeline.__call__.generate_kwargs",description:`<strong>generate_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
The dictionary of ad-hoc parametrization of <code>generate_config</code> to be used for the generation call. For a
complete overview of generate, check the <a href="https://huggingface.co/docs/transformers/en/main_classes/text_generation" rel="nofollow">following
guide</a>.`,name:"generate_kwargs"},{anchor:"transformers.AutomaticSpeechRecognitionPipeline.__call__.max_new_tokens",description:`<strong>max_new_tokens</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The maximum numbers of tokens to generate, ignoring the number of tokens in the prompt.`,name:"max_new_tokens"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/automatic_speech_recognition.py#L222",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A dictionary with the following keys:</p>
<ul>
<li><strong>text</strong> (<code>str</code>): The recognized text.</li>
<li><strong>chunks</strong> (<em>optional(, <code>List[Dict]</code>)
When using <code>return_timestamps</code>, the <code>chunks</code> will become a list containing all the various text
chunks identified by the model, </em>e.g.* <code>[&#123;"text": "hi ", "timestamp": (0.5, 0.9)&#125;, &#123;"text": "there", "timestamp": (1.0, 1.5)&#125;]</code>. The original full text can roughly be recovered by doing
<code>"".join(chunk["text"] for chunk in output["chunks"])</code>.</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>Dict</code></p>
`}}),ws=new J({props:{title:"TextToAudioPipeline",local:"transformers.TextToAudioPipeline",headingTag:"h3"}}),_s=new v({props:{name:"class transformers.TextToAudioPipeline",anchor:"transformers.TextToAudioPipeline",parameters:[{name:"*args",val:""},{name:"vocoder",val:" = None"},{name:"sampling_rate",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/text_to_audio.py#L27"}}),tt=new P({props:{anchor:"transformers.TextToAudioPipeline.example",$$slots:{default:[Uw]},$$scope:{ctx:M}}}),nt=new Zd({props:{$$slots:{default:[jw]},$$scope:{ctx:M}}}),xs=new v({props:{name:"__call__",anchor:"transformers.TextToAudioPipeline.__call__",parameters:[{name:"text_inputs",val:": Union"},{name:"**forward_params",val:""}],parametersDescription:[{anchor:"transformers.TextToAudioPipeline.__call__.text_inputs",description:`<strong>text_inputs</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
The text(s) to generate.`,name:"text_inputs"},{anchor:"transformers.TextToAudioPipeline.__call__.forward_params",description:`<strong>forward_params</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Parameters passed to the model generation/forward method. <code>forward_params</code> are always passed to the
underlying model.`,name:"forward_params"},{anchor:"transformers.TextToAudioPipeline.__call__.generate_kwargs",description:`<strong>generate_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
The dictionary of ad-hoc parametrization of <code>generate_config</code> to be used for the generation call. For a
complete overview of generate, check the <a href="https://huggingface.co/docs/transformers/en/main_classes/text_generation" rel="nofollow">following
guide</a>. <code>generate_kwargs</code> are
only passed to the underlying model if the latter is a generative model.`,name:"generate_kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/text_to_audio.py#L160",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The dictionaries have two keys:</p>
<ul>
<li><strong>audio</strong> (<code>np.ndarray</code> of shape <code>(nb_channels, audio_length)</code>) — The generated audio waveform.</li>
<li><strong>sampling_rate</strong> (<code>int</code>) — The sampling rate of the generated audio waveform.</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <code>dict</code> or a list of <code>dict</code></p>
`}}),Ms=new J({props:{title:"ZeroShotAudioClassificationPipeline",local:"transformers.ZeroShotAudioClassificationPipeline",headingTag:"h3"}}),ks=new v({props:{name:"class transformers.ZeroShotAudioClassificationPipeline",anchor:"transformers.ZeroShotAudioClassificationPipeline",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ZeroShotAudioClassificationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.ZeroShotAudioClassificationPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.ZeroShotAudioClassificationPipeline.feature_extractor",description:`<strong>feature_extractor</strong> (<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.SequenceFeatureExtractor">SequenceFeatureExtractor</a>) &#x2014;
The feature extractor that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.SequenceFeatureExtractor">SequenceFeatureExtractor</a>.`,name:"feature_extractor"},{anchor:"transformers.ZeroShotAudioClassificationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.ZeroShotAudioClassificationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.ZeroShotAudioClassificationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.ZeroShotAudioClassificationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.ZeroShotAudioClassificationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.ZeroShotAudioClassificationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.ZeroShotAudioClassificationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.ZeroShotAudioClassificationPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.ZeroShotAudioClassificationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/zero_shot_audio_classification.py#L32"}}),ot=new P({props:{anchor:"transformers.ZeroShotAudioClassificationPipeline.example",$$slots:{default:[Jw]},$$scope:{ctx:M}}}),Us=new v({props:{name:"__call__",anchor:"transformers.ZeroShotAudioClassificationPipeline.__call__",parameters:[{name:"audios",val:": Union"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ZeroShotAudioClassificationPipeline.__call__.audios",description:`<strong>audios</strong> (<code>str</code>, <code>List[str]</code>, <code>np.array</code> or <code>List[np.array]</code>) &#x2014;
The pipeline handles three types of inputs:<ul>
<li>A string containing a http link pointing to an audio</li>
<li>A string containing a local path to an audio</li>
<li>An audio loaded in numpy</li>
</ul>`,name:"audios"},{anchor:"transformers.ZeroShotAudioClassificationPipeline.__call__.candidate_labels",description:`<strong>candidate_labels</strong> (<code>List[str]</code>) &#x2014;
The candidate labels for this audio`,name:"candidate_labels"},{anchor:"transformers.ZeroShotAudioClassificationPipeline.__call__.hypothesis_template",description:`<strong>hypothesis_template</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;This is a sound of {}&quot;</code>) &#x2014;
The sentence used in cunjunction with <em>candidate_labels</em> to attempt the audio classification by
replacing the placeholder with the candidate_labels. Then likelihood is estimated by using
logits_per_audio`,name:"hypothesis_template"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/zero_shot_audio_classification.py#L64",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A list of dictionaries containing result, one dictionary per proposed label. The dictionaries contain the
following keys:</p>
<ul>
<li><strong>label</strong> (<code>str</code>) — The label identified by the model. It is one of the suggested <code>candidate_label</code>.</li>
<li><strong>score</strong> (<code>float</code>) — The score attributed by the model for that label (between 0 and 1).</li>
</ul>
`}}),vs=new J({props:{title:"Computer vision",local:"computer-vision",headingTag:"h2"}}),Js=new J({props:{title:"DepthEstimationPipeline",local:"transformers.DepthEstimationPipeline",headingTag:"h3"}}),$s=new v({props:{name:"class transformers.DepthEstimationPipeline",anchor:"transformers.DepthEstimationPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.DepthEstimationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.DepthEstimationPipeline.image_processor",description:`<strong>image_processor</strong> (<code>BaseImageProcessor</code>) &#x2014;
The image processor that will be used by the pipeline to encode data for the model. This object inherits from
<code>BaseImageProcessor</code>.`,name:"image_processor"},{anchor:"transformers.DepthEstimationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.DepthEstimationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.DepthEstimationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.DepthEstimationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.DepthEstimationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.DepthEstimationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.DepthEstimationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.DepthEstimationPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.DepthEstimationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/depth_estimation.py#L22"}}),rt=new P({props:{anchor:"transformers.DepthEstimationPipeline.example",$$slots:{default:[$w]},$$scope:{ctx:M}}}),Ps=new v({props:{name:"__call__",anchor:"transformers.DepthEstimationPipeline.__call__",parameters:[{name:"images",val:": Union"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.DepthEstimationPipeline.__call__.images",description:`<strong>images</strong> (<code>str</code>, <code>List[str]</code>, <code>PIL.Image</code> or <code>List[PIL.Image]</code>) &#x2014;
The pipeline handles three types of images:</p>
<ul>
<li>A string containing a http link pointing to an image</li>
<li>A string containing a local path to an image</li>
<li>An image loaded in PIL directly</li>
</ul>
<p>The pipeline accepts either a single image or a batch of images, which must then be passed as a string.
Images in a batch must all be in the same format: all as http links, all as local paths, or all as PIL
images.`,name:"images"},{anchor:"transformers.DepthEstimationPipeline.__call__.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>, defaults to None) &#x2014;
The maximum time in seconds to wait for fetching images from the web. If None, no timeout is set and
the call may block forever.`,name:"timeout"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/depth_estimation.py#L53",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A dictionary or a list of dictionaries containing result. If the input is a single image, will return a
dictionary, if the input is a list of several images, will return a list of dictionaries corresponding to
the images.</p>
<p>The dictionaries contain the following keys:</p>
<ul>
<li><strong>predicted_depth</strong> (<code>torch.Tensor</code>) — The predicted depth by the model as a <code>torch.Tensor</code>.</li>
<li><strong>depth</strong> (<code>PIL.Image</code>) — The predicted depth by the model as a <code>PIL.Image</code>.</li>
</ul>
`}}),Cs=new J({props:{title:"ImageClassificationPipeline",local:"transformers.ImageClassificationPipeline",headingTag:"h3"}}),Is=new v({props:{name:"class transformers.ImageClassificationPipeline",anchor:"transformers.ImageClassificationPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ImageClassificationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.ImageClassificationPipeline.image_processor",description:`<strong>image_processor</strong> (<code>BaseImageProcessor</code>) &#x2014;
The image processor that will be used by the pipeline to encode data for the model. This object inherits from
<code>BaseImageProcessor</code>.`,name:"image_processor"},{anchor:"transformers.ImageClassificationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.ImageClassificationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.ImageClassificationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.ImageClassificationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.ImageClassificationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.ImageClassificationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.ImageClassificationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.ImageClassificationPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.ImageClassificationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"},{anchor:"transformers.ImageClassificationPipeline.function_to_apply",description:`<strong>function_to_apply</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;default&quot;</code>) &#x2014;
The function to apply to the model outputs in order to retrieve the scores. Accepts four different values:</p>
<ul>
<li><code>&quot;default&quot;</code>: if the model has a single label, will apply the sigmoid function on the output. If the model
has several labels, will apply the softmax function on the output.</li>
<li><code>&quot;sigmoid&quot;</code>: Applies the sigmoid function on the output.</li>
<li><code>&quot;softmax&quot;</code>: Applies the softmax function on the output.</li>
<li><code>&quot;none&quot;</code>: Does not apply any function on the output.</li>
</ul>`,name:"function_to_apply"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/image_classification.py#L50"}}),lt=new P({props:{anchor:"transformers.ImageClassificationPipeline.example",$$slots:{default:[Pw]},$$scope:{ctx:M}}}),qs=new v({props:{name:"__call__",anchor:"transformers.ImageClassificationPipeline.__call__",parameters:[{name:"images",val:": Union"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ImageClassificationPipeline.__call__.images",description:`<strong>images</strong> (<code>str</code>, <code>List[str]</code>, <code>PIL.Image</code> or <code>List[PIL.Image]</code>) &#x2014;
The pipeline handles three types of images:</p>
<ul>
<li>A string containing a http link pointing to an image</li>
<li>A string containing a local path to an image</li>
<li>An image loaded in PIL directly</li>
</ul>
<p>The pipeline accepts either a single image or a batch of images, which must then be passed as a string.
Images in a batch must all be in the same format: all as http links, all as local paths, or all as PIL
images.`,name:"images"},{anchor:"transformers.ImageClassificationPipeline.__call__.function_to_apply",description:`<strong>function_to_apply</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;default&quot;</code>) &#x2014;
The function to apply to the model outputs in order to retrieve the scores. Accepts four different
values:</p>
<p>If this argument is not specified, then it will apply the following functions according to the number
of labels:</p>
<ul>
<li>If the model has a single label, will apply the sigmoid function on the output.</li>
<li>If the model has several labels, will apply the softmax function on the output.</li>
</ul>
<p>Possible values are:</p>
<ul>
<li><code>&quot;sigmoid&quot;</code>: Applies the sigmoid function on the output.</li>
<li><code>&quot;softmax&quot;</code>: Applies the softmax function on the output.</li>
<li><code>&quot;none&quot;</code>: Does not apply any function on the output.</li>
</ul>`,name:"function_to_apply"},{anchor:"transformers.ImageClassificationPipeline.__call__.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 5) &#x2014;
The number of top labels that will be returned by the pipeline. If the provided number is higher than
the number of labels available in the model configuration, it will default to the number of labels.`,name:"top_k"},{anchor:"transformers.ImageClassificationPipeline.__call__.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>, defaults to None) &#x2014;
The maximum time in seconds to wait for fetching images from the web. If None, no timeout is set and
the call may block forever.`,name:"timeout"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/image_classification.py#L110",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A dictionary or a list of dictionaries containing result. If the input is a single image, will return a
dictionary, if the input is a list of several images, will return a list of dictionaries corresponding to
the images.</p>
<p>The dictionaries contain the following keys:</p>
<ul>
<li><strong>label</strong> (<code>str</code>) — The label identified by the model.</li>
<li><strong>score</strong> (<code>int</code>) — The score attributed by the model for that label.</li>
</ul>
`}}),Gs=new J({props:{title:"ImageSegmentationPipeline",local:"transformers.ImageSegmentationPipeline",headingTag:"h3"}}),Zs=new v({props:{name:"class transformers.ImageSegmentationPipeline",anchor:"transformers.ImageSegmentationPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ImageSegmentationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.ImageSegmentationPipeline.image_processor",description:`<strong>image_processor</strong> (<code>BaseImageProcessor</code>) &#x2014;
The image processor that will be used by the pipeline to encode data for the model. This object inherits from
<code>BaseImageProcessor</code>.`,name:"image_processor"},{anchor:"transformers.ImageSegmentationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.ImageSegmentationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.ImageSegmentationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.ImageSegmentationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.ImageSegmentationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.ImageSegmentationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.ImageSegmentationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.ImageSegmentationPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.ImageSegmentationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/image_segmentation.py#L30"}}),pt=new P({props:{anchor:"transformers.ImageSegmentationPipeline.example",$$slots:{default:[Cw]},$$scope:{ctx:M}}}),zs=new v({props:{name:"__call__",anchor:"transformers.ImageSegmentationPipeline.__call__",parameters:[{name:"images",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ImageSegmentationPipeline.__call__.images",description:`<strong>images</strong> (<code>str</code>, <code>List[str]</code>, <code>PIL.Image</code> or <code>List[PIL.Image]</code>) &#x2014;
The pipeline handles three types of images:</p>
<ul>
<li>A string containing an HTTP(S) link pointing to an image</li>
<li>A string containing a local path to an image</li>
<li>An image loaded in PIL directly</li>
</ul>
<p>The pipeline accepts either a single image or a batch of images. Images in a batch must all be in the
same format: all as HTTP(S) links, all as local paths, or all as PIL images.`,name:"images"},{anchor:"transformers.ImageSegmentationPipeline.__call__.subtask",description:`<strong>subtask</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Segmentation task to be performed, choose [<code>semantic</code>, <code>instance</code> and <code>panoptic</code>] depending on model
capabilities. If not set, the pipeline will attempt tp resolve in the following order:
<code>panoptic</code>, <code>instance</code>, <code>semantic</code>.`,name:"subtask"},{anchor:"transformers.ImageSegmentationPipeline.__call__.threshold",description:`<strong>threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.9) &#x2014;
Probability threshold to filter out predicted masks.`,name:"threshold"},{anchor:"transformers.ImageSegmentationPipeline.__call__.mask_threshold",description:`<strong>mask_threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.5) &#x2014;
Threshold to use when turning the predicted masks into binary values.`,name:"mask_threshold"},{anchor:"transformers.ImageSegmentationPipeline.__call__.overlap_mask_area_threshold",description:`<strong>overlap_mask_area_threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.5) &#x2014;
Mask overlap threshold to eliminate small, disconnected segments.`,name:"overlap_mask_area_threshold"},{anchor:"transformers.ImageSegmentationPipeline.__call__.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>, defaults to None) &#x2014;
The maximum time in seconds to wait for fetching images from the web. If None, no timeout is set and
the call may block forever.`,name:"timeout"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/image_segmentation.py#L97",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A dictionary or a list of dictionaries containing the result. If the input is a single image, will return a
list of dictionaries, if the input is a list of several images, will return a list of list of dictionaries
corresponding to each image.</p>
<p>The dictionaries contain the mask, label and score (where applicable) of each detected object and contains
the following keys:</p>
<ul>
<li><strong>label</strong> (<code>str</code>) — The class label identified by the model.</li>
<li><strong>mask</strong> (<code>PIL.Image</code>) — A binary mask of the detected object as a Pil Image of shape (width, height) of
the original image. Returns a mask filled with zeros if no object is found.</li>
<li><strong>score</strong> (<em>optional</em> <code>float</code>) — Optionally, when the model is capable of estimating a confidence of the
“object” described by the label and the mask.</li>
</ul>
`}}),Fs=new J({props:{title:"ImageToImagePipeline",local:"transformers.ImageToImagePipeline",headingTag:"h3"}}),Rs=new v({props:{name:"class transformers.ImageToImagePipeline",anchor:"transformers.ImageToImagePipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ImageToImagePipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.ImageToImagePipeline.image_processor",description:`<strong>image_processor</strong> (<code>BaseImageProcessor</code>) &#x2014;
The image processor that will be used by the pipeline to encode data for the model. This object inherits from
<code>BaseImageProcessor</code>.`,name:"image_processor"},{anchor:"transformers.ImageToImagePipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.ImageToImagePipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.ImageToImagePipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.ImageToImagePipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.ImageToImagePipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.ImageToImagePipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.ImageToImagePipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.ImageToImagePipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.ImageToImagePipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/image_to_image.py#L39"}}),mt=new P({props:{anchor:"transformers.ImageToImagePipeline.example",$$slots:{default:[Iw]},$$scope:{ctx:M}}}),Ds=new v({props:{name:"__call__",anchor:"transformers.ImageToImagePipeline.__call__",parameters:[{name:"images",val:": Union"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ImageToImagePipeline.__call__.images",description:`<strong>images</strong> (<code>str</code>, <code>List[str]</code>, <code>PIL.Image</code> or <code>List[PIL.Image]</code>) &#x2014;
The pipeline handles three types of images:</p>
<ul>
<li>A string containing a http link pointing to an image</li>
<li>A string containing a local path to an image</li>
<li>An image loaded in PIL directly</li>
</ul>
<p>The pipeline accepts either a single image or a batch of images, which must then be passed as a string.
Images in a batch must all be in the same format: all as http links, all as local paths, or all as PIL
images.`,name:"images"},{anchor:"transformers.ImageToImagePipeline.__call__.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>, defaults to None) &#x2014;
The maximum time in seconds to wait for fetching images from the web. If None, no timeout is used and
the call may block forever.`,name:"timeout"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/image_to_image.py#L87",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>An image (Image.Image) or a list of images (List[“Image.Image”]) containing result(s). If the input is a
single image, the return will be also a single image, if the input is a list of several images, it will
return a list of transformed images.</p>
`}}),Bs=new J({props:{title:"ObjectDetectionPipeline",local:"transformers.ObjectDetectionPipeline",headingTag:"h3"}}),Ns=new v({props:{name:"class transformers.ObjectDetectionPipeline",anchor:"transformers.ObjectDetectionPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ObjectDetectionPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.ObjectDetectionPipeline.image_processor",description:`<strong>image_processor</strong> (<code>BaseImageProcessor</code>) &#x2014;
The image processor that will be used by the pipeline to encode data for the model. This object inherits from
<code>BaseImageProcessor</code>.`,name:"image_processor"},{anchor:"transformers.ObjectDetectionPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.ObjectDetectionPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.ObjectDetectionPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.ObjectDetectionPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.ObjectDetectionPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.ObjectDetectionPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.ObjectDetectionPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.ObjectDetectionPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.ObjectDetectionPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/object_detection.py#L26"}}),ft=new P({props:{anchor:"transformers.ObjectDetectionPipeline.example",$$slots:{default:[qw]},$$scope:{ctx:M}}}),As=new v({props:{name:"__call__",anchor:"transformers.ObjectDetectionPipeline.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ObjectDetectionPipeline.__call__.images",description:`<strong>images</strong> (<code>str</code>, <code>List[str]</code>, <code>PIL.Image</code> or <code>List[PIL.Image]</code>) &#x2014;
The pipeline handles three types of images:</p>
<ul>
<li>A string containing an HTTP(S) link pointing to an image</li>
<li>A string containing a local path to an image</li>
<li>An image loaded in PIL directly</li>
</ul>
<p>The pipeline accepts either a single image or a batch of images. Images in a batch must all be in the
same format: all as HTTP(S) links, all as local paths, or all as PIL images.`,name:"images"},{anchor:"transformers.ObjectDetectionPipeline.__call__.threshold",description:`<strong>threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.9) &#x2014;
The probability necessary to make a prediction.`,name:"threshold"},{anchor:"transformers.ObjectDetectionPipeline.__call__.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>, defaults to None) &#x2014;
The maximum time in seconds to wait for fetching images from the web. If None, no timeout is set and
the call may block forever.`,name:"timeout"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/object_detection.py#L72",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A list of dictionaries or a list of list of dictionaries containing the result. If the input is a single
image, will return a list of dictionaries, if the input is a list of several images, will return a list of
list of dictionaries corresponding to each image.</p>
<p>The dictionaries contain the following keys:</p>
<ul>
<li><strong>label</strong> (<code>str</code>) — The class label identified by the model.</li>
<li><strong>score</strong> (<code>float</code>) — The score attributed by the model for that label.</li>
<li><strong>box</strong> (<code>List[Dict[str, int]]</code>) — The bounding box of detected object in image’s original size.</li>
</ul>
`}}),Vs=new J({props:{title:"VideoClassificationPipeline",local:"transformers.VideoClassificationPipeline",headingTag:"h3"}}),Ss=new v({props:{name:"class transformers.VideoClassificationPipeline",anchor:"transformers.VideoClassificationPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.VideoClassificationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.VideoClassificationPipeline.image_processor",description:`<strong>image_processor</strong> (<code>BaseImageProcessor</code>) &#x2014;
The image processor that will be used by the pipeline to encode data for the model. This object inherits from
<code>BaseImageProcessor</code>.`,name:"image_processor"},{anchor:"transformers.VideoClassificationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.VideoClassificationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.VideoClassificationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.VideoClassificationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.VideoClassificationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.VideoClassificationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.VideoClassificationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.VideoClassificationPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.VideoClassificationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/video_classification.py#L21"}}),Ws=new v({props:{name:"__call__",anchor:"transformers.VideoClassificationPipeline.__call__",parameters:[{name:"videos",val:": Union"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.VideoClassificationPipeline.__call__.videos",description:`<strong>videos</strong> (<code>str</code>, <code>List[str]</code>) &#x2014;
The pipeline handles three types of videos:</p>
<ul>
<li>A string containing a http link pointing to a video</li>
<li>A string containing a local path to a video</li>
</ul>
<p>The pipeline accepts either a single video or a batch of videos, which must then be passed as a string.
Videos in a batch must all be in the same format: all as http links or all as local paths.`,name:"videos"},{anchor:"transformers.VideoClassificationPipeline.__call__.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 5) &#x2014;
The number of top labels that will be returned by the pipeline. If the provided number is higher than
the number of labels available in the model configuration, it will default to the number of labels.`,name:"top_k"},{anchor:"transformers.VideoClassificationPipeline.__call__.num_frames",description:`<strong>num_frames</strong> (<code>int</code>, <em>optional</em>, defaults to <code>self.model.config.num_frames</code>) &#x2014;
The number of frames sampled from the video to run the classification on. If not provided, will default
to the number of frames specified in the model configuration.`,name:"num_frames"},{anchor:"transformers.VideoClassificationPipeline.__call__.frame_sampling_rate",description:`<strong>frame_sampling_rate</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The sampling rate used to select frames from the video. If not provided, will default to 1, i.e. every
frame will be used.`,name:"frame_sampling_rate"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/video_classification.py#L51",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A dictionary or a list of dictionaries containing result. If the input is a single video, will return a
dictionary, if the input is a list of several videos, will return a list of dictionaries corresponding to
the videos.</p>
<p>The dictionaries contain the following keys:</p>
<ul>
<li><strong>label</strong> (<code>str</code>) — The label identified by the model.</li>
<li><strong>score</strong> (<code>int</code>) — The score attributed by the model for that label.</li>
</ul>
`}}),Ls=new J({props:{title:"ZeroShotImageClassificationPipeline",local:"transformers.ZeroShotImageClassificationPipeline",headingTag:"h3"}}),Hs=new v({props:{name:"class transformers.ZeroShotImageClassificationPipeline",anchor:"transformers.ZeroShotImageClassificationPipeline",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ZeroShotImageClassificationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.ZeroShotImageClassificationPipeline.image_processor",description:`<strong>image_processor</strong> (<code>BaseImageProcessor</code>) &#x2014;
The image processor that will be used by the pipeline to encode data for the model. This object inherits from
<code>BaseImageProcessor</code>.`,name:"image_processor"},{anchor:"transformers.ZeroShotImageClassificationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.ZeroShotImageClassificationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.ZeroShotImageClassificationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.ZeroShotImageClassificationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.ZeroShotImageClassificationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.ZeroShotImageClassificationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.ZeroShotImageClassificationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.ZeroShotImageClassificationPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.ZeroShotImageClassificationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/zero_shot_image_classification.py#L32"}}),Tt=new P({props:{anchor:"transformers.ZeroShotImageClassificationPipeline.example",$$slots:{default:[Gw]},$$scope:{ctx:M}}}),Ys=new v({props:{name:"__call__",anchor:"transformers.ZeroShotImageClassificationPipeline.__call__",parameters:[{name:"images",val:": Union"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ZeroShotImageClassificationPipeline.__call__.images",description:`<strong>images</strong> (<code>str</code>, <code>List[str]</code>, <code>PIL.Image</code> or <code>List[PIL.Image]</code>) &#x2014;
The pipeline handles three types of images:</p>
<ul>
<li>A string containing a http link pointing to an image</li>
<li>A string containing a local path to an image</li>
<li>An image loaded in PIL directly</li>
</ul>`,name:"images"},{anchor:"transformers.ZeroShotImageClassificationPipeline.__call__.candidate_labels",description:`<strong>candidate_labels</strong> (<code>List[str]</code>) &#x2014;
The candidate labels for this image`,name:"candidate_labels"},{anchor:"transformers.ZeroShotImageClassificationPipeline.__call__.hypothesis_template",description:`<strong>hypothesis_template</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;This is a photo of {}&quot;</code>) &#x2014;
The sentence used in cunjunction with <em>candidate_labels</em> to attempt the image classification by
replacing the placeholder with the candidate_labels. Then likelihood is estimated by using
logits_per_image`,name:"hypothesis_template"},{anchor:"transformers.ZeroShotImageClassificationPipeline.__call__.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>, defaults to None) &#x2014;
The maximum time in seconds to wait for fetching images from the web. If None, no timeout is set and
the call may block forever.`,name:"timeout"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/zero_shot_image_classification.py#L76",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A list of dictionaries containing result, one dictionary per proposed label. The dictionaries contain the
following keys:</p>
<ul>
<li><strong>label</strong> (<code>str</code>) — The label identified by the model. It is one of the suggested <code>candidate_label</code>.</li>
<li><strong>score</strong> (<code>float</code>) — The score attributed by the model for that label (between 0 and 1).</li>
</ul>
`}}),Os=new J({props:{title:"ZeroShotObjectDetectionPipeline",local:"transformers.ZeroShotObjectDetectionPipeline",headingTag:"h3"}}),Es=new v({props:{name:"class transformers.ZeroShotObjectDetectionPipeline",anchor:"transformers.ZeroShotObjectDetectionPipeline",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ZeroShotObjectDetectionPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.ZeroShotObjectDetectionPipeline.image_processor",description:`<strong>image_processor</strong> (<code>BaseImageProcessor</code>) &#x2014;
The image processor that will be used by the pipeline to encode data for the model. This object inherits from
<code>BaseImageProcessor</code>.`,name:"image_processor"},{anchor:"transformers.ZeroShotObjectDetectionPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.ZeroShotObjectDetectionPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.ZeroShotObjectDetectionPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.ZeroShotObjectDetectionPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.ZeroShotObjectDetectionPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.ZeroShotObjectDetectionPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.ZeroShotObjectDetectionPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.ZeroShotObjectDetectionPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.ZeroShotObjectDetectionPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/zero_shot_object_detection.py#L22"}}),yt=new P({props:{anchor:"transformers.ZeroShotObjectDetectionPipeline.example",$$slots:{default:[Zw]},$$scope:{ctx:M}}}),Qs=new v({props:{name:"__call__",anchor:"transformers.ZeroShotObjectDetectionPipeline.__call__",parameters:[{name:"image",val:": Union"},{name:"candidate_labels",val:": Union = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ZeroShotObjectDetectionPipeline.__call__.image",description:`<strong>image</strong> (<code>str</code>, <code>PIL.Image</code> or <code>List[Dict[str, Any]]</code>) &#x2014;
The pipeline handles three types of images:</p>
<ul>
<li>A string containing an http url pointing to an image</li>
<li>A string containing a local path to an image</li>
<li>An image loaded in PIL directly</li>
</ul>
<p>You can use this parameter to send directly a list of images, or a dataset or a generator like so:`,name:"image"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/zero_shot_object_detection.py#L65",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A list of lists containing prediction results, one list per input image. Each list contains dictionaries
with the following keys:</p>
<ul>
<li><strong>label</strong> (<code>str</code>) — Text query corresponding to the found object.</li>
<li><strong>score</strong> (<code>float</code>) — Score corresponding to the object (between 0 and 1).</li>
<li><strong>box</strong> (<code>Dict[str,int]</code>) — Bounding box of the detected object in image’s original size. It is a
dictionary with <code>x_min</code>, <code>x_max</code>, <code>y_min</code>, <code>y_max</code> keys.</li>
</ul>
`}}),Xs=new J({props:{title:"Natural Language Processing",local:"natural-language-processing",headingTag:"h2"}}),eo=new J({props:{title:"ConversationalPipeline",local:"transformers.Conversation",headingTag:"h3"}}),to=new v({props:{name:"class transformers.Conversation",anchor:"transformers.Conversation",parameters:[{name:"messages",val:": Union = None"},{name:"conversation_id",val:": UUID = None"},{name:"**deprecated_kwargs",val:""}],parametersDescription:[{anchor:"transformers.Conversation.messages",description:`<strong>messages</strong> (Union[str, List[Dict[str, str]]], <em>optional</em>) &#x2014;
The initial messages to start the conversation, either a string, or a list of dicts containing &#x201C;role&#x201D; and
&#x201C;content&#x201D; keys. If a string is passed, it is interpreted as a single message with the &#x201C;user&#x201D; role.`,name:"messages"},{anchor:"transformers.Conversation.conversation_id",description:`<strong>conversation_id</strong> (<code>uuid.UUID</code>, <em>optional</em>) &#x2014;
Unique identifier for the conversation. If not provided, a random UUID4 id will be assigned to the
conversation.`,name:"conversation_id"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/conversational.py#L19"}}),_t=new P({props:{anchor:"transformers.Conversation.example",$$slots:{default:[zw]},$$scope:{ctx:M}}}),no=new v({props:{name:"add_user_input",anchor:"transformers.Conversation.add_user_input",parameters:[{name:"text",val:": str"},{name:"overwrite",val:": bool = False"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/conversational.py#L90"}}),so=new v({props:{name:"append_response",anchor:"transformers.Conversation.append_response",parameters:[{name:"response",val:": str"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/conversational.py#L111"}}),oo=new v({props:{name:"mark_processed",anchor:"transformers.Conversation.mark_processed",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/conversational.py#L117"}}),ao=new v({props:{name:"class transformers.ConversationalPipeline",anchor:"transformers.ConversationalPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ConversationalPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.ConversationalPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.ConversationalPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.ConversationalPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.ConversationalPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.ConversationalPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.ConversationalPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.ConversationalPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.ConversationalPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.ConversationalPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.ConversationalPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"},{anchor:"transformers.ConversationalPipeline.min_length_for_response",description:`<strong>min_length_for_response</strong> (<code>int</code>, <em>optional</em>, defaults to 32) &#x2014;
The minimum length (in number of tokens) for a response.`,name:"min_length_for_response"},{anchor:"transformers.ConversationalPipeline.minimum_tokens",description:`<strong>minimum_tokens</strong> (<code>int</code>, <em>optional</em>, defaults to 10) &#x2014;
The minimum length of tokens to leave for a response.`,name:"minimum_tokens"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/conversational.py#L195"}}),Ut=new P({props:{anchor:"transformers.ConversationalPipeline.example",$$slots:{default:[Fw]},$$scope:{ctx:M}}}),ro=new v({props:{name:"__call__",anchor:"transformers.ConversationalPipeline.__call__",parameters:[{name:"conversations",val:": Union"},{name:"num_workers",val:" = 0"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ConversationalPipeline.__call__.conversations",description:`<strong>conversations</strong> (a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.Conversation">Conversation</a> or a list of <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.Conversation">Conversation</a>) &#x2014;
Conversation to generate responses for. Inputs can also be passed as a list of dictionaries with <code>role</code>
and <code>content</code> keys - in this case, they will be converted to <code>Conversation</code> objects automatically.
Multiple conversations in either format may be passed as a list.`,name:"conversations"},{anchor:"transformers.ConversationalPipeline.__call__.clean_up_tokenization_spaces",description:`<strong>clean_up_tokenization_spaces</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clean up the potential extra spaces in the text output.
generate_kwargs &#x2014;
Additional keyword arguments to pass along to the generate method of the model (see the generate method
corresponding to your framework <a href="./model#generative-models">here</a>).`,name:"clean_up_tokenization_spaces"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/conversational.py#L266",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Conversation(s) with updated generated responses for those
containing a new user input.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/transformers/main/en/main_classes/pipelines#transformers.Conversation"
>Conversation</a> or a list of <a
  href="/docs/transformers/main/en/main_classes/pipelines#transformers.Conversation"
>Conversation</a></p>
`}}),io=new J({props:{title:"FillMaskPipeline",local:"transformers.FillMaskPipeline",headingTag:"h3"}}),lo=new v({props:{name:"class transformers.FillMaskPipeline",anchor:"transformers.FillMaskPipeline",parameters:[{name:"model",val:": Union"},{name:"tokenizer",val:": Optional = None"},{name:"feature_extractor",val:": Optional = None"},{name:"image_processor",val:": Optional = None"},{name:"modelcard",val:": Optional = None"},{name:"framework",val:": Optional = None"},{name:"task",val:": str = ''"},{name:"args_parser",val:": ArgumentHandler = None"},{name:"device",val:": Union = None"},{name:"torch_dtype",val:": Union = None"},{name:"binary_output",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FillMaskPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.FillMaskPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.FillMaskPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.FillMaskPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.FillMaskPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.FillMaskPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.FillMaskPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.FillMaskPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.FillMaskPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.FillMaskPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.FillMaskPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"},{anchor:"transformers.FillMaskPipeline.top_k",description:`<strong>top_k</strong> (<code>int</code>, defaults to 5) &#x2014;
The number of predictions to return.`,name:"top_k"},{anchor:"transformers.FillMaskPipeline.targets",description:`<strong>targets</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>) &#x2014;
When passed, the model will limit the scores to the passed targets instead of looking up in the whole
vocab. If the provided targets are not in the model vocab, they will be tokenized and the first resulting
token will be used (with a warning, and that might be slower).`,name:"targets"},{anchor:"transformers.FillMaskPipeline.tokenizer_kwargs",description:`<strong>tokenizer_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Additional dictionary of keyword arguments passed along to the tokenizer.`,name:"tokenizer_kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/fill_mask.py#L22"}}),jt=new P({props:{anchor:"transformers.FillMaskPipeline.example",$$slots:{default:[Rw]},$$scope:{ctx:M}}}),Jt=new Zd({props:{$$slots:{default:[Dw]},$$scope:{ctx:M}}}),$t=new Zd({props:{$$slots:{default:[Nw]},$$scope:{ctx:M}}}),co=new v({props:{name:"__call__",anchor:"transformers.FillMaskPipeline.__call__",parameters:[{name:"inputs",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FillMaskPipeline.__call__.args",description:`<strong>args</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
One or several texts (or one list of prompts) with masked tokens.`,name:"args"},{anchor:"transformers.FillMaskPipeline.__call__.targets",description:`<strong>targets</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>) &#x2014;
When passed, the model will limit the scores to the passed targets instead of looking up in the whole
vocab. If the provided targets are not in the model vocab, they will be tokenized and the first
resulting token will be used (with a warning, and that might be slower).`,name:"targets"},{anchor:"transformers.FillMaskPipeline.__call__.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>) &#x2014;
When passed, overrides the number of predictions to return.`,name:"top_k"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/fill_mask.py#L248",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Each result comes as list of dictionaries with the following keys:</p>
<ul>
<li><strong>sequence</strong> (<code>str</code>) — The corresponding input with the mask token prediction.</li>
<li><strong>score</strong> (<code>float</code>) — The corresponding probability.</li>
<li><strong>token</strong> (<code>int</code>) — The predicted token id (to replace the masked one).</li>
<li><strong>token_str</strong> (<code>str</code>) — The predicted token (to replace the masked one).</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A list or a list of list of <code>dict</code></p>
`}}),po=new J({props:{title:"QuestionAnsweringPipeline",local:"transformers.QuestionAnsweringPipeline",headingTag:"h3"}}),mo=new v({props:{name:"class transformers.QuestionAnsweringPipeline",anchor:"transformers.QuestionAnsweringPipeline",parameters:[{name:"model",val:": Union"},{name:"tokenizer",val:": PreTrainedTokenizer"},{name:"modelcard",val:": Optional = None"},{name:"framework",val:": Optional = None"},{name:"task",val:": str = ''"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.QuestionAnsweringPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.QuestionAnsweringPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.QuestionAnsweringPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.QuestionAnsweringPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.QuestionAnsweringPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.QuestionAnsweringPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.QuestionAnsweringPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.QuestionAnsweringPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.QuestionAnsweringPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.QuestionAnsweringPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.QuestionAnsweringPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/question_answering.py#L224"}}),Ct=new P({props:{anchor:"transformers.QuestionAnsweringPipeline.example",$$slots:{default:[Aw]},$$scope:{ctx:M}}}),ho=new v({props:{name:"__call__",anchor:"transformers.QuestionAnsweringPipeline.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.QuestionAnsweringPipeline.__call__.args",description:`<strong>args</strong> (<code>SquadExample</code> or a list of <code>SquadExample</code>) &#x2014;
One or several <code>SquadExample</code> containing the question and context.`,name:"args"},{anchor:"transformers.QuestionAnsweringPipeline.__call__.X",description:`<strong>X</strong> (<code>SquadExample</code> or a list of <code>SquadExample</code>, <em>optional</em>) &#x2014;
One or several <code>SquadExample</code> containing the question and context (will be treated the same way as if
passed as the first positional argument).`,name:"X"},{anchor:"transformers.QuestionAnsweringPipeline.__call__.data",description:`<strong>data</strong> (<code>SquadExample</code> or a list of <code>SquadExample</code>, <em>optional</em>) &#x2014;
One or several <code>SquadExample</code> containing the question and context (will be treated the same way as if
passed as the first positional argument).`,name:"data"},{anchor:"transformers.QuestionAnsweringPipeline.__call__.question",description:`<strong>question</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
One or several question(s) (must be used in conjunction with the <code>context</code> argument).`,name:"question"},{anchor:"transformers.QuestionAnsweringPipeline.__call__.context",description:`<strong>context</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
One or several context(s) associated with the question(s) (must be used in conjunction with the
<code>question</code> argument).`,name:"context"},{anchor:"transformers.QuestionAnsweringPipeline.__call__.topk",description:`<strong>topk</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of answers to return (will be chosen by order of likelihood). Note that we return less than
topk answers if there are not enough options available within the context.`,name:"topk"},{anchor:"transformers.QuestionAnsweringPipeline.__call__.doc_stride",description:`<strong>doc_stride</strong> (<code>int</code>, <em>optional</em>, defaults to 128) &#x2014;
If the context is too long to fit with the question for the model, it will be split in several chunks
with some overlap. This argument controls the size of that overlap.`,name:"doc_stride"},{anchor:"transformers.QuestionAnsweringPipeline.__call__.max_answer_len",description:`<strong>max_answer_len</strong> (<code>int</code>, <em>optional</em>, defaults to 15) &#x2014;
The maximum length of predicted answers (e.g., only answers with a shorter length are considered).`,name:"max_answer_len"},{anchor:"transformers.QuestionAnsweringPipeline.__call__.max_seq_len",description:`<strong>max_seq_len</strong> (<code>int</code>, <em>optional</em>, defaults to 384) &#x2014;
The maximum length of the total sentence (context + question) in tokens of each chunk passed to the
model. The context will be split in several chunks (using <code>doc_stride</code> as overlap) if needed.`,name:"max_seq_len"},{anchor:"transformers.QuestionAnsweringPipeline.__call__.max_question_len",description:`<strong>max_question_len</strong> (<code>int</code>, <em>optional</em>, defaults to 64) &#x2014;
The maximum length of the question after tokenization. It will be truncated if needed.`,name:"max_question_len"},{anchor:"transformers.QuestionAnsweringPipeline.__call__.handle_impossible_answer",description:`<strong>handle_impossible_answer</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not we accept impossible as an answer.`,name:"handle_impossible_answer"},{anchor:"transformers.QuestionAnsweringPipeline.__call__.align_to_words",description:`<strong>align_to_words</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Attempts to align the answer to real words. Improves quality on space separated langages. Might hurt on
non-space-separated languages (like Japanese or Chinese)`,name:"align_to_words"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/question_answering.py#L343",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Each result comes as a dictionary with the following keys:</p>
<ul>
<li><strong>score</strong> (<code>float</code>) — The probability associated to the answer.</li>
<li><strong>start</strong> (<code>int</code>) — The character start index of the answer (in the tokenized version of the input).</li>
<li><strong>end</strong> (<code>int</code>) — The character end index of the answer (in the tokenized version of the input).</li>
<li><strong>answer</strong> (<code>str</code>) — The answer to the question.</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <code>dict</code> or a list of <code>dict</code></p>
`}}),fo=new v({props:{name:"create_sample",anchor:"transformers.QuestionAnsweringPipeline.create_sample",parameters:[{name:"question",val:": Union"},{name:"context",val:": Union"}],parametersDescription:[{anchor:"transformers.QuestionAnsweringPipeline.create_sample.question",description:"<strong>question</strong> (<code>str</code> or <code>List[str]</code>) &#x2014; The question(s) asked.",name:"question"},{anchor:"transformers.QuestionAnsweringPipeline.create_sample.context",description:"<strong>context</strong> (<code>str</code> or <code>List[str]</code>) &#x2014; The context(s) in which we will look for the answer.",name:"context"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/question_answering.py#L278",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The corresponding <code>SquadExample</code> grouping question and context.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>One or a list of <code>SquadExample</code></p>
`}}),go=new v({props:{name:"span_to_answer",anchor:"transformers.QuestionAnsweringPipeline.span_to_answer",parameters:[{name:"text",val:": str"},{name:"start",val:": int"},{name:"end",val:": int"}],parametersDescription:[{anchor:"transformers.QuestionAnsweringPipeline.span_to_answer.text",description:"<strong>text</strong> (<code>str</code>) &#x2014; The actual context to extract the answer from.",name:"text"},{anchor:"transformers.QuestionAnsweringPipeline.span_to_answer.start",description:"<strong>start</strong> (<code>int</code>) &#x2014; The answer starting token index.",name:"start"},{anchor:"transformers.QuestionAnsweringPipeline.span_to_answer.end",description:"<strong>end</strong> (<code>int</code>) &#x2014; The answer end token index.",name:"end"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/question_answering.py#L630",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>str, ‘start’: int, ‘end’: int}\`</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Dictionary like \`{‘answer’</p>
`}}),uo=new J({props:{title:"SummarizationPipeline",local:"transformers.SummarizationPipeline",headingTag:"h3"}}),To=new v({props:{name:"class transformers.SummarizationPipeline",anchor:"transformers.SummarizationPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SummarizationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.SummarizationPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.SummarizationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.SummarizationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.SummarizationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.SummarizationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.SummarizationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.SummarizationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.SummarizationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.SummarizationPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.SummarizationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/text2text_generation.py#L216"}}),Gt=new P({props:{anchor:"transformers.SummarizationPipeline.example",$$slots:{default:[Vw]},$$scope:{ctx:M}}}),bo=new v({props:{name:"__call__",anchor:"transformers.SummarizationPipeline.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SummarizationPipeline.__call__.documents",description:`<strong>documents</strong> (<em>str</em> or <code>List[str]</code>) &#x2014;
One or several articles (or one list of articles) to summarize.`,name:"documents"},{anchor:"transformers.SummarizationPipeline.__call__.return_text",description:`<strong>return_text</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to include the decoded texts in the outputs`,name:"return_text"},{anchor:"transformers.SummarizationPipeline.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to include the tensors of predictions (as token indices) in the outputs.`,name:"return_tensors"},{anchor:"transformers.SummarizationPipeline.__call__.clean_up_tokenization_spaces",description:`<strong>clean_up_tokenization_spaces</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clean up the potential extra spaces in the text output.
generate_kwargs &#x2014;
Additional keyword arguments to pass along to the generate method of the model (see the generate method
corresponding to your framework <a href="./model#generative-models">here</a>).`,name:"clean_up_tokenization_spaces"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/text2text_generation.py#L245",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Each result comes as a dictionary with the following keys:</p>
<ul>
<li><strong>summary_text</strong> (<code>str</code>, present when <code>return_text=True</code>) — The summary of the corresponding input.</li>
<li><strong>summary_token_ids</strong> (<code>torch.Tensor</code> or <code>tf.Tensor</code>, present when <code>return_tensors=True</code>) — The token
ids of the summary.</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A list or a list of list of <code>dict</code></p>
`}}),yo=new J({props:{title:"TableQuestionAnsweringPipeline",local:"transformers.TableQuestionAnsweringPipeline",headingTag:"h3"}}),wo=new v({props:{name:"class transformers.TableQuestionAnsweringPipeline",anchor:"transformers.TableQuestionAnsweringPipeline",parameters:[{name:"args_parser",val:" = <transformers.pipelines.table_question_answering.TableQuestionAnsweringArgumentHandler object at 0x7f1941ce3880>"},{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TableQuestionAnsweringPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.TableQuestionAnsweringPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.TableQuestionAnsweringPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.TableQuestionAnsweringPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.TableQuestionAnsweringPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.TableQuestionAnsweringPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.TableQuestionAnsweringPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.TableQuestionAnsweringPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.TableQuestionAnsweringPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.TableQuestionAnsweringPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.TableQuestionAnsweringPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/table_question_answering.py#L87"}}),zt=new P({props:{anchor:"transformers.TableQuestionAnsweringPipeline.example",$$slots:{default:[Sw]},$$scope:{ctx:M}}}),_o=new v({props:{name:"__call__",anchor:"transformers.TableQuestionAnsweringPipeline.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TableQuestionAnsweringPipeline.__call__.table",description:`<strong>table</strong> (<code>pd.DataFrame</code> or <code>Dict</code>) &#x2014;
Pandas DataFrame or dictionary that will be converted to a DataFrame containing all the table values.
See above for an example of dictionary.`,name:"table"},{anchor:"transformers.TableQuestionAnsweringPipeline.__call__.query",description:`<strong>query</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
Query or list of queries that will be sent to the model alongside the table.`,name:"query"},{anchor:"transformers.TableQuestionAnsweringPipeline.__call__.sequential",description:`<strong>sequential</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to do inference sequentially or as a batch. Batching is faster, but models like SQA require the
inference to be done sequentially to extract relations within sequences, given their conversational
nature.`,name:"sequential"},{anchor:"transformers.TableQuestionAnsweringPipeline.__call__.padding",description:`<strong>padding</strong> (<code>bool</code>, <code>str</code> or <a href="/docs/transformers/main/en/internal/file_utils#transformers.utils.PaddingStrategy">PaddingStrategy</a>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Activates and controls padding. Accepts the following values:</p>
<ul>
<li><code>True</code> or <code>&apos;longest&apos;</code>: Pad to the longest sequence in the batch (or no padding if only a single
sequence if provided).</li>
<li><code>&apos;max_length&apos;</code>: Pad to a maximum length specified with the argument <code>max_length</code> or to the maximum
acceptable input length for the model if that argument is not provided.</li>
<li><code>False</code> or <code>&apos;do_not_pad&apos;</code> (default): No padding (i.e., can output a batch with sequences of different
lengths).</li>
</ul>`,name:"padding"},{anchor:"transformers.TableQuestionAnsweringPipeline.__call__.truncation",description:`<strong>truncation</strong> (<code>bool</code>, <code>str</code> or <code>TapasTruncationStrategy</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Activates and controls truncation. Accepts the following values:</p>
<ul>
<li><code>True</code> or <code>&apos;drop_rows_to_fit&apos;</code>: Truncate to a maximum length specified with the argument <code>max_length</code>
or to the maximum acceptable input length for the model if that argument is not provided. This will
truncate row by row, removing rows from the table.</li>
<li><code>False</code> or <code>&apos;do_not_truncate&apos;</code> (default): No truncation (i.e., can output batch with sequence lengths
greater than the model maximum admissible input size).</li>
</ul>`,name:"truncation"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/table_question_answering.py#L270",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Each result is a dictionary with the following
keys:</p>
<ul>
<li><strong>answer</strong> (<code>str</code>) — The answer of the query given the table. If there is an aggregator, the answer will
be preceded by <code>AGGREGATOR &gt;</code>.</li>
<li><strong>coordinates</strong> (<code>List[Tuple[int, int]]</code>) — Coordinates of the cells of the answers.</li>
<li><strong>cells</strong> (<code>List[str]</code>) — List of strings made up of the answer cell values.</li>
<li><strong>aggregator</strong> (<code>str</code>) — If the model has an aggregator, this returns the aggregator.</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A dictionary or a list of dictionaries containing results</p>
`}}),Ft=new P({props:{anchor:"transformers.TableQuestionAnsweringPipeline.__call__.example",$$slots:{default:[Ww]},$$scope:{ctx:M}}}),Rt=new P({props:{anchor:"transformers.TableQuestionAnsweringPipeline.__call__.example-2",$$slots:{default:[Lw]},$$scope:{ctx:M}}}),xo=new J({props:{title:"TextClassificationPipeline",local:"transformers.TextClassificationPipeline",headingTag:"h3"}}),Mo=new v({props:{name:"class transformers.TextClassificationPipeline",anchor:"transformers.TextClassificationPipeline",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TextClassificationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.TextClassificationPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.TextClassificationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.TextClassificationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.TextClassificationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.TextClassificationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.TextClassificationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.TextClassificationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.TextClassificationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.TextClassificationPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.TextClassificationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"},{anchor:"transformers.TextClassificationPipeline.return_all_scores",description:`<strong>return_all_scores</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to return all prediction scores or just the one of the predicted class.`,name:"return_all_scores"},{anchor:"transformers.TextClassificationPipeline.function_to_apply",description:`<strong>function_to_apply</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;default&quot;</code>) &#x2014;
The function to apply to the model outputs in order to retrieve the scores. Accepts four different values:</p>
<ul>
<li><code>&quot;default&quot;</code>: if the model has a single label, will apply the sigmoid function on the output. If the model
has several labels, will apply the softmax function on the output.</li>
<li><code>&quot;sigmoid&quot;</code>: Applies the sigmoid function on the output.</li>
<li><code>&quot;softmax&quot;</code>: Applies the softmax function on the output.</li>
<li><code>&quot;none&quot;</code>: Does not apply any function on the output.</li>
</ul>`,name:"function_to_apply"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/text_classification.py#L34"}}),Dt=new P({props:{anchor:"transformers.TextClassificationPipeline.example",$$slots:{default:[Hw]},$$scope:{ctx:M}}}),ko=new v({props:{name:"__call__",anchor:"transformers.TextClassificationPipeline.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TextClassificationPipeline.__call__.args",description:`<strong>args</strong> (<code>str</code> or <code>List[str]</code> or <code>Dict[str]</code>, or <code>List[Dict[str]]</code>) &#x2014;
One or several texts to classify. In order to use text pairs for your classification, you can send a
dictionary containing <code>{&quot;text&quot;, &quot;text_pair&quot;}</code> keys, or a list of those.`,name:"args"},{anchor:"transformers.TextClassificationPipeline.__call__.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to <code>1</code>) &#x2014;
How many results to return.`,name:"top_k"},{anchor:"transformers.TextClassificationPipeline.__call__.function_to_apply",description:`<strong>function_to_apply</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;default&quot;</code>) &#x2014;
The function to apply to the model outputs in order to retrieve the scores. Accepts four different
values:</p>
<p>If this argument is not specified, then it will apply the following functions according to the number
of labels:</p>
<ul>
<li>If the model has a single label, will apply the sigmoid function on the output.</li>
<li>If the model has several labels, will apply the softmax function on the output.</li>
</ul>
<p>Possible values are:</p>
<ul>
<li><code>&quot;sigmoid&quot;</code>: Applies the sigmoid function on the output.</li>
<li><code>&quot;softmax&quot;</code>: Applies the softmax function on the output.</li>
<li><code>&quot;none&quot;</code>: Does not apply any function on the output.</li>
</ul>`,name:"function_to_apply"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/text_classification.py#L121",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Each result comes as list of dictionaries with the following keys:</p>
<ul>
<li><strong>label</strong> (<code>str</code>) — The label predicted.</li>
<li><strong>score</strong> (<code>float</code>) — The corresponding probability.</li>
</ul>
<p>If <code>top_k</code> is used, one such dictionary is returned per label.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A list or a list of list of <code>dict</code></p>
`}}),Uo=new J({props:{title:"TextGenerationPipeline",local:"transformers.TextGenerationPipeline",headingTag:"h3"}}),vo=new v({props:{name:"class transformers.TextGenerationPipeline",anchor:"transformers.TextGenerationPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TextGenerationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.TextGenerationPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.TextGenerationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.TextGenerationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.TextGenerationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.TextGenerationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.TextGenerationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.TextGenerationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.TextGenerationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.TextGenerationPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.TextGenerationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/text_generation.py#L36"}}),Nt=new P({props:{anchor:"transformers.TextGenerationPipeline.example",$$slots:{default:[Yw]},$$scope:{ctx:M}}}),jo=new v({props:{name:"__call__",anchor:"transformers.TextGenerationPipeline.__call__",parameters:[{name:"text_inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TextGenerationPipeline.__call__.args",description:`<strong>args</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
One or several prompts (or one list of prompts) to complete.`,name:"args"},{anchor:"transformers.TextGenerationPipeline.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return the tensors of predictions (as token indices) in the outputs. If set to
<code>True</code>, the decoded text is not returned.`,name:"return_tensors"},{anchor:"transformers.TextGenerationPipeline.__call__.return_text",description:`<strong>return_text</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to return the decoded texts in the outputs.`,name:"return_text"},{anchor:"transformers.TextGenerationPipeline.__call__.return_full_text",description:`<strong>return_full_text</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
If set to <code>False</code> only added text is returned, otherwise the full text is returned. Only meaningful if
<em>return_text</em> is set to True.`,name:"return_full_text"},{anchor:"transformers.TextGenerationPipeline.__call__.clean_up_tokenization_spaces",description:`<strong>clean_up_tokenization_spaces</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clean up the potential extra spaces in the text output.`,name:"clean_up_tokenization_spaces"},{anchor:"transformers.TextGenerationPipeline.__call__.prefix",description:`<strong>prefix</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Prefix added to prompt.`,name:"prefix"},{anchor:"transformers.TextGenerationPipeline.__call__.handle_long_generation",description:`<strong>handle_long_generation</strong> (<code>str</code>, <em>optional</em>) &#x2014;
By default, this pipelines does not handle long generation (ones that exceed in one form or the other
the model maximum length). There is no perfect way to adress this (more info
:<a href="https://github.com/huggingface/transformers/issues/14033#issuecomment-948385227" rel="nofollow">https://github.com/huggingface/transformers/issues/14033#issuecomment-948385227</a>). This provides common
strategies to work around that problem depending on your use case.</p>
<ul>
<li><code>None</code> : default strategy where nothing in particular happens</li>
<li><code>&quot;hole&quot;</code>: Truncates left of input, and leaves a gap wide enough to let generation happen (might
truncate a lot of the prompt and not suitable when generation exceed the model capacity)</li>
</ul>
<p>generate_kwargs &#x2014;
Additional keyword arguments to pass along to the generate method of the model (see the generate method
corresponding to your framework <a href="./model#generative-models">here</a>).`,name:"handle_long_generation"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/text_generation.py#L192",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Returns one of the following dictionaries (cannot return a combination
of both <code>generated_text</code> and <code>generated_token_ids</code>):</p>
<ul>
<li><strong>generated_text</strong> (<code>str</code>, present when <code>return_text=True</code>) — The generated text.</li>
<li><strong>generated_token_ids</strong> (<code>torch.Tensor</code> or <code>tf.Tensor</code>, present when <code>return_tensors=True</code>) — The token
ids of the generated text.</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A list or a list of list of <code>dict</code></p>
`}}),Jo=new J({props:{title:"Text2TextGenerationPipeline",local:"transformers.Text2TextGenerationPipeline",headingTag:"h3"}}),$o=new v({props:{name:"class transformers.Text2TextGenerationPipeline",anchor:"transformers.Text2TextGenerationPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.Text2TextGenerationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.Text2TextGenerationPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.Text2TextGenerationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.Text2TextGenerationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.Text2TextGenerationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.Text2TextGenerationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.Text2TextGenerationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.Text2TextGenerationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.Text2TextGenerationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.Text2TextGenerationPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.Text2TextGenerationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/text2text_generation.py#L25"}}),Vt=new P({props:{anchor:"transformers.Text2TextGenerationPipeline.example",$$slots:{default:[Ow]},$$scope:{ctx:M}}}),St=new P({props:{anchor:"transformers.Text2TextGenerationPipeline.example-2",$$slots:{default:[Ew]},$$scope:{ctx:M}}}),Po=new v({props:{name:"__call__",anchor:"transformers.Text2TextGenerationPipeline.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.Text2TextGenerationPipeline.__call__.args",description:`<strong>args</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
Input text for the encoder.`,name:"args"},{anchor:"transformers.Text2TextGenerationPipeline.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to include the tensors of predictions (as token indices) in the outputs.`,name:"return_tensors"},{anchor:"transformers.Text2TextGenerationPipeline.__call__.return_text",description:`<strong>return_text</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to include the decoded texts in the outputs.`,name:"return_text"},{anchor:"transformers.Text2TextGenerationPipeline.__call__.clean_up_tokenization_spaces",description:`<strong>clean_up_tokenization_spaces</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clean up the potential extra spaces in the text output.`,name:"clean_up_tokenization_spaces"},{anchor:"transformers.Text2TextGenerationPipeline.__call__.truncation",description:`<strong>truncation</strong> (<code>TruncationStrategy</code>, <em>optional</em>, defaults to <code>TruncationStrategy.DO_NOT_TRUNCATE</code>) &#x2014;
The truncation strategy for the tokenization within the pipeline. <code>TruncationStrategy.DO_NOT_TRUNCATE</code>
(default) will never truncate, but it is sometimes desirable to truncate the input to fit the model&#x2019;s
max_length instead of throwing an error down the line.
generate_kwargs &#x2014;
Additional keyword arguments to pass along to the generate method of the model (see the generate method
corresponding to your framework <a href="./model#generative-models">here</a>).`,name:"truncation"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/text2text_generation.py#L138",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Each result comes as a dictionary with the following keys:</p>
<ul>
<li><strong>generated_text</strong> (<code>str</code>, present when <code>return_text=True</code>) — The generated text.</li>
<li><strong>generated_token_ids</strong> (<code>torch.Tensor</code> or <code>tf.Tensor</code>, present when <code>return_tensors=True</code>) — The token
ids of the generated text.</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A list or a list of list of <code>dict</code></p>
`}}),Co=new v({props:{name:"check_inputs",anchor:"transformers.Text2TextGenerationPipeline.check_inputs",parameters:[{name:"input_length",val:": int"},{name:"min_length",val:": int"},{name:"max_length",val:": int"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/text2text_generation.py#L111"}}),Io=new J({props:{title:"TokenClassificationPipeline",local:"transformers.TokenClassificationPipeline",headingTag:"h3"}}),qo=new v({props:{name:"class transformers.TokenClassificationPipeline",anchor:"transformers.TokenClassificationPipeline",parameters:[{name:"args_parser",val:" = <transformers.pipelines.token_classification.TokenClassificationArgumentHandler object at 0x7f1941be45b0>"},{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TokenClassificationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.TokenClassificationPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.TokenClassificationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.TokenClassificationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.TokenClassificationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.TokenClassificationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.TokenClassificationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.TokenClassificationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.TokenClassificationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.TokenClassificationPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.TokenClassificationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"},{anchor:"transformers.TokenClassificationPipeline.ignore_labels",description:`<strong>ignore_labels</strong> (<code>List[str]</code>, defaults to <code>[&quot;O&quot;]</code>) &#x2014;
A list of labels to ignore.`,name:"ignore_labels"},{anchor:"transformers.TokenClassificationPipeline.grouped_entities",description:`<strong>grouped_entities</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
DEPRECATED, use <code>aggregation_strategy</code> instead. Whether or not to group the tokens corresponding to the
same entity together in the predictions or not.`,name:"grouped_entities"},{anchor:"transformers.TokenClassificationPipeline.stride",description:`<strong>stride</strong> (<code>int</code>, <em>optional</em>) &#x2014;
If stride is provided, the pipeline is applied on all the text. The text is split into chunks of size
model_max_length. Works only with fast tokenizers and <code>aggregation_strategy</code> different from <code>NONE</code>. The
value of this argument defines the number of overlapping tokens between chunks. In other words, the model
will shift forward by <code>tokenizer.model_max_length - stride</code> tokens each step.`,name:"stride"},{anchor:"transformers.TokenClassificationPipeline.aggregation_strategy",description:`<strong>aggregation_strategy</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;none&quot;</code>) &#x2014;
The strategy to fuse (or not) tokens based on the model prediction.</p>
<ul>
<li>&#x201C;none&#x201D; : Will simply not do any aggregation and simply return raw results from the model</li>
<li>&#x201C;simple&#x201D; : Will attempt to group entities following the default schema. (A, B-TAG), (B, I-TAG), (C,
I-TAG), (D, B-TAG2) (E, B-TAG2) will end up being [{&#x201C;word&#x201D;: ABC, &#x201C;entity&#x201D;: &#x201C;TAG&#x201D;}, {&#x201C;word&#x201D;: &#x201C;D&#x201D;,
&#x201C;entity&#x201D;: &#x201C;TAG2&#x201D;}, {&#x201C;word&#x201D;: &#x201C;E&#x201D;, &#x201C;entity&#x201D;: &#x201C;TAG2&#x201D;}] Notice that two consecutive B tags will end up as
different entities. On word based languages, we might end up splitting words undesirably : Imagine
Microsoft being tagged as [{&#x201C;word&#x201D;: &#x201C;Micro&#x201D;, &#x201C;entity&#x201D;: &#x201C;ENTERPRISE&#x201D;}, {&#x201C;word&#x201D;: &#x201C;soft&#x201D;, &#x201C;entity&#x201D;:
&#x201C;NAME&#x201D;}]. Look for FIRST, MAX, AVERAGE for ways to mitigate that and disambiguate words (on languages
that support that meaning, which is basically tokens separated by a space). These mitigations will
only work on real words, &#x201C;New york&#x201D; might still be tagged with two different entities.</li>
<li>&#x201C;first&#x201D; : (works only on word based models) Will use the <code>SIMPLE</code> strategy except that words, cannot
end up with different tags. Words will simply use the tag of the first token of the word when there
is ambiguity.</li>
<li>&#x201C;average&#x201D; : (works only on word based models) Will use the <code>SIMPLE</code> strategy except that words,
cannot end up with different tags. scores will be averaged first across tokens, and then the maximum
label is applied.</li>
<li>&#x201C;max&#x201D; : (works only on word based models) Will use the <code>SIMPLE</code> strategy except that words, cannot
end up with different tags. Word entity will simply be the token with the maximum score.</li>
</ul>`,name:"aggregation_strategy"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/token_classification.py#L61"}}),Ht=new P({props:{anchor:"transformers.TokenClassificationPipeline.example",$$slots:{default:[Qw]},$$scope:{ctx:M}}}),Go=new v({props:{name:"__call__",anchor:"transformers.TokenClassificationPipeline.__call__",parameters:[{name:"inputs",val:": Union"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TokenClassificationPipeline.__call__.inputs",description:`<strong>inputs</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
One or several texts (or one list of texts) for token classification.`,name:"inputs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/token_classification.py#L218",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Each result comes as a list of dictionaries (one for each token in the
corresponding input, or each entity if this pipeline was instantiated with an aggregation_strategy) with
the following keys:</p>
<ul>
<li><strong>word</strong> (<code>str</code>) — The token/word classified. This is obtained by decoding the selected tokens. If you
want to have the exact string in the original sentence, use <code>start</code> and <code>end</code>.</li>
<li><strong>score</strong> (<code>float</code>) — The corresponding probability for <code>entity</code>.</li>
<li><strong>entity</strong> (<code>str</code>) — The entity predicted for that token/word (it is named <em>entity_group</em> when
<em>aggregation_strategy</em> is not <code>"none"</code>.</li>
<li><strong>index</strong> (<code>int</code>, only present when <code>aggregation_strategy="none"</code>) — The index of the corresponding
token in the sentence.</li>
<li><strong>start</strong> (<code>int</code>, <em>optional</em>) — The index of the start of the corresponding entity in the sentence. Only
exists if the offsets are available within the tokenizer</li>
<li><strong>end</strong> (<code>int</code>, <em>optional</em>) — The index of the end of the corresponding entity in the sentence. Only
exists if the offsets are available within the tokenizer</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A list or a list of list of <code>dict</code></p>
`}}),Zo=new v({props:{name:"aggregate_words",anchor:"transformers.TokenClassificationPipeline.aggregate_words",parameters:[{name:"entities",val:": List"},{name:"aggregation_strategy",val:": AggregationStrategy"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/token_classification.py#L469"}}),zo=new v({props:{name:"gather_pre_entities",anchor:"transformers.TokenClassificationPipeline.gather_pre_entities",parameters:[{name:"sentence",val:": str"},{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"offset_mapping",val:": Optional"},{name:"special_tokens_mask",val:": ndarray"},{name:"aggregation_strategy",val:": AggregationStrategy"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/token_classification.py#L355"}}),Fo=new v({props:{name:"group_entities",anchor:"transformers.TokenClassificationPipeline.group_entities",parameters:[{name:"entities",val:": List"}],parametersDescription:[{anchor:"transformers.TokenClassificationPipeline.group_entities.entities",description:"<strong>entities</strong> (<code>dict</code>) &#x2014; The entities predicted by the pipeline.",name:"entities"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/token_classification.py#L532"}}),Ro=new v({props:{name:"group_sub_entities",anchor:"transformers.TokenClassificationPipeline.group_sub_entities",parameters:[{name:"entities",val:": List"}],parametersDescription:[{anchor:"transformers.TokenClassificationPipeline.group_sub_entities.entities",description:"<strong>entities</strong> (<code>dict</code>) &#x2014; The entities predicted by the pipeline.",name:"entities"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/token_classification.py#L497"}}),Do=new J({props:{title:"TranslationPipeline",local:"transformers.TranslationPipeline",headingTag:"h3"}}),Bo=new v({props:{name:"class transformers.TranslationPipeline",anchor:"transformers.TranslationPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TranslationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.TranslationPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.TranslationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.TranslationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.TranslationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.TranslationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.TranslationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.TranslationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.TranslationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.TranslationPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.TranslationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/text2text_generation.py#L286"}}),Xt=new P({props:{anchor:"transformers.TranslationPipeline.example",$$slots:{default:[Xw]},$$scope:{ctx:M}}}),No=new v({props:{name:"__call__",anchor:"transformers.TranslationPipeline.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TranslationPipeline.__call__.args",description:`<strong>args</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
Texts to be translated.`,name:"args"},{anchor:"transformers.TranslationPipeline.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to include the tensors of predictions (as token indices) in the outputs.`,name:"return_tensors"},{anchor:"transformers.TranslationPipeline.__call__.return_text",description:`<strong>return_text</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to include the decoded texts in the outputs.`,name:"return_text"},{anchor:"transformers.TranslationPipeline.__call__.clean_up_tokenization_spaces",description:`<strong>clean_up_tokenization_spaces</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clean up the potential extra spaces in the text output.`,name:"clean_up_tokenization_spaces"},{anchor:"transformers.TranslationPipeline.__call__.src_lang",description:`<strong>src_lang</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The language of the input. Might be required for multilingual models. Will not have any effect for
single pair translation models`,name:"src_lang"},{anchor:"transformers.TranslationPipeline.__call__.tgt_lang",description:`<strong>tgt_lang</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The language of the desired output. Might be required for multilingual models. Will not have any effect
for single pair translation models
generate_kwargs &#x2014;
Additional keyword arguments to pass along to the generate method of the model (see the generate method
corresponding to your framework <a href="./model#generative-models">here</a>).`,name:"tgt_lang"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/text2text_generation.py#L341",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Each result comes as a dictionary with the following keys:</p>
<ul>
<li><strong>translation_text</strong> (<code>str</code>, present when <code>return_text=True</code>) — The translation.</li>
<li><strong>translation_token_ids</strong> (<code>torch.Tensor</code> or <code>tf.Tensor</code>, present when <code>return_tensors=True</code>) — The
token ids of the translation.</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A list or a list of list of <code>dict</code></p>
`}}),Ao=new J({props:{title:"ZeroShotClassificationPipeline",local:"transformers.ZeroShotClassificationPipeline",headingTag:"h3"}}),Vo=new v({props:{name:"class transformers.ZeroShotClassificationPipeline",anchor:"transformers.ZeroShotClassificationPipeline",parameters:[{name:"args_parser",val:" = <transformers.pipelines.zero_shot_classification.ZeroShotClassificationArgumentHandler object at 0x7f1941c0b3d0>"},{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ZeroShotClassificationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.ZeroShotClassificationPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.ZeroShotClassificationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.ZeroShotClassificationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.ZeroShotClassificationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.ZeroShotClassificationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.ZeroShotClassificationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.ZeroShotClassificationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.ZeroShotClassificationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.ZeroShotClassificationPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.ZeroShotClassificationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/zero_shot_classification.py#L46"}}),en=new P({props:{anchor:"transformers.ZeroShotClassificationPipeline.example",$$slots:{default:[Kw]},$$scope:{ctx:M}}}),So=new v({props:{name:"__call__",anchor:"transformers.ZeroShotClassificationPipeline.__call__",parameters:[{name:"sequences",val:": Union"},{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ZeroShotClassificationPipeline.__call__.sequences",description:`<strong>sequences</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
The sequence(s) to classify, will be truncated if the model input is too large.`,name:"sequences"},{anchor:"transformers.ZeroShotClassificationPipeline.__call__.candidate_labels",description:`<strong>candidate_labels</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
The set of possible class labels to classify each sequence into. Can be a single label, a string of
comma-separated labels, or a list of labels.`,name:"candidate_labels"},{anchor:"transformers.ZeroShotClassificationPipeline.__call__.hypothesis_template",description:`<strong>hypothesis_template</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;This example is {}.&quot;</code>) &#x2014;
The template used to turn each label into an NLI-style hypothesis. This template must include a {} or
similar syntax for the candidate label to be inserted into the template. For example, the default
template is <code>&quot;This example is {}.&quot;</code> With the candidate label <code>&quot;sports&quot;</code>, this would be fed into the
model like <code>&quot;&lt;cls&gt; sequence to classify &lt;sep&gt; This example is sports . &lt;sep&gt;&quot;</code>. The default template
works well in many cases, but it may be worthwhile to experiment with different templates depending on
the task setting.`,name:"hypothesis_template"},{anchor:"transformers.ZeroShotClassificationPipeline.__call__.multi_label",description:`<strong>multi_label</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not multiple candidate labels can be true. If <code>False</code>, the scores are normalized such that
the sum of the label likelihoods for each sequence is 1. If <code>True</code>, the labels are considered
independent and probabilities are normalized for each candidate by doing a softmax of the entailment
score vs. the contradiction score.`,name:"multi_label"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/zero_shot_classification.py#L163",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Each result comes as a dictionary with the following keys:</p>
<ul>
<li><strong>sequence</strong> (<code>str</code>) — The sequence for which this is the output.</li>
<li><strong>labels</strong> (<code>List[str]</code>) — The labels sorted by order of likelihood.</li>
<li><strong>scores</strong> (<code>List[float]</code>) — The probabilities for each of the labels.</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <code>dict</code> or a list of <code>dict</code></p>
`}}),Wo=new J({props:{title:"Multimodal",local:"multimodal",headingTag:"h2"}}),Ho=new J({props:{title:"DocumentQuestionAnsweringPipeline",local:"transformers.DocumentQuestionAnsweringPipeline",headingTag:"h3"}}),Yo=new v({props:{name:"class transformers.DocumentQuestionAnsweringPipeline",anchor:"transformers.DocumentQuestionAnsweringPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.DocumentQuestionAnsweringPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.image_processor",description:`<strong>image_processor</strong> (<code>BaseImageProcessor</code>) &#x2014;
The image processor that will be used by the pipeline to encode data for the model. This object inherits from
<code>BaseImageProcessor</code>.`,name:"image_processor"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/document_question_answering.py#L101"}}),nn=new P({props:{anchor:"transformers.DocumentQuestionAnsweringPipeline.example",$$slots:{default:[e_]},$$scope:{ctx:M}}}),Oo=new v({props:{name:"__call__",anchor:"transformers.DocumentQuestionAnsweringPipeline.__call__",parameters:[{name:"image",val:": Union"},{name:"question",val:": Optional = None"},{name:"word_boxes",val:": Tuple = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.DocumentQuestionAnsweringPipeline.__call__.image",description:`<strong>image</strong> (<code>str</code> or <code>PIL.Image</code>) &#x2014;
The pipeline handles three types of images:</p>
<ul>
<li>A string containing a http link pointing to an image</li>
<li>A string containing a local path to an image</li>
<li>An image loaded in PIL directly</li>
</ul>
<p>The pipeline accepts either a single image or a batch of images. If given a single image, it can be
broadcasted to multiple questions.`,name:"image"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.__call__.question",description:`<strong>question</strong> (<code>str</code>) &#x2014;
A question to ask of the document.`,name:"question"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.__call__.word_boxes",description:`<strong>word_boxes</strong> (<code>List[str, Tuple[float, float, float, float]]</code>, <em>optional</em>) &#x2014;
A list of words and bounding boxes (normalized 0-&gt;1000). If you provide this optional input, then the
pipeline will use these words and boxes instead of running OCR on the image to derive them for models
that need them (e.g. LayoutLM). This allows you to reuse OCR&#x2019;d results across many invocations of the
pipeline without having to re-run it each time.`,name:"word_boxes"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.__call__.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of answers to return (will be chosen by order of likelihood). Note that we return less than
top_k answers if there are not enough options available within the context.`,name:"top_k"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.__call__.doc_stride",description:`<strong>doc_stride</strong> (<code>int</code>, <em>optional</em>, defaults to 128) &#x2014;
If the words in the document are too long to fit with the question for the model, it will be split in
several chunks with some overlap. This argument controls the size of that overlap.`,name:"doc_stride"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.__call__.max_answer_len",description:`<strong>max_answer_len</strong> (<code>int</code>, <em>optional</em>, defaults to 15) &#x2014;
The maximum length of predicted answers (e.g., only answers with a shorter length are considered).`,name:"max_answer_len"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.__call__.max_seq_len",description:`<strong>max_seq_len</strong> (<code>int</code>, <em>optional</em>, defaults to 384) &#x2014;
The maximum length of the total sentence (context + question) in tokens of each chunk passed to the
model. The context will be split in several chunks (using <code>doc_stride</code> as overlap) if needed.`,name:"max_seq_len"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.__call__.max_question_len",description:`<strong>max_question_len</strong> (<code>int</code>, <em>optional</em>, defaults to 64) &#x2014;
The maximum length of the question after tokenization. It will be truncated if needed.`,name:"max_question_len"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.__call__.handle_impossible_answer",description:`<strong>handle_impossible_answer</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not we accept impossible as an answer.`,name:"handle_impossible_answer"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.__call__.lang",description:`<strong>lang</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Language to use while running OCR. Defaults to english.`,name:"lang"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.__call__.tesseract_config",description:`<strong>tesseract_config</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Additional flags to pass to tesseract while running OCR.`,name:"tesseract_config"},{anchor:"transformers.DocumentQuestionAnsweringPipeline.__call__.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>, defaults to None) &#x2014;
The maximum time in seconds to wait for fetching images from the web. If None, no timeout is set and
the call may block forever.`,name:"timeout"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/document_question_answering.py#L194",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Each result comes as a dictionary with the following keys:</p>
<ul>
<li><strong>score</strong> (<code>float</code>) — The probability associated to the answer.</li>
<li><strong>start</strong> (<code>int</code>) — The start word index of the answer (in the OCR’d version of the input or provided
<code>word_boxes</code>).</li>
<li><strong>end</strong> (<code>int</code>) — The end word index of the answer (in the OCR’d version of the input or provided
<code>word_boxes</code>).</li>
<li><strong>answer</strong> (<code>str</code>) — The answer to the question.</li>
<li><strong>words</strong> (<code>list[int]</code>) — The index of each word/box pair that is in the answer</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <code>dict</code> or a list of <code>dict</code></p>
`}}),Eo=new J({props:{title:"FeatureExtractionPipeline",local:"transformers.FeatureExtractionPipeline",headingTag:"h3"}}),Qo=new v({props:{name:"class transformers.FeatureExtractionPipeline",anchor:"transformers.FeatureExtractionPipeline",parameters:[{name:"model",val:": Union"},{name:"tokenizer",val:": Optional = None"},{name:"feature_extractor",val:": Optional = None"},{name:"image_processor",val:": Optional = None"},{name:"modelcard",val:": Optional = None"},{name:"framework",val:": Optional = None"},{name:"task",val:": str = ''"},{name:"args_parser",val:": ArgumentHandler = None"},{name:"device",val:": Union = None"},{name:"torch_dtype",val:": Union = None"},{name:"binary_output",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FeatureExtractionPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.FeatureExtractionPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.FeatureExtractionPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.FeatureExtractionPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.FeatureExtractionPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.FeatureExtractionPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.FeatureExtractionPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.FeatureExtractionPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.FeatureExtractionPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.FeatureExtractionPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.FeatureExtractionPipeline.tokenize_kwargs",description:`<strong>tokenize_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Additional dictionary of keyword arguments passed along to the tokenizer.`,name:"tokenize_kwargs"},{anchor:"transformers.FeatureExtractionPipeline.return_tensors",description:`<strong>return_tensors</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If <code>True</code>, returns a tensor according to the specified framework, otherwise returns a list.`,name:"return_tensors"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/feature_extraction.py#L7"}}),sn=new P({props:{anchor:"transformers.FeatureExtractionPipeline.example",$$slots:{default:[t_]},$$scope:{ctx:M}}}),Xo=new v({props:{name:"__call__",anchor:"transformers.FeatureExtractionPipeline.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FeatureExtractionPipeline.__call__.args",description:"<strong>args</strong> (<code>str</code> or <code>List[str]</code>) &#x2014; One or several texts (or one list of texts) to get the features of.",name:"args"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/feature_extraction.py#L76",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The features computed by the model.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A nested list of <code>float</code></p>
`}}),Ko=new J({props:{title:"ImageFeatureExtractionPipeline",local:"transformers.ImageFeatureExtractionPipeline",headingTag:"h3"}}),ea=new v({props:{name:"class transformers.ImageFeatureExtractionPipeline",anchor:"transformers.ImageFeatureExtractionPipeline",parameters:[{name:"model",val:": Union"},{name:"tokenizer",val:": Optional = None"},{name:"feature_extractor",val:": Optional = None"},{name:"image_processor",val:": Optional = None"},{name:"modelcard",val:": Optional = None"},{name:"framework",val:": Optional = None"},{name:"task",val:": str = ''"},{name:"args_parser",val:": ArgumentHandler = None"},{name:"device",val:": Union = None"},{name:"torch_dtype",val:": Union = None"},{name:"binary_output",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ImageFeatureExtractionPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.ImageFeatureExtractionPipeline.image_processor",description:`<strong>image_processor</strong> (<code>BaseImageProcessor</code>) &#x2014;
The image processor that will be used by the pipeline to encode data for the model. This object inherits from
<code>BaseImageProcessor</code>.`,name:"image_processor"},{anchor:"transformers.ImageFeatureExtractionPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.ImageFeatureExtractionPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.ImageFeatureExtractionPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.ImageFeatureExtractionPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.ImageFeatureExtractionPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.ImageFeatureExtractionPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.ImageFeatureExtractionPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.ImageFeatureExtractionPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.ImageFeatureExtractionPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"},{anchor:"transformers.ImageFeatureExtractionPipeline.image_processor_kwargs",description:`<strong>image_processor_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Additional dictionary of keyword arguments passed along to the image processor e.g.
{&#x201C;size&#x201D;: {&#x201C;height&#x201D;: 100, &#x201C;width&#x201D;: 100}&#x200C;}`,name:"image_processor_kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/image_feature_extraction.py#L11"}}),an=new P({props:{anchor:"transformers.ImageFeatureExtractionPipeline.example",$$slots:{default:[n_]},$$scope:{ctx:M}}}),ta=new v({props:{name:"__call__",anchor:"transformers.ImageFeatureExtractionPipeline.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ImageFeatureExtractionPipeline.__call__.images",description:`<strong>images</strong> (<code>str</code>, <code>List[str]</code>, <code>PIL.Image</code> or <code>List[PIL.Image]</code>) &#x2014;
The pipeline handles three types of images:</p>
<ul>
<li>A string containing a http link pointing to an image</li>
<li>A string containing a local path to an image</li>
<li>An image loaded in PIL directly</li>
</ul>
<p>The pipeline accepts either a single image or a batch of images, which must then be passed as a string.
Images in a batch must all be in the same format: all as http links, all as local paths, or all as PIL
images.`,name:"images"},{anchor:"transformers.ImageFeatureExtractionPipeline.__call__.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>, defaults to None) &#x2014;
The maximum time in seconds to wait for fetching images from the web. If None, no timeout is used and
the call may block forever.`,name:"timeout"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/image_feature_extraction.py#L71",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The features computed by the model.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A nested list of <code>float</code></p>
`}}),na=new J({props:{title:"ImageToTextPipeline",local:"transformers.ImageToTextPipeline",headingTag:"h3"}}),sa=new v({props:{name:"class transformers.ImageToTextPipeline",anchor:"transformers.ImageToTextPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ImageToTextPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.ImageToTextPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.ImageToTextPipeline.image_processor",description:`<strong>image_processor</strong> (<code>BaseImageProcessor</code>) &#x2014;
The image processor that will be used by the pipeline to encode data for the model. This object inherits from
<code>BaseImageProcessor</code>.`,name:"image_processor"},{anchor:"transformers.ImageToTextPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.ImageToTextPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.ImageToTextPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.ImageToTextPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.ImageToTextPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.ImageToTextPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.ImageToTextPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.ImageToTextPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.ImageToTextPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/image_to_text.py#L45"}}),ln=new P({props:{anchor:"transformers.ImageToTextPipeline.example",$$slots:{default:[s_]},$$scope:{ctx:M}}}),oa=new v({props:{name:"__call__",anchor:"transformers.ImageToTextPipeline.__call__",parameters:[{name:"images",val:": Union"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ImageToTextPipeline.__call__.images",description:`<strong>images</strong> (<code>str</code>, <code>List[str]</code>, <code>PIL.Image</code> or <code>List[PIL.Image]</code>) &#x2014;
The pipeline handles three types of images:</p>
<ul>
<li>A string containing a HTTP(s) link pointing to an image</li>
<li>A string containing a local path to an image</li>
<li>An image loaded in PIL directly</li>
</ul>
<p>The pipeline accepts either a single image or a batch of images.`,name:"images"},{anchor:"transformers.ImageToTextPipeline.__call__.max_new_tokens",description:`<strong>max_new_tokens</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The amount of maximum tokens to generate. By default it will use <code>generate</code> default.`,name:"max_new_tokens"},{anchor:"transformers.ImageToTextPipeline.__call__.generate_kwargs",description:`<strong>generate_kwargs</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
Pass it to send all of these arguments directly to <code>generate</code> allowing full control of this function.`,name:"generate_kwargs"},{anchor:"transformers.ImageToTextPipeline.__call__.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>, defaults to None) &#x2014;
The maximum time in seconds to wait for fetching images from the web. If None, no timeout is set and
the call may block forever.`,name:"timeout"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/image_to_text.py#L98",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Each result comes as a dictionary with the following key:</p>
<ul>
<li><strong>generated_text</strong> (<code>str</code>) — The generated text.</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A list or a list of list of <code>dict</code></p>
`}}),aa=new J({props:{title:"MaskGenerationPipeline",local:"transformers.MaskGenerationPipeline",headingTag:"h3"}}),ra=new v({props:{name:"class transformers.MaskGenerationPipeline",anchor:"transformers.MaskGenerationPipeline",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaskGenerationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.MaskGenerationPipeline.image_processor",description:`<strong>image_processor</strong> (<code>BaseImageProcessor</code>) &#x2014;
The image processor that will be used by the pipeline to encode data for the model. This object inherits from
<code>BaseImageProcessor</code>.`,name:"image_processor"},{anchor:"transformers.MaskGenerationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.MaskGenerationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.MaskGenerationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.MaskGenerationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.MaskGenerationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.MaskGenerationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.MaskGenerationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.MaskGenerationPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.MaskGenerationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"},{anchor:"transformers.MaskGenerationPipeline.points_per_batch",description:`<strong>points_per_batch</strong> (<em>optional</em>, int, default to 64) &#x2014;
Sets the number of points run simultaneously by the model. Higher numbers may be faster but use more GPU
memory.`,name:"points_per_batch"},{anchor:"transformers.MaskGenerationPipeline.output_bboxes_mask",description:`<strong>output_bboxes_mask</strong> (<code>bool</code>, <em>optional</em>, default to <code>False</code>) &#x2014;
Whether or not to output the bounding box predictions.`,name:"output_bboxes_mask"},{anchor:"transformers.MaskGenerationPipeline.output_rle_masks",description:`<strong>output_rle_masks</strong> (<code>bool</code>, <em>optional</em>, default to <code>False</code>) &#x2014;
Whether or not to output the masks in <code>RLE</code> format`,name:"output_rle_masks"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/mask_generation.py#L22"}}),pn=new P({props:{anchor:"transformers.MaskGenerationPipeline.example",$$slots:{default:[o_]},$$scope:{ctx:M}}}),ia=new v({props:{name:"__call__",anchor:"transformers.MaskGenerationPipeline.__call__",parameters:[{name:"image",val:""},{name:"*args",val:""},{name:"num_workers",val:" = None"},{name:"batch_size",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaskGenerationPipeline.__call__.inputs",description:`<strong>inputs</strong> (<code>np.ndarray</code> or <code>bytes</code> or <code>str</code> or <code>dict</code>) &#x2014;
Image or list of images.`,name:"inputs"},{anchor:"transformers.MaskGenerationPipeline.__call__.mask_threshold",description:`<strong>mask_threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
Threshold to use when turning the predicted masks into binary values.`,name:"mask_threshold"},{anchor:"transformers.MaskGenerationPipeline.__call__.pred_iou_thresh",description:`<strong>pred_iou_thresh</strong> (<code>float</code>, <em>optional</em>, defaults to 0.88) &#x2014;
A filtering threshold in <code>[0,1]</code> applied on the model&#x2019;s predicted mask quality.`,name:"pred_iou_thresh"},{anchor:"transformers.MaskGenerationPipeline.__call__.stability_score_thresh",description:`<strong>stability_score_thresh</strong> (<code>float</code>, <em>optional</em>, defaults to 0.95) &#x2014;
A filtering threshold in <code>[0,1]</code>, using the stability of the mask under changes to the cutoff used to
binarize the model&#x2019;s mask predictions.`,name:"stability_score_thresh"},{anchor:"transformers.MaskGenerationPipeline.__call__.stability_score_offset",description:`<strong>stability_score_offset</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The amount to shift the cutoff when calculated the stability score.`,name:"stability_score_offset"},{anchor:"transformers.MaskGenerationPipeline.__call__.crops_nms_thresh",description:`<strong>crops_nms_thresh</strong> (<code>float</code>, <em>optional</em>, defaults to 0.7) &#x2014;
The box IoU cutoff used by non-maximal suppression to filter duplicate masks.`,name:"crops_nms_thresh"},{anchor:"transformers.MaskGenerationPipeline.__call__.crops_n_layers",description:`<strong>crops_n_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If <code>crops_n_layers&gt;0</code>, mask prediction will be run again on crops of the image. Sets the number of
layers to run, where each layer has 2**i_layer number of image crops.`,name:"crops_n_layers"},{anchor:"transformers.MaskGenerationPipeline.__call__.crop_overlap_ratio",description:`<strong>crop_overlap_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to <code>512 / 1500</code>) &#x2014;
Sets the degree to which crops overlap. In the first crop layer, crops will overlap by this fraction of
the image length. Later layers with more crops scale down this overlap.`,name:"crop_overlap_ratio"},{anchor:"transformers.MaskGenerationPipeline.__call__.crop_n_points_downscale_factor",description:`<strong>crop_n_points_downscale_factor</strong> (<code>int</code>, <em>optional</em>, defaults to <code>1</code>) &#x2014;
The number of points-per-side sampled in layer n is scaled down by crop_n_points_downscale_factor**n.`,name:"crop_n_points_downscale_factor"},{anchor:"transformers.MaskGenerationPipeline.__call__.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>, defaults to None) &#x2014;
The maximum time in seconds to wait for fetching images from the web. If None, no timeout is set and
the call may block forever.`,name:"timeout"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/mask_generation.py#L128",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A dictionary with the following keys:</p>
<ul>
<li><strong>mask</strong> (<code>PIL.Image</code>) — A binary mask of the detected object as a PIL Image of shape <code>(width, height)</code> of the original image. Returns a mask filled with zeros if no object is found.</li>
<li><strong>score</strong> (<em>optional</em> <code>float</code>) — Optionally, when the model is capable of estimating a confidence of
the “object” described by the label and the mask.</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>Dict</code></p>
`}}),la=new J({props:{title:"VisualQuestionAnsweringPipeline",local:"transformers.VisualQuestionAnsweringPipeline",headingTag:"h3"}}),ca=new v({props:{name:"class transformers.VisualQuestionAnsweringPipeline",anchor:"transformers.VisualQuestionAnsweringPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.VisualQuestionAnsweringPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.VisualQuestionAnsweringPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.VisualQuestionAnsweringPipeline.image_processor",description:`<strong>image_processor</strong> (<code>BaseImageProcessor</code>) &#x2014;
The image processor that will be used by the pipeline to encode data for the model. This object inherits from
<code>BaseImageProcessor</code>.`,name:"image_processor"},{anchor:"transformers.VisualQuestionAnsweringPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.VisualQuestionAnsweringPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.VisualQuestionAnsweringPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.VisualQuestionAnsweringPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.VisualQuestionAnsweringPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.VisualQuestionAnsweringPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.VisualQuestionAnsweringPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.VisualQuestionAnsweringPipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.VisualQuestionAnsweringPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/visual_question_answering.py#L18"}}),mn=new P({props:{anchor:"transformers.VisualQuestionAnsweringPipeline.example",$$slots:{default:[a_]},$$scope:{ctx:M}}}),pa=new v({props:{name:"__call__",anchor:"transformers.VisualQuestionAnsweringPipeline.__call__",parameters:[{name:"image",val:": Union"},{name:"question",val:": str = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.VisualQuestionAnsweringPipeline.__call__.image",description:`<strong>image</strong> (<code>str</code>, <code>List[str]</code>, <code>PIL.Image</code> or <code>List[PIL.Image]</code>) &#x2014;
The pipeline handles three types of images:</p>
<ul>
<li>A string containing a http link pointing to an image</li>
<li>A string containing a local path to an image</li>
<li>An image loaded in PIL directly</li>
</ul>
<p>The pipeline accepts either a single image or a batch of images. If given a single image, it can be
broadcasted to multiple questions.`,name:"image"},{anchor:"transformers.VisualQuestionAnsweringPipeline.__call__.question",description:`<strong>question</strong> (<code>str</code>, <code>List[str]</code>) &#x2014;
The question(s) asked. If given a single question, it can be broadcasted to multiple images.`,name:"question"},{anchor:"transformers.VisualQuestionAnsweringPipeline.__call__.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 5) &#x2014;
The number of top labels that will be returned by the pipeline. If the provided number is higher than
the number of labels available in the model configuration, it will default to the number of labels.`,name:"top_k"},{anchor:"transformers.VisualQuestionAnsweringPipeline.__call__.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>, defaults to None) &#x2014;
The maximum time in seconds to wait for fetching images from the web. If None, no timeout is set and
the call may block forever.`,name:"timeout"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/visual_question_answering.py#L70",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<ul>
<li><strong>label</strong> (<code>str</code>) — The label identified by the model.</li>
<li><strong>score</strong> (<code>int</code>) — The score attributed by the model for that label.</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A dictionary or a list of dictionaries containing the result. The dictionaries contain the following keys</p>
`}}),da=new J({props:{title:"Parent class: Pipeline",local:"transformers.Pipeline",headingTag:"h2"}}),ma=new v({props:{name:"class transformers.Pipeline",anchor:"transformers.Pipeline",parameters:[{name:"model",val:": Union"},{name:"tokenizer",val:": Optional = None"},{name:"feature_extractor",val:": Optional = None"},{name:"image_processor",val:": Optional = None"},{name:"modelcard",val:": Optional = None"},{name:"framework",val:": Optional = None"},{name:"task",val:": str = ''"},{name:"args_parser",val:": ArgumentHandler = None"},{name:"device",val:": Union = None"},{name:"torch_dtype",val:": Union = None"},{name:"binary_output",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.Pipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.Pipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.Pipeline.feature_extractor",description:`<strong>feature_extractor</strong> (<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.SequenceFeatureExtractor">SequenceFeatureExtractor</a>) &#x2014;
The feature extractor that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.SequenceFeatureExtractor">SequenceFeatureExtractor</a>.`,name:"feature_extractor"},{anchor:"transformers.Pipeline.image_processor",description:`<strong>image_processor</strong> (<code>BaseImageProcessor</code>) &#x2014;
The image processor that will be used by the pipeline to encode data for the model. This object inherits from
<code>BaseImageProcessor</code>.`,name:"image_processor"},{anchor:"transformers.Pipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.Pipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.Pipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.Pipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.Pipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.Pipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.Pipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id. You can pass native <code>torch.device</code> or a <code>str</code> too`,name:"device"},{anchor:"transformers.Pipeline.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Sent directly as <code>model_kwargs</code> (just a simpler shortcut) to use the available precision for this model
(<code>torch.float16</code>, <code>torch.bfloat16</code>, &#x2026; or <code>&quot;auto&quot;</code>)`,name:"torch_dtype"},{anchor:"transformers.Pipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as
the raw output data e.g. text.`,name:"binary_output"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/base.py#L781"}}),ha=new v({props:{name:"check_model_type",anchor:"transformers.Pipeline.check_model_type",parameters:[{name:"supported_models",val:": Union"}],parametersDescription:[{anchor:"transformers.Pipeline.check_model_type.supported_models",description:`<strong>supported_models</strong> (<code>List[str]</code> or <code>dict</code>) &#x2014;
The list of models supported by the pipeline, or a dictionary with model class values.`,name:"supported_models"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/base.py#L1018"}}),fa=new v({props:{name:"device_placement",anchor:"transformers.Pipeline.device_placement",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/base.py#L957",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Context manager</p>
`}}),fn=new P({props:{anchor:"transformers.Pipeline.device_placement.example",$$slots:{default:[r_]},$$scope:{ctx:M}}}),ga=new v({props:{name:"ensure_tensor_on_device",anchor:"transformers.Pipeline.ensure_tensor_on_device",parameters:[{name:"**inputs",val:""}],parametersDescription:[{anchor:"transformers.Pipeline.ensure_tensor_on_device.inputs",description:`<strong>inputs</strong> (keyword arguments that should be <code>torch.Tensor</code>, the rest is ignored) &#x2014;
The tensors to place on <code>self.device</code>.`,name:"inputs"},{anchor:"transformers.Pipeline.ensure_tensor_on_device.Recursive",description:"<strong>Recursive</strong> on lists <strong>only</strong>. &#x2014;",name:"Recursive"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/base.py#L984",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The same as <code>inputs</code> but on the proper device.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>Dict[str, torch.Tensor]</code></p>
`}}),ua=new v({props:{name:"postprocess",anchor:"transformers.Pipeline.postprocess",parameters:[{name:"model_outputs",val:": ModelOutput"},{name:"**postprocess_parameters",val:": Dict"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/base.py#L1081"}}),Ta=new v({props:{name:"predict",anchor:"transformers.Pipeline.predict",parameters:[{name:"X",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/base.py#L951"}}),ba=new v({props:{name:"preprocess",anchor:"transformers.Pipeline.preprocess",parameters:[{name:"input_",val:": Any"},{name:"**preprocess_parameters",val:": Dict"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/base.py#L1060"}}),ya=new v({props:{name:"save_pretrained",anchor:"transformers.Pipeline.save_pretrained",parameters:[{name:"save_directory",val:": str"},{name:"safe_serialization",val:": bool = True"}],parametersDescription:[{anchor:"transformers.Pipeline.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code>) &#x2014;
A path to the directory where to saved. It will be created if it doesn&#x2019;t exist.`,name:"save_directory"},{anchor:"transformers.Pipeline.save_pretrained.safe_serialization",description:`<strong>safe_serialization</strong> (<code>str</code>) &#x2014;
Whether to save the model using <code>safetensors</code> or the traditional way for PyTorch or Tensorflow.`,name:"safe_serialization"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/base.py#L895"}}),wa=new v({props:{name:"transform",anchor:"transformers.Pipeline.transform",parameters:[{name:"X",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/base.py#L945"}}),{c(){r=i("meta"),x=s(),h=i("p"),c=s(),f(w.$$.fragment),t=s(),_=i("p"),_.innerHTML=sc,ac=s(),xn=i("p"),xn.textContent=ju,rc=s(),Mn=i("ul"),Mn.innerHTML=Ju,ic=s(),f(kn.$$.fragment),lc=s(),Un=i("p"),Un.innerHTML=$u,cc=s(),vn=i("p"),vn.textContent=Pu,pc=s(),f(jn.$$.fragment),dc=s(),Jn=i("p"),Jn.innerHTML=Cu,mc=s(),f($n.$$.fragment),hc=s(),Pn=i("p"),Pn.innerHTML=Iu,fc=s(),f(Cn.$$.fragment),gc=s(),In=i("p"),In.innerHTML=qu,uc=s(),f(qn.$$.fragment),Tc=s(),Gn=i("p"),Gn.textContent=Gu,bc=s(),f(Zn.$$.fragment),yc=s(),Me=i("div"),f(zn.$$.fragment),zd=s(),Ba=i("p"),Ba.innerHTML=Zu,Fd=s(),Na=i("p"),Na.textContent=zu,Rd=s(),Aa=i("ul"),Aa.innerHTML=Fu,Dd=s(),f(Oe.$$.fragment),wc=s(),f(Fn.$$.fragment),_c=s(),Rn=i("p"),Rn.innerHTML=Ru,xc=s(),f(Dn.$$.fragment),Mc=s(),f(Ee.$$.fragment),kc=s(),f(Bn.$$.fragment),Uc=s(),f(Nn.$$.fragment),vc=s(),An=i("p"),An.textContent=Du,jc=s(),f(Vn.$$.fragment),Jc=s(),Sn=i("p"),Sn.innerHTML=Bu,$c=s(),f(Wn.$$.fragment),Pc=s(),Ln=i("p"),Ln.textContent=Nu,Cc=s(),Hn=i("p"),Hn.textContent=Au,Ic=s(),Yn=i("ul"),Yn.innerHTML=Vu,qc=s(),f(On.$$.fragment),Gc=s(),En=i("p"),En.innerHTML=Su,Zc=s(),Qn=i("p"),Qn.innerHTML=Wu,zc=s(),f(Xn.$$.fragment),Fc=s(),Kn=i("p"),Kn.textContent=Lu,Rc=s(),f(es.$$.fragment),Dc=s(),ts=i("p"),ts.textContent=Hu,Bc=s(),ns=i("p"),ns.innerHTML=Yu,Nc=s(),f(ss.$$.fragment),Ac=s(),os=i("p"),os.textContent=Ou,Vc=s(),as=i("p"),as.innerHTML=Eu,Sc=s(),rs=i("p"),rs.textContent=Qu,Wc=s(),is=i("ul"),is.innerHTML=Xu,Lc=s(),f(ls.$$.fragment),Hc=s(),cs=i("p"),cs.textContent=Ku,Yc=s(),f(ps.$$.fragment),Oc=s(),ds=i("p"),ds.innerHTML=eT,Ec=s(),f(ms.$$.fragment),Qc=s(),hs=i("p"),hs.textContent=tT,Xc=s(),f(fs.$$.fragment),Kc=s(),S=i("div"),f(gs.$$.fragment),Bd=s(),Va=i("p"),Va.innerHTML=nT,Nd=s(),f(Qe.$$.fragment),Ad=s(),Sa=i("p"),Sa.innerHTML=sT,Vd=s(),Wa=i("p"),Wa.innerHTML=oT,Sd=s(),La=i("p"),La.innerHTML=aT,Wd=s(),Xe=i("div"),f(us.$$.fragment),Ld=s(),Ha=i("p"),Ha.innerHTML=rT,ep=s(),f(Ts.$$.fragment),tp=s(),le=i("div"),f(bs.$$.fragment),Hd=s(),Ya=i("p"),Ya.textContent=iT,Yd=s(),Oa=i("p"),Oa.textContent=lT,Od=s(),f(Ke.$$.fragment),Ed=s(),Ea=i("p"),Ea.innerHTML=cT,Qd=s(),et=i("div"),f(ys.$$.fragment),Xd=s(),Qa=i("p"),Qa.innerHTML=pT,np=s(),f(ws.$$.fragment),sp=s(),D=i("div"),f(_s.$$.fragment),Kd=s(),Xa=i("p"),Xa.innerHTML=dT,em=s(),f(tt.$$.fragment),tm=s(),Ka=i("p"),Ka.innerHTML=mT,nm=s(),f(nt.$$.fragment),sm=s(),er=i("p"),er.innerHTML=hT,om=s(),tr=i("p"),tr.innerHTML=fT,am=s(),st=i("div"),f(xs.$$.fragment),rm=s(),nr=i("p"),nr.innerHTML=gT,op=s(),f(Ms.$$.fragment),ap=s(),ke=i("div"),f(ks.$$.fragment),im=s(),sr=i("p"),sr.innerHTML=uT,lm=s(),f(ot.$$.fragment),cm=s(),or=i("p"),or.innerHTML=TT,pm=s(),at=i("div"),f(Us.$$.fragment),dm=s(),ar=i("p"),ar.textContent=bT,rp=s(),f(vs.$$.fragment),ip=s(),js=i("p"),js.textContent=yT,lp=s(),f(Js.$$.fragment),cp=s(),W=i("div"),f($s.$$.fragment),mm=s(),rr=i("p"),rr.innerHTML=wT,hm=s(),f(rt.$$.fragment),fm=s(),ir=i("p"),ir.innerHTML=_T,gm=s(),lr=i("p"),lr.innerHTML=xT,um=s(),cr=i("p"),cr.innerHTML=MT,Tm=s(),it=i("div"),f(Ps.$$.fragment),bm=s(),pr=i("p"),pr.textContent=kT,pp=s(),f(Cs.$$.fragment),dp=s(),L=i("div"),f(Is.$$.fragment),ym=s(),dr=i("p"),dr.innerHTML=UT,wm=s(),f(lt.$$.fragment),_m=s(),mr=i("p"),mr.innerHTML=vT,xm=s(),hr=i("p"),hr.innerHTML=jT,Mm=s(),fr=i("p"),fr.innerHTML=JT,km=s(),ct=i("div"),f(qs.$$.fragment),Um=s(),gr=i("p"),gr.textContent=$T,mp=s(),f(Gs.$$.fragment),hp=s(),ce=i("div"),f(Zs.$$.fragment),vm=s(),ur=i("p"),ur.innerHTML=PT,jm=s(),f(pt.$$.fragment),Jm=s(),Tr=i("p"),Tr.innerHTML=CT,$m=s(),br=i("p"),br.innerHTML=IT,Pm=s(),dt=i("div"),f(zs.$$.fragment),Cm=s(),yr=i("p"),yr.textContent=qT,fp=s(),f(Fs.$$.fragment),gp=s(),pe=i("div"),f(Rs.$$.fragment),Im=s(),wr=i("p"),wr.innerHTML=GT,qm=s(),f(mt.$$.fragment),Gm=s(),_r=i("p"),_r.innerHTML=ZT,Zm=s(),xr=i("p"),xr.innerHTML=zT,zm=s(),ht=i("div"),f(Ds.$$.fragment),Fm=s(),Mr=i("p"),Mr.textContent=FT,up=s(),f(Bs.$$.fragment),Tp=s(),H=i("div"),f(Ns.$$.fragment),Rm=s(),kr=i("p"),kr.innerHTML=RT,Dm=s(),f(ft.$$.fragment),Bm=s(),Ur=i("p"),Ur.innerHTML=DT,Nm=s(),vr=i("p"),vr.innerHTML=BT,Am=s(),jr=i("p"),jr.innerHTML=NT,Vm=s(),gt=i("div"),f(As.$$.fragment),Sm=s(),Jr=i("p"),Jr.textContent=AT,bp=s(),f(Vs.$$.fragment),yp=s(),Ue=i("div"),f(Ss.$$.fragment),Wm=s(),$r=i("p"),$r.innerHTML=VT,Lm=s(),Pr=i("p"),Pr.innerHTML=ST,Hm=s(),Cr=i("p"),Cr.innerHTML=WT,Ym=s(),ut=i("div"),f(Ws.$$.fragment),Om=s(),Ir=i("p"),Ir.textContent=LT,wp=s(),f(Ls.$$.fragment),_p=s(),Y=i("div"),f(Hs.$$.fragment),Em=s(),qr=i("p"),qr.innerHTML=HT,Qm=s(),f(Tt.$$.fragment),Xm=s(),Gr=i("p"),Gr.innerHTML=YT,Km=s(),Zr=i("p"),Zr.innerHTML=OT,eh=s(),zr=i("p"),zr.innerHTML=ET,th=s(),bt=i("div"),f(Ys.$$.fragment),nh=s(),Fr=i("p"),Fr.textContent=QT,xp=s(),f(Os.$$.fragment),Mp=s(),O=i("div"),f(Es.$$.fragment),sh=s(),Rr=i("p"),Rr.innerHTML=XT,oh=s(),f(yt.$$.fragment),ah=s(),Dr=i("p"),Dr.innerHTML=KT,rh=s(),Br=i("p"),Br.innerHTML=eb,ih=s(),Nr=i("p"),Nr.innerHTML=tb,lh=s(),wt=i("div"),f(Qs.$$.fragment),ch=s(),Ar=i("p"),Ar.textContent=nb,kp=s(),f(Xs.$$.fragment),Up=s(),Ks=i("p"),Ks.textContent=sb,vp=s(),f(eo.$$.fragment),jp=s(),de=i("div"),f(to.$$.fragment),ph=s(),Vr=i("p"),Vr.innerHTML=ob,dh=s(),f(_t.$$.fragment),mh=s(),xt=i("div"),f(no.$$.fragment),hh=s(),Sr=i("p"),Sr.innerHTML=ab,fh=s(),Mt=i("div"),f(so.$$.fragment),gh=s(),Wr=i("p"),Wr.innerHTML=rb,uh=s(),kt=i("div"),f(oo.$$.fragment),Th=s(),Lr=i("p"),Lr.textContent=ib,Jp=s(),E=i("div"),f(ao.$$.fragment),bh=s(),Hr=i("p"),Hr.textContent=lb,yh=s(),f(Ut.$$.fragment),wh=s(),Yr=i("p"),Yr.innerHTML=cb,_h=s(),Or=i("p"),Or.innerHTML=pb,xh=s(),Er=i("p"),Er.innerHTML=db,Mh=s(),vt=i("div"),f(ro.$$.fragment),kh=s(),Qr=i("p"),Qr.textContent=mb,$p=s(),f(io.$$.fragment),Pp=s(),G=i("div"),f(lo.$$.fragment),Uh=s(),Xr=i("p"),Xr.innerHTML=hb,vh=s(),f(jt.$$.fragment),jh=s(),Kr=i("p"),Kr.innerHTML=fb,Jh=s(),ei=i("p"),ei.innerHTML=gb,$h=s(),ti=i("p"),ti.innerHTML=ub,Ph=s(),f(Jt.$$.fragment),Ch=s(),f($t.$$.fragment),Ih=s(),Pt=i("div"),f(co.$$.fragment),qh=s(),ni=i("p"),ni.textContent=Tb,Cp=s(),f(po.$$.fragment),Ip=s(),Z=i("div"),f(mo.$$.fragment),Gh=s(),si=i("p"),si.innerHTML=bb,Zh=s(),f(Ct.$$.fragment),zh=s(),oi=i("p"),oi.innerHTML=yb,Fh=s(),ai=i("p"),ai.innerHTML=wb,Rh=s(),ri=i("p"),ri.innerHTML=_b,Dh=s(),It=i("div"),f(ho.$$.fragment),Bh=s(),ii=i("p"),ii.textContent=xb,Nh=s(),Se=i("div"),f(fo.$$.fragment),Ah=s(),li=i("p"),li.innerHTML=Mb,Vh=s(),ci=i("p"),ci.textContent=kb,Sh=s(),qt=i("div"),f(go.$$.fragment),Wh=s(),pi=i("p"),pi.textContent=Ub,qp=s(),f(uo.$$.fragment),Gp=s(),me=i("div"),f(To.$$.fragment),Lh=s(),di=i("p"),di.textContent=vb,Hh=s(),mi=i("p"),mi.innerHTML=jb,Yh=s(),hi=i("p"),hi.innerHTML=Jb,Oh=s(),f(Gt.$$.fragment),Eh=s(),Zt=i("div"),f(bo.$$.fragment),Qh=s(),fi=i("p"),fi.textContent=$b,Zp=s(),f(yo.$$.fragment),zp=s(),Q=i("div"),f(wo.$$.fragment),Xh=s(),gi=i("p"),gi.innerHTML=Pb,Kh=s(),f(zt.$$.fragment),ef=s(),ui=i("p"),ui.innerHTML=Cb,tf=s(),Ti=i("p"),Ti.innerHTML=Ib,nf=s(),bi=i("p"),bi.innerHTML=qb,sf=s(),ae=i("div"),f(_o.$$.fragment),of=s(),yi=i("p"),yi.textContent=Gb,af=s(),wi=i("ul"),wi.innerHTML=Zb,rf=s(),_i=i("p"),_i.innerHTML=zb,lf=s(),f(Ft.$$.fragment),cf=s(),xi=i("p"),xi.textContent=Fb,pf=s(),f(Rt.$$.fragment),Fp=s(),f(xo.$$.fragment),Rp=s(),B=i("div"),f(Mo.$$.fragment),df=s(),Mi=i("p"),Mi.innerHTML=Rb,mf=s(),f(Dt.$$.fragment),hf=s(),ki=i("p"),ki.innerHTML=Db,ff=s(),Ui=i("p"),Ui.innerHTML=Bb,gf=s(),vi=i("p"),vi.innerHTML=Nb,uf=s(),ji=i("p"),ji.innerHTML=Ab,Tf=s(),Bt=i("div"),f(ko.$$.fragment),bf=s(),Ji=i("p"),Ji.textContent=Vb,Dp=s(),f(Uo.$$.fragment),Bp=s(),X=i("div"),f(vo.$$.fragment),yf=s(),$i=i("p"),$i.innerHTML=Sb,wf=s(),f(Nt.$$.fragment),_f=s(),Pi=i("p"),Pi.innerHTML=Wb,xf=s(),Ci=i("p"),Ci.innerHTML=Lb,Mf=s(),Ii=i("p"),Ii.innerHTML=Hb,kf=s(),At=i("div"),f(jo.$$.fragment),Uf=s(),qi=i("p"),qi.textContent=Yb,Np=s(),f(Jo.$$.fragment),Ap=s(),z=i("div"),f($o.$$.fragment),vf=s(),Gi=i("p"),Gi.textContent=Ob,jf=s(),f(Vt.$$.fragment),Jf=s(),Zi=i("p"),Zi.innerHTML=Eb,$f=s(),zi=i("p"),zi.innerHTML=Qb,Pf=s(),Fi=i("p"),Fi.innerHTML=Xb,Cf=s(),f(St.$$.fragment),If=s(),Wt=i("div"),f(Po.$$.fragment),qf=s(),Ri=i("p"),Ri.textContent=Kb,Gf=s(),Lt=i("div"),f(Co.$$.fragment),Zf=s(),Di=i("p"),Di.textContent=ey,Vp=s(),f(Io.$$.fragment),Sp=s(),q=i("div"),f(qo.$$.fragment),zf=s(),Bi=i("p"),Bi.innerHTML=ty,Ff=s(),f(Ht.$$.fragment),Rf=s(),Ni=i("p"),Ni.innerHTML=ny,Df=s(),Ai=i("p"),Ai.innerHTML=sy,Bf=s(),Vi=i("p"),Vi.innerHTML=oy,Nf=s(),Yt=i("div"),f(Go.$$.fragment),Af=s(),Si=i("p"),Si.textContent=ay,Vf=s(),We=i("div"),f(Zo.$$.fragment),Sf=s(),Wi=i("p"),Wi.textContent=ry,Wf=s(),Li=i("p"),Li.textContent=iy,Lf=s(),Ot=i("div"),f(zo.$$.fragment),Hf=s(),Hi=i("p"),Hi.textContent=ly,Yf=s(),Et=i("div"),f(Fo.$$.fragment),Of=s(),Yi=i("p"),Yi.textContent=cy,Ef=s(),Qt=i("div"),f(Ro.$$.fragment),Qf=s(),Oi=i("p"),Oi.textContent=py,Wp=s(),f(Do.$$.fragment),Lp=s(),he=i("div"),f(Bo.$$.fragment),Xf=s(),Ei=i("p"),Ei.textContent=dy,Kf=s(),Qi=i("p"),Qi.innerHTML=my,eg=s(),Xi=i("p"),Xi.innerHTML=hy,tg=s(),f(Xt.$$.fragment),ng=s(),Kt=i("div"),f(No.$$.fragment),sg=s(),Ki=i("p"),Ki.textContent=fy,Hp=s(),f(Ao.$$.fragment),Yp=s(),N=i("div"),f(Vo.$$.fragment),og=s(),el=i("p"),el.innerHTML=gy,ag=s(),tl=i("p"),tl.innerHTML=uy,rg=s(),f(en.$$.fragment),ig=s(),nl=i("p"),nl.innerHTML=Ty,lg=s(),sl=i("p"),sl.innerHTML=by,cg=s(),ol=i("p"),ol.innerHTML=yy,pg=s(),tn=i("div"),f(So.$$.fragment),dg=s(),al=i("p"),al.innerHTML=wy,Op=s(),f(Wo.$$.fragment),Ep=s(),Lo=i("p"),Lo.textContent=_y,Qp=s(),f(Ho.$$.fragment),Xp=s(),K=i("div"),f(Yo.$$.fragment),mg=s(),rl=i("p"),rl.innerHTML=xy,hg=s(),f(nn.$$.fragment),fg=s(),il=i("p"),il.innerHTML=My,gg=s(),ll=i("p"),ll.innerHTML=ky,ug=s(),cl=i("p"),cl.innerHTML=Uy,Tg=s(),Ae=i("div"),f(Oo.$$.fragment),bg=s(),pl=i("p"),pl.innerHTML=vy,yg=s(),dl=i("p"),dl.textContent=jy,wg=s(),ml=i("ul"),ml.innerHTML=Jy,Kp=s(),f(Eo.$$.fragment),ed=s(),ee=i("div"),f(Qo.$$.fragment),_g=s(),hl=i("p"),hl.textContent=$y,xg=s(),f(sn.$$.fragment),Mg=s(),fl=i("p"),fl.innerHTML=Py,kg=s(),gl=i("p"),gl.innerHTML=Cy,Ug=s(),ul=i("p"),ul.innerHTML=Iy,vg=s(),on=i("div"),f(Xo.$$.fragment),jg=s(),Tl=i("p"),Tl.textContent=qy,td=s(),f(Ko.$$.fragment),nd=s(),te=i("div"),f(ea.$$.fragment),Jg=s(),bl=i("p"),bl.textContent=Gy,$g=s(),f(an.$$.fragment),Pg=s(),yl=i("p"),yl.innerHTML=Zy,Cg=s(),wl=i("p"),wl.innerHTML=zy,Ig=s(),_l=i("p"),_l.innerHTML=Fy,qg=s(),rn=i("div"),f(ta.$$.fragment),Gg=s(),xl=i("p"),xl.textContent=Ry,sd=s(),f(na.$$.fragment),od=s(),ne=i("div"),f(sa.$$.fragment),Zg=s(),Ml=i("p"),Ml.innerHTML=Dy,zg=s(),f(ln.$$.fragment),Fg=s(),kl=i("p"),kl.innerHTML=By,Rg=s(),Ul=i("p"),Ul.textContent=Ny,Dg=s(),vl=i("p"),vl.innerHTML=Ay,Bg=s(),cn=i("div"),f(oa.$$.fragment),Ng=s(),jl=i("p"),jl.textContent=Vy,ad=s(),f(aa.$$.fragment),rd=s(),F=i("div"),f(ra.$$.fragment),Ag=s(),Jl=i("p"),Jl.innerHTML=Sy,Vg=s(),$l=i("p"),$l.textContent=Wy,Sg=s(),Pl=i("ol"),Pl.innerHTML=Ly,Wg=s(),f(pn.$$.fragment),Lg=s(),Cl=i("p"),Cl.innerHTML=Hy,Hg=s(),Il=i("p"),Il.innerHTML=Yy,Yg=s(),ql=i("p"),ql.innerHTML=Oy,Og=s(),dn=i("div"),f(ia.$$.fragment),Eg=s(),Gl=i("p"),Gl.textContent=Ey,id=s(),f(la.$$.fragment),ld=s(),se=i("div"),f(ca.$$.fragment),Qg=s(),Zl=i("p"),Zl.innerHTML=Qy,Xg=s(),f(mn.$$.fragment),Kg=s(),zl=i("p"),zl.innerHTML=Xy,eu=s(),Fl=i("p"),Fl.innerHTML=Ky,tu=s(),Rl=i("p"),Rl.innerHTML=ew,nu=s(),Le=i("div"),f(pa.$$.fragment),su=s(),Dl=i("p"),Dl.textContent=tw,ou=s(),Bl=i("ul"),Bl.innerHTML=nw,cd=s(),f(da.$$.fragment),pd=s(),C=i("div"),f(ma.$$.fragment),au=s(),Nl=i("p"),Nl.textContent=sw,ru=s(),Al=i("p"),Al.textContent=ow,iu=s(),Vl=i("p"),Vl.textContent=aw,lu=s(),Sl=i("p"),Sl.textContent=rw,cu=s(),Wl=i("p"),Wl.innerHTML=iw,pu=s(),hn=i("div"),f(ha.$$.fragment),du=s(),Ll=i("p"),Ll.textContent=lw,mu=s(),He=i("div"),f(fa.$$.fragment),hu=s(),Hl=i("p"),Hl.textContent=cw,fu=s(),f(fn.$$.fragment),gu=s(),gn=i("div"),f(ga.$$.fragment),uu=s(),Yl=i("p"),Yl.textContent=pw,Tu=s(),un=i("div"),f(ua.$$.fragment),bu=s(),Ol=i("p"),Ol.innerHTML=dw,yu=s(),Tn=i("div"),f(Ta.$$.fragment),wu=s(),El=i("p"),El.innerHTML=mw,_u=s(),bn=i("div"),f(ba.$$.fragment),xu=s(),Ql=i("p"),Ql.innerHTML=hw,Mu=s(),yn=i("div"),f(ya.$$.fragment),ku=s(),Xl=i("p"),Xl.textContent=fw,Uu=s(),wn=i("div"),f(wa.$$.fragment),vu=s(),Kl=i("p"),Kl.innerHTML=gw,dd=s(),oc=i("p"),this.h()},l(e){const p=ww("svelte-u9bgzb",document.head);r=l(p,"META",{name:!0,content:!0}),p.forEach(a),x=o(e),h=l(e,"P",{}),k(h).forEach(a),c=o(e),g(w.$$.fragment,e),t=o(e),_=l(e,"P",{"data-svelte-h":!0}),m(_)!=="svelte-bnmuag"&&(_.innerHTML=sc),ac=o(e),xn=l(e,"P",{"data-svelte-h":!0}),m(xn)!=="svelte-yt9cfz"&&(xn.textContent=ju),rc=o(e),Mn=l(e,"UL",{"data-svelte-h":!0}),m(Mn)!=="svelte-18cnzgp"&&(Mn.innerHTML=Ju),ic=o(e),g(kn.$$.fragment,e),lc=o(e),Un=l(e,"P",{"data-svelte-h":!0}),m(Un)!=="svelte-l2tdp3"&&(Un.innerHTML=$u),cc=o(e),vn=l(e,"P",{"data-svelte-h":!0}),m(vn)!=="svelte-1x7q2yo"&&(vn.textContent=Pu),pc=o(e),g(jn.$$.fragment,e),dc=o(e),Jn=l(e,"P",{"data-svelte-h":!0}),m(Jn)!=="svelte-19h1yua"&&(Jn.innerHTML=Cu),mc=o(e),g($n.$$.fragment,e),hc=o(e),Pn=l(e,"P",{"data-svelte-h":!0}),m(Pn)!=="svelte-10lm9b0"&&(Pn.innerHTML=Iu),fc=o(e),g(Cn.$$.fragment,e),gc=o(e),In=l(e,"P",{"data-svelte-h":!0}),m(In)!=="svelte-ww9dn5"&&(In.innerHTML=qu),uc=o(e),g(qn.$$.fragment,e),Tc=o(e),Gn=l(e,"P",{"data-svelte-h":!0}),m(Gn)!=="svelte-1k2h3v5"&&(Gn.textContent=Gu),bc=o(e),g(Zn.$$.fragment,e),yc=o(e),Me=l(e,"DIV",{class:!0});var De=k(Me);g(zn.$$.fragment,De),zd=o(De),Ba=l(De,"P",{"data-svelte-h":!0}),m(Ba)!=="svelte-689nfv"&&(Ba.innerHTML=Zu),Fd=o(De),Na=l(De,"P",{"data-svelte-h":!0}),m(Na)!=="svelte-1lntif9"&&(Na.textContent=zu),Rd=o(De),Aa=l(De,"UL",{"data-svelte-h":!0}),m(Aa)!=="svelte-18neydl"&&(Aa.innerHTML=Fu),Dd=o(De),g(Oe.$$.fragment,De),De.forEach(a),wc=o(e),g(Fn.$$.fragment,e),_c=o(e),Rn=l(e,"P",{"data-svelte-h":!0}),m(Rn)!=="svelte-1apicn"&&(Rn.innerHTML=Ru),xc=o(e),g(Dn.$$.fragment,e),Mc=o(e),g(Ee.$$.fragment,e),kc=o(e),g(Bn.$$.fragment,e),Uc=o(e),g(Nn.$$.fragment,e),vc=o(e),An=l(e,"P",{"data-svelte-h":!0}),m(An)!=="svelte-be3eiz"&&(An.textContent=Du),jc=o(e),g(Vn.$$.fragment,e),Jc=o(e),Sn=l(e,"P",{"data-svelte-h":!0}),m(Sn)!=="svelte-vxw3p4"&&(Sn.innerHTML=Bu),$c=o(e),g(Wn.$$.fragment,e),Pc=o(e),Ln=l(e,"P",{"data-svelte-h":!0}),m(Ln)!=="svelte-15t12x9"&&(Ln.textContent=Nu),Cc=o(e),Hn=l(e,"P",{"data-svelte-h":!0}),m(Hn)!=="svelte-qy4tut"&&(Hn.textContent=Au),Ic=o(e),Yn=l(e,"UL",{"data-svelte-h":!0}),m(Yn)!=="svelte-12brtl5"&&(Yn.innerHTML=Vu),qc=o(e),g(On.$$.fragment,e),Gc=o(e),En=l(e,"P",{"data-svelte-h":!0}),m(En)!=="svelte-8boz4s"&&(En.innerHTML=Su),Zc=o(e),Qn=l(e,"P",{"data-svelte-h":!0}),m(Qn)!=="svelte-1e8h99m"&&(Qn.innerHTML=Wu),zc=o(e),g(Xn.$$.fragment,e),Fc=o(e),Kn=l(e,"P",{"data-svelte-h":!0}),m(Kn)!=="svelte-jrh3w"&&(Kn.textContent=Lu),Rc=o(e),g(es.$$.fragment,e),Dc=o(e),ts=l(e,"P",{"data-svelte-h":!0}),m(ts)!=="svelte-1bbc8q3"&&(ts.textContent=Hu),Bc=o(e),ns=l(e,"P",{"data-svelte-h":!0}),m(ns)!=="svelte-tu5fem"&&(ns.innerHTML=Yu),Nc=o(e),g(ss.$$.fragment,e),Ac=o(e),os=l(e,"P",{"data-svelte-h":!0}),m(os)!=="svelte-v57rju"&&(os.textContent=Ou),Vc=o(e),as=l(e,"P",{"data-svelte-h":!0}),m(as)!=="svelte-15o5e7w"&&(as.innerHTML=Eu),Sc=o(e),rs=l(e,"P",{"data-svelte-h":!0}),m(rs)!=="svelte-g2hs1z"&&(rs.textContent=Qu),Wc=o(e),is=l(e,"UL",{"data-svelte-h":!0}),m(is)!=="svelte-bkoq64"&&(is.innerHTML=Xu),Lc=o(e),g(ls.$$.fragment,e),Hc=o(e),cs=l(e,"P",{"data-svelte-h":!0}),m(cs)!=="svelte-19c7ukz"&&(cs.textContent=Ku),Yc=o(e),g(ps.$$.fragment,e),Oc=o(e),ds=l(e,"P",{"data-svelte-h":!0}),m(ds)!=="svelte-1dtjdk1"&&(ds.innerHTML=eT),Ec=o(e),g(ms.$$.fragment,e),Qc=o(e),hs=l(e,"P",{"data-svelte-h":!0}),m(hs)!=="svelte-1uac455"&&(hs.textContent=tT),Xc=o(e),g(fs.$$.fragment,e),Kc=o(e),S=l(e,"DIV",{class:!0});var fe=k(S);g(gs.$$.fragment,fe),Bd=o(fe),Va=l(fe,"P",{"data-svelte-h":!0}),m(Va)!=="svelte-1wmh7ni"&&(Va.innerHTML=nT),Nd=o(fe),g(Qe.$$.fragment,fe),Ad=o(fe),Sa=l(fe,"P",{"data-svelte-h":!0}),m(Sa)!=="svelte-13rexfx"&&(Sa.innerHTML=sT),Vd=o(fe),Wa=l(fe,"P",{"data-svelte-h":!0}),m(Wa)!=="svelte-1xc9e5t"&&(Wa.innerHTML=oT),Sd=o(fe),La=l(fe,"P",{"data-svelte-h":!0}),m(La)!=="svelte-1pv1mxa"&&(La.innerHTML=aT),Wd=o(fe),Xe=l(fe,"DIV",{class:!0});var _a=k(Xe);g(us.$$.fragment,_a),Ld=o(_a),Ha=l(_a,"P",{"data-svelte-h":!0}),m(Ha)!=="svelte-q3e7x2"&&(Ha.innerHTML=rT),_a.forEach(a),fe.forEach(a),ep=o(e),g(Ts.$$.fragment,e),tp=o(e),le=l(e,"DIV",{class:!0});var ve=k(le);g(bs.$$.fragment,ve),Hd=o(ve),Ya=l(ve,"P",{"data-svelte-h":!0}),m(Ya)!=="svelte-vm8asa"&&(Ya.textContent=iT),Yd=o(ve),Oa=l(ve,"P",{"data-svelte-h":!0}),m(Oa)!=="svelte-1l0gjoy"&&(Oa.textContent=lT),Od=o(ve),g(Ke.$$.fragment,ve),Ed=o(ve),Ea=l(ve,"P",{"data-svelte-h":!0}),m(Ea)!=="svelte-13rexfx"&&(Ea.innerHTML=cT),Qd=o(ve),et=l(ve,"DIV",{class:!0});var xa=k(et);g(ys.$$.fragment,xa),Xd=o(xa),Qa=l(xa,"P",{"data-svelte-h":!0}),m(Qa)!=="svelte-14zuvx7"&&(Qa.innerHTML=pT),xa.forEach(a),ve.forEach(a),np=o(e),g(ws.$$.fragment,e),sp=o(e),D=l(e,"DIV",{class:!0});var oe=k(D);g(_s.$$.fragment,oe),Kd=o(oe),Xa=l(oe,"P",{"data-svelte-h":!0}),m(Xa)!=="svelte-y1s454"&&(Xa.innerHTML=dT),em=o(oe),g(tt.$$.fragment,oe),tm=o(oe),Ka=l(oe,"P",{"data-svelte-h":!0}),m(Ka)!=="svelte-13rexfx"&&(Ka.innerHTML=mT),nm=o(oe),g(nt.$$.fragment,oe),sm=o(oe),er=l(oe,"P",{"data-svelte-h":!0}),m(er)!=="svelte-13zje4f"&&(er.innerHTML=hT),om=o(oe),tr=l(oe,"P",{"data-svelte-h":!0}),m(tr)!=="svelte-1g4o6wf"&&(tr.innerHTML=fT),am=o(oe),st=l(oe,"DIV",{class:!0});var Ma=k(st);g(xs.$$.fragment,Ma),rm=o(Ma),nr=l(Ma,"P",{"data-svelte-h":!0}),m(nr)!=="svelte-17aw55v"&&(nr.innerHTML=gT),Ma.forEach(a),oe.forEach(a),op=o(e),g(Ms.$$.fragment,e),ap=o(e),ke=l(e,"DIV",{class:!0});var Be=k(ke);g(ks.$$.fragment,Be),im=o(Be),sr=l(Be,"P",{"data-svelte-h":!0}),m(sr)!=="svelte-tmg4zt"&&(sr.innerHTML=uT),lm=o(Be),g(ot.$$.fragment,Be),cm=o(Be),or=l(Be,"P",{"data-svelte-h":!0}),m(or)!=="svelte-dxkdia"&&(or.innerHTML=TT),pm=o(Be),at=l(Be,"DIV",{class:!0});var ka=k(at);g(Us.$$.fragment,ka),dm=o(ka),ar=l(ka,"P",{"data-svelte-h":!0}),m(ar)!=="svelte-kd58rd"&&(ar.textContent=bT),ka.forEach(a),Be.forEach(a),rp=o(e),g(vs.$$.fragment,e),ip=o(e),js=l(e,"P",{"data-svelte-h":!0}),m(js)!=="svelte-10a8pps"&&(js.textContent=yT),lp=o(e),g(Js.$$.fragment,e),cp=o(e),W=l(e,"DIV",{class:!0});var ge=k(W);g($s.$$.fragment,ge),mm=o(ge),rr=l(ge,"P",{"data-svelte-h":!0}),m(rr)!=="svelte-cmozej"&&(rr.innerHTML=wT),hm=o(ge),g(rt.$$.fragment,ge),fm=o(ge),ir=l(ge,"P",{"data-svelte-h":!0}),m(ir)!=="svelte-13rexfx"&&(ir.innerHTML=_T),gm=o(ge),lr=l(ge,"P",{"data-svelte-h":!0}),m(lr)!=="svelte-vdkpk9"&&(lr.innerHTML=xT),um=o(ge),cr=l(ge,"P",{"data-svelte-h":!0}),m(cr)!=="svelte-6trb8y"&&(cr.innerHTML=MT),Tm=o(ge),it=l(ge,"DIV",{class:!0});var Ua=k(it);g(Ps.$$.fragment,Ua),bm=o(Ua),pr=l(Ua,"P",{"data-svelte-h":!0}),m(pr)!=="svelte-10lhg27"&&(pr.textContent=kT),Ua.forEach(a),ge.forEach(a),pp=o(e),g(Cs.$$.fragment,e),dp=o(e),L=l(e,"DIV",{class:!0});var ue=k(L);g(Is.$$.fragment,ue),ym=o(ue),dr=l(ue,"P",{"data-svelte-h":!0}),m(dr)!=="svelte-rlbi70"&&(dr.innerHTML=UT),wm=o(ue),g(lt.$$.fragment,ue),_m=o(ue),mr=l(ue,"P",{"data-svelte-h":!0}),m(mr)!=="svelte-13rexfx"&&(mr.innerHTML=vT),xm=o(ue),hr=l(ue,"P",{"data-svelte-h":!0}),m(hr)!=="svelte-6njsub"&&(hr.innerHTML=jT),Mm=o(ue),fr=l(ue,"P",{"data-svelte-h":!0}),m(fr)!=="svelte-cqpf5t"&&(fr.innerHTML=JT),km=o(ue),ct=l(ue,"DIV",{class:!0});var va=k(ct);g(qs.$$.fragment,va),Um=o(va),gr=l(va,"P",{"data-svelte-h":!0}),m(gr)!=="svelte-ypfmt8"&&(gr.textContent=$T),va.forEach(a),ue.forEach(a),mp=o(e),g(Gs.$$.fragment,e),hp=o(e),ce=l(e,"DIV",{class:!0});var je=k(ce);g(Zs.$$.fragment,je),vm=o(je),ur=l(je,"P",{"data-svelte-h":!0}),m(ur)!=="svelte-1y2a978"&&(ur.innerHTML=PT),jm=o(je),g(pt.$$.fragment,je),Jm=o(je),Tr=l(je,"P",{"data-svelte-h":!0}),m(Tr)!=="svelte-1s976fn"&&(Tr.innerHTML=CT),$m=o(je),br=l(je,"P",{"data-svelte-h":!0}),m(br)!=="svelte-151zbn3"&&(br.innerHTML=IT),Pm=o(je),dt=l(je,"DIV",{class:!0});var ja=k(dt);g(zs.$$.fragment,ja),Cm=o(ja),yr=l(ja,"P",{"data-svelte-h":!0}),m(yr)!=="svelte-1qn9qfa"&&(yr.textContent=qT),ja.forEach(a),je.forEach(a),fp=o(e),g(Fs.$$.fragment,e),gp=o(e),pe=l(e,"DIV",{class:!0});var Je=k(pe);g(Rs.$$.fragment,Je),Im=o(Je),wr=l(Je,"P",{"data-svelte-h":!0}),m(wr)!=="svelte-5hn3v1"&&(wr.innerHTML=GT),qm=o(Je),g(mt.$$.fragment,Je),Gm=o(Je),_r=l(Je,"P",{"data-svelte-h":!0}),m(_r)!=="svelte-t7z1n4"&&(_r.innerHTML=ZT),Zm=o(Je),xr=l(Je,"P",{"data-svelte-h":!0}),m(xr)!=="svelte-1pm9980"&&(xr.innerHTML=zT),zm=o(Je),ht=l(Je,"DIV",{class:!0});var Ja=k(ht);g(Ds.$$.fragment,Ja),Fm=o(Ja),Mr=l(Ja,"P",{"data-svelte-h":!0}),m(Mr)!=="svelte-1ega32d"&&(Mr.textContent=FT),Ja.forEach(a),Je.forEach(a),up=o(e),g(Bs.$$.fragment,e),Tp=o(e),H=l(e,"DIV",{class:!0});var Te=k(H);g(Ns.$$.fragment,Te),Rm=o(Te),kr=l(Te,"P",{"data-svelte-h":!0}),m(kr)!=="svelte-1c7y9od"&&(kr.innerHTML=RT),Dm=o(Te),g(ft.$$.fragment,Te),Bm=o(Te),Ur=l(Te,"P",{"data-svelte-h":!0}),m(Ur)!=="svelte-13rexfx"&&(Ur.innerHTML=DT),Nm=o(Te),vr=l(Te,"P",{"data-svelte-h":!0}),m(vr)!=="svelte-9n3s5r"&&(vr.innerHTML=BT),Am=o(Te),jr=l(Te,"P",{"data-svelte-h":!0}),m(jr)!=="svelte-1ea8edc"&&(jr.innerHTML=NT),Vm=o(Te),gt=l(Te,"DIV",{class:!0});var $a=k(gt);g(As.$$.fragment,$a),Sm=o($a),Jr=l($a,"P",{"data-svelte-h":!0}),m(Jr)!=="svelte-1ws18e1"&&(Jr.textContent=AT),$a.forEach(a),Te.forEach(a),bp=o(e),g(Vs.$$.fragment,e),yp=o(e),Ue=l(e,"DIV",{class:!0});var Ne=k(Ue);g(Ss.$$.fragment,Ne),Wm=o(Ne),$r=l(Ne,"P",{"data-svelte-h":!0}),m($r)!=="svelte-115eloe"&&($r.innerHTML=VT),Lm=o(Ne),Pr=l(Ne,"P",{"data-svelte-h":!0}),m(Pr)!=="svelte-n466wj"&&(Pr.innerHTML=ST),Hm=o(Ne),Cr=l(Ne,"P",{"data-svelte-h":!0}),m(Cr)!=="svelte-38n9pn"&&(Cr.innerHTML=WT),Ym=o(Ne),ut=l(Ne,"DIV",{class:!0});var Pa=k(ut);g(Ws.$$.fragment,Pa),Om=o(Pa),Ir=l(Pa,"P",{"data-svelte-h":!0}),m(Ir)!=="svelte-1wpkis2"&&(Ir.textContent=LT),Pa.forEach(a),Ne.forEach(a),wp=o(e),g(Ls.$$.fragment,e),_p=o(e),Y=l(e,"DIV",{class:!0});var be=k(Y);g(Hs.$$.fragment,be),Em=o(be),qr=l(be,"P",{"data-svelte-h":!0}),m(qr)!=="svelte-1lqk35m"&&(qr.innerHTML=HT),Qm=o(be),g(Tt.$$.fragment,be),Xm=o(be),Gr=l(be,"P",{"data-svelte-h":!0}),m(Gr)!=="svelte-13rexfx"&&(Gr.innerHTML=YT),Km=o(be),Zr=l(be,"P",{"data-svelte-h":!0}),m(Zr)!=="svelte-1egonrj"&&(Zr.innerHTML=OT),eh=o(be),zr=l(be,"P",{"data-svelte-h":!0}),m(zr)!=="svelte-ab0ict"&&(zr.innerHTML=ET),th=o(be),bt=l(be,"DIV",{class:!0});var Ca=k(bt);g(Ys.$$.fragment,Ca),nh=o(Ca),Fr=l(Ca,"P",{"data-svelte-h":!0}),m(Fr)!=="svelte-ypfmt8"&&(Fr.textContent=QT),Ca.forEach(a),be.forEach(a),xp=o(e),g(Os.$$.fragment,e),Mp=o(e),O=l(e,"DIV",{class:!0});var ye=k(O);g(Es.$$.fragment,ye),sh=o(ye),Rr=l(ye,"P",{"data-svelte-h":!0}),m(Rr)!=="svelte-zegbdg"&&(Rr.innerHTML=XT),oh=o(ye),g(yt.$$.fragment,ye),ah=o(ye),Dr=l(ye,"P",{"data-svelte-h":!0}),m(Dr)!=="svelte-13rexfx"&&(Dr.innerHTML=KT),rh=o(ye),Br=l(ye,"P",{"data-svelte-h":!0}),m(Br)!=="svelte-19zjgz"&&(Br.innerHTML=eb),ih=o(ye),Nr=l(ye,"P",{"data-svelte-h":!0}),m(Nr)!=="svelte-1lmpzxi"&&(Nr.innerHTML=tb),lh=o(ye),wt=l(ye,"DIV",{class:!0});var Ia=k(wt);g(Qs.$$.fragment,Ia),ch=o(Ia),Ar=l(Ia,"P",{"data-svelte-h":!0}),m(Ar)!=="svelte-1ws18e1"&&(Ar.textContent=nb),Ia.forEach(a),ye.forEach(a),kp=o(e),g(Xs.$$.fragment,e),Up=o(e),Ks=l(e,"P",{"data-svelte-h":!0}),m(Ks)!=="svelte-ammvm7"&&(Ks.textContent=sb),vp=o(e),g(eo.$$.fragment,e),jp=o(e),de=l(e,"DIV",{class:!0});var $e=k(de);g(to.$$.fragment,$e),ph=o($e),Vr=l($e,"P",{"data-svelte-h":!0}),m(Vr)!=="svelte-1ajdz5x"&&(Vr.innerHTML=ob),dh=o($e),g(_t.$$.fragment,$e),mh=o($e),xt=l($e,"DIV",{class:!0});var qa=k(xt);g(no.$$.fragment,qa),hh=o(qa),Sr=l(qa,"P",{"data-svelte-h":!0}),m(Sr)!=="svelte-dgjtw0"&&(Sr.innerHTML=ab),qa.forEach(a),fh=o($e),Mt=l($e,"DIV",{class:!0});var Ga=k(Mt);g(so.$$.fragment,Ga),gh=o(Ga),Wr=l(Ga,"P",{"data-svelte-h":!0}),m(Wr)!=="svelte-4if1o7"&&(Wr.innerHTML=rb),Ga.forEach(a),uh=o($e),kt=l($e,"DIV",{class:!0});var Za=k(kt);g(oo.$$.fragment,Za),Th=o(Za),Lr=l(Za,"P",{"data-svelte-h":!0}),m(Lr)!=="svelte-1atfogl"&&(Lr.textContent=ib),Za.forEach(a),$e.forEach(a),Jp=o(e),E=l(e,"DIV",{class:!0});var we=k(E);g(ao.$$.fragment,we),bh=o(we),Hr=l(we,"P",{"data-svelte-h":!0}),m(Hr)!=="svelte-1aof0an"&&(Hr.textContent=lb),yh=o(we),g(Ut.$$.fragment,we),wh=o(we),Yr=l(we,"P",{"data-svelte-h":!0}),m(Yr)!=="svelte-13rexfx"&&(Yr.innerHTML=cb),_h=o(we),Or=l(we,"P",{"data-svelte-h":!0}),m(Or)!=="svelte-u52btc"&&(Or.innerHTML=pb),xh=o(we),Er=l(we,"P",{"data-svelte-h":!0}),m(Er)!=="svelte-11boun1"&&(Er.innerHTML=db),Mh=o(we),vt=l(we,"DIV",{class:!0});var za=k(vt);g(ro.$$.fragment,za),kh=o(za),Qr=l(za,"P",{"data-svelte-h":!0}),m(Qr)!=="svelte-71qq28"&&(Qr.textContent=mb),za.forEach(a),we.forEach(a),$p=o(e),g(io.$$.fragment,e),Pp=o(e),G=l(e,"DIV",{class:!0});var A=k(G);g(lo.$$.fragment,A),Uh=o(A),Xr=l(A,"P",{"data-svelte-h":!0}),m(Xr)!=="svelte-1y2vlya"&&(Xr.innerHTML=hb),vh=o(A),g(jt.$$.fragment,A),jh=o(A),Kr=l(A,"P",{"data-svelte-h":!0}),m(Kr)!=="svelte-13rexfx"&&(Kr.innerHTML=fb),Jh=o(A),ei=l(A,"P",{"data-svelte-h":!0}),m(ei)!=="svelte-n6swr7"&&(ei.innerHTML=gb),$h=o(A),ti=l(A,"P",{"data-svelte-h":!0}),m(ti)!=="svelte-6ieg"&&(ti.innerHTML=ub),Ph=o(A),g(Jt.$$.fragment,A),Ch=o(A),g($t.$$.fragment,A),Ih=o(A),Pt=l(A,"DIV",{class:!0});var Fa=k(Pt);g(co.$$.fragment,Fa),qh=o(Fa),ni=l(Fa,"P",{"data-svelte-h":!0}),m(ni)!=="svelte-1dgb1r"&&(ni.textContent=Tb),Fa.forEach(a),A.forEach(a),Cp=o(e),g(po.$$.fragment,e),Ip=o(e),Z=l(e,"DIV",{class:!0});var V=k(Z);g(mo.$$.fragment,V),Gh=o(V),si=l(V,"P",{"data-svelte-h":!0}),m(si)!=="svelte-81lrkw"&&(si.innerHTML=bb),Zh=o(V),g(Ct.$$.fragment,V),zh=o(V),oi=l(V,"P",{"data-svelte-h":!0}),m(oi)!=="svelte-13rexfx"&&(oi.innerHTML=yb),Fh=o(V),ai=l(V,"P",{"data-svelte-h":!0}),m(ai)!=="svelte-14nolbz"&&(ai.innerHTML=wb),Rh=o(V),ri=l(V,"P",{"data-svelte-h":!0}),m(ri)!=="svelte-13vdwbu"&&(ri.innerHTML=_b),Dh=o(V),It=l(V,"DIV",{class:!0});var Ra=k(It);g(ho.$$.fragment,Ra),Bh=o(Ra),ii=l(Ra,"P",{"data-svelte-h":!0}),m(ii)!=="svelte-2lj46g"&&(ii.textContent=xb),Ra.forEach(a),Nh=o(V),Se=l(V,"DIV",{class:!0});var Ye=k(Se);g(fo.$$.fragment,Ye),Ah=o(Ye),li=l(Ye,"P",{"data-svelte-h":!0}),m(li)!=="svelte-1iglp3e"&&(li.innerHTML=Mb),Vh=o(Ye),ci=l(Ye,"P",{"data-svelte-h":!0}),m(ci)!=="svelte-tiqx9u"&&(ci.textContent=kb),Ye.forEach(a),Sh=o(V),qt=l(V,"DIV",{class:!0});var Da=k(qt);g(go.$$.fragment,Da),Wh=o(Da),pi=l(Da,"P",{"data-svelte-h":!0}),m(pi)!=="svelte-d6foro"&&(pi.textContent=Ub),Da.forEach(a),V.forEach(a),qp=o(e),g(uo.$$.fragment,e),Gp=o(e),me=l(e,"DIV",{class:!0});var Pe=k(me);g(To.$$.fragment,Pe),Lh=o(Pe),di=l(Pe,"P",{"data-svelte-h":!0}),m(di)!=="svelte-4fy8a0"&&(di.textContent=vb),Hh=o(Pe),mi=l(Pe,"P",{"data-svelte-h":!0}),m(mi)!=="svelte-6v21tb"&&(mi.innerHTML=jb),Yh=o(Pe),hi=l(Pe,"P",{"data-svelte-h":!0}),m(hi)!=="svelte-1rau5o"&&(hi.innerHTML=Jb),Oh=o(Pe),g(Gt.$$.fragment,Pe),Eh=o(Pe),Zt=l(Pe,"DIV",{class:!0});var hd=k(Zt);g(bo.$$.fragment,hd),Qh=o(hd),fi=l(hd,"P",{"data-svelte-h":!0}),m(fi)!=="svelte-myfdp"&&(fi.textContent=$b),hd.forEach(a),Pe.forEach(a),Zp=o(e),g(yo.$$.fragment,e),zp=o(e),Q=l(e,"DIV",{class:!0});var Ce=k(Q);g(wo.$$.fragment,Ce),Xh=o(Ce),gi=l(Ce,"P",{"data-svelte-h":!0}),m(gi)!=="svelte-1j45sfj"&&(gi.innerHTML=Pb),Kh=o(Ce),g(zt.$$.fragment,Ce),ef=o(Ce),ui=l(Ce,"P",{"data-svelte-h":!0}),m(ui)!=="svelte-13rexfx"&&(ui.innerHTML=Cb),tf=o(Ce),Ti=l(Ce,"P",{"data-svelte-h":!0}),m(Ti)!=="svelte-cf6q8x"&&(Ti.innerHTML=Ib),nf=o(Ce),bi=l(Ce,"P",{"data-svelte-h":!0}),m(bi)!=="svelte-1jig9aq"&&(bi.innerHTML=qb),sf=o(Ce),ae=l(Ce,"DIV",{class:!0});var Ie=k(ae);g(_o.$$.fragment,Ie),of=o(Ie),yi=l(Ie,"P",{"data-svelte-h":!0}),m(yi)!=="svelte-1pyysfu"&&(yi.textContent=Gb),af=o(Ie),wi=l(Ie,"UL",{"data-svelte-h":!0}),m(wi)!=="svelte-1ny9a5f"&&(wi.innerHTML=Zb),rf=o(Ie),_i=l(Ie,"P",{"data-svelte-h":!0}),m(_i)!=="svelte-11u3uey"&&(_i.innerHTML=zb),lf=o(Ie),g(Ft.$$.fragment,Ie),cf=o(Ie),xi=l(Ie,"P",{"data-svelte-h":!0}),m(xi)!=="svelte-madj2v"&&(xi.textContent=Fb),pf=o(Ie),g(Rt.$$.fragment,Ie),Ie.forEach(a),Ce.forEach(a),Fp=o(e),g(xo.$$.fragment,e),Rp=o(e),B=l(e,"DIV",{class:!0});var _e=k(B);g(Mo.$$.fragment,_e),df=o(_e),Mi=l(_e,"P",{"data-svelte-h":!0}),m(Mi)!=="svelte-n7evf0"&&(Mi.innerHTML=Rb),mf=o(_e),g(Dt.$$.fragment,_e),hf=o(_e),ki=l(_e,"P",{"data-svelte-h":!0}),m(ki)!=="svelte-13rexfx"&&(ki.innerHTML=Db),ff=o(_e),Ui=l(_e,"P",{"data-svelte-h":!0}),m(Ui)!=="svelte-pdv3rv"&&(Ui.innerHTML=Bb),gf=o(_e),vi=l(_e,"P",{"data-svelte-h":!0}),m(vi)!=="svelte-me3s3q"&&(vi.innerHTML=Nb),uf=o(_e),ji=l(_e,"P",{"data-svelte-h":!0}),m(ji)!=="svelte-1qrdw9i"&&(ji.innerHTML=Ab),Tf=o(_e),Bt=l(_e,"DIV",{class:!0});var fd=k(Bt);g(ko.$$.fragment,fd),bf=o(fd),Ji=l(fd,"P",{"data-svelte-h":!0}),m(Ji)!=="svelte-14zfmze"&&(Ji.textContent=Vb),fd.forEach(a),_e.forEach(a),Dp=o(e),g(Uo.$$.fragment,e),Bp=o(e),X=l(e,"DIV",{class:!0});var qe=k(X);g(vo.$$.fragment,qe),yf=o(qe),$i=l(qe,"P",{"data-svelte-h":!0}),m($i)!=="svelte-507nyz"&&($i.innerHTML=Sb),wf=o(qe),g(Nt.$$.fragment,qe),_f=o(qe),Pi=l(qe,"P",{"data-svelte-h":!0}),m(Pi)!=="svelte-26qptp"&&(Pi.innerHTML=Wb),xf=o(qe),Ci=l(qe,"P",{"data-svelte-h":!0}),m(Ci)!=="svelte-6vkvjk"&&(Ci.innerHTML=Lb),Mf=o(qe),Ii=l(qe,"P",{"data-svelte-h":!0}),m(Ii)!=="svelte-1qhi99d"&&(Ii.innerHTML=Hb),kf=o(qe),At=l(qe,"DIV",{class:!0});var gd=k(At);g(jo.$$.fragment,gd),Uf=o(gd),qi=l(gd,"P",{"data-svelte-h":!0}),m(qi)!=="svelte-1ql86ls"&&(qi.textContent=Yb),gd.forEach(a),qe.forEach(a),Np=o(e),g(Jo.$$.fragment,e),Ap=o(e),z=l(e,"DIV",{class:!0});var re=k(z);g($o.$$.fragment,re),vf=o(re),Gi=l(re,"P",{"data-svelte-h":!0}),m(Gi)!=="svelte-xbi6mw"&&(Gi.textContent=Ob),jf=o(re),g(Vt.$$.fragment,re),Jf=o(re),Zi=l(re,"P",{"data-svelte-h":!0}),m(Zi)!=="svelte-26qptp"&&(Zi.innerHTML=Eb),$f=o(re),zi=l(re,"P",{"data-svelte-h":!0}),m(zi)!=="svelte-1mgt11x"&&(zi.innerHTML=Qb),Pf=o(re),Fi=l(re,"P",{"data-svelte-h":!0}),m(Fi)!=="svelte-1iyxmj8"&&(Fi.innerHTML=Xb),Cf=o(re),g(St.$$.fragment,re),If=o(re),Wt=l(re,"DIV",{class:!0});var ud=k(Wt);g(Po.$$.fragment,ud),qf=o(ud),Ri=l(ud,"P",{"data-svelte-h":!0}),m(Ri)!=="svelte-48qsnz"&&(Ri.textContent=Kb),ud.forEach(a),Gf=o(re),Lt=l(re,"DIV",{class:!0});var Td=k(Lt);g(Co.$$.fragment,Td),Zf=o(Td),Di=l(Td,"P",{"data-svelte-h":!0}),m(Di)!=="svelte-uzfqtg"&&(Di.textContent=ey),Td.forEach(a),re.forEach(a),Vp=o(e),g(Io.$$.fragment,e),Sp=o(e),q=l(e,"DIV",{class:!0});var R=k(q);g(qo.$$.fragment,R),zf=o(R),Bi=l(R,"P",{"data-svelte-h":!0}),m(Bi)!=="svelte-15adoar"&&(Bi.innerHTML=ty),Ff=o(R),g(Ht.$$.fragment,R),Rf=o(R),Ni=l(R,"P",{"data-svelte-h":!0}),m(Ni)!=="svelte-13rexfx"&&(Ni.innerHTML=ny),Df=o(R),Ai=l(R,"P",{"data-svelte-h":!0}),m(Ai)!=="svelte-1yhggts"&&(Ai.innerHTML=sy),Bf=o(R),Vi=l(R,"P",{"data-svelte-h":!0}),m(Vi)!=="svelte-jwg5m8"&&(Vi.innerHTML=oy),Nf=o(R),Yt=l(R,"DIV",{class:!0});var bd=k(Yt);g(Go.$$.fragment,bd),Af=o(bd),Si=l(bd,"P",{"data-svelte-h":!0}),m(Si)!=="svelte-1fmsbp5"&&(Si.textContent=ay),bd.forEach(a),Vf=o(R),We=l(R,"DIV",{class:!0});var ec=k(We);g(Zo.$$.fragment,ec),Sf=o(ec),Wi=l(ec,"P",{"data-svelte-h":!0}),m(Wi)!=="svelte-1qebl0w"&&(Wi.textContent=ry),Wf=o(ec),Li=l(ec,"P",{"data-svelte-h":!0}),m(Li)!=="svelte-m7pmui"&&(Li.textContent=iy),ec.forEach(a),Lf=o(R),Ot=l(R,"DIV",{class:!0});var yd=k(Ot);g(zo.$$.fragment,yd),Hf=o(yd),Hi=l(yd,"P",{"data-svelte-h":!0}),m(Hi)!=="svelte-lj4b08"&&(Hi.textContent=ly),yd.forEach(a),Yf=o(R),Et=l(R,"DIV",{class:!0});var wd=k(Et);g(Fo.$$.fragment,wd),Of=o(wd),Yi=l(wd,"P",{"data-svelte-h":!0}),m(Yi)!=="svelte-226no6"&&(Yi.textContent=cy),wd.forEach(a),Ef=o(R),Qt=l(R,"DIV",{class:!0});var _d=k(Qt);g(Ro.$$.fragment,_d),Qf=o(_d),Oi=l(_d,"P",{"data-svelte-h":!0}),m(Oi)!=="svelte-vx34uc"&&(Oi.textContent=py),_d.forEach(a),R.forEach(a),Wp=o(e),g(Do.$$.fragment,e),Lp=o(e),he=l(e,"DIV",{class:!0});var Ve=k(he);g(Bo.$$.fragment,Ve),Xf=o(Ve),Ei=l(Ve,"P",{"data-svelte-h":!0}),m(Ei)!=="svelte-1ufl6u7"&&(Ei.textContent=dy),Kf=o(Ve),Qi=l(Ve,"P",{"data-svelte-h":!0}),m(Qi)!=="svelte-k6yfqy"&&(Qi.innerHTML=my),eg=o(Ve),Xi=l(Ve,"P",{"data-svelte-h":!0}),m(Xi)!=="svelte-175zgvy"&&(Xi.innerHTML=hy),tg=o(Ve),g(Xt.$$.fragment,Ve),ng=o(Ve),Kt=l(Ve,"DIV",{class:!0});var xd=k(Kt);g(No.$$.fragment,xd),sg=o(xd),Ki=l(xd,"P",{"data-svelte-h":!0}),m(Ki)!=="svelte-1q7dj96"&&(Ki.textContent=fy),xd.forEach(a),Ve.forEach(a),Hp=o(e),g(Ao.$$.fragment,e),Yp=o(e),N=l(e,"DIV",{class:!0});var xe=k(N);g(Vo.$$.fragment,xe),og=o(xe),el=l(xe,"P",{"data-svelte-h":!0}),m(el)!=="svelte-gusdnf"&&(el.innerHTML=gy),ag=o(xe),tl=l(xe,"P",{"data-svelte-h":!0}),m(tl)!=="svelte-1hjzyz9"&&(tl.innerHTML=uy),rg=o(xe),g(en.$$.fragment,xe),ig=o(xe),nl=l(xe,"P",{"data-svelte-h":!0}),m(nl)!=="svelte-13rexfx"&&(nl.innerHTML=Ty),lg=o(xe),sl=l(xe,"P",{"data-svelte-h":!0}),m(sl)!=="svelte-1x8stkv"&&(sl.innerHTML=by),cg=o(xe),ol=l(xe,"P",{"data-svelte-h":!0}),m(ol)!=="svelte-17eq97f"&&(ol.innerHTML=yy),pg=o(xe),tn=l(xe,"DIV",{class:!0});var Md=k(tn);g(So.$$.fragment,Md),dg=o(Md),al=l(Md,"P",{"data-svelte-h":!0}),m(al)!=="svelte-130fq1a"&&(al.innerHTML=wy),Md.forEach(a),xe.forEach(a),Op=o(e),g(Wo.$$.fragment,e),Ep=o(e),Lo=l(e,"P",{"data-svelte-h":!0}),m(Lo)!=="svelte-azvh9"&&(Lo.textContent=_y),Qp=o(e),g(Ho.$$.fragment,e),Xp=o(e),K=l(e,"DIV",{class:!0});var Ge=k(K);g(Yo.$$.fragment,Ge),mg=o(Ge),rl=l(Ge,"P",{"data-svelte-h":!0}),m(rl)!=="svelte-40flx9"&&(rl.innerHTML=xy),hg=o(Ge),g(nn.$$.fragment,Ge),fg=o(Ge),il=l(Ge,"P",{"data-svelte-h":!0}),m(il)!=="svelte-13rexfx"&&(il.innerHTML=My),gg=o(Ge),ll=l(Ge,"P",{"data-svelte-h":!0}),m(ll)!=="svelte-1a4kgk6"&&(ll.innerHTML=ky),ug=o(Ge),cl=l(Ge,"P",{"data-svelte-h":!0}),m(cl)!=="svelte-1akhzjj"&&(cl.innerHTML=Uy),Tg=o(Ge),Ae=l(Ge,"DIV",{class:!0});var _n=k(Ae);g(Oo.$$.fragment,_n),bg=o(_n),pl=l(_n,"P",{"data-svelte-h":!0}),m(pl)!=="svelte-1211nrg"&&(pl.innerHTML=vy),yg=o(_n),dl=l(_n,"P",{"data-svelte-h":!0}),m(dl)!=="svelte-1njhmhw"&&(dl.textContent=jy),wg=o(_n),ml=l(_n,"UL",{"data-svelte-h":!0}),m(ml)!=="svelte-gfpbs1"&&(ml.innerHTML=Jy),_n.forEach(a),Ge.forEach(a),Kp=o(e),g(Eo.$$.fragment,e),ed=o(e),ee=l(e,"DIV",{class:!0});var Ze=k(ee);g(Qo.$$.fragment,Ze),_g=o(Ze),hl=l(Ze,"P",{"data-svelte-h":!0}),m(hl)!=="svelte-2bxem6"&&(hl.textContent=$y),xg=o(Ze),g(sn.$$.fragment,Ze),Mg=o(Ze),fl=l(Ze,"P",{"data-svelte-h":!0}),m(fl)!=="svelte-13rexfx"&&(fl.innerHTML=Py),kg=o(Ze),gl=l(Ze,"P",{"data-svelte-h":!0}),m(gl)!=="svelte-18famsw"&&(gl.innerHTML=Cy),Ug=o(Ze),ul=l(Ze,"P",{"data-svelte-h":!0}),m(ul)!=="svelte-85c9z6"&&(ul.innerHTML=Iy),vg=o(Ze),on=l(Ze,"DIV",{class:!0});var kd=k(on);g(Xo.$$.fragment,kd),jg=o(kd),Tl=l(kd,"P",{"data-svelte-h":!0}),m(Tl)!=="svelte-11eoigb"&&(Tl.textContent=qy),kd.forEach(a),Ze.forEach(a),td=o(e),g(Ko.$$.fragment,e),nd=o(e),te=l(e,"DIV",{class:!0});var ze=k(te);g(ea.$$.fragment,ze),Jg=o(ze),bl=l(ze,"P",{"data-svelte-h":!0}),m(bl)!=="svelte-1cp7rf7"&&(bl.textContent=Gy),$g=o(ze),g(an.$$.fragment,ze),Pg=o(ze),yl=l(ze,"P",{"data-svelte-h":!0}),m(yl)!=="svelte-13rexfx"&&(yl.innerHTML=Zy),Cg=o(ze),wl=l(ze,"P",{"data-svelte-h":!0}),m(wl)!=="svelte-2anmy7"&&(wl.innerHTML=zy),Ig=o(ze),_l=l(ze,"P",{"data-svelte-h":!0}),m(_l)!=="svelte-19r0ftw"&&(_l.innerHTML=Fy),qg=o(ze),rn=l(ze,"DIV",{class:!0});var Ud=k(rn);g(ta.$$.fragment,Ud),Gg=o(Ud),xl=l(Ud,"P",{"data-svelte-h":!0}),m(xl)!=="svelte-11eoigb"&&(xl.textContent=Ry),Ud.forEach(a),ze.forEach(a),sd=o(e),g(na.$$.fragment,e),od=o(e),ne=l(e,"DIV",{class:!0});var Fe=k(ne);g(sa.$$.fragment,Fe),Zg=o(Fe),Ml=l(Fe,"P",{"data-svelte-h":!0}),m(Ml)!=="svelte-yuzbfo"&&(Ml.innerHTML=Dy),zg=o(Fe),g(ln.$$.fragment,Fe),Fg=o(Fe),kl=l(Fe,"P",{"data-svelte-h":!0}),m(kl)!=="svelte-13rexfx"&&(kl.innerHTML=By),Rg=o(Fe),Ul=l(Fe,"P",{"data-svelte-h":!0}),m(Ul)!=="svelte-172bsdq"&&(Ul.textContent=Ny),Dg=o(Fe),vl=l(Fe,"P",{"data-svelte-h":!0}),m(vl)!=="svelte-6aba0z"&&(vl.innerHTML=Ay),Bg=o(Fe),cn=l(Fe,"DIV",{class:!0});var vd=k(cn);g(oa.$$.fragment,vd),Ng=o(vd),jl=l(vd,"P",{"data-svelte-h":!0}),m(jl)!=="svelte-ypfmt8"&&(jl.textContent=Vy),vd.forEach(a),Fe.forEach(a),ad=o(e),g(aa.$$.fragment,e),rd=o(e),F=l(e,"DIV",{class:!0});var ie=k(F);g(ra.$$.fragment,ie),Ag=o(ie),Jl=l(ie,"P",{"data-svelte-h":!0}),m(Jl)!=="svelte-yb5i9k"&&(Jl.innerHTML=Sy),Vg=o(ie),$l=l(ie,"P",{"data-svelte-h":!0}),m($l)!=="svelte-1fqmqrc"&&($l.textContent=Wy),Sg=o(ie),Pl=l(ie,"OL",{"data-svelte-h":!0}),m(Pl)!=="svelte-jptyar"&&(Pl.innerHTML=Ly),Wg=o(ie),g(pn.$$.fragment,ie),Lg=o(ie),Cl=l(ie,"P",{"data-svelte-h":!0}),m(Cl)!=="svelte-13rexfx"&&(Cl.innerHTML=Hy),Hg=o(ie),Il=l(ie,"P",{"data-svelte-h":!0}),m(Il)!=="svelte-l6gq6v"&&(Il.innerHTML=Yy),Yg=o(ie),ql=l(ie,"P",{"data-svelte-h":!0}),m(ql)!=="svelte-1oqqq9o"&&(ql.innerHTML=Oy),Og=o(ie),dn=l(ie,"DIV",{class:!0});var jd=k(dn);g(ia.$$.fragment,jd),Eg=o(jd),Gl=l(jd,"P",{"data-svelte-h":!0}),m(Gl)!=="svelte-qnrg8s"&&(Gl.textContent=Ey),jd.forEach(a),ie.forEach(a),id=o(e),g(la.$$.fragment,e),ld=o(e),se=l(e,"DIV",{class:!0});var Re=k(se);g(ca.$$.fragment,Re),Qg=o(Re),Zl=l(Re,"P",{"data-svelte-h":!0}),m(Zl)!=="svelte-1lg1j1m"&&(Zl.innerHTML=Qy),Xg=o(Re),g(mn.$$.fragment,Re),Kg=o(Re),zl=l(Re,"P",{"data-svelte-h":!0}),m(zl)!=="svelte-13rexfx"&&(zl.innerHTML=Xy),eu=o(Re),Fl=l(Re,"P",{"data-svelte-h":!0}),m(Fl)!=="svelte-1w4f9s1"&&(Fl.innerHTML=Ky),tu=o(Re),Rl=l(Re,"P",{"data-svelte-h":!0}),m(Rl)!=="svelte-lcegcp"&&(Rl.innerHTML=ew),nu=o(Re),Le=l(Re,"DIV",{class:!0});var tc=k(Le);g(pa.$$.fragment,tc),su=o(tc),Dl=l(tc,"P",{"data-svelte-h":!0}),m(Dl)!=="svelte-10yp62t"&&(Dl.textContent=tw),ou=o(tc),Bl=l(tc,"UL",{"data-svelte-h":!0}),m(Bl)!=="svelte-15cnno4"&&(Bl.innerHTML=nw),tc.forEach(a),Re.forEach(a),cd=o(e),g(da.$$.fragment,e),pd=o(e),C=l(e,"DIV",{class:!0});var I=k(C);g(ma.$$.fragment,I),au=o(I),Nl=l(I,"P",{"data-svelte-h":!0}),m(Nl)!=="svelte-k7p6k2"&&(Nl.textContent=sw),ru=o(I),Al=l(I,"P",{"data-svelte-h":!0}),m(Al)!=="svelte-3qu5a5"&&(Al.textContent=ow),iu=o(I),Vl=l(I,"P",{"data-svelte-h":!0}),m(Vl)!=="svelte-1mj6jcv"&&(Vl.textContent=aw),lu=o(I),Sl=l(I,"P",{"data-svelte-h":!0}),m(Sl)!=="svelte-pcl79b"&&(Sl.textContent=rw),cu=o(I),Wl=l(I,"P",{"data-svelte-h":!0}),m(Wl)!=="svelte-9pkowo"&&(Wl.innerHTML=iw),pu=o(I),hn=l(I,"DIV",{class:!0});var Jd=k(hn);g(ha.$$.fragment,Jd),du=o(Jd),Ll=l(Jd,"P",{"data-svelte-h":!0}),m(Ll)!=="svelte-exnhmi"&&(Ll.textContent=lw),Jd.forEach(a),mu=o(I),He=l(I,"DIV",{class:!0});var nc=k(He);g(fa.$$.fragment,nc),hu=o(nc),Hl=l(nc,"P",{"data-svelte-h":!0}),m(Hl)!=="svelte-1piccye"&&(Hl.textContent=cw),fu=o(nc),g(fn.$$.fragment,nc),nc.forEach(a),gu=o(I),gn=l(I,"DIV",{class:!0});var $d=k(gn);g(ga.$$.fragment,$d),uu=o($d),Yl=l($d,"P",{"data-svelte-h":!0}),m(Yl)!=="svelte-p1t4ev"&&(Yl.textContent=pw),$d.forEach(a),Tu=o(I),un=l(I,"DIV",{class:!0});var Pd=k(un);g(ua.$$.fragment,Pd),bu=o(Pd),Ol=l(Pd,"P",{"data-svelte-h":!0}),m(Ol)!=="svelte-2wm42a"&&(Ol.innerHTML=dw),Pd.forEach(a),yu=o(I),Tn=l(I,"DIV",{class:!0});var Cd=k(Tn);g(Ta.$$.fragment,Cd),wu=o(Cd),El=l(Cd,"P",{"data-svelte-h":!0}),m(El)!=="svelte-10cd17f"&&(El.innerHTML=mw),Cd.forEach(a),_u=o(I),bn=l(I,"DIV",{class:!0});var Id=k(bn);g(ba.$$.fragment,Id),xu=o(Id),Ql=l(Id,"P",{"data-svelte-h":!0}),m(Ql)!=="svelte-12sv4vl"&&(Ql.innerHTML=hw),Id.forEach(a),Mu=o(I),yn=l(I,"DIV",{class:!0});var qd=k(yn);g(ya.$$.fragment,qd),ku=o(qd),Xl=l(qd,"P",{"data-svelte-h":!0}),m(Xl)!=="svelte-kp2v8j"&&(Xl.textContent=fw),qd.forEach(a),Uu=o(I),wn=l(I,"DIV",{class:!0});var Gd=k(wn);g(wa.$$.fragment,Gd),vu=o(Gd),Kl=l(Gd,"P",{"data-svelte-h":!0}),m(Kl)!=="svelte-10cd17f"&&(Kl.innerHTML=gw),Gd.forEach(a),I.forEach(a),dd=o(e),oc=l(e,"P",{}),k(oc).forEach(a),this.h()},h(){U(r,"name","hf:doc:metadata"),U(r,"content",l_),U(Me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(Se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(tn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(Ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(on,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(rn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(cn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(dn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(hn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(gn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(un,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(Tn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(bn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(yn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(wn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,p){n(document.head,r),d(e,x,p),d(e,h,p),d(e,c,p),u(w,e,p),d(e,t,p),d(e,_,p),d(e,ac,p),d(e,xn,p),d(e,rc,p),d(e,Mn,p),d(e,ic,p),u(kn,e,p),d(e,lc,p),d(e,Un,p),d(e,cc,p),d(e,vn,p),d(e,pc,p),u(jn,e,p),d(e,dc,p),d(e,Jn,p),d(e,mc,p),u($n,e,p),d(e,hc,p),d(e,Pn,p),d(e,fc,p),u(Cn,e,p),d(e,gc,p),d(e,In,p),d(e,uc,p),u(qn,e,p),d(e,Tc,p),d(e,Gn,p),d(e,bc,p),u(Zn,e,p),d(e,yc,p),d(e,Me,p),u(zn,Me,null),n(Me,zd),n(Me,Ba),n(Me,Fd),n(Me,Na),n(Me,Rd),n(Me,Aa),n(Me,Dd),u(Oe,Me,null),d(e,wc,p),u(Fn,e,p),d(e,_c,p),d(e,Rn,p),d(e,xc,p),u(Dn,e,p),d(e,Mc,p),u(Ee,e,p),d(e,kc,p),u(Bn,e,p),d(e,Uc,p),u(Nn,e,p),d(e,vc,p),d(e,An,p),d(e,jc,p),u(Vn,e,p),d(e,Jc,p),d(e,Sn,p),d(e,$c,p),u(Wn,e,p),d(e,Pc,p),d(e,Ln,p),d(e,Cc,p),d(e,Hn,p),d(e,Ic,p),d(e,Yn,p),d(e,qc,p),u(On,e,p),d(e,Gc,p),d(e,En,p),d(e,Zc,p),d(e,Qn,p),d(e,zc,p),u(Xn,e,p),d(e,Fc,p),d(e,Kn,p),d(e,Rc,p),u(es,e,p),d(e,Dc,p),d(e,ts,p),d(e,Bc,p),d(e,ns,p),d(e,Nc,p),u(ss,e,p),d(e,Ac,p),d(e,os,p),d(e,Vc,p),d(e,as,p),d(e,Sc,p),d(e,rs,p),d(e,Wc,p),d(e,is,p),d(e,Lc,p),u(ls,e,p),d(e,Hc,p),d(e,cs,p),d(e,Yc,p),u(ps,e,p),d(e,Oc,p),d(e,ds,p),d(e,Ec,p),u(ms,e,p),d(e,Qc,p),d(e,hs,p),d(e,Xc,p),u(fs,e,p),d(e,Kc,p),d(e,S,p),u(gs,S,null),n(S,Bd),n(S,Va),n(S,Nd),u(Qe,S,null),n(S,Ad),n(S,Sa),n(S,Vd),n(S,Wa),n(S,Sd),n(S,La),n(S,Wd),n(S,Xe),u(us,Xe,null),n(Xe,Ld),n(Xe,Ha),d(e,ep,p),u(Ts,e,p),d(e,tp,p),d(e,le,p),u(bs,le,null),n(le,Hd),n(le,Ya),n(le,Yd),n(le,Oa),n(le,Od),u(Ke,le,null),n(le,Ed),n(le,Ea),n(le,Qd),n(le,et),u(ys,et,null),n(et,Xd),n(et,Qa),d(e,np,p),u(ws,e,p),d(e,sp,p),d(e,D,p),u(_s,D,null),n(D,Kd),n(D,Xa),n(D,em),u(tt,D,null),n(D,tm),n(D,Ka),n(D,nm),u(nt,D,null),n(D,sm),n(D,er),n(D,om),n(D,tr),n(D,am),n(D,st),u(xs,st,null),n(st,rm),n(st,nr),d(e,op,p),u(Ms,e,p),d(e,ap,p),d(e,ke,p),u(ks,ke,null),n(ke,im),n(ke,sr),n(ke,lm),u(ot,ke,null),n(ke,cm),n(ke,or),n(ke,pm),n(ke,at),u(Us,at,null),n(at,dm),n(at,ar),d(e,rp,p),u(vs,e,p),d(e,ip,p),d(e,js,p),d(e,lp,p),u(Js,e,p),d(e,cp,p),d(e,W,p),u($s,W,null),n(W,mm),n(W,rr),n(W,hm),u(rt,W,null),n(W,fm),n(W,ir),n(W,gm),n(W,lr),n(W,um),n(W,cr),n(W,Tm),n(W,it),u(Ps,it,null),n(it,bm),n(it,pr),d(e,pp,p),u(Cs,e,p),d(e,dp,p),d(e,L,p),u(Is,L,null),n(L,ym),n(L,dr),n(L,wm),u(lt,L,null),n(L,_m),n(L,mr),n(L,xm),n(L,hr),n(L,Mm),n(L,fr),n(L,km),n(L,ct),u(qs,ct,null),n(ct,Um),n(ct,gr),d(e,mp,p),u(Gs,e,p),d(e,hp,p),d(e,ce,p),u(Zs,ce,null),n(ce,vm),n(ce,ur),n(ce,jm),u(pt,ce,null),n(ce,Jm),n(ce,Tr),n(ce,$m),n(ce,br),n(ce,Pm),n(ce,dt),u(zs,dt,null),n(dt,Cm),n(dt,yr),d(e,fp,p),u(Fs,e,p),d(e,gp,p),d(e,pe,p),u(Rs,pe,null),n(pe,Im),n(pe,wr),n(pe,qm),u(mt,pe,null),n(pe,Gm),n(pe,_r),n(pe,Zm),n(pe,xr),n(pe,zm),n(pe,ht),u(Ds,ht,null),n(ht,Fm),n(ht,Mr),d(e,up,p),u(Bs,e,p),d(e,Tp,p),d(e,H,p),u(Ns,H,null),n(H,Rm),n(H,kr),n(H,Dm),u(ft,H,null),n(H,Bm),n(H,Ur),n(H,Nm),n(H,vr),n(H,Am),n(H,jr),n(H,Vm),n(H,gt),u(As,gt,null),n(gt,Sm),n(gt,Jr),d(e,bp,p),u(Vs,e,p),d(e,yp,p),d(e,Ue,p),u(Ss,Ue,null),n(Ue,Wm),n(Ue,$r),n(Ue,Lm),n(Ue,Pr),n(Ue,Hm),n(Ue,Cr),n(Ue,Ym),n(Ue,ut),u(Ws,ut,null),n(ut,Om),n(ut,Ir),d(e,wp,p),u(Ls,e,p),d(e,_p,p),d(e,Y,p),u(Hs,Y,null),n(Y,Em),n(Y,qr),n(Y,Qm),u(Tt,Y,null),n(Y,Xm),n(Y,Gr),n(Y,Km),n(Y,Zr),n(Y,eh),n(Y,zr),n(Y,th),n(Y,bt),u(Ys,bt,null),n(bt,nh),n(bt,Fr),d(e,xp,p),u(Os,e,p),d(e,Mp,p),d(e,O,p),u(Es,O,null),n(O,sh),n(O,Rr),n(O,oh),u(yt,O,null),n(O,ah),n(O,Dr),n(O,rh),n(O,Br),n(O,ih),n(O,Nr),n(O,lh),n(O,wt),u(Qs,wt,null),n(wt,ch),n(wt,Ar),d(e,kp,p),u(Xs,e,p),d(e,Up,p),d(e,Ks,p),d(e,vp,p),u(eo,e,p),d(e,jp,p),d(e,de,p),u(to,de,null),n(de,ph),n(de,Vr),n(de,dh),u(_t,de,null),n(de,mh),n(de,xt),u(no,xt,null),n(xt,hh),n(xt,Sr),n(de,fh),n(de,Mt),u(so,Mt,null),n(Mt,gh),n(Mt,Wr),n(de,uh),n(de,kt),u(oo,kt,null),n(kt,Th),n(kt,Lr),d(e,Jp,p),d(e,E,p),u(ao,E,null),n(E,bh),n(E,Hr),n(E,yh),u(Ut,E,null),n(E,wh),n(E,Yr),n(E,_h),n(E,Or),n(E,xh),n(E,Er),n(E,Mh),n(E,vt),u(ro,vt,null),n(vt,kh),n(vt,Qr),d(e,$p,p),u(io,e,p),d(e,Pp,p),d(e,G,p),u(lo,G,null),n(G,Uh),n(G,Xr),n(G,vh),u(jt,G,null),n(G,jh),n(G,Kr),n(G,Jh),n(G,ei),n(G,$h),n(G,ti),n(G,Ph),u(Jt,G,null),n(G,Ch),u($t,G,null),n(G,Ih),n(G,Pt),u(co,Pt,null),n(Pt,qh),n(Pt,ni),d(e,Cp,p),u(po,e,p),d(e,Ip,p),d(e,Z,p),u(mo,Z,null),n(Z,Gh),n(Z,si),n(Z,Zh),u(Ct,Z,null),n(Z,zh),n(Z,oi),n(Z,Fh),n(Z,ai),n(Z,Rh),n(Z,ri),n(Z,Dh),n(Z,It),u(ho,It,null),n(It,Bh),n(It,ii),n(Z,Nh),n(Z,Se),u(fo,Se,null),n(Se,Ah),n(Se,li),n(Se,Vh),n(Se,ci),n(Z,Sh),n(Z,qt),u(go,qt,null),n(qt,Wh),n(qt,pi),d(e,qp,p),u(uo,e,p),d(e,Gp,p),d(e,me,p),u(To,me,null),n(me,Lh),n(me,di),n(me,Hh),n(me,mi),n(me,Yh),n(me,hi),n(me,Oh),u(Gt,me,null),n(me,Eh),n(me,Zt),u(bo,Zt,null),n(Zt,Qh),n(Zt,fi),d(e,Zp,p),u(yo,e,p),d(e,zp,p),d(e,Q,p),u(wo,Q,null),n(Q,Xh),n(Q,gi),n(Q,Kh),u(zt,Q,null),n(Q,ef),n(Q,ui),n(Q,tf),n(Q,Ti),n(Q,nf),n(Q,bi),n(Q,sf),n(Q,ae),u(_o,ae,null),n(ae,of),n(ae,yi),n(ae,af),n(ae,wi),n(ae,rf),n(ae,_i),n(ae,lf),u(Ft,ae,null),n(ae,cf),n(ae,xi),n(ae,pf),u(Rt,ae,null),d(e,Fp,p),u(xo,e,p),d(e,Rp,p),d(e,B,p),u(Mo,B,null),n(B,df),n(B,Mi),n(B,mf),u(Dt,B,null),n(B,hf),n(B,ki),n(B,ff),n(B,Ui),n(B,gf),n(B,vi),n(B,uf),n(B,ji),n(B,Tf),n(B,Bt),u(ko,Bt,null),n(Bt,bf),n(Bt,Ji),d(e,Dp,p),u(Uo,e,p),d(e,Bp,p),d(e,X,p),u(vo,X,null),n(X,yf),n(X,$i),n(X,wf),u(Nt,X,null),n(X,_f),n(X,Pi),n(X,xf),n(X,Ci),n(X,Mf),n(X,Ii),n(X,kf),n(X,At),u(jo,At,null),n(At,Uf),n(At,qi),d(e,Np,p),u(Jo,e,p),d(e,Ap,p),d(e,z,p),u($o,z,null),n(z,vf),n(z,Gi),n(z,jf),u(Vt,z,null),n(z,Jf),n(z,Zi),n(z,$f),n(z,zi),n(z,Pf),n(z,Fi),n(z,Cf),u(St,z,null),n(z,If),n(z,Wt),u(Po,Wt,null),n(Wt,qf),n(Wt,Ri),n(z,Gf),n(z,Lt),u(Co,Lt,null),n(Lt,Zf),n(Lt,Di),d(e,Vp,p),u(Io,e,p),d(e,Sp,p),d(e,q,p),u(qo,q,null),n(q,zf),n(q,Bi),n(q,Ff),u(Ht,q,null),n(q,Rf),n(q,Ni),n(q,Df),n(q,Ai),n(q,Bf),n(q,Vi),n(q,Nf),n(q,Yt),u(Go,Yt,null),n(Yt,Af),n(Yt,Si),n(q,Vf),n(q,We),u(Zo,We,null),n(We,Sf),n(We,Wi),n(We,Wf),n(We,Li),n(q,Lf),n(q,Ot),u(zo,Ot,null),n(Ot,Hf),n(Ot,Hi),n(q,Yf),n(q,Et),u(Fo,Et,null),n(Et,Of),n(Et,Yi),n(q,Ef),n(q,Qt),u(Ro,Qt,null),n(Qt,Qf),n(Qt,Oi),d(e,Wp,p),u(Do,e,p),d(e,Lp,p),d(e,he,p),u(Bo,he,null),n(he,Xf),n(he,Ei),n(he,Kf),n(he,Qi),n(he,eg),n(he,Xi),n(he,tg),u(Xt,he,null),n(he,ng),n(he,Kt),u(No,Kt,null),n(Kt,sg),n(Kt,Ki),d(e,Hp,p),u(Ao,e,p),d(e,Yp,p),d(e,N,p),u(Vo,N,null),n(N,og),n(N,el),n(N,ag),n(N,tl),n(N,rg),u(en,N,null),n(N,ig),n(N,nl),n(N,lg),n(N,sl),n(N,cg),n(N,ol),n(N,pg),n(N,tn),u(So,tn,null),n(tn,dg),n(tn,al),d(e,Op,p),u(Wo,e,p),d(e,Ep,p),d(e,Lo,p),d(e,Qp,p),u(Ho,e,p),d(e,Xp,p),d(e,K,p),u(Yo,K,null),n(K,mg),n(K,rl),n(K,hg),u(nn,K,null),n(K,fg),n(K,il),n(K,gg),n(K,ll),n(K,ug),n(K,cl),n(K,Tg),n(K,Ae),u(Oo,Ae,null),n(Ae,bg),n(Ae,pl),n(Ae,yg),n(Ae,dl),n(Ae,wg),n(Ae,ml),d(e,Kp,p),u(Eo,e,p),d(e,ed,p),d(e,ee,p),u(Qo,ee,null),n(ee,_g),n(ee,hl),n(ee,xg),u(sn,ee,null),n(ee,Mg),n(ee,fl),n(ee,kg),n(ee,gl),n(ee,Ug),n(ee,ul),n(ee,vg),n(ee,on),u(Xo,on,null),n(on,jg),n(on,Tl),d(e,td,p),u(Ko,e,p),d(e,nd,p),d(e,te,p),u(ea,te,null),n(te,Jg),n(te,bl),n(te,$g),u(an,te,null),n(te,Pg),n(te,yl),n(te,Cg),n(te,wl),n(te,Ig),n(te,_l),n(te,qg),n(te,rn),u(ta,rn,null),n(rn,Gg),n(rn,xl),d(e,sd,p),u(na,e,p),d(e,od,p),d(e,ne,p),u(sa,ne,null),n(ne,Zg),n(ne,Ml),n(ne,zg),u(ln,ne,null),n(ne,Fg),n(ne,kl),n(ne,Rg),n(ne,Ul),n(ne,Dg),n(ne,vl),n(ne,Bg),n(ne,cn),u(oa,cn,null),n(cn,Ng),n(cn,jl),d(e,ad,p),u(aa,e,p),d(e,rd,p),d(e,F,p),u(ra,F,null),n(F,Ag),n(F,Jl),n(F,Vg),n(F,$l),n(F,Sg),n(F,Pl),n(F,Wg),u(pn,F,null),n(F,Lg),n(F,Cl),n(F,Hg),n(F,Il),n(F,Yg),n(F,ql),n(F,Og),n(F,dn),u(ia,dn,null),n(dn,Eg),n(dn,Gl),d(e,id,p),u(la,e,p),d(e,ld,p),d(e,se,p),u(ca,se,null),n(se,Qg),n(se,Zl),n(se,Xg),u(mn,se,null),n(se,Kg),n(se,zl),n(se,eu),n(se,Fl),n(se,tu),n(se,Rl),n(se,nu),n(se,Le),u(pa,Le,null),n(Le,su),n(Le,Dl),n(Le,ou),n(Le,Bl),d(e,cd,p),u(da,e,p),d(e,pd,p),d(e,C,p),u(ma,C,null),n(C,au),n(C,Nl),n(C,ru),n(C,Al),n(C,iu),n(C,Vl),n(C,lu),n(C,Sl),n(C,cu),n(C,Wl),n(C,pu),n(C,hn),u(ha,hn,null),n(hn,du),n(hn,Ll),n(C,mu),n(C,He),u(fa,He,null),n(He,hu),n(He,Hl),n(He,fu),u(fn,He,null),n(C,gu),n(C,gn),u(ga,gn,null),n(gn,uu),n(gn,Yl),n(C,Tu),n(C,un),u(ua,un,null),n(un,bu),n(un,Ol),n(C,yu),n(C,Tn),u(Ta,Tn,null),n(Tn,wu),n(Tn,El),n(C,_u),n(C,bn),u(ba,bn,null),n(bn,xu),n(bn,Ql),n(C,Mu),n(C,yn),u(ya,yn,null),n(yn,ku),n(yn,Xl),n(C,Uu),n(C,wn),u(wa,wn,null),n(wn,vu),n(wn,Kl),d(e,dd,p),d(e,oc,p),md=!0},p(e,[p]){const De={};p&2&&(De.$$scope={dirty:p,ctx:e}),Oe.$set(De);const fe={};p&2&&(fe.$$scope={dirty:p,ctx:e}),Ee.$set(fe);const _a={};p&2&&(_a.$$scope={dirty:p,ctx:e}),Qe.$set(_a);const ve={};p&2&&(ve.$$scope={dirty:p,ctx:e}),Ke.$set(ve);const xa={};p&2&&(xa.$$scope={dirty:p,ctx:e}),tt.$set(xa);const oe={};p&2&&(oe.$$scope={dirty:p,ctx:e}),nt.$set(oe);const Ma={};p&2&&(Ma.$$scope={dirty:p,ctx:e}),ot.$set(Ma);const Be={};p&2&&(Be.$$scope={dirty:p,ctx:e}),rt.$set(Be);const ka={};p&2&&(ka.$$scope={dirty:p,ctx:e}),lt.$set(ka);const ge={};p&2&&(ge.$$scope={dirty:p,ctx:e}),pt.$set(ge);const Ua={};p&2&&(Ua.$$scope={dirty:p,ctx:e}),mt.$set(Ua);const ue={};p&2&&(ue.$$scope={dirty:p,ctx:e}),ft.$set(ue);const va={};p&2&&(va.$$scope={dirty:p,ctx:e}),Tt.$set(va);const je={};p&2&&(je.$$scope={dirty:p,ctx:e}),yt.$set(je);const ja={};p&2&&(ja.$$scope={dirty:p,ctx:e}),_t.$set(ja);const Je={};p&2&&(Je.$$scope={dirty:p,ctx:e}),Ut.$set(Je);const Ja={};p&2&&(Ja.$$scope={dirty:p,ctx:e}),jt.$set(Ja);const Te={};p&2&&(Te.$$scope={dirty:p,ctx:e}),Jt.$set(Te);const $a={};p&2&&($a.$$scope={dirty:p,ctx:e}),$t.$set($a);const Ne={};p&2&&(Ne.$$scope={dirty:p,ctx:e}),Ct.$set(Ne);const Pa={};p&2&&(Pa.$$scope={dirty:p,ctx:e}),Gt.$set(Pa);const be={};p&2&&(be.$$scope={dirty:p,ctx:e}),zt.$set(be);const Ca={};p&2&&(Ca.$$scope={dirty:p,ctx:e}),Ft.$set(Ca);const ye={};p&2&&(ye.$$scope={dirty:p,ctx:e}),Rt.$set(ye);const Ia={};p&2&&(Ia.$$scope={dirty:p,ctx:e}),Dt.$set(Ia);const $e={};p&2&&($e.$$scope={dirty:p,ctx:e}),Nt.$set($e);const qa={};p&2&&(qa.$$scope={dirty:p,ctx:e}),Vt.$set(qa);const Ga={};p&2&&(Ga.$$scope={dirty:p,ctx:e}),St.$set(Ga);const Za={};p&2&&(Za.$$scope={dirty:p,ctx:e}),Ht.$set(Za);const we={};p&2&&(we.$$scope={dirty:p,ctx:e}),Xt.$set(we);const za={};p&2&&(za.$$scope={dirty:p,ctx:e}),en.$set(za);const A={};p&2&&(A.$$scope={dirty:p,ctx:e}),nn.$set(A);const Fa={};p&2&&(Fa.$$scope={dirty:p,ctx:e}),sn.$set(Fa);const V={};p&2&&(V.$$scope={dirty:p,ctx:e}),an.$set(V);const Ra={};p&2&&(Ra.$$scope={dirty:p,ctx:e}),ln.$set(Ra);const Ye={};p&2&&(Ye.$$scope={dirty:p,ctx:e}),pn.$set(Ye);const Da={};p&2&&(Da.$$scope={dirty:p,ctx:e}),mn.$set(Da);const Pe={};p&2&&(Pe.$$scope={dirty:p,ctx:e}),fn.$set(Pe)},i(e){md||(T(w.$$.fragment,e),T(kn.$$.fragment,e),T(jn.$$.fragment,e),T($n.$$.fragment,e),T(Cn.$$.fragment,e),T(qn.$$.fragment,e),T(Zn.$$.fragment,e),T(zn.$$.fragment,e),T(Oe.$$.fragment,e),T(Fn.$$.fragment,e),T(Dn.$$.fragment,e),T(Ee.$$.fragment,e),T(Bn.$$.fragment,e),T(Nn.$$.fragment,e),T(Vn.$$.fragment,e),T(Wn.$$.fragment,e),T(On.$$.fragment,e),T(Xn.$$.fragment,e),T(es.$$.fragment,e),T(ss.$$.fragment,e),T(ls.$$.fragment,e),T(ps.$$.fragment,e),T(ms.$$.fragment,e),T(fs.$$.fragment,e),T(gs.$$.fragment,e),T(Qe.$$.fragment,e),T(us.$$.fragment,e),T(Ts.$$.fragment,e),T(bs.$$.fragment,e),T(Ke.$$.fragment,e),T(ys.$$.fragment,e),T(ws.$$.fragment,e),T(_s.$$.fragment,e),T(tt.$$.fragment,e),T(nt.$$.fragment,e),T(xs.$$.fragment,e),T(Ms.$$.fragment,e),T(ks.$$.fragment,e),T(ot.$$.fragment,e),T(Us.$$.fragment,e),T(vs.$$.fragment,e),T(Js.$$.fragment,e),T($s.$$.fragment,e),T(rt.$$.fragment,e),T(Ps.$$.fragment,e),T(Cs.$$.fragment,e),T(Is.$$.fragment,e),T(lt.$$.fragment,e),T(qs.$$.fragment,e),T(Gs.$$.fragment,e),T(Zs.$$.fragment,e),T(pt.$$.fragment,e),T(zs.$$.fragment,e),T(Fs.$$.fragment,e),T(Rs.$$.fragment,e),T(mt.$$.fragment,e),T(Ds.$$.fragment,e),T(Bs.$$.fragment,e),T(Ns.$$.fragment,e),T(ft.$$.fragment,e),T(As.$$.fragment,e),T(Vs.$$.fragment,e),T(Ss.$$.fragment,e),T(Ws.$$.fragment,e),T(Ls.$$.fragment,e),T(Hs.$$.fragment,e),T(Tt.$$.fragment,e),T(Ys.$$.fragment,e),T(Os.$$.fragment,e),T(Es.$$.fragment,e),T(yt.$$.fragment,e),T(Qs.$$.fragment,e),T(Xs.$$.fragment,e),T(eo.$$.fragment,e),T(to.$$.fragment,e),T(_t.$$.fragment,e),T(no.$$.fragment,e),T(so.$$.fragment,e),T(oo.$$.fragment,e),T(ao.$$.fragment,e),T(Ut.$$.fragment,e),T(ro.$$.fragment,e),T(io.$$.fragment,e),T(lo.$$.fragment,e),T(jt.$$.fragment,e),T(Jt.$$.fragment,e),T($t.$$.fragment,e),T(co.$$.fragment,e),T(po.$$.fragment,e),T(mo.$$.fragment,e),T(Ct.$$.fragment,e),T(ho.$$.fragment,e),T(fo.$$.fragment,e),T(go.$$.fragment,e),T(uo.$$.fragment,e),T(To.$$.fragment,e),T(Gt.$$.fragment,e),T(bo.$$.fragment,e),T(yo.$$.fragment,e),T(wo.$$.fragment,e),T(zt.$$.fragment,e),T(_o.$$.fragment,e),T(Ft.$$.fragment,e),T(Rt.$$.fragment,e),T(xo.$$.fragment,e),T(Mo.$$.fragment,e),T(Dt.$$.fragment,e),T(ko.$$.fragment,e),T(Uo.$$.fragment,e),T(vo.$$.fragment,e),T(Nt.$$.fragment,e),T(jo.$$.fragment,e),T(Jo.$$.fragment,e),T($o.$$.fragment,e),T(Vt.$$.fragment,e),T(St.$$.fragment,e),T(Po.$$.fragment,e),T(Co.$$.fragment,e),T(Io.$$.fragment,e),T(qo.$$.fragment,e),T(Ht.$$.fragment,e),T(Go.$$.fragment,e),T(Zo.$$.fragment,e),T(zo.$$.fragment,e),T(Fo.$$.fragment,e),T(Ro.$$.fragment,e),T(Do.$$.fragment,e),T(Bo.$$.fragment,e),T(Xt.$$.fragment,e),T(No.$$.fragment,e),T(Ao.$$.fragment,e),T(Vo.$$.fragment,e),T(en.$$.fragment,e),T(So.$$.fragment,e),T(Wo.$$.fragment,e),T(Ho.$$.fragment,e),T(Yo.$$.fragment,e),T(nn.$$.fragment,e),T(Oo.$$.fragment,e),T(Eo.$$.fragment,e),T(Qo.$$.fragment,e),T(sn.$$.fragment,e),T(Xo.$$.fragment,e),T(Ko.$$.fragment,e),T(ea.$$.fragment,e),T(an.$$.fragment,e),T(ta.$$.fragment,e),T(na.$$.fragment,e),T(sa.$$.fragment,e),T(ln.$$.fragment,e),T(oa.$$.fragment,e),T(aa.$$.fragment,e),T(ra.$$.fragment,e),T(pn.$$.fragment,e),T(ia.$$.fragment,e),T(la.$$.fragment,e),T(ca.$$.fragment,e),T(mn.$$.fragment,e),T(pa.$$.fragment,e),T(da.$$.fragment,e),T(ma.$$.fragment,e),T(ha.$$.fragment,e),T(fa.$$.fragment,e),T(fn.$$.fragment,e),T(ga.$$.fragment,e),T(ua.$$.fragment,e),T(Ta.$$.fragment,e),T(ba.$$.fragment,e),T(ya.$$.fragment,e),T(wa.$$.fragment,e),md=!0)},o(e){b(w.$$.fragment,e),b(kn.$$.fragment,e),b(jn.$$.fragment,e),b($n.$$.fragment,e),b(Cn.$$.fragment,e),b(qn.$$.fragment,e),b(Zn.$$.fragment,e),b(zn.$$.fragment,e),b(Oe.$$.fragment,e),b(Fn.$$.fragment,e),b(Dn.$$.fragment,e),b(Ee.$$.fragment,e),b(Bn.$$.fragment,e),b(Nn.$$.fragment,e),b(Vn.$$.fragment,e),b(Wn.$$.fragment,e),b(On.$$.fragment,e),b(Xn.$$.fragment,e),b(es.$$.fragment,e),b(ss.$$.fragment,e),b(ls.$$.fragment,e),b(ps.$$.fragment,e),b(ms.$$.fragment,e),b(fs.$$.fragment,e),b(gs.$$.fragment,e),b(Qe.$$.fragment,e),b(us.$$.fragment,e),b(Ts.$$.fragment,e),b(bs.$$.fragment,e),b(Ke.$$.fragment,e),b(ys.$$.fragment,e),b(ws.$$.fragment,e),b(_s.$$.fragment,e),b(tt.$$.fragment,e),b(nt.$$.fragment,e),b(xs.$$.fragment,e),b(Ms.$$.fragment,e),b(ks.$$.fragment,e),b(ot.$$.fragment,e),b(Us.$$.fragment,e),b(vs.$$.fragment,e),b(Js.$$.fragment,e),b($s.$$.fragment,e),b(rt.$$.fragment,e),b(Ps.$$.fragment,e),b(Cs.$$.fragment,e),b(Is.$$.fragment,e),b(lt.$$.fragment,e),b(qs.$$.fragment,e),b(Gs.$$.fragment,e),b(Zs.$$.fragment,e),b(pt.$$.fragment,e),b(zs.$$.fragment,e),b(Fs.$$.fragment,e),b(Rs.$$.fragment,e),b(mt.$$.fragment,e),b(Ds.$$.fragment,e),b(Bs.$$.fragment,e),b(Ns.$$.fragment,e),b(ft.$$.fragment,e),b(As.$$.fragment,e),b(Vs.$$.fragment,e),b(Ss.$$.fragment,e),b(Ws.$$.fragment,e),b(Ls.$$.fragment,e),b(Hs.$$.fragment,e),b(Tt.$$.fragment,e),b(Ys.$$.fragment,e),b(Os.$$.fragment,e),b(Es.$$.fragment,e),b(yt.$$.fragment,e),b(Qs.$$.fragment,e),b(Xs.$$.fragment,e),b(eo.$$.fragment,e),b(to.$$.fragment,e),b(_t.$$.fragment,e),b(no.$$.fragment,e),b(so.$$.fragment,e),b(oo.$$.fragment,e),b(ao.$$.fragment,e),b(Ut.$$.fragment,e),b(ro.$$.fragment,e),b(io.$$.fragment,e),b(lo.$$.fragment,e),b(jt.$$.fragment,e),b(Jt.$$.fragment,e),b($t.$$.fragment,e),b(co.$$.fragment,e),b(po.$$.fragment,e),b(mo.$$.fragment,e),b(Ct.$$.fragment,e),b(ho.$$.fragment,e),b(fo.$$.fragment,e),b(go.$$.fragment,e),b(uo.$$.fragment,e),b(To.$$.fragment,e),b(Gt.$$.fragment,e),b(bo.$$.fragment,e),b(yo.$$.fragment,e),b(wo.$$.fragment,e),b(zt.$$.fragment,e),b(_o.$$.fragment,e),b(Ft.$$.fragment,e),b(Rt.$$.fragment,e),b(xo.$$.fragment,e),b(Mo.$$.fragment,e),b(Dt.$$.fragment,e),b(ko.$$.fragment,e),b(Uo.$$.fragment,e),b(vo.$$.fragment,e),b(Nt.$$.fragment,e),b(jo.$$.fragment,e),b(Jo.$$.fragment,e),b($o.$$.fragment,e),b(Vt.$$.fragment,e),b(St.$$.fragment,e),b(Po.$$.fragment,e),b(Co.$$.fragment,e),b(Io.$$.fragment,e),b(qo.$$.fragment,e),b(Ht.$$.fragment,e),b(Go.$$.fragment,e),b(Zo.$$.fragment,e),b(zo.$$.fragment,e),b(Fo.$$.fragment,e),b(Ro.$$.fragment,e),b(Do.$$.fragment,e),b(Bo.$$.fragment,e),b(Xt.$$.fragment,e),b(No.$$.fragment,e),b(Ao.$$.fragment,e),b(Vo.$$.fragment,e),b(en.$$.fragment,e),b(So.$$.fragment,e),b(Wo.$$.fragment,e),b(Ho.$$.fragment,e),b(Yo.$$.fragment,e),b(nn.$$.fragment,e),b(Oo.$$.fragment,e),b(Eo.$$.fragment,e),b(Qo.$$.fragment,e),b(sn.$$.fragment,e),b(Xo.$$.fragment,e),b(Ko.$$.fragment,e),b(ea.$$.fragment,e),b(an.$$.fragment,e),b(ta.$$.fragment,e),b(na.$$.fragment,e),b(sa.$$.fragment,e),b(ln.$$.fragment,e),b(oa.$$.fragment,e),b(aa.$$.fragment,e),b(ra.$$.fragment,e),b(pn.$$.fragment,e),b(ia.$$.fragment,e),b(la.$$.fragment,e),b(ca.$$.fragment,e),b(mn.$$.fragment,e),b(pa.$$.fragment,e),b(da.$$.fragment,e),b(ma.$$.fragment,e),b(ha.$$.fragment,e),b(fa.$$.fragment,e),b(fn.$$.fragment,e),b(ga.$$.fragment,e),b(ua.$$.fragment,e),b(Ta.$$.fragment,e),b(ba.$$.fragment,e),b(ya.$$.fragment,e),b(wa.$$.fragment,e),md=!1},d(e){e&&(a(x),a(h),a(c),a(t),a(_),a(ac),a(xn),a(rc),a(Mn),a(ic),a(lc),a(Un),a(cc),a(vn),a(pc),a(dc),a(Jn),a(mc),a(hc),a(Pn),a(fc),a(gc),a(In),a(uc),a(Tc),a(Gn),a(bc),a(yc),a(Me),a(wc),a(_c),a(Rn),a(xc),a(Mc),a(kc),a(Uc),a(vc),a(An),a(jc),a(Jc),a(Sn),a($c),a(Pc),a(Ln),a(Cc),a(Hn),a(Ic),a(Yn),a(qc),a(Gc),a(En),a(Zc),a(Qn),a(zc),a(Fc),a(Kn),a(Rc),a(Dc),a(ts),a(Bc),a(ns),a(Nc),a(Ac),a(os),a(Vc),a(as),a(Sc),a(rs),a(Wc),a(is),a(Lc),a(Hc),a(cs),a(Yc),a(Oc),a(ds),a(Ec),a(Qc),a(hs),a(Xc),a(Kc),a(S),a(ep),a(tp),a(le),a(np),a(sp),a(D),a(op),a(ap),a(ke),a(rp),a(ip),a(js),a(lp),a(cp),a(W),a(pp),a(dp),a(L),a(mp),a(hp),a(ce),a(fp),a(gp),a(pe),a(up),a(Tp),a(H),a(bp),a(yp),a(Ue),a(wp),a(_p),a(Y),a(xp),a(Mp),a(O),a(kp),a(Up),a(Ks),a(vp),a(jp),a(de),a(Jp),a(E),a($p),a(Pp),a(G),a(Cp),a(Ip),a(Z),a(qp),a(Gp),a(me),a(Zp),a(zp),a(Q),a(Fp),a(Rp),a(B),a(Dp),a(Bp),a(X),a(Np),a(Ap),a(z),a(Vp),a(Sp),a(q),a(Wp),a(Lp),a(he),a(Hp),a(Yp),a(N),a(Op),a(Ep),a(Lo),a(Qp),a(Xp),a(K),a(Kp),a(ed),a(ee),a(td),a(nd),a(te),a(sd),a(od),a(ne),a(ad),a(rd),a(F),a(id),a(ld),a(se),a(cd),a(pd),a(C),a(dd),a(oc)),a(r),y(w,e),y(kn,e),y(jn,e),y($n,e),y(Cn,e),y(qn,e),y(Zn,e),y(zn),y(Oe),y(Fn,e),y(Dn,e),y(Ee,e),y(Bn,e),y(Nn,e),y(Vn,e),y(Wn,e),y(On,e),y(Xn,e),y(es,e),y(ss,e),y(ls,e),y(ps,e),y(ms,e),y(fs,e),y(gs),y(Qe),y(us),y(Ts,e),y(bs),y(Ke),y(ys),y(ws,e),y(_s),y(tt),y(nt),y(xs),y(Ms,e),y(ks),y(ot),y(Us),y(vs,e),y(Js,e),y($s),y(rt),y(Ps),y(Cs,e),y(Is),y(lt),y(qs),y(Gs,e),y(Zs),y(pt),y(zs),y(Fs,e),y(Rs),y(mt),y(Ds),y(Bs,e),y(Ns),y(ft),y(As),y(Vs,e),y(Ss),y(Ws),y(Ls,e),y(Hs),y(Tt),y(Ys),y(Os,e),y(Es),y(yt),y(Qs),y(Xs,e),y(eo,e),y(to),y(_t),y(no),y(so),y(oo),y(ao),y(Ut),y(ro),y(io,e),y(lo),y(jt),y(Jt),y($t),y(co),y(po,e),y(mo),y(Ct),y(ho),y(fo),y(go),y(uo,e),y(To),y(Gt),y(bo),y(yo,e),y(wo),y(zt),y(_o),y(Ft),y(Rt),y(xo,e),y(Mo),y(Dt),y(ko),y(Uo,e),y(vo),y(Nt),y(jo),y(Jo,e),y($o),y(Vt),y(St),y(Po),y(Co),y(Io,e),y(qo),y(Ht),y(Go),y(Zo),y(zo),y(Fo),y(Ro),y(Do,e),y(Bo),y(Xt),y(No),y(Ao,e),y(Vo),y(en),y(So),y(Wo,e),y(Ho,e),y(Yo),y(nn),y(Oo),y(Eo,e),y(Qo),y(sn),y(Xo),y(Ko,e),y(ea),y(an),y(ta),y(na,e),y(sa),y(ln),y(oa),y(aa,e),y(ra),y(pn),y(ia),y(la,e),y(ca),y(mn),y(pa),y(da,e),y(ma),y(ha),y(fa),y(fn),y(ga),y(ua),y(Ta),y(ba),y(ya),y(wa)}}}const l_='{"title":"Pipelines","local":"pipelines","sections":[{"title":"The pipeline abstraction","local":"transformers.pipeline","sections":[],"depth":2},{"title":"Pipeline batching","local":"pipeline-batching","sections":[],"depth":2},{"title":"Pipeline chunk batching","local":"pipeline-chunk-batching","sections":[],"depth":2},{"title":"Pipeline custom code","local":"pipeline-custom-code","sections":[],"depth":2},{"title":"Implementing a pipeline","local":"implementing-a-pipeline","sections":[],"depth":2},{"title":"Audio","local":"audio","sections":[{"title":"AudioClassificationPipeline","local":"transformers.AudioClassificationPipeline","sections":[],"depth":3},{"title":"AutomaticSpeechRecognitionPipeline","local":"transformers.AutomaticSpeechRecognitionPipeline","sections":[],"depth":3},{"title":"TextToAudioPipeline","local":"transformers.TextToAudioPipeline","sections":[],"depth":3},{"title":"ZeroShotAudioClassificationPipeline","local":"transformers.ZeroShotAudioClassificationPipeline","sections":[],"depth":3}],"depth":2},{"title":"Computer vision","local":"computer-vision","sections":[{"title":"DepthEstimationPipeline","local":"transformers.DepthEstimationPipeline","sections":[],"depth":3},{"title":"ImageClassificationPipeline","local":"transformers.ImageClassificationPipeline","sections":[],"depth":3},{"title":"ImageSegmentationPipeline","local":"transformers.ImageSegmentationPipeline","sections":[],"depth":3},{"title":"ImageToImagePipeline","local":"transformers.ImageToImagePipeline","sections":[],"depth":3},{"title":"ObjectDetectionPipeline","local":"transformers.ObjectDetectionPipeline","sections":[],"depth":3},{"title":"VideoClassificationPipeline","local":"transformers.VideoClassificationPipeline","sections":[],"depth":3},{"title":"ZeroShotImageClassificationPipeline","local":"transformers.ZeroShotImageClassificationPipeline","sections":[],"depth":3},{"title":"ZeroShotObjectDetectionPipeline","local":"transformers.ZeroShotObjectDetectionPipeline","sections":[],"depth":3}],"depth":2},{"title":"Natural Language Processing","local":"natural-language-processing","sections":[{"title":"ConversationalPipeline","local":"transformers.Conversation","sections":[],"depth":3},{"title":"FillMaskPipeline","local":"transformers.FillMaskPipeline","sections":[],"depth":3},{"title":"QuestionAnsweringPipeline","local":"transformers.QuestionAnsweringPipeline","sections":[],"depth":3},{"title":"SummarizationPipeline","local":"transformers.SummarizationPipeline","sections":[],"depth":3},{"title":"TableQuestionAnsweringPipeline","local":"transformers.TableQuestionAnsweringPipeline","sections":[],"depth":3},{"title":"TextClassificationPipeline","local":"transformers.TextClassificationPipeline","sections":[],"depth":3},{"title":"TextGenerationPipeline","local":"transformers.TextGenerationPipeline","sections":[],"depth":3},{"title":"Text2TextGenerationPipeline","local":"transformers.Text2TextGenerationPipeline","sections":[],"depth":3},{"title":"TokenClassificationPipeline","local":"transformers.TokenClassificationPipeline","sections":[],"depth":3},{"title":"TranslationPipeline","local":"transformers.TranslationPipeline","sections":[],"depth":3},{"title":"ZeroShotClassificationPipeline","local":"transformers.ZeroShotClassificationPipeline","sections":[],"depth":3}],"depth":2},{"title":"Multimodal","local":"multimodal","sections":[{"title":"DocumentQuestionAnsweringPipeline","local":"transformers.DocumentQuestionAnsweringPipeline","sections":[],"depth":3},{"title":"FeatureExtractionPipeline","local":"transformers.FeatureExtractionPipeline","sections":[],"depth":3},{"title":"ImageFeatureExtractionPipeline","local":"transformers.ImageFeatureExtractionPipeline","sections":[],"depth":3},{"title":"ImageToTextPipeline","local":"transformers.ImageToTextPipeline","sections":[],"depth":3},{"title":"MaskGenerationPipeline","local":"transformers.MaskGenerationPipeline","sections":[],"depth":3},{"title":"VisualQuestionAnsweringPipeline","local":"transformers.VisualQuestionAnsweringPipeline","sections":[],"depth":3}],"depth":2},{"title":"Parent class: Pipeline","local":"transformers.Pipeline","sections":[],"depth":2}],"depth":1}';function c_(M){return Tw(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class T_ extends bw{constructor(r){super(),yw(this,r,c_,i_,uw,{})}}export{T_ as component};
