import{s as oa,f as na,o as aa,n as W}from"../chunks/scheduler.9bc65507.js";import{S as ra,i as ia,g as c,s as r,r as g,A as la,h as p,f as n,c as i,j,u as h,x as M,k as $,y as a,a as m,v as f,d as u,t as _,w as b}from"../chunks/index.707bf1b6.js";import{T as fs}from"../chunks/Tip.c2ecdbf4.js";import{D as x}from"../chunks/Docstring.17db21ae.js";import{C as D}from"../chunks/CodeBlock.54a9f38d.js";import{E as se}from"../chunks/ExampleCodeBlock.4f515aa9.js";import{H as I}from"../chunks/Heading.342b1fa6.js";function da(v){let s,T="Example:",d,l,y;return l=new D({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFNpZ2xpcENvbmZpZyUyQyUyMFNpZ2xpcE1vZGVsJTBBJTBBJTIzJTIwSW5pdGlhbGl6aW5nJTIwYSUyMFNpZ2xpcENvbmZpZyUyMHdpdGglMjBnb29nbGUlMkZzaWdsaXAtYmFzZS1wYXRjaDE2LTIyNCUyMHN0eWxlJTIwY29uZmlndXJhdGlvbiUwQWNvbmZpZ3VyYXRpb24lMjAlM0QlMjBTaWdsaXBDb25maWcoKSUwQSUwQSUyMyUyMEluaXRpYWxpemluZyUyMGElMjBTaWdsaXBNb2RlbCUyMCh3aXRoJTIwcmFuZG9tJTIwd2VpZ2h0cyklMjBmcm9tJTIwdGhlJTIwZ29vZ2xlJTJGc2lnbGlwLWJhc2UtcGF0Y2gxNi0yMjQlMjBzdHlsZSUyMGNvbmZpZ3VyYXRpb24lMEFtb2RlbCUyMCUzRCUyMFNpZ2xpcE1vZGVsKGNvbmZpZ3VyYXRpb24pJTBBJTBBJTIzJTIwQWNjZXNzaW5nJTIwdGhlJTIwbW9kZWwlMjBjb25maWd1cmF0aW9uJTBBY29uZmlndXJhdGlvbiUyMCUzRCUyMG1vZGVsLmNvbmZpZyUwQSUwQSUyMyUyMFdlJTIwY2FuJTIwYWxzbyUyMGluaXRpYWxpemUlMjBhJTIwU2lnbGlwQ29uZmlnJTIwZnJvbSUyMGElMjBTaWdsaXBUZXh0Q29uZmlnJTIwYW5kJTIwYSUyMFNpZ2xpcFZpc2lvbkNvbmZpZyUwQWZyb20lMjB0cmFuc2Zvcm1lcnMlMjBpbXBvcnQlMjBTaWdsaXBUZXh0Q29uZmlnJTJDJTIwU2lnbGlwVmlzaW9uQ29uZmlnJTBBJTBBJTIzJTIwSW5pdGlhbGl6aW5nJTIwYSUyMFNpZ2xpcFRleHQlMjBhbmQlMjBTaWdsaXBWaXNpb24lMjBjb25maWd1cmF0aW9uJTBBY29uZmlnX3RleHQlMjAlM0QlMjBTaWdsaXBUZXh0Q29uZmlnKCklMEFjb25maWdfdmlzaW9uJTIwJTNEJTIwU2lnbGlwVmlzaW9uQ29uZmlnKCklMEElMEFjb25maWclMjAlM0QlMjBTaWdsaXBDb25maWcuZnJvbV90ZXh0X3Zpc2lvbl9jb25maWdzKGNvbmZpZ190ZXh0JTJDJTIwY29uZmlnX3Zpc2lvbik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SiglipConfig, SiglipModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a SiglipConfig with google/siglip-base-patch16-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = SiglipConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a SiglipModel (with random weights) from the google/siglip-base-patch16-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SiglipModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># We can also initialize a SiglipConfig from a SiglipTextConfig and a SiglipVisionConfig</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SiglipTextConfig, SiglipVisionConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a SiglipText and SiglipVision configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config_text = SiglipTextConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span>config_vision = SiglipVisionConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span>config = SiglipConfig.from_text_vision_configs(config_text, config_vision)`,wrap:!1}}),{c(){s=c("p"),s.textContent=T,d=r(),g(l.$$.fragment)},l(t){s=p(t,"P",{"data-svelte-h":!0}),M(s)!=="svelte-11lpom8"&&(s.textContent=T),d=i(t),h(l.$$.fragment,t)},m(t,w){m(t,s,w),m(t,d,w),f(l,t,w),y=!0},p:W,i(t){y||(u(l.$$.fragment,t),y=!0)},o(t){_(l.$$.fragment,t),y=!1},d(t){t&&(n(s),n(d)),b(l,t)}}}function ca(v){let s,T="Example:",d,l,y;return l=new D({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFNpZ2xpcFRleHRDb25maWclMkMlMjBTaWdsaXBUZXh0TW9kZWwlMEElMEElMjMlMjBJbml0aWFsaXppbmclMjBhJTIwU2lnbGlwVGV4dENvbmZpZyUyMHdpdGglMjBnb29nbGUlMkZzaWdsaXAtYmFzZS1wYXRjaDE2LTIyNCUyMHN0eWxlJTIwY29uZmlndXJhdGlvbiUwQWNvbmZpZ3VyYXRpb24lMjAlM0QlMjBTaWdsaXBUZXh0Q29uZmlnKCklMEElMEElMjMlMjBJbml0aWFsaXppbmclMjBhJTIwU2lnbGlwVGV4dE1vZGVsJTIwKHdpdGglMjByYW5kb20lMjB3ZWlnaHRzKSUyMGZyb20lMjB0aGUlMjBnb29nbGUlMkZzaWdsaXAtYmFzZS1wYXRjaDE2LTIyNCUyMHN0eWxlJTIwY29uZmlndXJhdGlvbiUwQW1vZGVsJTIwJTNEJTIwU2lnbGlwVGV4dE1vZGVsKGNvbmZpZ3VyYXRpb24pJTBBJTBBJTIzJTIwQWNjZXNzaW5nJTIwdGhlJTIwbW9kZWwlMjBjb25maWd1cmF0aW9uJTBBY29uZmlndXJhdGlvbiUyMCUzRCUyMG1vZGVsLmNvbmZpZw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SiglipTextConfig, SiglipTextModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a SiglipTextConfig with google/siglip-base-patch16-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = SiglipTextConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a SiglipTextModel (with random weights) from the google/siglip-base-patch16-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SiglipTextModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`,wrap:!1}}),{c(){s=c("p"),s.textContent=T,d=r(),g(l.$$.fragment)},l(t){s=p(t,"P",{"data-svelte-h":!0}),M(s)!=="svelte-11lpom8"&&(s.textContent=T),d=i(t),h(l.$$.fragment,t)},m(t,w){m(t,s,w),m(t,d,w),f(l,t,w),y=!0},p:W,i(t){y||(u(l.$$.fragment,t),y=!0)},o(t){_(l.$$.fragment,t),y=!1},d(t){t&&(n(s),n(d)),b(l,t)}}}function pa(v){let s,T="Example:",d,l,y;return l=new D({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFNpZ2xpcFZpc2lvbkNvbmZpZyUyQyUyMFNpZ2xpcFZpc2lvbk1vZGVsJTBBJTBBJTIzJTIwSW5pdGlhbGl6aW5nJTIwYSUyMFNpZ2xpcFZpc2lvbkNvbmZpZyUyMHdpdGglMjBnb29nbGUlMkZzaWdsaXAtYmFzZS1wYXRjaDE2LTIyNCUyMHN0eWxlJTIwY29uZmlndXJhdGlvbiUwQWNvbmZpZ3VyYXRpb24lMjAlM0QlMjBTaWdsaXBWaXNpb25Db25maWcoKSUwQSUwQSUyMyUyMEluaXRpYWxpemluZyUyMGElMjBTaWdsaXBWaXNpb25Nb2RlbCUyMCh3aXRoJTIwcmFuZG9tJTIwd2VpZ2h0cyklMjBmcm9tJTIwdGhlJTIwZ29vZ2xlJTJGc2lnbGlwLWJhc2UtcGF0Y2gxNi0yMjQlMjBzdHlsZSUyMGNvbmZpZ3VyYXRpb24lMEFtb2RlbCUyMCUzRCUyMFNpZ2xpcFZpc2lvbk1vZGVsKGNvbmZpZ3VyYXRpb24pJTBBJTBBJTIzJTIwQWNjZXNzaW5nJTIwdGhlJTIwbW9kZWwlMjBjb25maWd1cmF0aW9uJTBBY29uZmlndXJhdGlvbiUyMCUzRCUyMG1vZGVsLmNvbmZpZw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SiglipVisionConfig, SiglipVisionModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a SiglipVisionConfig with google/siglip-base-patch16-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = SiglipVisionConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a SiglipVisionModel (with random weights) from the google/siglip-base-patch16-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SiglipVisionModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`,wrap:!1}}),{c(){s=c("p"),s.textContent=T,d=r(),g(l.$$.fragment)},l(t){s=p(t,"P",{"data-svelte-h":!0}),M(s)!=="svelte-11lpom8"&&(s.textContent=T),d=i(t),h(l.$$.fragment,t)},m(t,w){m(t,s,w),m(t,d,w),f(l,t,w),y=!0},p:W,i(t){y||(u(l.$$.fragment,t),y=!0)},o(t){_(l.$$.fragment,t),y=!1},d(t){t&&(n(s),n(d)),b(l,t)}}}function ma(v){let s,T=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){s=c("p"),s.innerHTML=T},l(d){s=p(d,"P",{"data-svelte-h":!0}),M(s)!=="svelte-fincs2"&&(s.innerHTML=T)},m(d,l){m(d,s,l)},p:W,d(d){d&&n(s)}}}function ga(v){let s,T="Examples:",d,l,y;return l=new D({props:{code:"ZnJvbSUyMFBJTCUyMGltcG9ydCUyMEltYWdlJTBBaW1wb3J0JTIwcmVxdWVzdHMlMEFmcm9tJTIwdHJhbnNmb3JtZXJzJTIwaW1wb3J0JTIwQXV0b1Byb2Nlc3NvciUyQyUyMEF1dG9Nb2RlbCUwQWltcG9ydCUyMHRvcmNoJTBBJTBBbW9kZWwlMjAlM0QlMjBBdXRvTW9kZWwuZnJvbV9wcmV0cmFpbmVkKCUyMmdvb2dsZSUyRnNpZ2xpcC1iYXNlLXBhdGNoMTYtMjI0JTIyKSUwQXByb2Nlc3NvciUyMCUzRCUyMEF1dG9Qcm9jZXNzb3IuZnJvbV9wcmV0cmFpbmVkKCUyMmdvb2dsZSUyRnNpZ2xpcC1iYXNlLXBhdGNoMTYtMjI0JTIyKSUwQSUwQXVybCUyMCUzRCUyMCUyMmh0dHAlM0ElMkYlMkZpbWFnZXMuY29jb2RhdGFzZXQub3JnJTJGdmFsMjAxNyUyRjAwMDAwMDAzOTc2OS5qcGclMjIlMEFpbWFnZSUyMCUzRCUyMEltYWdlLm9wZW4ocmVxdWVzdHMuZ2V0KHVybCUyQyUyMHN0cmVhbSUzRFRydWUpLnJhdyklMEElMEF0ZXh0cyUyMCUzRCUyMCU1QiUyMmElMjBwaG90byUyMG9mJTIwMiUyMGNhdHMlMjIlMkMlMjAlMjJhJTIwcGhvdG8lMjBvZiUyMDIlMjBkb2dzJTIyJTVEJTBBJTIzJTIwaW1wb3J0YW50JTNBJTIwd2UlMjBwYXNzJTIwJTYwcGFkZGluZyUzRG1heF9sZW5ndGglNjAlMjBzaW5jZSUyMHRoZSUyMG1vZGVsJTIwd2FzJTIwdHJhaW5lZCUyMHdpdGglMjB0aGlzJTBBaW5wdXRzJTIwJTNEJTIwcHJvY2Vzc29yKHRleHQlM0R0ZXh0cyUyQyUyMGltYWdlcyUzRGltYWdlJTJDJTIwcGFkZGluZyUzRCUyMm1heF9sZW5ndGglMjIlMkMlMjByZXR1cm5fdGVuc29ycyUzRCUyMnB0JTIyKSUwQSUwQXdpdGglMjB0b3JjaC5ub19ncmFkKCklM0ElMEElMjAlMjAlMjAlMjBvdXRwdXRzJTIwJTNEJTIwbW9kZWwoKippbnB1dHMpJTBBJTBBbG9naXRzX3Blcl9pbWFnZSUyMCUzRCUyMG91dHB1dHMubG9naXRzX3Blcl9pbWFnZSUwQXByb2JzJTIwJTNEJTIwdG9yY2guc2lnbW9pZChsb2dpdHNfcGVyX2ltYWdlKSUyMCUyMyUyMHRoZXNlJTIwYXJlJTIwdGhlJTIwcHJvYmFiaWxpdGllcyUwQXByaW50KGYlMjIlN0Jwcm9icyU1QjAlNUQlNUIwJTVEJTNBLjElMjUlN0QlMjB0aGF0JTIwaW1hZ2UlMjAwJTIwaXMlMjAnJTdCdGV4dHMlNUIwJTVEJTdEJyUyMik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor, AutoModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;google/siglip-base-patch16-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;google/siglip-base-patch16-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>texts = [<span class="hljs-string">&quot;a photo of 2 cats&quot;</span>, <span class="hljs-string">&quot;a photo of 2 dogs&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># important: we pass \`padding=max_length\` since the model was trained with this</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = processor(text=texts, images=image, padding=<span class="hljs-string">&quot;max_length&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>logits_per_image = outputs.logits_per_image
<span class="hljs-meta">&gt;&gt;&gt; </span>probs = torch.sigmoid(logits_per_image) <span class="hljs-comment"># these are the probabilities</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">{probs[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]:<span class="hljs-number">.1</span>%}</span> that image 0 is &#x27;<span class="hljs-subst">{texts[<span class="hljs-number">0</span>]}</span>&#x27;&quot;</span>)
<span class="hljs-number">31.9</span>% that image <span class="hljs-number">0</span> <span class="hljs-keyword">is</span> <span class="hljs-string">&#x27;a photo of 2 cats&#x27;</span>`,wrap:!1}}),{c(){s=c("p"),s.textContent=T,d=r(),g(l.$$.fragment)},l(t){s=p(t,"P",{"data-svelte-h":!0}),M(s)!=="svelte-kvfsh7"&&(s.textContent=T),d=i(t),h(l.$$.fragment,t)},m(t,w){m(t,s,w),m(t,d,w),f(l,t,w),y=!0},p:W,i(t){y||(u(l.$$.fragment,t),y=!0)},o(t){_(l.$$.fragment,t),y=!1},d(t){t&&(n(s),n(d)),b(l,t)}}}function ha(v){let s,T=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){s=c("p"),s.innerHTML=T},l(d){s=p(d,"P",{"data-svelte-h":!0}),M(s)!=="svelte-fincs2"&&(s.innerHTML=T)},m(d,l){m(d,s,l)},p:W,d(d){d&&n(s)}}}function fa(v){let s,T="Examples:",d,l,y;return l=new D({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMkMlMjBBdXRvTW9kZWwlMEFpbXBvcnQlMjB0b3JjaCUwQSUwQW1vZGVsJTIwJTNEJTIwQXV0b01vZGVsLmZyb21fcHJldHJhaW5lZCglMjJnb29nbGUlMkZzaWdsaXAtYmFzZS1wYXRjaDE2LTIyNCUyMiklMEF0b2tlbml6ZXIlMjAlM0QlMjBBdXRvVG9rZW5pemVyLmZyb21fcHJldHJhaW5lZCglMjJnb29nbGUlMkZzaWdsaXAtYmFzZS1wYXRjaDE2LTIyNCUyMiklMEElMEElMjMlMjBpbXBvcnRhbnQlM0ElMjBtYWtlJTIwc3VyZSUyMHRvJTIwc2V0JTIwcGFkZGluZyUzRCUyMm1heF9sZW5ndGglMjIlMjBhcyUyMHRoYXQncyUyMGhvdyUyMHRoZSUyMG1vZGVsJTIwd2FzJTIwdHJhaW5lZCUwQWlucHV0cyUyMCUzRCUyMHRva2VuaXplciglNUIlMjJhJTIwcGhvdG8lMjBvZiUyMGElMjBjYXQlMjIlMkMlMjAlMjJhJTIwcGhvdG8lMjBvZiUyMGElMjBkb2clMjIlNUQlMkMlMjBwYWRkaW5nJTNEJTIybWF4X2xlbmd0aCUyMiUyQyUyMHJldHVybl90ZW5zb3JzJTNEJTIycHQlMjIpJTBBd2l0aCUyMHRvcmNoLm5vX2dyYWQoKSUzQSUwQSUyMCUyMCUyMCUyMHRleHRfZmVhdHVyZXMlMjAlM0QlMjBtb2RlbC5nZXRfdGV4dF9mZWF0dXJlcygqKmlucHV0cyk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;google/siglip-base-patch16-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;google/siglip-base-patch16-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># important: make sure to set padding=&quot;max_length&quot; as that&#x27;s how the model was trained</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer([<span class="hljs-string">&quot;a photo of a cat&quot;</span>, <span class="hljs-string">&quot;a photo of a dog&quot;</span>], padding=<span class="hljs-string">&quot;max_length&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    text_features = model.get_text_features(**inputs)`,wrap:!1}}),{c(){s=c("p"),s.textContent=T,d=r(),g(l.$$.fragment)},l(t){s=p(t,"P",{"data-svelte-h":!0}),M(s)!=="svelte-kvfsh7"&&(s.textContent=T),d=i(t),h(l.$$.fragment,t)},m(t,w){m(t,s,w),m(t,d,w),f(l,t,w),y=!0},p:W,i(t){y||(u(l.$$.fragment,t),y=!0)},o(t){_(l.$$.fragment,t),y=!1},d(t){t&&(n(s),n(d)),b(l,t)}}}function ua(v){let s,T=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){s=c("p"),s.innerHTML=T},l(d){s=p(d,"P",{"data-svelte-h":!0}),M(s)!=="svelte-fincs2"&&(s.innerHTML=T)},m(d,l){m(d,s,l)},p:W,d(d){d&&n(s)}}}function _a(v){let s,T="Examples:",d,l,y;return l=new D({props:{code:"ZnJvbSUyMFBJTCUyMGltcG9ydCUyMEltYWdlJTBBaW1wb3J0JTIwcmVxdWVzdHMlMEFmcm9tJTIwdHJhbnNmb3JtZXJzJTIwaW1wb3J0JTIwQXV0b1Byb2Nlc3NvciUyQyUyMEF1dG9Nb2RlbCUwQWltcG9ydCUyMHRvcmNoJTBBJTBBbW9kZWwlMjAlM0QlMjBBdXRvTW9kZWwuZnJvbV9wcmV0cmFpbmVkKCUyMmdvb2dsZSUyRnNpZ2xpcC1iYXNlLXBhdGNoMTYtMjI0JTIyKSUwQXByb2Nlc3NvciUyMCUzRCUyMEF1dG9Qcm9jZXNzb3IuZnJvbV9wcmV0cmFpbmVkKCUyMmdvb2dsZSUyRnNpZ2xpcC1iYXNlLXBhdGNoMTYtMjI0JTIyKSUwQSUwQXVybCUyMCUzRCUyMCUyMmh0dHAlM0ElMkYlMkZpbWFnZXMuY29jb2RhdGFzZXQub3JnJTJGdmFsMjAxNyUyRjAwMDAwMDAzOTc2OS5qcGclMjIlMEFpbWFnZSUyMCUzRCUyMEltYWdlLm9wZW4ocmVxdWVzdHMuZ2V0KHVybCUyQyUyMHN0cmVhbSUzRFRydWUpLnJhdyklMEElMEFpbnB1dHMlMjAlM0QlMjBwcm9jZXNzb3IoaW1hZ2VzJTNEaW1hZ2UlMkMlMjByZXR1cm5fdGVuc29ycyUzRCUyMnB0JTIyKSUwQSUwQXdpdGglMjB0b3JjaC5ub19ncmFkKCklM0ElMEElMjAlMjAlMjAlMjBpbWFnZV9mZWF0dXJlcyUyMCUzRCUyMG1vZGVsLmdldF9pbWFnZV9mZWF0dXJlcygqKmlucHV0cyk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor, AutoModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;google/siglip-base-patch16-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;google/siglip-base-patch16-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = processor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    image_features = model.get_image_features(**inputs)`,wrap:!1}}),{c(){s=c("p"),s.textContent=T,d=r(),g(l.$$.fragment)},l(t){s=p(t,"P",{"data-svelte-h":!0}),M(s)!=="svelte-kvfsh7"&&(s.textContent=T),d=i(t),h(l.$$.fragment,t)},m(t,w){m(t,s,w),m(t,d,w),f(l,t,w),y=!0},p:W,i(t){y||(u(l.$$.fragment,t),y=!0)},o(t){_(l.$$.fragment,t),y=!1},d(t){t&&(n(s),n(d)),b(l,t)}}}function ba(v){let s,T=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){s=c("p"),s.innerHTML=T},l(d){s=p(d,"P",{"data-svelte-h":!0}),M(s)!=="svelte-fincs2"&&(s.innerHTML=T)},m(d,l){m(d,s,l)},p:W,d(d){d&&n(s)}}}function Ma(v){let s,T="Examples:",d,l,y;return l=new D({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMkMlMjBTaWdsaXBUZXh0TW9kZWwlMEElMEFtb2RlbCUyMCUzRCUyMFNpZ2xpcFRleHRNb2RlbC5mcm9tX3ByZXRyYWluZWQoJTIyZ29vZ2xlJTJGc2lnbGlwLWJhc2UtcGF0Y2gxNi0yMjQlMjIpJTBBdG9rZW5pemVyJTIwJTNEJTIwQXV0b1Rva2VuaXplci5mcm9tX3ByZXRyYWluZWQoJTIyZ29vZ2xlJTJGc2lnbGlwLWJhc2UtcGF0Y2gxNi0yMjQlMjIpJTBBJTBBJTIzJTIwaW1wb3J0YW50JTNBJTIwbWFrZSUyMHN1cmUlMjB0byUyMHNldCUyMHBhZGRpbmclM0QlMjJtYXhfbGVuZ3RoJTIyJTIwYXMlMjB0aGF0J3MlMjBob3clMjB0aGUlMjBtb2RlbCUyMHdhcyUyMHRyYWluZWQlMEFpbnB1dHMlMjAlM0QlMjB0b2tlbml6ZXIoJTVCJTIyYSUyMHBob3RvJTIwb2YlMjBhJTIwY2F0JTIyJTJDJTIwJTIyYSUyMHBob3RvJTIwb2YlMjBhJTIwZG9nJTIyJTVEJTJDJTIwcGFkZGluZyUzRCUyMm1heF9sZW5ndGglMjIlMkMlMjByZXR1cm5fdGVuc29ycyUzRCUyMnB0JTIyKSUwQSUwQW91dHB1dHMlMjAlM0QlMjBtb2RlbCgqKmlucHV0cyklMEFsYXN0X2hpZGRlbl9zdGF0ZSUyMCUzRCUyMG91dHB1dHMubGFzdF9oaWRkZW5fc3RhdGUlMEFwb29sZWRfb3V0cHV0JTIwJTNEJTIwb3V0cHV0cy5wb29sZXJfb3V0cHV0JTIwJTIwJTIzJTIwcG9vbGVkJTIwKEVPUyUyMHRva2VuKSUyMHN0YXRlcw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, SiglipTextModel

<span class="hljs-meta">&gt;&gt;&gt; </span>model = SiglipTextModel.from_pretrained(<span class="hljs-string">&quot;google/siglip-base-patch16-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;google/siglip-base-patch16-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># important: make sure to set padding=&quot;max_length&quot; as that&#x27;s how the model was trained</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer([<span class="hljs-string">&quot;a photo of a cat&quot;</span>, <span class="hljs-string">&quot;a photo of a dog&quot;</span>], padding=<span class="hljs-string">&quot;max_length&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_state = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span>pooled_output = outputs.pooler_output  <span class="hljs-comment"># pooled (EOS token) states</span>`,wrap:!1}}),{c(){s=c("p"),s.textContent=T,d=r(),g(l.$$.fragment)},l(t){s=p(t,"P",{"data-svelte-h":!0}),M(s)!=="svelte-kvfsh7"&&(s.textContent=T),d=i(t),h(l.$$.fragment,t)},m(t,w){m(t,s,w),m(t,d,w),f(l,t,w),y=!0},p:W,i(t){y||(u(l.$$.fragment,t),y=!0)},o(t){_(l.$$.fragment,t),y=!1},d(t){t&&(n(s),n(d)),b(l,t)}}}function ya(v){let s,T=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){s=c("p"),s.innerHTML=T},l(d){s=p(d,"P",{"data-svelte-h":!0}),M(s)!=="svelte-fincs2"&&(s.innerHTML=T)},m(d,l){m(d,s,l)},p:W,d(d){d&&n(s)}}}function Ta(v){let s,T="Examples:",d,l,y;return l=new D({props:{code:"ZnJvbSUyMFBJTCUyMGltcG9ydCUyMEltYWdlJTBBaW1wb3J0JTIwcmVxdWVzdHMlMEFmcm9tJTIwdHJhbnNmb3JtZXJzJTIwaW1wb3J0JTIwQXV0b1Byb2Nlc3NvciUyQyUyMFNpZ2xpcFZpc2lvbk1vZGVsJTBBJTBBbW9kZWwlMjAlM0QlMjBTaWdsaXBWaXNpb25Nb2RlbC5mcm9tX3ByZXRyYWluZWQoJTIyZ29vZ2xlJTJGc2lnbGlwLWJhc2UtcGF0Y2gxNi0yMjQlMjIpJTBBcHJvY2Vzc29yJTIwJTNEJTIwQXV0b1Byb2Nlc3Nvci5mcm9tX3ByZXRyYWluZWQoJTIyZ29vZ2xlJTJGc2lnbGlwLWJhc2UtcGF0Y2gxNi0yMjQlMjIpJTBBJTBBdXJsJTIwJTNEJTIwJTIyaHR0cCUzQSUyRiUyRmltYWdlcy5jb2NvZGF0YXNldC5vcmclMkZ2YWwyMDE3JTJGMDAwMDAwMDM5NzY5LmpwZyUyMiUwQWltYWdlJTIwJTNEJTIwSW1hZ2Uub3BlbihyZXF1ZXN0cy5nZXQodXJsJTJDJTIwc3RyZWFtJTNEVHJ1ZSkucmF3KSUwQSUwQWlucHV0cyUyMCUzRCUyMHByb2Nlc3NvcihpbWFnZXMlM0RpbWFnZSUyQyUyMHJldHVybl90ZW5zb3JzJTNEJTIycHQlMjIpJTBBJTBBb3V0cHV0cyUyMCUzRCUyMG1vZGVsKCoqaW5wdXRzKSUwQWxhc3RfaGlkZGVuX3N0YXRlJTIwJTNEJTIwb3V0cHV0cy5sYXN0X2hpZGRlbl9zdGF0ZSUwQXBvb2xlZF9vdXRwdXQlMjAlM0QlMjBvdXRwdXRzLnBvb2xlcl9vdXRwdXQlMjAlMjAlMjMlMjBwb29sZWQlMjBmZWF0dXJlcw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor, SiglipVisionModel

<span class="hljs-meta">&gt;&gt;&gt; </span>model = SiglipVisionModel.from_pretrained(<span class="hljs-string">&quot;google/siglip-base-patch16-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;google/siglip-base-patch16-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = processor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_state = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span>pooled_output = outputs.pooler_output  <span class="hljs-comment"># pooled features</span>`,wrap:!1}}),{c(){s=c("p"),s.textContent=T,d=r(),g(l.$$.fragment)},l(t){s=p(t,"P",{"data-svelte-h":!0}),M(s)!=="svelte-kvfsh7"&&(s.textContent=T),d=i(t),h(l.$$.fragment,t)},m(t,w){m(t,s,w),m(t,d,w),f(l,t,w),y=!0},p:W,i(t){y||(u(l.$$.fragment,t),y=!0)},o(t){_(l.$$.fragment,t),y=!1},d(t){t&&(n(s),n(d)),b(l,t)}}}function wa(v){let s,T=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){s=c("p"),s.innerHTML=T},l(d){s=p(d,"P",{"data-svelte-h":!0}),M(s)!=="svelte-fincs2"&&(s.innerHTML=T)},m(d,l){m(d,s,l)},p:W,d(d){d&&n(s)}}}function va(v){let s,T="Example:",d,l,y;return l=new D({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9JbWFnZVByb2Nlc3NvciUyQyUyMFNpZ2xpcEZvckltYWdlQ2xhc3NpZmljYXRpb24lMEFpbXBvcnQlMjB0b3JjaCUwQWZyb20lMjBkYXRhc2V0cyUyMGltcG9ydCUyMGxvYWRfZGF0YXNldCUwQSUwQWRhdGFzZXQlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyaHVnZ2luZ2ZhY2UlMkZjYXRzLWltYWdlJTIyKSUwQWltYWdlJTIwJTNEJTIwZGF0YXNldCU1QiUyMnRlc3QlMjIlNUQlNUIlMjJpbWFnZSUyMiU1RCU1QjAlNUQlMEElMEFpbWFnZV9wcm9jZXNzb3IlMjAlM0QlMjBBdXRvSW1hZ2VQcm9jZXNzb3IuZnJvbV9wcmV0cmFpbmVkKCUyMmdvb2dsZSUyRnNpZ2xpcC1iYXNlLXBhdGNoMTYtMjI0JTIyKSUwQW1vZGVsJTIwJTNEJTIwU2lnbGlwRm9ySW1hZ2VDbGFzc2lmaWNhdGlvbi5mcm9tX3ByZXRyYWluZWQoJTIyZ29vZ2xlJTJGc2lnbGlwLWJhc2UtcGF0Y2gxNi0yMjQlMjIpJTBBJTBBaW5wdXRzJTIwJTNEJTIwaW1hZ2VfcHJvY2Vzc29yKGltYWdlJTJDJTIwcmV0dXJuX3RlbnNvcnMlM0QlMjJwdCUyMiklMEElMEF3aXRoJTIwdG9yY2gubm9fZ3JhZCgpJTNBJTBBJTIwJTIwJTIwJTIwbG9naXRzJTIwJTNEJTIwbW9kZWwoKippbnB1dHMpLmxvZ2l0cyUwQSUwQSUyMyUyMG1vZGVsJTIwcHJlZGljdHMlMjBvbmUlMjBvZiUyMHRoZSUyMDEwMDAlMjBJbWFnZU5ldCUyMGNsYXNzZXMlMEFwcmVkaWN0ZWRfbGFiZWwlMjAlM0QlMjBsb2dpdHMuYXJnbWF4KC0xKS5pdGVtKCklMEFwcmludChtb2RlbC5jb25maWcuaWQybGFiZWwlNUJwcmVkaWN0ZWRfbGFiZWwlNUQp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoImageProcessor, SiglipForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>image_processor = AutoImageProcessor.from_pretrained(<span class="hljs-string">&quot;google/siglip-base-patch16-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SiglipForImageClassification.from_pretrained(<span class="hljs-string">&quot;google/siglip-base-patch16-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = image_processor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
LABEL_1`,wrap:!1}}),{c(){s=c("p"),s.textContent=T,d=r(),g(l.$$.fragment)},l(t){s=p(t,"P",{"data-svelte-h":!0}),M(s)!=="svelte-11lpom8"&&(s.textContent=T),d=i(t),h(l.$$.fragment,t)},m(t,w){m(t,s,w),m(t,d,w),f(l,t,w),y=!0},p:W,i(t){y||(u(l.$$.fragment,t),y=!0)},o(t){_(l.$$.fragment,t),y=!1},d(t){t&&(n(s),n(d)),b(l,t)}}}function $a(v){let s,T,d,l,y,t,w,bs,ze,gn='The SigLIP model was proposed in <a href="https://arxiv.org/abs/2303.15343" rel="nofollow">Sigmoid Loss for Language Image Pre-Training</a> by Xiaohua Zhai, Basil Mustafa, Alexander Kolesnikov, Lucas Beyer. SigLIP proposes to replace the loss function used in <a href="clip">CLIP</a> by a simple pairwise sigmoid loss. This results in better performance in terms of zero-shot classification accuracy on ImageNet.',Ms,Ze,hn="The abstract from the paper is the following:",ys,We,fn="<em>We propose a simple pairwise Sigmoid loss for Language-Image Pre-training (SigLIP). Unlike standard contrastive learning with softmax normalization, the sigmoid loss operates solely on image-text pairs and does not require a global view of the pairwise similarities for normalization. The sigmoid loss simultaneously allows further scaling up the batch size, while also performing better at smaller batch sizes. Combined with Locked-image Tuning, with only four TPUv4 chips, we train a SigLiT model that achieves 84.5% ImageNet zero-shot accuracy in two days. The disentanglement of the batch size from the loss further allows us to study the impact of examples vs pairs and negative to positive ratio. Finally, we push the batch size to the extreme, up to one million, and find that the benefits of growing batch size quickly diminish, with a more reasonable batch size of 32k being sufficient.</em>",Ts,Be,ws,Ne,un='<li>Usage of SigLIP is similar to <a href="clip">CLIP</a>. The main difference is the training loss, which does not require a global view of all the pairwise similarities of images and texts within a batch. One needs to apply the sigmoid activation function to the logits, rather than the softmax.</li> <li>Training is not yet supported. If you want to fine-tune SigLIP or train from scratch, refer to the loss function from <a href="https://github.com/mlfoundations/open_clip/blob/73ad04ae7fb93ede1c02dc9040a828634cb1edf1/src/open_clip/loss.py#L307" rel="nofollow">OpenCLIP</a>, which leverages various <code>torch.distributed</code> utilities.</li> <li>When using the standalone <a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipTokenizer">SiglipTokenizer</a> or <a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipProcessor">SiglipProcessor</a>, make sure to pass <code>padding=&quot;max_length&quot;</code> as that’s how the model was trained.</li>',vs,oe,_n,$s,Ge,bn='SigLIP evaluation results compared to CLIP. Taken from the <a href="https://arxiv.org/abs/2303.15343">original paper</a>.',js,Pe,Mn=`This model was contributed by <a href="https://huggingface.co/nielsr" rel="nofollow">nielsr</a>.
The original code can be found <a href="https://github.com/google-research/big_vision/tree/main" rel="nofollow">here</a>.`,xs,Fe,ks,Ve,yn="There are 2 main ways to use SigLIP: either using the pipeline API, which abstracts away all the complexity for you, or by using the <code>SiglipModel</code> class yourself.",Ss,qe,Js,Xe,Tn="The pipeline allows to use the model in a few lines of code:",Is,Le,Cs,Re,Us,He,wn="If you want to do the pre- and postprocessing yourself, here’s how to do that:",zs,Ee,Zs,Qe,Ws,C,Ye,so,Zt,vn=`<a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipConfig">SiglipConfig</a> is the configuration class to store the configuration of a <a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipModel">SiglipModel</a>. It is used to
instantiate a Siglip model according to the specified arguments, defining the text model and vision model configs.
Instantiating a configuration with the defaults will yield a similar configuration to that of the Siglip
<a href="https://huggingface.co/google/siglip-base-patch16-224" rel="nofollow">google/siglip-base-patch16-224</a> architecture.`,oo,Wt,$n=`Configuration objects inherit from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> and can be used to control the model outputs. Read the
documentation from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> for more information.`,no,ne,ao,ae,Ae,ro,Bt,jn=`Instantiate a <a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipConfig">SiglipConfig</a> (or a derived class) from siglip text model configuration and siglip vision
model configuration.`,Bs,De,Ns,B,Oe,io,Nt,xn=`This is the configuration class to store the configuration of a <a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipTextModel">SiglipTextModel</a>. It is used to instantiate a
Siglip text encoder according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the text encoder of the Siglip
<a href="https://huggingface.co/google/siglip-base-patch16-224" rel="nofollow">google/siglip-base-patch16-224</a> architecture.`,lo,Gt,kn=`Configuration objects inherit from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> and can be used to control the model outputs. Read the
documentation from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> for more information.`,co,re,Gs,Ke,Ps,N,et,po,Pt,Sn=`This is the configuration class to store the configuration of a <a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipVisionModel">SiglipVisionModel</a>. It is used to instantiate a
Siglip vision encoder according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the vision encoder of the Siglip
<a href="https://huggingface.co/google/siglip-base-patch16-224" rel="nofollow">google/siglip-base-patch16-224</a> architecture.`,mo,Ft,Jn=`Configuration objects inherit from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> and can be used to control the model outputs. Read the
documentation from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> for more information.`,go,ie,Fs,tt,Vs,k,st,ho,Vt,In='Construct a Siglip tokenizer. Based on <a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a>.',fo,qt,Cn=`This tokenizer inherits from <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a> which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`,uo,O,ot,_o,Xt,Un=`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A sequence has the following format:`,bo,Lt,zn="<li>single sequence: <code>X &lt;/s&gt;</code></li> <li>pair of sequences: <code>A &lt;/s&gt; B &lt;/s&gt;</code></li>",Mo,le,nt,yo,Rt,Zn=`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer <code>prepare_for_model</code> method.`,To,de,at,wo,Ht,Wn=`Create a mask from the two sequences passed to be used in a sequence-pair classification task. T5 does not make
use of token type ids, therefore a list of zeros is returned.`,vo,Et,rt,qs,it,Xs,Q,lt,$o,Qt,Bn="Constructs a SigLIP image processor.",jo,ce,dt,xo,Yt,Nn="Preprocess an image or batch of images.",Ls,ct,Rs,U,pt,ko,At,Gn="Constructs a Siglip processor which wraps a Siglip image processor and a Siglip tokenizer into a single processor.",So,Dt,Pn=`<a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipProcessor">SiglipProcessor</a> offers all the functionalities of <a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipImageProcessor">SiglipImageProcessor</a> and <a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipTokenizer">SiglipTokenizer</a>. See the
<code>__call__()</code> and <a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipProcessor.decode">decode()</a> for more information.`,Jo,pe,mt,Io,Ot,Fn=`This method forwards all its arguments to SiglipTokenizer’s <a href="/docs/transformers/main/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerTokenizer.batch_decode">batch_decode()</a>. Please
refer to the docstring of this method for more information.`,Co,me,gt,Uo,Kt,Vn=`This method forwards all its arguments to SiglipTokenizer’s <a href="/docs/transformers/main/en/model_doc/speecht5#transformers.SpeechT5Tokenizer.decode">decode()</a>. Please refer to
the docstring of this method for more information.`,Hs,ht,Es,S,ft,zo,es,qn=`This model inherits from <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a>. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`,Zo,ts,Xn=`This model is also a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`,Wo,q,ut,Bo,ss,Ln='The <a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipModel">SiglipModel</a> forward method, overrides the <code>__call__</code> special method.',No,ge,Go,he,Po,X,_t,Fo,os,Rn='The <a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipModel">SiglipModel</a> forward method, overrides the <code>__call__</code> special method.',Vo,fe,qo,ue,Xo,L,bt,Lo,ns,Hn='The <a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipModel">SiglipModel</a> forward method, overrides the <code>__call__</code> special method.',Ro,_e,Ho,be,Qs,Mt,Ys,G,yt,Eo,as,En=`The text model from SigLIP without any head or projection on top.
This model inherits from <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a>. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`,Qo,rs,Qn=`This model is also a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`,Yo,R,Tt,Ao,is,Yn='The <a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipTextModel">SiglipTextModel</a> forward method, overrides the <code>__call__</code> special method.',Do,Me,Oo,ye,As,wt,Ds,P,vt,Ko,ls,An=`The vision model from SigLIP without any head or projection on top.
This model inherits from <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a>. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`,en,ds,Dn=`This model is also a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`,tn,H,$t,sn,cs,On='The <a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipVisionModel">SiglipVisionModel</a> forward method, overrides the <code>__call__</code> special method.',on,Te,nn,we,Os,jt,Ks,z,xt,an,ps,Kn=`SigLIP vision encoder with an image classification head on top (a linear layer on top of the pooled final hidden states of
the patch tokens) e.g. for ImageNet.`,rn,ms,ea=`This model inherits from <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a>. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`,ln,gs,ta=`This model is also a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`,dn,E,kt,cn,hs,sa='The <a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipForImageClassification">SiglipForImageClassification</a> forward method, overrides the <code>__call__</code> special method.',pn,ve,mn,$e,eo,us,to;return y=new I({props:{title:"SigLIP",local:"siglip",headingTag:"h1"}}),w=new I({props:{title:"Overview",local:"overview",headingTag:"h2"}}),Be=new I({props:{title:"Usage tips",local:"usage-tips",headingTag:"h2"}}),Fe=new I({props:{title:"Usage example",local:"usage-example",headingTag:"h2"}}),qe=new I({props:{title:"Pipeline API",local:"pipeline-api",headingTag:"h3"}}),Le=new D({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBZnJvbSUyMFBJTCUyMGltcG9ydCUyMEltYWdlJTBBaW1wb3J0JTIwcmVxdWVzdHMlMEElMEElMjMlMjBsb2FkJTIwcGlwZSUwQWltYWdlX2NsYXNzaWZpZXIlMjAlM0QlMjBwaXBlbGluZSh0YXNrJTNEJTIyemVyby1zaG90LWltYWdlLWNsYXNzaWZpY2F0aW9uJTIyJTJDJTIwbW9kZWwlM0QlMjJnb29nbGUlMkZzaWdsaXAtYmFzZS1wYXRjaDE2LTIyNCUyMiklMEElMEElMjMlMjBsb2FkJTIwaW1hZ2UlMEF1cmwlMjAlM0QlMjAnaHR0cCUzQSUyRiUyRmltYWdlcy5jb2NvZGF0YXNldC5vcmclMkZ2YWwyMDE3JTJGMDAwMDAwMDM5NzY5LmpwZyclMEFpbWFnZSUyMCUzRCUyMEltYWdlLm9wZW4ocmVxdWVzdHMuZ2V0KHVybCUyQyUyMHN0cmVhbSUzRFRydWUpLnJhdyklMEElMEElMjMlMjBpbmZlcmVuY2UlMEFvdXRwdXRzJTIwJTNEJTIwaW1hZ2VfY2xhc3NpZmllcihpbWFnZSUyQyUyMGNhbmRpZGF0ZV9sYWJlbHMlM0QlNUIlMjIyJTIwY2F0cyUyMiUyQyUyMCUyMmElMjBwbGFuZSUyMiUyQyUyMCUyMmElMjByZW1vdGUlMjIlNUQpJTBBb3V0cHV0cyUyMCUzRCUyMCU1QiU3QiUyMnNjb3JlJTIyJTNBJTIwcm91bmQob3V0cHV0JTVCJTIyc2NvcmUlMjIlNUQlMkMlMjA0KSUyQyUyMCUyMmxhYmVsJTIyJTNBJTIwb3V0cHV0JTVCJTIybGFiZWwlMjIlNUQlMjAlN0QlMjBmb3IlMjBvdXRwdXQlMjBpbiUyMG91dHB1dHMlNUQlMEFwcmludChvdXRwdXRzKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load pipe</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image_classifier = pipeline(task=<span class="hljs-string">&quot;zero-shot-image-classification&quot;</span>, model=<span class="hljs-string">&quot;google/siglip-base-patch16-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load image</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&#x27;http://images.cocodataset.org/val2017/000000039769.jpg&#x27;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># inference</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = image_classifier(image, candidate_labels=[<span class="hljs-string">&quot;2 cats&quot;</span>, <span class="hljs-string">&quot;a plane&quot;</span>, <span class="hljs-string">&quot;a remote&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = [{<span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-built_in">round</span>(output[<span class="hljs-string">&quot;score&quot;</span>], <span class="hljs-number">4</span>), <span class="hljs-string">&quot;label&quot;</span>: output[<span class="hljs-string">&quot;label&quot;</span>] } <span class="hljs-keyword">for</span> output <span class="hljs-keyword">in</span> outputs]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(outputs)
[{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.1979</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;2 cats&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.0</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;a remote&#x27;</span>}, {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.0</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;a plane&#x27;</span>}]`,wrap:!1}}),Re=new I({props:{title:"Using the model yourself",local:"using-the-model-yourself",headingTag:"h3"}}),Ee=new D({props:{code:"ZnJvbSUyMFBJTCUyMGltcG9ydCUyMEltYWdlJTBBaW1wb3J0JTIwcmVxdWVzdHMlMEFmcm9tJTIwdHJhbnNmb3JtZXJzJTIwaW1wb3J0JTIwQXV0b1Byb2Nlc3NvciUyQyUyMEF1dG9Nb2RlbCUwQWltcG9ydCUyMHRvcmNoJTBBJTBBbW9kZWwlMjAlM0QlMjBBdXRvTW9kZWwuZnJvbV9wcmV0cmFpbmVkKCUyMmdvb2dsZSUyRnNpZ2xpcC1iYXNlLXBhdGNoMTYtMjI0JTIyKSUwQXByb2Nlc3NvciUyMCUzRCUyMEF1dG9Qcm9jZXNzb3IuZnJvbV9wcmV0cmFpbmVkKCUyMmdvb2dsZSUyRnNpZ2xpcC1iYXNlLXBhdGNoMTYtMjI0JTIyKSUwQSUwQXVybCUyMCUzRCUyMCUyMmh0dHAlM0ElMkYlMkZpbWFnZXMuY29jb2RhdGFzZXQub3JnJTJGdmFsMjAxNyUyRjAwMDAwMDAzOTc2OS5qcGclMjIlMEFpbWFnZSUyMCUzRCUyMEltYWdlLm9wZW4ocmVxdWVzdHMuZ2V0KHVybCUyQyUyMHN0cmVhbSUzRFRydWUpLnJhdyklMEElMEF0ZXh0cyUyMCUzRCUyMCU1QiUyMmElMjBwaG90byUyMG9mJTIwMiUyMGNhdHMlMjIlMkMlMjAlMjJhJTIwcGhvdG8lMjBvZiUyMDIlMjBkb2dzJTIyJTVEJTBBJTIzJTIwaW1wb3J0YW50JTNBJTIwd2UlMjBwYXNzJTIwJTYwcGFkZGluZyUzRG1heF9sZW5ndGglNjAlMjBzaW5jZSUyMHRoZSUyMG1vZGVsJTIwd2FzJTIwdHJhaW5lZCUyMHdpdGglMjB0aGlzJTBBaW5wdXRzJTIwJTNEJTIwcHJvY2Vzc29yKHRleHQlM0R0ZXh0cyUyQyUyMGltYWdlcyUzRGltYWdlJTJDJTIwcGFkZGluZyUzRCUyMm1heF9sZW5ndGglMjIlMkMlMjByZXR1cm5fdGVuc29ycyUzRCUyMnB0JTIyKSUwQSUwQXdpdGglMjB0b3JjaC5ub19ncmFkKCklM0ElMEElMjAlMjAlMjAlMjBvdXRwdXRzJTIwJTNEJTIwbW9kZWwoKippbnB1dHMpJTBBJTBBbG9naXRzX3Blcl9pbWFnZSUyMCUzRCUyMG91dHB1dHMubG9naXRzX3Blcl9pbWFnZSUwQXByb2JzJTIwJTNEJTIwdG9yY2guc2lnbW9pZChsb2dpdHNfcGVyX2ltYWdlKSUyMCUyMyUyMHRoZXNlJTIwYXJlJTIwdGhlJTIwcHJvYmFiaWxpdGllcyUwQXByaW50KGYlMjIlN0Jwcm9icyU1QjAlNUQlNUIwJTVEJTNBLjElMjUlN0QlMjB0aGF0JTIwaW1hZ2UlMjAwJTIwaXMlMjAnJTdCdGV4dHMlNUIwJTVEJTdEJyUyMik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor, AutoModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;google/siglip-base-patch16-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;google/siglip-base-patch16-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>texts = [<span class="hljs-string">&quot;a photo of 2 cats&quot;</span>, <span class="hljs-string">&quot;a photo of 2 dogs&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># important: we pass \`padding=max_length\` since the model was trained with this</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = processor(text=texts, images=image, padding=<span class="hljs-string">&quot;max_length&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>logits_per_image = outputs.logits_per_image
<span class="hljs-meta">&gt;&gt;&gt; </span>probs = torch.sigmoid(logits_per_image) <span class="hljs-comment"># these are the probabilities</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">{probs[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]:<span class="hljs-number">.1</span>%}</span> that image 0 is &#x27;<span class="hljs-subst">{texts[<span class="hljs-number">0</span>]}</span>&#x27;&quot;</span>)
<span class="hljs-number">31.9</span>% that image <span class="hljs-number">0</span> <span class="hljs-keyword">is</span> <span class="hljs-string">&#x27;a photo of 2 cats&#x27;</span>`,wrap:!1}}),Qe=new I({props:{title:"SiglipConfig",local:"transformers.SiglipConfig",headingTag:"h2"}}),Ye=new x({props:{name:"class transformers.SiglipConfig",anchor:"transformers.SiglipConfig",parameters:[{name:"text_config",val:" = None"},{name:"vision_config",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SiglipConfig.text_config",description:`<strong>text_config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Dictionary of configuration options used to initialize <a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipTextConfig">SiglipTextConfig</a>.`,name:"text_config"},{anchor:"transformers.SiglipConfig.vision_config",description:`<strong>vision_config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Dictionary of configuration options used to initialize <a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipVisionConfig">SiglipVisionConfig</a>.`,name:"vision_config"},{anchor:"transformers.SiglipConfig.kwargs",description:`<strong>kwargs</strong> (<em>optional</em>) &#x2014;
Dictionary of keyword arguments.`,name:"kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/configuration_siglip.py#L232"}}),ne=new se({props:{anchor:"transformers.SiglipConfig.example",$$slots:{default:[da]},$$scope:{ctx:v}}}),Ae=new x({props:{name:"from_text_vision_configs",anchor:"transformers.SiglipConfig.from_text_vision_configs",parameters:[{name:"text_config",val:": SiglipTextConfig"},{name:"vision_config",val:": SiglipVisionConfig"},{name:"**kwargs",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/configuration_siglip.py#L292",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>An instance of a configuration object</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipConfig"
>SiglipConfig</a></p>
`}}),De=new I({props:{title:"SiglipTextConfig",local:"transformers.SiglipTextConfig",headingTag:"h2"}}),Oe=new x({props:{name:"class transformers.SiglipTextConfig",anchor:"transformers.SiglipTextConfig",parameters:[{name:"vocab_size",val:" = 32000"},{name:"hidden_size",val:" = 768"},{name:"intermediate_size",val:" = 3072"},{name:"num_hidden_layers",val:" = 12"},{name:"num_attention_heads",val:" = 12"},{name:"max_position_embeddings",val:" = 64"},{name:"hidden_act",val:" = 'gelu_pytorch_tanh'"},{name:"layer_norm_eps",val:" = 1e-06"},{name:"attention_dropout",val:" = 0.0"},{name:"pad_token_id",val:" = 1"},{name:"bos_token_id",val:" = 49406"},{name:"eos_token_id",val:" = 49407"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SiglipTextConfig.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 32000) &#x2014;
Vocabulary size of the Siglip text model. Defines the number of different tokens that can be represented by
the <code>inputs_ids</code> passed when calling <a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipModel">SiglipModel</a>.`,name:"vocab_size"},{anchor:"transformers.SiglipTextConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
Dimensionality of the encoder layers and the pooler layer.`,name:"hidden_size"},{anchor:"transformers.SiglipTextConfig.intermediate_size",description:`<strong>intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3072) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (i.e., feed-forward) layer in the Transformer encoder.`,name:"intermediate_size"},{anchor:"transformers.SiglipTextConfig.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"num_hidden_layers"},{anchor:"transformers.SiglipTextConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.SiglipTextConfig.max_position_embeddings",description:`<strong>max_position_embeddings</strong> (<code>int</code>, <em>optional</em>, defaults to 64) &#x2014;
The maximum sequence length that this model might ever be used with. Typically set this to something large
just in case (e.g., 512 or 1024 or 2048).`,name:"max_position_embeddings"},{anchor:"transformers.SiglipTextConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu_pytorch_tanh&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> <code>&quot;quick_gelu&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.SiglipTextConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-06) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.SiglipTextConfig.attention_dropout",description:`<strong>attention_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_dropout"},{anchor:"transformers.SiglipTextConfig.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The id of the padding token in the vocabulary.`,name:"pad_token_id"},{anchor:"transformers.SiglipTextConfig.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 49406) &#x2014;
The id of the beginning-of-sequence token in the vocabulary.`,name:"bos_token_id"},{anchor:"transformers.SiglipTextConfig.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 49407) &#x2014;
The id of the end-of-sequence token in the vocabulary.`,name:"eos_token_id"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/configuration_siglip.py#L31"}}),re=new se({props:{anchor:"transformers.SiglipTextConfig.example",$$slots:{default:[ca]},$$scope:{ctx:v}}}),Ke=new I({props:{title:"SiglipVisionConfig",local:"transformers.SiglipVisionConfig",headingTag:"h2"}}),et=new x({props:{name:"class transformers.SiglipVisionConfig",anchor:"transformers.SiglipVisionConfig",parameters:[{name:"hidden_size",val:" = 768"},{name:"intermediate_size",val:" = 3072"},{name:"num_hidden_layers",val:" = 12"},{name:"num_attention_heads",val:" = 12"},{name:"num_channels",val:" = 3"},{name:"image_size",val:" = 224"},{name:"patch_size",val:" = 16"},{name:"hidden_act",val:" = 'gelu_pytorch_tanh'"},{name:"layer_norm_eps",val:" = 1e-06"},{name:"attention_dropout",val:" = 0.0"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SiglipVisionConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
Dimensionality of the encoder layers and the pooler layer.`,name:"hidden_size"},{anchor:"transformers.SiglipVisionConfig.intermediate_size",description:`<strong>intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3072) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (i.e., feed-forward) layer in the Transformer encoder.`,name:"intermediate_size"},{anchor:"transformers.SiglipVisionConfig.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"num_hidden_layers"},{anchor:"transformers.SiglipVisionConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.SiglipVisionConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
Number of channels in the input images.`,name:"num_channels"},{anchor:"transformers.SiglipVisionConfig.image_size",description:`<strong>image_size</strong> (<code>int</code>, <em>optional</em>, defaults to 224) &#x2014;
The size (resolution) of each image.`,name:"image_size"},{anchor:"transformers.SiglipVisionConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
The size (resolution) of each patch.`,name:"patch_size"},{anchor:"transformers.SiglipVisionConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu_pytorch_tanh&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> \`<code>&quot;quick_gelu&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.SiglipVisionConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-06) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.SiglipVisionConfig.attention_dropout",description:`<strong>attention_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_dropout"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/configuration_siglip.py#L136"}}),ie=new se({props:{anchor:"transformers.SiglipVisionConfig.example",$$slots:{default:[pa]},$$scope:{ctx:v}}}),tt=new I({props:{title:"SiglipTokenizer",local:"transformers.SiglipTokenizer",headingTag:"h2"}}),st=new x({props:{name:"class transformers.SiglipTokenizer",anchor:"transformers.SiglipTokenizer",parameters:[{name:"vocab_file",val:""},{name:"eos_token",val:" = '</s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '</s>'"},{name:"additional_special_tokens",val:" = None"},{name:"sp_model_kwargs",val:": Optional = None"},{name:"model_max_length",val:" = 64"},{name:"do_lower_case",val:" = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SiglipTokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
<a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a> file (generally has a <em>.spm</em> extension) that
contains the vocabulary necessary to instantiate a tokenizer.`,name:"vocab_file"},{anchor:"transformers.SiglipTokenizer.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.`,name:"eos_token"},{anchor:"transformers.SiglipTokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.SiglipTokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.SiglipTokenizer.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"},{anchor:"transformers.SiglipTokenizer.sp_model_kwargs",description:`<strong>sp_model_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Will be passed to the <code>SentencePieceProcessor.__init__()</code> method. The <a href="https://github.com/google/sentencepiece/tree/master/python" rel="nofollow">Python wrapper for
SentencePiece</a> can be used, among other things,
to set:</p>
<ul>
<li>
<p><code>enable_sampling</code>: Enable subword regularization.</p>
</li>
<li>
<p><code>nbest_size</code>: Sampling parameters for unigram. Invalid for BPE-Dropout.</p>
<ul>
<li><code>nbest_size = {0,1}</code>: No sampling is performed.</li>
<li><code>nbest_size &gt; 1</code>: samples from the nbest_size results.</li>
<li><code>nbest_size &lt; 0</code>: assuming that nbest_size is infinite and samples from the all hypothesis (lattice)
using forward-filtering-and-backward-sampling algorithm.</li>
</ul>
</li>
<li>
<p><code>alpha</code>: Smoothing parameter for unigram sampling, and dropout probability of merge operations for
BPE-dropout.</p>
</li>
</ul>`,name:"sp_model_kwargs"},{anchor:"transformers.SiglipTokenizer.model_max_length",description:`<strong>model_max_length</strong> (<code>int</code>, <em>optional</em>, defaults to 64) &#x2014;
The maximum length (in number of tokens) for model inputs.`,name:"model_max_length"},{anchor:"transformers.SiglipTokenizer.do_lower_case",description:`<strong>do_lower_case</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to lowercase the input when tokenizing.`,name:"do_lower_case"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/tokenization_siglip.py#L53"}}),ot=new x({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.SiglipTokenizer.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": List"},{name:"token_ids_1",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.SiglipTokenizer.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.SiglipTokenizer.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/tokenization_siglip.py#L237",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>List[int]</code></p>
`}}),nt=new x({props:{name:"get_special_tokens_mask",anchor:"transformers.SiglipTokenizer.get_special_tokens_mask",parameters:[{name:"token_ids_0",val:": List"},{name:"token_ids_1",val:": Optional = None"},{name:"already_has_special_tokens",val:": bool = False"}],parametersDescription:[{anchor:"transformers.SiglipTokenizer.get_special_tokens_mask.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.SiglipTokenizer.get_special_tokens_mask.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"},{anchor:"transformers.SiglipTokenizer.get_special_tokens_mask.already_has_special_tokens",description:`<strong>already_has_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the token list is already formatted with special tokens for the model.`,name:"already_has_special_tokens"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/tokenization_siglip.py#L173",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>List[int]</code></p>
`}}),at=new x({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.SiglipTokenizer.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": List"},{name:"token_ids_1",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.SiglipTokenizer.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.SiglipTokenizer.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/tokenization_siglip.py#L214",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>List of zeros.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>List[int]</code></p>
`}}),rt=new x({props:{name:"save_vocabulary",anchor:"transformers.SiglipTokenizer.save_vocabulary",parameters:[{name:"save_directory",val:": str"},{name:"filename_prefix",val:": Optional = None"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/tokenization_siglip.py#L374"}}),it=new I({props:{title:"SiglipImageProcessor",local:"transformers.SiglipImageProcessor",headingTag:"h2"}}),lt=new x({props:{name:"class transformers.SiglipImageProcessor",anchor:"transformers.SiglipImageProcessor",parameters:[{name:"do_resize",val:": bool = True"},{name:"size",val:": Dict = None"},{name:"resample",val:": Resampling = <Resampling.BICUBIC: 3>"},{name:"do_rescale",val:": bool = True"},{name:"rescale_factor",val:": Union = 0.00392156862745098"},{name:"do_normalize",val:": bool = True"},{name:"image_mean",val:": Union = None"},{name:"image_std",val:": Union = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SiglipImageProcessor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the image&#x2019;s (height, width) dimensions to the specified <code>size</code>. Can be overridden by
<code>do_resize</code> in the <code>preprocess</code> method.`,name:"do_resize"},{anchor:"transformers.SiglipImageProcessor.size",description:`<strong>size</strong> (<code>Dict[str, int]</code> <em>optional</em>, defaults to <code>{&quot;height&quot; -- 224, &quot;width&quot;: 224}</code>):
Size of the image after resizing. Can be overridden by <code>size</code> in the <code>preprocess</code> method.`,name:"size"},{anchor:"transformers.SiglipImageProcessor.resample",description:`<strong>resample</strong> (<code>PILImageResampling</code>, <em>optional</em>, defaults to <code>Resampling.BICUBIC</code>) &#x2014;
Resampling filter to use if resizing the image. Can be overridden by <code>resample</code> in the <code>preprocess</code> method.`,name:"resample"},{anchor:"transformers.SiglipImageProcessor.do_rescale",description:`<strong>do_rescale</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to rescale the image by the specified scale <code>rescale_factor</code>. Can be overridden by <code>do_rescale</code> in
the <code>preprocess</code> method.`,name:"do_rescale"},{anchor:"transformers.SiglipImageProcessor.rescale_factor",description:`<strong>rescale_factor</strong> (<code>int</code> or <code>float</code>, <em>optional</em>, defaults to <code>1/255</code>) &#x2014;
Scale factor to use if rescaling the image. Can be overridden by <code>rescale_factor</code> in the <code>preprocess</code>
method.`,name:"rescale_factor"},{anchor:"transformers.SiglipImageProcessor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to normalize the image by the specified mean and standard deviation. Can be overridden by
<code>do_normalize</code> in the <code>preprocess</code> method.`,name:"do_normalize"},{anchor:"transformers.SiglipImageProcessor.image_mean",description:`<strong>image_mean</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>[0.5, 0.5, 0.5]</code>) &#x2014;
Mean to use if normalizing the image. This is a float or list of floats the length of the number of
channels in the image. Can be overridden by the <code>image_mean</code> parameter in the <code>preprocess</code> method.`,name:"image_mean"},{anchor:"transformers.SiglipImageProcessor.image_std",description:`<strong>image_std</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>[0.5, 0.5, 0.5]</code>) &#x2014;
Standard deviation to use if normalizing the image. This is a float or list of floats the length of the
number of channels in the image. Can be overridden by the <code>image_std</code> parameter in the <code>preprocess</code> method.
Can be overridden by the <code>image_std</code> parameter in the <code>preprocess</code> method.`,name:"image_std"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/image_processing_siglip.py#L46"}}),dt=new x({props:{name:"preprocess",anchor:"transformers.SiglipImageProcessor.preprocess",parameters:[{name:"images",val:": Union"},{name:"do_resize",val:": bool = None"},{name:"size",val:": Dict = None"},{name:"resample",val:": Resampling = None"},{name:"do_rescale",val:": bool = None"},{name:"rescale_factor",val:": float = None"},{name:"do_normalize",val:": bool = None"},{name:"image_mean",val:": Union = None"},{name:"image_std",val:": Union = None"},{name:"return_tensors",val:": Union = None"},{name:"data_format",val:": Optional = <ChannelDimension.FIRST: 'channels_first'>"},{name:"input_data_format",val:": Union = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SiglipImageProcessor.preprocess.images",description:`<strong>images</strong> (<code>ImageInput</code>) &#x2014;
Image to preprocess. Expects a single or batch of images with pixel values ranging from 0 to 255. If
passing in images with pixel values between 0 and 1, set <code>do_rescale=False</code>.`,name:"images"},{anchor:"transformers.SiglipImageProcessor.preprocess.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_resize</code>) &#x2014;
Whether to resize the image.`,name:"do_resize"},{anchor:"transformers.SiglipImageProcessor.preprocess.size",description:`<strong>size</strong> (<code>Dict[str, int]</code>, <em>optional</em>, defaults to <code>self.size</code>) &#x2014;
Size of the image after resizing.`,name:"size"},{anchor:"transformers.SiglipImageProcessor.preprocess.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>self.resample</code>) &#x2014;
Resampling filter to use if resizing the image. This can be one of the enum <code>PILImageResampling</code>. Only
has an effect if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.SiglipImageProcessor.preprocess.do_rescale",description:`<strong>do_rescale</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_rescale</code>) &#x2014;
Whether to rescale the image.`,name:"do_rescale"},{anchor:"transformers.SiglipImageProcessor.preprocess.rescale_factor",description:`<strong>rescale_factor</strong> (<code>float</code>, <em>optional</em>, defaults to <code>self.rescale_factor</code>) &#x2014;
Rescale factor to rescale the image by if <code>do_rescale</code> is set to <code>True</code>.`,name:"rescale_factor"},{anchor:"transformers.SiglipImageProcessor.preprocess.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_normalize</code>) &#x2014;
Whether to normalize the image.`,name:"do_normalize"},{anchor:"transformers.SiglipImageProcessor.preprocess.image_mean",description:`<strong>image_mean</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>self.image_mean</code>) &#x2014;
Image mean to use for normalization. Only has an effect if <code>do_normalize</code> is set to <code>True</code>.`,name:"image_mean"},{anchor:"transformers.SiglipImageProcessor.preprocess.image_std",description:`<strong>image_std</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>self.image_std</code>) &#x2014;
Image standard deviation to use for normalization. Only has an effect if <code>do_normalize</code> is set to
<code>True</code>.`,name:"image_std"},{anchor:"transformers.SiglipImageProcessor.preprocess.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <code>TensorType</code>, <em>optional</em>) &#x2014;
The type of tensors to return. Can be one of:<ul>
<li>Unset: Return a list of <code>np.ndarray</code>.</li>
<li><code>TensorType.TENSORFLOW</code> or <code>&apos;tf&apos;</code>: Return a batch of type <code>tf.Tensor</code>.</li>
<li><code>TensorType.PYTORCH</code> or <code>&apos;pt&apos;</code>: Return a batch of type <code>torch.Tensor</code>.</li>
<li><code>TensorType.NUMPY</code> or <code>&apos;np&apos;</code>: Return a batch of type <code>np.ndarray</code>.</li>
<li><code>TensorType.JAX</code> or <code>&apos;jax&apos;</code>: Return a batch of type <code>jax.numpy.ndarray</code>.</li>
</ul>`,name:"return_tensors"},{anchor:"transformers.SiglipImageProcessor.preprocess.data_format",description:`<strong>data_format</strong> (<code>ChannelDimension</code> or <code>str</code>, <em>optional</em>, defaults to <code>ChannelDimension.FIRST</code>) &#x2014;
The channel dimension format for the output image. Can be one of:<ul>
<li><code>&quot;channels_first&quot;</code> or <code>ChannelDimension.FIRST</code>: image in (num_channels, height, width) format.</li>
<li><code>&quot;channels_last&quot;</code> or <code>ChannelDimension.LAST</code>: image in (height, width, num_channels) format.</li>
<li>Unset: Use the channel dimension format of the input image.</li>
</ul>`,name:"data_format"},{anchor:"transformers.SiglipImageProcessor.preprocess.input_data_format",description:`<strong>input_data_format</strong> (<code>ChannelDimension</code> or <code>str</code>, <em>optional</em>) &#x2014;
The channel dimension format for the input image. If unset, the channel dimension format is inferred
from the input image. Can be one of:<ul>
<li><code>&quot;channels_first&quot;</code> or <code>ChannelDimension.FIRST</code>: image in (num_channels, height, width) format.</li>
<li><code>&quot;channels_last&quot;</code> or <code>ChannelDimension.LAST</code>: image in (height, width, num_channels) format.</li>
<li><code>&quot;none&quot;</code> or <code>ChannelDimension.NONE</code>: image in (height, width) format.</li>
</ul>`,name:"input_data_format"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/image_processing_siglip.py#L104"}}),ct=new I({props:{title:"SiglipProcessor",local:"transformers.SiglipProcessor",headingTag:"h2"}}),pt=new x({props:{name:"class transformers.SiglipProcessor",anchor:"transformers.SiglipProcessor",parameters:[{name:"image_processor",val:""},{name:"tokenizer",val:""}],parametersDescription:[{anchor:"transformers.SiglipProcessor.image_processor",description:`<strong>image_processor</strong> (<a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipImageProcessor">SiglipImageProcessor</a>) &#x2014;
The image processor is a required input.`,name:"image_processor"},{anchor:"transformers.SiglipProcessor.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipTokenizer">SiglipTokenizer</a>) &#x2014;
The tokenizer is a required input.`,name:"tokenizer"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/processing_siglip.py#L28"}}),mt=new x({props:{name:"batch_decode",anchor:"transformers.SiglipProcessor.batch_decode",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/processing_siglip.py#L131"}}),gt=new x({props:{name:"decode",anchor:"transformers.SiglipProcessor.decode",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/processing_siglip.py#L124"}}),ht=new I({props:{title:"SiglipModel",local:"transformers.SiglipModel",headingTag:"h2"}}),ft=new x({props:{name:"class transformers.SiglipModel",anchor:"transformers.SiglipModel",parameters:[{name:"config",val:": SiglipConfig"}],parametersDescription:[{anchor:"transformers.SiglipModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipConfig">SiglipConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/modeling_siglip.py#L974"}}),ut=new x({props:{name:"forward",anchor:"transformers.SiglipModel.forward",parameters:[{name:"input_ids",val:": Optional = None"},{name:"pixel_values",val:": Optional = None"},{name:"attention_mask",val:": Optional = None"},{name:"position_ids",val:": Optional = None"},{name:"return_loss",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.SiglipModel.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provide
it.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer">AutoTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.SiglipModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.SiglipModel.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.SiglipModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Padding will be ignored by default should you provide it. Pixel values can be obtained using
<a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoImageProcessor">AutoImageProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor.__call__">CLIPImageProcessor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.SiglipModel.forward.return_loss",description:`<strong>return_loss</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the contrastive loss.`,name:"return_loss"},{anchor:"transformers.SiglipModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.SiglipModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.SiglipModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/modeling_siglip.py#L1104",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <code>transformers.models.siglip.modeling_siglip.SiglipOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<code>&lt;class 'transformers.models.siglip.configuration_siglip.SiglipConfig'&gt;</code>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>return_loss</code> is <code>True</code>) — Contrastive loss for image-text similarity.</li>
<li><strong>logits_per_image:(<code>torch.FloatTensor</code></strong> of shape <code>(image_batch_size, text_batch_size)</code>) — The scaled dot product scores between <code>image_embeds</code> and <code>text_embeds</code>. This represents the image-text
similarity scores.</li>
<li><strong>logits_per_text:(<code>torch.FloatTensor</code></strong> of shape <code>(text_batch_size, image_batch_size)</code>) — The scaled dot product scores between <code>text_embeds</code> and <code>image_embeds</code>. This represents the text-image
similarity scores.</li>
<li><strong>text_embeds(<code>torch.FloatTensor</code></strong> of shape <code>(batch_size, output_dim</code>) — The text embeddings obtained by applying the projection layer to the pooled output of <a
  href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipTextModel"
>SiglipTextModel</a>.</li>
<li><strong>image_embeds(<code>torch.FloatTensor</code></strong> of shape <code>(batch_size, output_dim</code>) — The image embeddings obtained by applying the projection layer to the pooled output of <a
  href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipVisionModel"
>SiglipVisionModel</a>.</li>
<li><strong>text_model_output(<code>BaseModelOutputWithPooling</code>):</strong>
The output of the <a
  href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipTextModel"
>SiglipTextModel</a>.</li>
<li><strong>vision_model_output(<code>BaseModelOutputWithPooling</code>):</strong>
The output of the <a
  href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipVisionModel"
>SiglipVisionModel</a>.</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>transformers.models.siglip.modeling_siglip.SiglipOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),ge=new fs({props:{$$slots:{default:[ma]},$$scope:{ctx:v}}}),he=new se({props:{anchor:"transformers.SiglipModel.forward.example",$$slots:{default:[ga]},$$scope:{ctx:v}}}),_t=new x({props:{name:"get_text_features",anchor:"transformers.SiglipModel.get_text_features",parameters:[{name:"input_ids",val:": Optional = None"},{name:"attention_mask",val:": Optional = None"},{name:"position_ids",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.SiglipModel.get_text_features.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provide
it.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer">AutoTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.SiglipModel.get_text_features.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.SiglipModel.get_text_features.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.SiglipModel.get_text_features.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.SiglipModel.get_text_features.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.SiglipModel.get_text_features.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/modeling_siglip.py#L1005",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The text embeddings obtained by
applying the projection layer to the pooled output of <a
  href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipTextModel"
>SiglipTextModel</a>.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>text_features (<code>torch.FloatTensor</code> of shape <code>(batch_size, output_dim</code>)</p>
`}}),fe=new fs({props:{$$slots:{default:[ha]},$$scope:{ctx:v}}}),ue=new se({props:{anchor:"transformers.SiglipModel.get_text_features.example",$$slots:{default:[fa]},$$scope:{ctx:v}}}),bt=new x({props:{name:"get_image_features",anchor:"transformers.SiglipModel.get_image_features",parameters:[{name:"pixel_values",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.SiglipModel.get_image_features.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Padding will be ignored by default should you provide it. Pixel values can be obtained using
<a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoImageProcessor">AutoImageProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor.__call__">CLIPImageProcessor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.SiglipModel.get_image_features.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.SiglipModel.get_image_features.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.SiglipModel.get_image_features.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/modeling_siglip.py#L1054",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The image embeddings obtained by
applying the projection layer to the pooled output of <a
  href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipVisionModel"
>SiglipVisionModel</a>.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>image_features (<code>torch.FloatTensor</code> of shape <code>(batch_size, output_dim</code>)</p>
`}}),_e=new fs({props:{$$slots:{default:[ua]},$$scope:{ctx:v}}}),be=new se({props:{anchor:"transformers.SiglipModel.get_image_features.example",$$slots:{default:[_a]},$$scope:{ctx:v}}}),Mt=new I({props:{title:"SiglipTextModel",local:"transformers.SiglipTextModel",headingTag:"h2"}}),yt=new x({props:{name:"class transformers.SiglipTextModel",anchor:"transformers.SiglipTextModel",parameters:[{name:"config",val:": SiglipTextConfig"}],parametersDescription:[{anchor:"transformers.SiglipTextModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipConfig">SiglipConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/modeling_siglip.py#L773"}}),Tt=new x({props:{name:"forward",anchor:"transformers.SiglipTextModel.forward",parameters:[{name:"input_ids",val:": Optional = None"},{name:"attention_mask",val:": Optional = None"},{name:"position_ids",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.SiglipTextModel.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provide
it.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer">AutoTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.SiglipTextModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.SiglipTextModel.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.SiglipTextModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.SiglipTextModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.SiglipTextModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/modeling_siglip.py#L794",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling"
>transformers.modeling_outputs.BaseModelOutputWithPooling</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<code>&lt;class 'transformers.models.siglip.configuration_siglip.SiglipTextConfig'&gt;</code>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) — Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) — Last layer hidden-state of the first token of the sequence (classification token) after further processing
through the layers used for the auxiliary pretraining task. E.g. for BERT-family of models, this returns
the classification token after processing through a linear layer and a tanh activation function. The linear
layer weights are trained from the next sentence prediction (classification) objective during pretraining.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling"
>transformers.modeling_outputs.BaseModelOutputWithPooling</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Me=new fs({props:{$$slots:{default:[ba]},$$scope:{ctx:v}}}),ye=new se({props:{anchor:"transformers.SiglipTextModel.forward.example",$$slots:{default:[Ma]},$$scope:{ctx:v}}}),wt=new I({props:{title:"SiglipVisionModel",local:"transformers.SiglipVisionModel",headingTag:"h2"}}),vt=new x({props:{name:"class transformers.SiglipVisionModel",anchor:"transformers.SiglipVisionModel",parameters:[{name:"config",val:": SiglipVisionConfig"}],parametersDescription:[{anchor:"transformers.SiglipVisionModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipConfig">SiglipConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/modeling_siglip.py#L914"}}),$t=new x({props:{name:"forward",anchor:"transformers.SiglipVisionModel.forward",parameters:[{name:"pixel_values",val:""},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.SiglipVisionModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Padding will be ignored by default should you provide it. Pixel values can be obtained using
<a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoImageProcessor">AutoImageProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor.__call__">CLIPImageProcessor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.SiglipVisionModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.SiglipVisionModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.SiglipVisionModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/modeling_siglip.py#L933",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling"
>transformers.modeling_outputs.BaseModelOutputWithPooling</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<code>&lt;class 'transformers.models.siglip.configuration_siglip.SiglipVisionConfig'&gt;</code>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) — Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) — Last layer hidden-state of the first token of the sequence (classification token) after further processing
through the layers used for the auxiliary pretraining task. E.g. for BERT-family of models, this returns
the classification token after processing through a linear layer and a tanh activation function. The linear
layer weights are trained from the next sentence prediction (classification) objective during pretraining.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling"
>transformers.modeling_outputs.BaseModelOutputWithPooling</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Te=new fs({props:{$$slots:{default:[ya]},$$scope:{ctx:v}}}),we=new se({props:{anchor:"transformers.SiglipVisionModel.forward.example",$$slots:{default:[Ta]},$$scope:{ctx:v}}}),jt=new I({props:{title:"SiglipForImageClassification",local:"transformers.SiglipForImageClassification",headingTag:"h2"}}),xt=new x({props:{name:"class transformers.SiglipForImageClassification",anchor:"transformers.SiglipForImageClassification",parameters:[{name:"config",val:": SiglipConfig"}],parametersDescription:[{anchor:"transformers.SiglipForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipConfig">SiglipConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/modeling_siglip.py#L1199"}}),kt=new x({props:{name:"forward",anchor:"transformers.SiglipForImageClassification.forward",parameters:[{name:"pixel_values",val:": Optional = None"},{name:"labels",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.SiglipForImageClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provide
it.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer">AutoTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.SiglipForImageClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.SiglipForImageClassification.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.SiglipForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Padding will be ignored by default should you provide it. Pixel values can be obtained using
<a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoImageProcessor">AutoImageProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor.__call__">CLIPImageProcessor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.SiglipForImageClassification.forward.return_loss",description:`<strong>return_loss</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the contrastive loss.`,name:"return_loss"},{anchor:"transformers.SiglipForImageClassification.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.SiglipForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.SiglipForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.SiglipForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/siglip/modeling_siglip.py#L1223",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutput"
>transformers.modeling_outputs.ImageClassifierOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/siglip#transformers.SiglipConfig"
>SiglipConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) — Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) — Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each stage) of shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states
(also called feature maps) of the model at the output of each stage.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, patch_size, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutput"
>transformers.modeling_outputs.ImageClassifierOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),ve=new fs({props:{$$slots:{default:[wa]},$$scope:{ctx:v}}}),$e=new se({props:{anchor:"transformers.SiglipForImageClassification.forward.example",$$slots:{default:[va]},$$scope:{ctx:v}}}),{c(){s=c("meta"),T=r(),d=c("p"),l=r(),g(y.$$.fragment),t=r(),g(w.$$.fragment),bs=r(),ze=c("p"),ze.innerHTML=gn,Ms=r(),Ze=c("p"),Ze.textContent=hn,ys=r(),We=c("p"),We.innerHTML=fn,Ts=r(),g(Be.$$.fragment),ws=r(),Ne=c("ul"),Ne.innerHTML=un,vs=r(),oe=c("img"),$s=r(),Ge=c("small"),Ge.innerHTML=bn,js=r(),Pe=c("p"),Pe.innerHTML=Mn,xs=r(),g(Fe.$$.fragment),ks=r(),Ve=c("p"),Ve.innerHTML=yn,Ss=r(),g(qe.$$.fragment),Js=r(),Xe=c("p"),Xe.textContent=Tn,Is=r(),g(Le.$$.fragment),Cs=r(),g(Re.$$.fragment),Us=r(),He=c("p"),He.textContent=wn,zs=r(),g(Ee.$$.fragment),Zs=r(),g(Qe.$$.fragment),Ws=r(),C=c("div"),g(Ye.$$.fragment),so=r(),Zt=c("p"),Zt.innerHTML=vn,oo=r(),Wt=c("p"),Wt.innerHTML=$n,no=r(),g(ne.$$.fragment),ao=r(),ae=c("div"),g(Ae.$$.fragment),ro=r(),Bt=c("p"),Bt.innerHTML=jn,Bs=r(),g(De.$$.fragment),Ns=r(),B=c("div"),g(Oe.$$.fragment),io=r(),Nt=c("p"),Nt.innerHTML=xn,lo=r(),Gt=c("p"),Gt.innerHTML=kn,co=r(),g(re.$$.fragment),Gs=r(),g(Ke.$$.fragment),Ps=r(),N=c("div"),g(et.$$.fragment),po=r(),Pt=c("p"),Pt.innerHTML=Sn,mo=r(),Ft=c("p"),Ft.innerHTML=Jn,go=r(),g(ie.$$.fragment),Fs=r(),g(tt.$$.fragment),Vs=r(),k=c("div"),g(st.$$.fragment),ho=r(),Vt=c("p"),Vt.innerHTML=In,fo=r(),qt=c("p"),qt.innerHTML=Cn,uo=r(),O=c("div"),g(ot.$$.fragment),_o=r(),Xt=c("p"),Xt.textContent=Un,bo=r(),Lt=c("ul"),Lt.innerHTML=zn,Mo=r(),le=c("div"),g(nt.$$.fragment),yo=r(),Rt=c("p"),Rt.innerHTML=Zn,To=r(),de=c("div"),g(at.$$.fragment),wo=r(),Ht=c("p"),Ht.textContent=Wn,vo=r(),Et=c("div"),g(rt.$$.fragment),qs=r(),g(it.$$.fragment),Xs=r(),Q=c("div"),g(lt.$$.fragment),$o=r(),Qt=c("p"),Qt.textContent=Bn,jo=r(),ce=c("div"),g(dt.$$.fragment),xo=r(),Yt=c("p"),Yt.textContent=Nn,Ls=r(),g(ct.$$.fragment),Rs=r(),U=c("div"),g(pt.$$.fragment),ko=r(),At=c("p"),At.textContent=Gn,So=r(),Dt=c("p"),Dt.innerHTML=Pn,Jo=r(),pe=c("div"),g(mt.$$.fragment),Io=r(),Ot=c("p"),Ot.innerHTML=Fn,Co=r(),me=c("div"),g(gt.$$.fragment),Uo=r(),Kt=c("p"),Kt.innerHTML=Vn,Hs=r(),g(ht.$$.fragment),Es=r(),S=c("div"),g(ft.$$.fragment),zo=r(),es=c("p"),es.innerHTML=qn,Zo=r(),ts=c("p"),ts.innerHTML=Xn,Wo=r(),q=c("div"),g(ut.$$.fragment),Bo=r(),ss=c("p"),ss.innerHTML=Ln,No=r(),g(ge.$$.fragment),Go=r(),g(he.$$.fragment),Po=r(),X=c("div"),g(_t.$$.fragment),Fo=r(),os=c("p"),os.innerHTML=Rn,Vo=r(),g(fe.$$.fragment),qo=r(),g(ue.$$.fragment),Xo=r(),L=c("div"),g(bt.$$.fragment),Lo=r(),ns=c("p"),ns.innerHTML=Hn,Ro=r(),g(_e.$$.fragment),Ho=r(),g(be.$$.fragment),Qs=r(),g(Mt.$$.fragment),Ys=r(),G=c("div"),g(yt.$$.fragment),Eo=r(),as=c("p"),as.innerHTML=En,Qo=r(),rs=c("p"),rs.innerHTML=Qn,Yo=r(),R=c("div"),g(Tt.$$.fragment),Ao=r(),is=c("p"),is.innerHTML=Yn,Do=r(),g(Me.$$.fragment),Oo=r(),g(ye.$$.fragment),As=r(),g(wt.$$.fragment),Ds=r(),P=c("div"),g(vt.$$.fragment),Ko=r(),ls=c("p"),ls.innerHTML=An,en=r(),ds=c("p"),ds.innerHTML=Dn,tn=r(),H=c("div"),g($t.$$.fragment),sn=r(),cs=c("p"),cs.innerHTML=On,on=r(),g(Te.$$.fragment),nn=r(),g(we.$$.fragment),Os=r(),g(jt.$$.fragment),Ks=r(),z=c("div"),g(xt.$$.fragment),an=r(),ps=c("p"),ps.textContent=Kn,rn=r(),ms=c("p"),ms.innerHTML=ea,ln=r(),gs=c("p"),gs.innerHTML=ta,dn=r(),E=c("div"),g(kt.$$.fragment),cn=r(),hs=c("p"),hs.innerHTML=sa,pn=r(),g(ve.$$.fragment),mn=r(),g($e.$$.fragment),eo=r(),us=c("p"),this.h()},l(e){const o=la("svelte-u9bgzb",document.head);s=p(o,"META",{name:!0,content:!0}),o.forEach(n),T=i(e),d=p(e,"P",{}),j(d).forEach(n),l=i(e),h(y.$$.fragment,e),t=i(e),h(w.$$.fragment,e),bs=i(e),ze=p(e,"P",{"data-svelte-h":!0}),M(ze)!=="svelte-q93fk2"&&(ze.innerHTML=gn),Ms=i(e),Ze=p(e,"P",{"data-svelte-h":!0}),M(Ze)!=="svelte-vfdo9a"&&(Ze.textContent=hn),ys=i(e),We=p(e,"P",{"data-svelte-h":!0}),M(We)!=="svelte-1j0zyq6"&&(We.innerHTML=fn),Ts=i(e),h(Be.$$.fragment,e),ws=i(e),Ne=p(e,"UL",{"data-svelte-h":!0}),M(Ne)!=="svelte-1hbmn0v"&&(Ne.innerHTML=un),vs=i(e),oe=p(e,"IMG",{src:!0,alt:!0,width:!0}),$s=i(e),Ge=p(e,"SMALL",{"data-svelte-h":!0}),M(Ge)!=="svelte-dh6egv"&&(Ge.innerHTML=bn),js=i(e),Pe=p(e,"P",{"data-svelte-h":!0}),M(Pe)!=="svelte-1ovki4s"&&(Pe.innerHTML=Mn),xs=i(e),h(Fe.$$.fragment,e),ks=i(e),Ve=p(e,"P",{"data-svelte-h":!0}),M(Ve)!=="svelte-kw3rvz"&&(Ve.innerHTML=yn),Ss=i(e),h(qe.$$.fragment,e),Js=i(e),Xe=p(e,"P",{"data-svelte-h":!0}),M(Xe)!=="svelte-1yjxirq"&&(Xe.textContent=Tn),Is=i(e),h(Le.$$.fragment,e),Cs=i(e),h(Re.$$.fragment,e),Us=i(e),He=p(e,"P",{"data-svelte-h":!0}),M(He)!=="svelte-eza9ob"&&(He.textContent=wn),zs=i(e),h(Ee.$$.fragment,e),Zs=i(e),h(Qe.$$.fragment,e),Ws=i(e),C=p(e,"DIV",{class:!0});var F=j(C);h(Ye.$$.fragment,F),so=i(F),Zt=p(F,"P",{"data-svelte-h":!0}),M(Zt)!=="svelte-1pquhrj"&&(Zt.innerHTML=vn),oo=i(F),Wt=p(F,"P",{"data-svelte-h":!0}),M(Wt)!=="svelte-o55m63"&&(Wt.innerHTML=$n),no=i(F),h(ne.$$.fragment,F),ao=i(F),ae=p(F,"DIV",{class:!0});var St=j(ae);h(Ae.$$.fragment,St),ro=i(St),Bt=p(St,"P",{"data-svelte-h":!0}),M(Bt)!=="svelte-abdf0u"&&(Bt.innerHTML=jn),St.forEach(n),F.forEach(n),Bs=i(e),h(De.$$.fragment,e),Ns=i(e),B=p(e,"DIV",{class:!0});var Y=j(B);h(Oe.$$.fragment,Y),io=i(Y),Nt=p(Y,"P",{"data-svelte-h":!0}),M(Nt)!=="svelte-1m8xm0e"&&(Nt.innerHTML=xn),lo=i(Y),Gt=p(Y,"P",{"data-svelte-h":!0}),M(Gt)!=="svelte-o55m63"&&(Gt.innerHTML=kn),co=i(Y),h(re.$$.fragment,Y),Y.forEach(n),Gs=i(e),h(Ke.$$.fragment,e),Ps=i(e),N=p(e,"DIV",{class:!0});var A=j(N);h(et.$$.fragment,A),po=i(A),Pt=p(A,"P",{"data-svelte-h":!0}),M(Pt)!=="svelte-7rf45m"&&(Pt.innerHTML=Sn),mo=i(A),Ft=p(A,"P",{"data-svelte-h":!0}),M(Ft)!=="svelte-o55m63"&&(Ft.innerHTML=Jn),go=i(A),h(ie.$$.fragment,A),A.forEach(n),Fs=i(e),h(tt.$$.fragment,e),Vs=i(e),k=p(e,"DIV",{class:!0});var J=j(k);h(st.$$.fragment,J),ho=i(J),Vt=p(J,"P",{"data-svelte-h":!0}),M(Vt)!=="svelte-xrmnfw"&&(Vt.innerHTML=In),fo=i(J),qt=p(J,"P",{"data-svelte-h":!0}),M(qt)!=="svelte-1c3t5ty"&&(qt.innerHTML=Cn),uo=i(J),O=p(J,"DIV",{class:!0});var ee=j(O);h(ot.$$.fragment,ee),_o=i(ee),Xt=p(ee,"P",{"data-svelte-h":!0}),M(Xt)!=="svelte-1wjq39d"&&(Xt.textContent=Un),bo=i(ee),Lt=p(ee,"UL",{"data-svelte-h":!0}),M(Lt)!=="svelte-8gh3n2"&&(Lt.innerHTML=zn),ee.forEach(n),Mo=i(J),le=p(J,"DIV",{class:!0});var Jt=j(le);h(nt.$$.fragment,Jt),yo=i(Jt),Rt=p(Jt,"P",{"data-svelte-h":!0}),M(Rt)!=="svelte-1f4f5kp"&&(Rt.innerHTML=Zn),Jt.forEach(n),To=i(J),de=p(J,"DIV",{class:!0});var It=j(de);h(at.$$.fragment,It),wo=i(It),Ht=p(It,"P",{"data-svelte-h":!0}),M(Ht)!=="svelte-fl5ab0"&&(Ht.textContent=Wn),It.forEach(n),vo=i(J),Et=p(J,"DIV",{class:!0});var _s=j(Et);h(rt.$$.fragment,_s),_s.forEach(n),J.forEach(n),qs=i(e),h(it.$$.fragment,e),Xs=i(e),Q=p(e,"DIV",{class:!0});var te=j(Q);h(lt.$$.fragment,te),$o=i(te),Qt=p(te,"P",{"data-svelte-h":!0}),M(Qt)!=="svelte-19glyt2"&&(Qt.textContent=Bn),jo=i(te),ce=p(te,"DIV",{class:!0});var Ct=j(ce);h(dt.$$.fragment,Ct),xo=i(Ct),Yt=p(Ct,"P",{"data-svelte-h":!0}),M(Yt)!=="svelte-1x3yxsa"&&(Yt.textContent=Nn),Ct.forEach(n),te.forEach(n),Ls=i(e),h(ct.$$.fragment,e),Rs=i(e),U=p(e,"DIV",{class:!0});var V=j(U);h(pt.$$.fragment,V),ko=i(V),At=p(V,"P",{"data-svelte-h":!0}),M(At)!=="svelte-yt9wur"&&(At.textContent=Gn),So=i(V),Dt=p(V,"P",{"data-svelte-h":!0}),M(Dt)!=="svelte-uktko2"&&(Dt.innerHTML=Pn),Jo=i(V),pe=p(V,"DIV",{class:!0});var Ut=j(pe);h(mt.$$.fragment,Ut),Io=i(Ut),Ot=p(Ut,"P",{"data-svelte-h":!0}),M(Ot)!=="svelte-3wrk57"&&(Ot.innerHTML=Fn),Ut.forEach(n),Co=i(V),me=p(V,"DIV",{class:!0});var zt=j(me);h(gt.$$.fragment,zt),Uo=i(zt),Kt=p(zt,"P",{"data-svelte-h":!0}),M(Kt)!=="svelte-1fz67km"&&(Kt.innerHTML=Vn),zt.forEach(n),V.forEach(n),Hs=i(e),h(ht.$$.fragment,e),Es=i(e),S=p(e,"DIV",{class:!0});var Z=j(S);h(ft.$$.fragment,Z),zo=i(Z),es=p(Z,"P",{"data-svelte-h":!0}),M(es)!=="svelte-6pahdo"&&(es.innerHTML=qn),Zo=i(Z),ts=p(Z,"P",{"data-svelte-h":!0}),M(ts)!=="svelte-hswkmf"&&(ts.innerHTML=Xn),Wo=i(Z),q=p(Z,"DIV",{class:!0});var je=j(q);h(ut.$$.fragment,je),Bo=i(je),ss=p(je,"P",{"data-svelte-h":!0}),M(ss)!=="svelte-1giz8jp"&&(ss.innerHTML=Ln),No=i(je),h(ge.$$.fragment,je),Go=i(je),h(he.$$.fragment,je),je.forEach(n),Po=i(Z),X=p(Z,"DIV",{class:!0});var xe=j(X);h(_t.$$.fragment,xe),Fo=i(xe),os=p(xe,"P",{"data-svelte-h":!0}),M(os)!=="svelte-1giz8jp"&&(os.innerHTML=Rn),Vo=i(xe),h(fe.$$.fragment,xe),qo=i(xe),h(ue.$$.fragment,xe),xe.forEach(n),Xo=i(Z),L=p(Z,"DIV",{class:!0});var ke=j(L);h(bt.$$.fragment,ke),Lo=i(ke),ns=p(ke,"P",{"data-svelte-h":!0}),M(ns)!=="svelte-1giz8jp"&&(ns.innerHTML=Hn),Ro=i(ke),h(_e.$$.fragment,ke),Ho=i(ke),h(be.$$.fragment,ke),ke.forEach(n),Z.forEach(n),Qs=i(e),h(Mt.$$.fragment,e),Ys=i(e),G=p(e,"DIV",{class:!0});var Se=j(G);h(yt.$$.fragment,Se),Eo=i(Se),as=p(Se,"P",{"data-svelte-h":!0}),M(as)!=="svelte-1rx3ey7"&&(as.innerHTML=En),Qo=i(Se),rs=p(Se,"P",{"data-svelte-h":!0}),M(rs)!=="svelte-hswkmf"&&(rs.innerHTML=Qn),Yo=i(Se),R=p(Se,"DIV",{class:!0});var Je=j(R);h(Tt.$$.fragment,Je),Ao=i(Je),is=p(Je,"P",{"data-svelte-h":!0}),M(is)!=="svelte-1kdkrlt"&&(is.innerHTML=Yn),Do=i(Je),h(Me.$$.fragment,Je),Oo=i(Je),h(ye.$$.fragment,Je),Je.forEach(n),Se.forEach(n),As=i(e),h(wt.$$.fragment,e),Ds=i(e),P=p(e,"DIV",{class:!0});var Ie=j(P);h(vt.$$.fragment,Ie),Ko=i(Ie),ls=p(Ie,"P",{"data-svelte-h":!0}),M(ls)!=="svelte-14zwew2"&&(ls.innerHTML=An),en=i(Ie),ds=p(Ie,"P",{"data-svelte-h":!0}),M(ds)!=="svelte-hswkmf"&&(ds.innerHTML=Dn),tn=i(Ie),H=p(Ie,"DIV",{class:!0});var Ce=j(H);h($t.$$.fragment,Ce),sn=i(Ce),cs=p(Ce,"P",{"data-svelte-h":!0}),M(cs)!=="svelte-1pjr3hd"&&(cs.innerHTML=On),on=i(Ce),h(Te.$$.fragment,Ce),nn=i(Ce),h(we.$$.fragment,Ce),Ce.forEach(n),Ie.forEach(n),Os=i(e),h(jt.$$.fragment,e),Ks=i(e),z=p(e,"DIV",{class:!0});var K=j(z);h(xt.$$.fragment,K),an=i(K),ps=p(K,"P",{"data-svelte-h":!0}),M(ps)!=="svelte-1dbrqa4"&&(ps.textContent=Kn),rn=i(K),ms=p(K,"P",{"data-svelte-h":!0}),M(ms)!=="svelte-6pahdo"&&(ms.innerHTML=ea),ln=i(K),gs=p(K,"P",{"data-svelte-h":!0}),M(gs)!=="svelte-hswkmf"&&(gs.innerHTML=ta),dn=i(K),E=p(K,"DIV",{class:!0});var Ue=j(E);h(kt.$$.fragment,Ue),cn=i(Ue),hs=p(Ue,"P",{"data-svelte-h":!0}),M(hs)!=="svelte-1czhq81"&&(hs.innerHTML=sa),pn=i(Ue),h(ve.$$.fragment,Ue),mn=i(Ue),h($e.$$.fragment,Ue),Ue.forEach(n),K.forEach(n),eo=i(e),us=p(e,"P",{}),j(us).forEach(n),this.h()},h(){$(s,"name","hf:doc:metadata"),$(s,"content",ja),na(oe.src,_n="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/transformers/model_doc/siglip_table.jpeg")||$(oe,"src",_n),$(oe,"alt","drawing"),$(oe,"width","600"),$(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),$(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,o){a(document.head,s),m(e,T,o),m(e,d,o),m(e,l,o),f(y,e,o),m(e,t,o),f(w,e,o),m(e,bs,o),m(e,ze,o),m(e,Ms,o),m(e,Ze,o),m(e,ys,o),m(e,We,o),m(e,Ts,o),f(Be,e,o),m(e,ws,o),m(e,Ne,o),m(e,vs,o),m(e,oe,o),m(e,$s,o),m(e,Ge,o),m(e,js,o),m(e,Pe,o),m(e,xs,o),f(Fe,e,o),m(e,ks,o),m(e,Ve,o),m(e,Ss,o),f(qe,e,o),m(e,Js,o),m(e,Xe,o),m(e,Is,o),f(Le,e,o),m(e,Cs,o),f(Re,e,o),m(e,Us,o),m(e,He,o),m(e,zs,o),f(Ee,e,o),m(e,Zs,o),f(Qe,e,o),m(e,Ws,o),m(e,C,o),f(Ye,C,null),a(C,so),a(C,Zt),a(C,oo),a(C,Wt),a(C,no),f(ne,C,null),a(C,ao),a(C,ae),f(Ae,ae,null),a(ae,ro),a(ae,Bt),m(e,Bs,o),f(De,e,o),m(e,Ns,o),m(e,B,o),f(Oe,B,null),a(B,io),a(B,Nt),a(B,lo),a(B,Gt),a(B,co),f(re,B,null),m(e,Gs,o),f(Ke,e,o),m(e,Ps,o),m(e,N,o),f(et,N,null),a(N,po),a(N,Pt),a(N,mo),a(N,Ft),a(N,go),f(ie,N,null),m(e,Fs,o),f(tt,e,o),m(e,Vs,o),m(e,k,o),f(st,k,null),a(k,ho),a(k,Vt),a(k,fo),a(k,qt),a(k,uo),a(k,O),f(ot,O,null),a(O,_o),a(O,Xt),a(O,bo),a(O,Lt),a(k,Mo),a(k,le),f(nt,le,null),a(le,yo),a(le,Rt),a(k,To),a(k,de),f(at,de,null),a(de,wo),a(de,Ht),a(k,vo),a(k,Et),f(rt,Et,null),m(e,qs,o),f(it,e,o),m(e,Xs,o),m(e,Q,o),f(lt,Q,null),a(Q,$o),a(Q,Qt),a(Q,jo),a(Q,ce),f(dt,ce,null),a(ce,xo),a(ce,Yt),m(e,Ls,o),f(ct,e,o),m(e,Rs,o),m(e,U,o),f(pt,U,null),a(U,ko),a(U,At),a(U,So),a(U,Dt),a(U,Jo),a(U,pe),f(mt,pe,null),a(pe,Io),a(pe,Ot),a(U,Co),a(U,me),f(gt,me,null),a(me,Uo),a(me,Kt),m(e,Hs,o),f(ht,e,o),m(e,Es,o),m(e,S,o),f(ft,S,null),a(S,zo),a(S,es),a(S,Zo),a(S,ts),a(S,Wo),a(S,q),f(ut,q,null),a(q,Bo),a(q,ss),a(q,No),f(ge,q,null),a(q,Go),f(he,q,null),a(S,Po),a(S,X),f(_t,X,null),a(X,Fo),a(X,os),a(X,Vo),f(fe,X,null),a(X,qo),f(ue,X,null),a(S,Xo),a(S,L),f(bt,L,null),a(L,Lo),a(L,ns),a(L,Ro),f(_e,L,null),a(L,Ho),f(be,L,null),m(e,Qs,o),f(Mt,e,o),m(e,Ys,o),m(e,G,o),f(yt,G,null),a(G,Eo),a(G,as),a(G,Qo),a(G,rs),a(G,Yo),a(G,R),f(Tt,R,null),a(R,Ao),a(R,is),a(R,Do),f(Me,R,null),a(R,Oo),f(ye,R,null),m(e,As,o),f(wt,e,o),m(e,Ds,o),m(e,P,o),f(vt,P,null),a(P,Ko),a(P,ls),a(P,en),a(P,ds),a(P,tn),a(P,H),f($t,H,null),a(H,sn),a(H,cs),a(H,on),f(Te,H,null),a(H,nn),f(we,H,null),m(e,Os,o),f(jt,e,o),m(e,Ks,o),m(e,z,o),f(xt,z,null),a(z,an),a(z,ps),a(z,rn),a(z,ms),a(z,ln),a(z,gs),a(z,dn),a(z,E),f(kt,E,null),a(E,cn),a(E,hs),a(E,pn),f(ve,E,null),a(E,mn),f($e,E,null),m(e,eo,o),m(e,us,o),to=!0},p(e,[o]){const F={};o&2&&(F.$$scope={dirty:o,ctx:e}),ne.$set(F);const St={};o&2&&(St.$$scope={dirty:o,ctx:e}),re.$set(St);const Y={};o&2&&(Y.$$scope={dirty:o,ctx:e}),ie.$set(Y);const A={};o&2&&(A.$$scope={dirty:o,ctx:e}),ge.$set(A);const J={};o&2&&(J.$$scope={dirty:o,ctx:e}),he.$set(J);const ee={};o&2&&(ee.$$scope={dirty:o,ctx:e}),fe.$set(ee);const Jt={};o&2&&(Jt.$$scope={dirty:o,ctx:e}),ue.$set(Jt);const It={};o&2&&(It.$$scope={dirty:o,ctx:e}),_e.$set(It);const _s={};o&2&&(_s.$$scope={dirty:o,ctx:e}),be.$set(_s);const te={};o&2&&(te.$$scope={dirty:o,ctx:e}),Me.$set(te);const Ct={};o&2&&(Ct.$$scope={dirty:o,ctx:e}),ye.$set(Ct);const V={};o&2&&(V.$$scope={dirty:o,ctx:e}),Te.$set(V);const Ut={};o&2&&(Ut.$$scope={dirty:o,ctx:e}),we.$set(Ut);const zt={};o&2&&(zt.$$scope={dirty:o,ctx:e}),ve.$set(zt);const Z={};o&2&&(Z.$$scope={dirty:o,ctx:e}),$e.$set(Z)},i(e){to||(u(y.$$.fragment,e),u(w.$$.fragment,e),u(Be.$$.fragment,e),u(Fe.$$.fragment,e),u(qe.$$.fragment,e),u(Le.$$.fragment,e),u(Re.$$.fragment,e),u(Ee.$$.fragment,e),u(Qe.$$.fragment,e),u(Ye.$$.fragment,e),u(ne.$$.fragment,e),u(Ae.$$.fragment,e),u(De.$$.fragment,e),u(Oe.$$.fragment,e),u(re.$$.fragment,e),u(Ke.$$.fragment,e),u(et.$$.fragment,e),u(ie.$$.fragment,e),u(tt.$$.fragment,e),u(st.$$.fragment,e),u(ot.$$.fragment,e),u(nt.$$.fragment,e),u(at.$$.fragment,e),u(rt.$$.fragment,e),u(it.$$.fragment,e),u(lt.$$.fragment,e),u(dt.$$.fragment,e),u(ct.$$.fragment,e),u(pt.$$.fragment,e),u(mt.$$.fragment,e),u(gt.$$.fragment,e),u(ht.$$.fragment,e),u(ft.$$.fragment,e),u(ut.$$.fragment,e),u(ge.$$.fragment,e),u(he.$$.fragment,e),u(_t.$$.fragment,e),u(fe.$$.fragment,e),u(ue.$$.fragment,e),u(bt.$$.fragment,e),u(_e.$$.fragment,e),u(be.$$.fragment,e),u(Mt.$$.fragment,e),u(yt.$$.fragment,e),u(Tt.$$.fragment,e),u(Me.$$.fragment,e),u(ye.$$.fragment,e),u(wt.$$.fragment,e),u(vt.$$.fragment,e),u($t.$$.fragment,e),u(Te.$$.fragment,e),u(we.$$.fragment,e),u(jt.$$.fragment,e),u(xt.$$.fragment,e),u(kt.$$.fragment,e),u(ve.$$.fragment,e),u($e.$$.fragment,e),to=!0)},o(e){_(y.$$.fragment,e),_(w.$$.fragment,e),_(Be.$$.fragment,e),_(Fe.$$.fragment,e),_(qe.$$.fragment,e),_(Le.$$.fragment,e),_(Re.$$.fragment,e),_(Ee.$$.fragment,e),_(Qe.$$.fragment,e),_(Ye.$$.fragment,e),_(ne.$$.fragment,e),_(Ae.$$.fragment,e),_(De.$$.fragment,e),_(Oe.$$.fragment,e),_(re.$$.fragment,e),_(Ke.$$.fragment,e),_(et.$$.fragment,e),_(ie.$$.fragment,e),_(tt.$$.fragment,e),_(st.$$.fragment,e),_(ot.$$.fragment,e),_(nt.$$.fragment,e),_(at.$$.fragment,e),_(rt.$$.fragment,e),_(it.$$.fragment,e),_(lt.$$.fragment,e),_(dt.$$.fragment,e),_(ct.$$.fragment,e),_(pt.$$.fragment,e),_(mt.$$.fragment,e),_(gt.$$.fragment,e),_(ht.$$.fragment,e),_(ft.$$.fragment,e),_(ut.$$.fragment,e),_(ge.$$.fragment,e),_(he.$$.fragment,e),_(_t.$$.fragment,e),_(fe.$$.fragment,e),_(ue.$$.fragment,e),_(bt.$$.fragment,e),_(_e.$$.fragment,e),_(be.$$.fragment,e),_(Mt.$$.fragment,e),_(yt.$$.fragment,e),_(Tt.$$.fragment,e),_(Me.$$.fragment,e),_(ye.$$.fragment,e),_(wt.$$.fragment,e),_(vt.$$.fragment,e),_($t.$$.fragment,e),_(Te.$$.fragment,e),_(we.$$.fragment,e),_(jt.$$.fragment,e),_(xt.$$.fragment,e),_(kt.$$.fragment,e),_(ve.$$.fragment,e),_($e.$$.fragment,e),to=!1},d(e){e&&(n(T),n(d),n(l),n(t),n(bs),n(ze),n(Ms),n(Ze),n(ys),n(We),n(Ts),n(ws),n(Ne),n(vs),n(oe),n($s),n(Ge),n(js),n(Pe),n(xs),n(ks),n(Ve),n(Ss),n(Js),n(Xe),n(Is),n(Cs),n(Us),n(He),n(zs),n(Zs),n(Ws),n(C),n(Bs),n(Ns),n(B),n(Gs),n(Ps),n(N),n(Fs),n(Vs),n(k),n(qs),n(Xs),n(Q),n(Ls),n(Rs),n(U),n(Hs),n(Es),n(S),n(Qs),n(Ys),n(G),n(As),n(Ds),n(P),n(Os),n(Ks),n(z),n(eo),n(us)),n(s),b(y,e),b(w,e),b(Be,e),b(Fe,e),b(qe,e),b(Le,e),b(Re,e),b(Ee,e),b(Qe,e),b(Ye),b(ne),b(Ae),b(De,e),b(Oe),b(re),b(Ke,e),b(et),b(ie),b(tt,e),b(st),b(ot),b(nt),b(at),b(rt),b(it,e),b(lt),b(dt),b(ct,e),b(pt),b(mt),b(gt),b(ht,e),b(ft),b(ut),b(ge),b(he),b(_t),b(fe),b(ue),b(bt),b(_e),b(be),b(Mt,e),b(yt),b(Tt),b(Me),b(ye),b(wt,e),b(vt),b($t),b(Te),b(we),b(jt,e),b(xt),b(kt),b(ve),b($e)}}}const ja='{"title":"SigLIP","local":"siglip","sections":[{"title":"Overview","local":"overview","sections":[],"depth":2},{"title":"Usage tips","local":"usage-tips","sections":[],"depth":2},{"title":"Usage example","local":"usage-example","sections":[{"title":"Pipeline API","local":"pipeline-api","sections":[],"depth":3},{"title":"Using the model yourself","local":"using-the-model-yourself","sections":[],"depth":3}],"depth":2},{"title":"SiglipConfig","local":"transformers.SiglipConfig","sections":[],"depth":2},{"title":"SiglipTextConfig","local":"transformers.SiglipTextConfig","sections":[],"depth":2},{"title":"SiglipVisionConfig","local":"transformers.SiglipVisionConfig","sections":[],"depth":2},{"title":"SiglipTokenizer","local":"transformers.SiglipTokenizer","sections":[],"depth":2},{"title":"SiglipImageProcessor","local":"transformers.SiglipImageProcessor","sections":[],"depth":2},{"title":"SiglipProcessor","local":"transformers.SiglipProcessor","sections":[],"depth":2},{"title":"SiglipModel","local":"transformers.SiglipModel","sections":[],"depth":2},{"title":"SiglipTextModel","local":"transformers.SiglipTextModel","sections":[],"depth":2},{"title":"SiglipVisionModel","local":"transformers.SiglipVisionModel","sections":[],"depth":2},{"title":"SiglipForImageClassification","local":"transformers.SiglipForImageClassification","sections":[],"depth":2}],"depth":1}';function xa(v){return aa(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Za extends ra{constructor(s){super(),ia(this,s,xa,$a,oa,{})}}export{Za as component};
