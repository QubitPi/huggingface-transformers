import{s as Sp,o as Ap,n as z}from"../chunks/scheduler.9bc65507.js";import{S as Op,i as Kp,g as r,s as o,r as c,A as eh,h as a,f as s,c as n,j as v,u as p,x as l,k as M,y as t,a as _,v as h,d as f,t as u,w as g}from"../chunks/index.707bf1b6.js";import{T as ci}from"../chunks/Tip.c2ecdbf4.js";import{D as T}from"../chunks/Docstring.17db21ae.js";import{C as B}from"../chunks/CodeBlock.54a9f38d.js";import{E as Q}from"../chunks/ExampleCodeBlock.4f515aa9.js";import{H as he}from"../chunks/Heading.342b1fa6.js";function th(j){let d,C="Examples:",y,b,w;return b=new B({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Nb2RlbCUwQSUwQW1vZGVsJTIwJTNEJTIwQXV0b01vZGVsLmZyb21fcHJldHJhaW5lZCglMjJnb29nbGUtYmVydCUyRmJlcnQtYmFzZS1jYXNlZCUyMiklMEElMEElMjMlMjBQdXNoJTIwdGhlJTIwbW9kZWwlMjB0byUyMHlvdXIlMjBuYW1lc3BhY2UlMjB3aXRoJTIwdGhlJTIwbmFtZSUyMCUyMm15LWZpbmV0dW5lZC1iZXJ0JTIyLiUwQW1vZGVsLnB1c2hfdG9faHViKCUyMm15LWZpbmV0dW5lZC1iZXJ0JTIyKSUwQSUwQSUyMyUyMFB1c2glMjB0aGUlMjBtb2RlbCUyMHRvJTIwYW4lMjBvcmdhbml6YXRpb24lMjB3aXRoJTIwdGhlJTIwbmFtZSUyMCUyMm15LWZpbmV0dW5lZC1iZXJ0JTIyLiUwQW1vZGVsLnB1c2hfdG9faHViKCUyMmh1Z2dpbmdmYWNlJTJGbXktZmluZXR1bmVkLWJlcnQlMjIp",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModel

model = AutoModel.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot;.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the model to an organization with the name &quot;my-finetuned-bert&quot;.</span>
model.push_to_hub(<span class="hljs-string">&quot;huggingface/my-finetuned-bert&quot;</span>)`,wrap:!1}}),{c(){d=r("p"),d.textContent=C,y=o(),c(b.$$.fragment)},l(i){d=a(i,"P",{"data-svelte-h":!0}),l(d)!=="svelte-kvfsh7"&&(d.textContent=C),y=n(i),p(b.$$.fragment,i)},m(i,J){_(i,d,J),_(i,y,J),h(b,i,J),w=!0},p:z,i(i){w||(f(b.$$.fragment,i),w=!0)},o(i){u(b.$$.fragment,i),w=!1},d(i){i&&(s(d),s(y)),g(b,i)}}}function oh(j){let d,C="Examples:",y,b,w;return b=new B({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Nb2RlbCUwQSUwQW1vZGVsJTIwJTNEJTIwQXV0b01vZGVsLmZyb21fcHJldHJhaW5lZCglMjJnb29nbGUtYmVydCUyRmJlcnQtYmFzZS1jYXNlZCUyMiklMEElMEFtb2RlbC5hZGRfbW9kZWxfdGFncyglNUIlMjJjdXN0b20lMjIlMkMlMjAlMjJjdXN0b20tYmVydCUyMiU1RCklMEElMEElMjMlMjBQdXNoJTIwdGhlJTIwbW9kZWwlMjB0byUyMHlvdXIlMjBuYW1lc3BhY2UlMjB3aXRoJTIwdGhlJTIwbmFtZSUyMCUyMm15LWN1c3RvbS1iZXJ0JTIyLiUwQW1vZGVsLnB1c2hfdG9faHViKCUyMm15LWN1c3RvbS1iZXJ0JTIyKQ==",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModel

model = AutoModel.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-cased&quot;</span>)

model.add_model_tags([<span class="hljs-string">&quot;custom&quot;</span>, <span class="hljs-string">&quot;custom-bert&quot;</span>])

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-custom-bert&quot;.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-custom-bert&quot;</span>)`,wrap:!1}}),{c(){d=r("p"),d.textContent=C,y=o(),c(b.$$.fragment)},l(i){d=a(i,"P",{"data-svelte-h":!0}),l(d)!=="svelte-kvfsh7"&&(d.textContent=C),y=n(i),p(b.$$.fragment,i)},m(i,J){_(i,d,J),_(i,y,J),h(b,i,J),w=!0},p:z,i(i){w||(f(b.$$.fragment,i),w=!0)},o(i){u(b.$$.fragment,i),w=!1},d(i){i&&(s(d),s(y)),g(b,i)}}}function nh(j){let d,C=`Activate the special <a href="https://huggingface.co/transformers/installation.html#offline-mode" rel="nofollow">“offline-mode”</a> to
use this method in a firewalled environment.`;return{c(){d=r("p"),d.innerHTML=C},l(y){d=a(y,"P",{"data-svelte-h":!0}),l(d)!=="svelte-13hahdn"&&(d.innerHTML=C)},m(y,b){_(y,d,b)},p:z,d(y){y&&s(d)}}}function rh(j){let d,C="Examples:",y,b,w;return b=new B({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEJlcnRDb25maWclMkMlMjBCZXJ0TW9kZWwlMEElMEElMjMlMjBEb3dubG9hZCUyMG1vZGVsJTIwYW5kJTIwY29uZmlndXJhdGlvbiUyMGZyb20lMjBodWdnaW5nZmFjZS5jbyUyMGFuZCUyMGNhY2hlLiUwQW1vZGVsJTIwJTNEJTIwQmVydE1vZGVsLmZyb21fcHJldHJhaW5lZCglMjJnb29nbGUtYmVydCUyRmJlcnQtYmFzZS11bmNhc2VkJTIyKSUwQSUyMyUyME1vZGVsJTIwd2FzJTIwc2F2ZWQlMjB1c2luZyUyMCpzYXZlX3ByZXRyYWluZWQoJy4lMkZ0ZXN0JTJGc2F2ZWRfbW9kZWwlMkYnKSolMjAoZm9yJTIwZXhhbXBsZSUyMHB1cnBvc2VzJTJDJTIwbm90JTIwcnVubmFibGUpLiUwQW1vZGVsJTIwJTNEJTIwQmVydE1vZGVsLmZyb21fcHJldHJhaW5lZCglMjIuJTJGdGVzdCUyRnNhdmVkX21vZGVsJTJGJTIyKSUwQSUyMyUyMFVwZGF0ZSUyMGNvbmZpZ3VyYXRpb24lMjBkdXJpbmclMjBsb2FkaW5nLiUwQW1vZGVsJTIwJTNEJTIwQmVydE1vZGVsLmZyb21fcHJldHJhaW5lZCglMjJnb29nbGUtYmVydCUyRmJlcnQtYmFzZS11bmNhc2VkJTIyJTJDJTIwb3V0cHV0X2F0dGVudGlvbnMlM0RUcnVlKSUwQWFzc2VydCUyMG1vZGVsLmNvbmZpZy5vdXRwdXRfYXR0ZW50aW9ucyUyMCUzRCUzRCUyMFRydWUlMEElMjMlMjBMb2FkaW5nJTIwZnJvbSUyMGElMjBURiUyMGNoZWNrcG9pbnQlMjBmaWxlJTIwaW5zdGVhZCUyMG9mJTIwYSUyMFB5VG9yY2glMjBtb2RlbCUyMChzbG93ZXIlMkMlMjBmb3IlMjBleGFtcGxlJTIwcHVycG9zZXMlMkMlMjBub3QlMjBydW5uYWJsZSkuJTBBY29uZmlnJTIwJTNEJTIwQmVydENvbmZpZy5mcm9tX2pzb25fZmlsZSglMjIuJTJGdGZfbW9kZWwlMkZteV90Zl9tb2RlbF9jb25maWcuanNvbiUyMiklMEFtb2RlbCUyMCUzRCUyMEJlcnRNb2RlbC5mcm9tX3ByZXRyYWluZWQoJTIyLiUyRnRmX21vZGVsJTJGbXlfdGZfY2hlY2twb2ludC5ja3B0LmluZGV4JTIyJTJDJTIwZnJvbV90ZiUzRFRydWUlMkMlMjBjb25maWclM0Rjb25maWcpJTBBJTIzJTIwTG9hZGluZyUyMGZyb20lMjBhJTIwRmxheCUyMGNoZWNrcG9pbnQlMjBmaWxlJTIwaW5zdGVhZCUyMG9mJTIwYSUyMFB5VG9yY2glMjBtb2RlbCUyMChzbG93ZXIpJTBBbW9kZWwlMjAlM0QlMjBCZXJ0TW9kZWwuZnJvbV9wcmV0cmFpbmVkKCUyMmdvb2dsZS1iZXJ0JTJGYmVydC1iYXNlLXVuY2FzZWQlMjIlMkMlMjBmcm9tX2ZsYXglM0RUcnVlKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertConfig, BertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Model was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)* (for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> model.config.output_attentions == <span class="hljs-literal">True</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower, for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = BertConfig.from_json_file(<span class="hljs-string">&quot;./tf_model/my_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;./tf_model/my_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a Flax checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-uncased&quot;</span>, from_flax=<span class="hljs-literal">True</span>)`,wrap:!1}}),{c(){d=r("p"),d.textContent=C,y=o(),c(b.$$.fragment)},l(i){d=a(i,"P",{"data-svelte-h":!0}),l(d)!=="svelte-kvfsh7"&&(d.textContent=C),y=n(i),p(b.$$.fragment,i)},m(i,J){_(i,d,J),_(i,y,J),h(b,i,J),w=!0},p:z,i(i){w||(f(b.$$.fragment,i),w=!0)},o(i){u(b.$$.fragment,i),w=!1},d(i){i&&(s(d),s(y)),g(b,i)}}}function ah(j){let d,C="This API is experimental and may have some slight breaking changes in the next releases.";return{c(){d=r("p"),d.textContent=C},l(y){d=a(y,"P",{"data-svelte-h":!0}),l(d)!=="svelte-15rpg4"&&(d.textContent=C)},m(y,b){_(y,d,b)},p:z,d(y){y&&s(d)}}}function sh(j){let d,C="Examples:",y,b,w;return b=new B({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFRGQXV0b01vZGVsJTBBJTBBbW9kZWwlMjAlM0QlMjBURkF1dG9Nb2RlbC5mcm9tX3ByZXRyYWluZWQoJTIyZ29vZ2xlLWJlcnQlMkZiZXJ0LWJhc2UtY2FzZWQlMjIpJTBBJTBBJTIzJTIwUHVzaCUyMHRoZSUyMG1vZGVsJTIwdG8lMjB5b3VyJTIwbmFtZXNwYWNlJTIwd2l0aCUyMHRoZSUyMG5hbWUlMjAlMjJteS1maW5ldHVuZWQtYmVydCUyMi4lMEFtb2RlbC5wdXNoX3RvX2h1YiglMjJteS1maW5ldHVuZWQtYmVydCUyMiklMEElMEElMjMlMjBQdXNoJTIwdGhlJTIwbW9kZWwlMjB0byUyMGFuJTIwb3JnYW5pemF0aW9uJTIwd2l0aCUyMHRoZSUyMG5hbWUlMjAlMjJteS1maW5ldHVuZWQtYmVydCUyMi4lMEFtb2RlbC5wdXNoX3RvX2h1YiglMjJodWdnaW5nZmFjZSUyRm15LWZpbmV0dW5lZC1iZXJ0JTIyKQ==",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModel

model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot;.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the model to an organization with the name &quot;my-finetuned-bert&quot;.</span>
model.push_to_hub(<span class="hljs-string">&quot;huggingface/my-finetuned-bert&quot;</span>)`,wrap:!1}}),{c(){d=r("p"),d.textContent=C,y=o(),c(b.$$.fragment)},l(i){d=a(i,"P",{"data-svelte-h":!0}),l(d)!=="svelte-kvfsh7"&&(d.textContent=C),y=n(i),p(b.$$.fragment,i)},m(i,J){_(i,d,J),_(i,y,J),h(b,i,J),w=!0},p:z,i(i){w||(f(b.$$.fragment,i),w=!0)},o(i){u(b.$$.fragment,i),w=!1},d(i){i&&(s(d),s(y)),g(b,i)}}}function ih(j){let d,C="Examples:",y,b,w;return b=new B({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEJlcnRDb25maWclMkMlMjBURkJlcnRNb2RlbCUwQSUwQSUyMyUyMERvd25sb2FkJTIwbW9kZWwlMjBhbmQlMjBjb25maWd1cmF0aW9uJTIwZnJvbSUyMGh1Z2dpbmdmYWNlLmNvJTIwYW5kJTIwY2FjaGUuJTBBbW9kZWwlMjAlM0QlMjBURkJlcnRNb2RlbC5mcm9tX3ByZXRyYWluZWQoJTIyZ29vZ2xlLWJlcnQlMkZiZXJ0LWJhc2UtdW5jYXNlZCUyMiklMEElMjMlMjBNb2RlbCUyMHdhcyUyMHNhdmVkJTIwdXNpbmclMjAqc2F2ZV9wcmV0cmFpbmVkKCcuJTJGdGVzdCUyRnNhdmVkX21vZGVsJTJGJykqJTIwKGZvciUyMGV4YW1wbGUlMjBwdXJwb3NlcyUyQyUyMG5vdCUyMHJ1bm5hYmxlKS4lMEFtb2RlbCUyMCUzRCUyMFRGQmVydE1vZGVsLmZyb21fcHJldHJhaW5lZCglMjIuJTJGdGVzdCUyRnNhdmVkX21vZGVsJTJGJTIyKSUwQSUyMyUyMFVwZGF0ZSUyMGNvbmZpZ3VyYXRpb24lMjBkdXJpbmclMjBsb2FkaW5nLiUwQW1vZGVsJTIwJTNEJTIwVEZCZXJ0TW9kZWwuZnJvbV9wcmV0cmFpbmVkKCUyMmdvb2dsZS1iZXJ0JTJGYmVydC1iYXNlLXVuY2FzZWQlMjIlMkMlMjBvdXRwdXRfYXR0ZW50aW9ucyUzRFRydWUpJTBBYXNzZXJ0JTIwbW9kZWwuY29uZmlnLm91dHB1dF9hdHRlbnRpb25zJTIwJTNEJTNEJTIwVHJ1ZSUwQSUyMyUyMExvYWRpbmclMjBmcm9tJTIwYSUyMFB5dG9yY2glMjBtb2RlbCUyMGZpbGUlMjBpbnN0ZWFkJTIwb2YlMjBhJTIwVGVuc29yRmxvdyUyMGNoZWNrcG9pbnQlMjAoc2xvd2VyJTJDJTIwZm9yJTIwZXhhbXBsZSUyMHB1cnBvc2VzJTJDJTIwbm90JTIwcnVubmFibGUpLiUwQWNvbmZpZyUyMCUzRCUyMEJlcnRDb25maWcuZnJvbV9qc29uX2ZpbGUoJTIyLiUyRnB0X21vZGVsJTJGbXlfcHRfbW9kZWxfY29uZmlnLmpzb24lMjIpJTBBbW9kZWwlMjAlM0QlMjBURkJlcnRNb2RlbC5mcm9tX3ByZXRyYWluZWQoJTIyLiUyRnB0X21vZGVsJTJGbXlfcHl0b3JjaF9tb2RlbC5iaW4lMjIlMkMlMjBmcm9tX3B0JTNEVHJ1ZSUyQyUyMGNvbmZpZyUzRGNvbmZpZyk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertConfig, TFBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFBertModel.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Model was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)* (for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFBertModel.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFBertModel.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> model.config.output_attentions == <span class="hljs-literal">True</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a Pytorch model file instead of a TensorFlow checkpoint (slower, for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = BertConfig.from_json_file(<span class="hljs-string">&quot;./pt_model/my_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFBertModel.from_pretrained(<span class="hljs-string">&quot;./pt_model/my_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config)`,wrap:!1}}),{c(){d=r("p"),d.textContent=C,y=o(),c(b.$$.fragment)},l(i){d=a(i,"P",{"data-svelte-h":!0}),l(d)!=="svelte-kvfsh7"&&(d.textContent=C),y=n(i),p(b.$$.fragment,i)},m(i,J){_(i,d,J),_(i,y,J),h(b,i,J),w=!0},p:z,i(i){w||(f(b.$$.fragment,i),w=!0)},o(i){u(b.$$.fragment,i),w=!1},d(i){i&&(s(d),s(y)),g(b,i)}}}function lh(j){let d,C="This API is experimental and may have some slight breaking changes in the next releases.";return{c(){d=r("p"),d.textContent=C},l(y){d=a(y,"P",{"data-svelte-h":!0}),l(d)!=="svelte-15rpg4"&&(d.textContent=C)},m(y,b){_(y,d,b)},p:z,d(y){y&&s(d)}}}function dh(j){let d,C="Examples:",y,b,w;return b=new B({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEZsYXhBdXRvTW9kZWwlMEElMEFtb2RlbCUyMCUzRCUyMEZsYXhBdXRvTW9kZWwuZnJvbV9wcmV0cmFpbmVkKCUyMmdvb2dsZS1iZXJ0JTJGYmVydC1iYXNlLWNhc2VkJTIyKSUwQSUwQSUyMyUyMFB1c2glMjB0aGUlMjBtb2RlbCUyMHRvJTIweW91ciUyMG5hbWVzcGFjZSUyMHdpdGglMjB0aGUlMjBuYW1lJTIwJTIybXktZmluZXR1bmVkLWJlcnQlMjIuJTBBbW9kZWwucHVzaF90b19odWIoJTIybXktZmluZXR1bmVkLWJlcnQlMjIpJTBBJTBBJTIzJTIwUHVzaCUyMHRoZSUyMG1vZGVsJTIwdG8lMjBhbiUyMG9yZ2FuaXphdGlvbiUyMHdpdGglMjB0aGUlMjBuYW1lJTIwJTIybXktZmluZXR1bmVkLWJlcnQlMjIuJTBBbW9kZWwucHVzaF90b19odWIoJTIyaHVnZ2luZ2ZhY2UlMkZteS1maW5ldHVuZWQtYmVydCUyMik=",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxAutoModel

model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot;.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the model to an organization with the name &quot;my-finetuned-bert&quot;.</span>
model.push_to_hub(<span class="hljs-string">&quot;huggingface/my-finetuned-bert&quot;</span>)`,wrap:!1}}),{c(){d=r("p"),d.textContent=C,y=o(),c(b.$$.fragment)},l(i){d=a(i,"P",{"data-svelte-h":!0}),l(d)!=="svelte-kvfsh7"&&(d.textContent=C),y=n(i),p(b.$$.fragment,i)},m(i,J){_(i,d,J),_(i,y,J),h(b,i,J),w=!0},p:z,i(i){w||(f(b.$$.fragment,i),w=!0)},o(i){u(b.$$.fragment,i),w=!1},d(i){i&&(s(d),s(y)),g(b,i)}}}function mh(j){let d,C="Examples:",y,b,w;return b=new B({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEJlcnRDb25maWclMkMlMjBGbGF4QmVydE1vZGVsJTBBJTBBJTIzJTIwRG93bmxvYWQlMjBtb2RlbCUyMGFuZCUyMGNvbmZpZ3VyYXRpb24lMjBmcm9tJTIwaHVnZ2luZ2ZhY2UuY28lMjBhbmQlMjBjYWNoZS4lMEFtb2RlbCUyMCUzRCUyMEZsYXhCZXJ0TW9kZWwuZnJvbV9wcmV0cmFpbmVkKCUyMmdvb2dsZS1iZXJ0JTJGYmVydC1iYXNlLWNhc2VkJTIyKSUwQSUyMyUyME1vZGVsJTIwd2FzJTIwc2F2ZWQlMjB1c2luZyUyMCpzYXZlX3ByZXRyYWluZWQoJy4lMkZ0ZXN0JTJGc2F2ZWRfbW9kZWwlMkYnKSolMjAoZm9yJTIwZXhhbXBsZSUyMHB1cnBvc2VzJTJDJTIwbm90JTIwcnVubmFibGUpLiUwQW1vZGVsJTIwJTNEJTIwRmxheEJlcnRNb2RlbC5mcm9tX3ByZXRyYWluZWQoJTIyLiUyRnRlc3QlMkZzYXZlZF9tb2RlbCUyRiUyMiklMEElMjMlMjBMb2FkaW5nJTIwZnJvbSUyMGElMjBQeVRvcmNoJTIwY2hlY2twb2ludCUyMGZpbGUlMjBpbnN0ZWFkJTIwb2YlMjBhJTIwUHlUb3JjaCUyMG1vZGVsJTIwKHNsb3dlciUyQyUyMGZvciUyMGV4YW1wbGUlMjBwdXJwb3NlcyUyQyUyMG5vdCUyMHJ1bm5hYmxlKS4lMEFjb25maWclMjAlM0QlMjBCZXJ0Q29uZmlnLmZyb21fanNvbl9maWxlKCUyMi4lMkZwdF9tb2RlbCUyRmNvbmZpZy5qc29uJTIyKSUwQW1vZGVsJTIwJTNEJTIwRmxheEJlcnRNb2RlbC5mcm9tX3ByZXRyYWluZWQoJTIyLiUyRnB0X21vZGVsJTJGcHl0b3JjaF9tb2RlbC5iaW4lMjIlMkMlMjBmcm9tX3B0JTNEVHJ1ZSUyQyUyMGNvbmZpZyUzRGNvbmZpZyk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertConfig, FlaxBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Model was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)* (for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a PyTorch model (slower, for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = BertConfig.from_json_file(<span class="hljs-string">&quot;./pt_model/config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;./pt_model/pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config)`,wrap:!1}}),{c(){d=r("p"),d.textContent=C,y=o(),c(b.$$.fragment)},l(i){d=a(i,"P",{"data-svelte-h":!0}),l(d)!=="svelte-kvfsh7"&&(d.textContent=C),y=n(i),p(b.$$.fragment,i)},m(i,J){_(i,d,J),_(i,y,J),h(b,i,J),w=!0},p:z,i(i){w||(f(b.$$.fragment,i),w=!0)},o(i){u(b.$$.fragment,i),w=!1},d(i){i&&(s(d),s(y)),g(b,i)}}}function ch(j){let d,C="This API is experimental and may have some slight breaking changes in the next releases.";return{c(){d=r("p"),d.textContent=C},l(y){d=a(y,"P",{"data-svelte-h":!0}),l(d)!=="svelte-15rpg4"&&(d.textContent=C)},m(y,b){_(y,d,b)},p:z,d(y){y&&s(d)}}}function ph(j){let d,C="Examples:",y,b,w;return b=new B({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEZsYXhCZXJ0TW9kZWwlMEElMEElMjMlMjBsb2FkJTIwbW9kZWwlMEFtb2RlbCUyMCUzRCUyMEZsYXhCZXJ0TW9kZWwuZnJvbV9wcmV0cmFpbmVkKCUyMmdvb2dsZS1iZXJ0JTJGYmVydC1iYXNlLWNhc2VkJTIyKSUwQSUyMyUyMEJ5JTIwZGVmYXVsdCUyQyUyMHRoZSUyMG1vZGVsJTIwcGFyYW1ldGVycyUyMHdpbGwlMjBiZSUyMGluJTIwZnAzMiUyMHByZWNpc2lvbiUyQyUyMHRvJTIwY2FzdCUyMHRoZXNlJTIwdG8lMjBiZmxvYXQxNiUyMHByZWNpc2lvbiUwQW1vZGVsLnBhcmFtcyUyMCUzRCUyMG1vZGVsLnRvX2JmMTYobW9kZWwucGFyYW1zKSUwQSUyMyUyMElmJTIweW91JTIwd2FudCUyMGRvbid0JTIwd2FudCUyMHRvJTIwY2FzdCUyMGNlcnRhaW4lMjBwYXJhbWV0ZXJzJTIwKGZvciUyMGV4YW1wbGUlMjBsYXllciUyMG5vcm0lMjBiaWFzJTIwYW5kJTIwc2NhbGUpJTBBJTIzJTIwdGhlbiUyMHBhc3MlMjB0aGUlMjBtYXNrJTIwYXMlMjBmb2xsb3dzJTBBZnJvbSUyMGZsYXglMjBpbXBvcnQlMjB0cmF2ZXJzZV91dGlsJTBBJTBBbW9kZWwlMjAlM0QlMjBGbGF4QmVydE1vZGVsLmZyb21fcHJldHJhaW5lZCglMjJnb29nbGUtYmVydCUyRmJlcnQtYmFzZS1jYXNlZCUyMiklMEFmbGF0X3BhcmFtcyUyMCUzRCUyMHRyYXZlcnNlX3V0aWwuZmxhdHRlbl9kaWN0KG1vZGVsLnBhcmFtcyklMEFtYXNrJTIwJTNEJTIwJTdCJTBBJTIwJTIwJTIwJTIwcGF0aCUzQSUyMChwYXRoJTVCLTIlNUQlMjAhJTNEJTIwKCUyMkxheWVyTm9ybSUyMiUyQyUyMCUyMmJpYXMlMjIpJTIwYW5kJTIwcGF0aCU1Qi0yJTNBJTVEJTIwISUzRCUyMCglMjJMYXllck5vcm0lMjIlMkMlMjAlMjJzY2FsZSUyMikpJTBBJTIwJTIwJTIwJTIwZm9yJTIwcGF0aCUyMGluJTIwZmxhdF9wYXJhbXMlMEElN0QlMEFtYXNrJTIwJTNEJTIwdHJhdmVyc2VfdXRpbC51bmZsYXR0ZW5fZGljdChtYXNrKSUwQW1vZGVsLnBhcmFtcyUyMCUzRCUyMG1vZGVsLnRvX2JmMTYobW9kZWwucGFyYW1zJTJDJTIwbWFzayk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># By default, the model parameters will be in fp32 precision, to cast these to bfloat16 precision</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_bf16(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If you want don&#x27;t want to cast certain parameters (for example layer norm bias and scale)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># then pass the mask as follows</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> flax <span class="hljs-keyword">import</span> traverse_util

<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>flat_params = traverse_util.flatten_dict(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = {
<span class="hljs-meta">... </span>    path: (path[-<span class="hljs-number">2</span>] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;bias&quot;</span>) <span class="hljs-keyword">and</span> path[-<span class="hljs-number">2</span>:] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;scale&quot;</span>))
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> flat_params
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = traverse_util.unflatten_dict(mask)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_bf16(model.params, mask)`,wrap:!1}}),{c(){d=r("p"),d.textContent=C,y=o(),c(b.$$.fragment)},l(i){d=a(i,"P",{"data-svelte-h":!0}),l(d)!=="svelte-kvfsh7"&&(d.textContent=C),y=n(i),p(b.$$.fragment,i)},m(i,J){_(i,d,J),_(i,y,J),h(b,i,J),w=!0},p:z,i(i){w||(f(b.$$.fragment,i),w=!0)},o(i){u(b.$$.fragment,i),w=!1},d(i){i&&(s(d),s(y)),g(b,i)}}}function hh(j){let d,C="Examples:",y,b,w;return b=new B({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEZsYXhCZXJ0TW9kZWwlMEElMEElMjMlMjBsb2FkJTIwbW9kZWwlMEFtb2RlbCUyMCUzRCUyMEZsYXhCZXJ0TW9kZWwuZnJvbV9wcmV0cmFpbmVkKCUyMmdvb2dsZS1iZXJ0JTJGYmVydC1iYXNlLWNhc2VkJTIyKSUwQSUyMyUyMEJ5JTIwZGVmYXVsdCUyQyUyMHRoZSUyMG1vZGVsJTIwcGFyYW1zJTIwd2lsbCUyMGJlJTIwaW4lMjBmcDMyJTJDJTIwdG8lMjBjYXN0JTIwdGhlc2UlMjB0byUyMGZsb2F0MTYlMEFtb2RlbC5wYXJhbXMlMjAlM0QlMjBtb2RlbC50b19mcDE2KG1vZGVsLnBhcmFtcyklMEElMjMlMjBJZiUyMHlvdSUyMHdhbnQlMjBkb24ndCUyMHdhbnQlMjB0byUyMGNhc3QlMjBjZXJ0YWluJTIwcGFyYW1ldGVycyUyMChmb3IlMjBleGFtcGxlJTIwbGF5ZXIlMjBub3JtJTIwYmlhcyUyMGFuZCUyMHNjYWxlKSUwQSUyMyUyMHRoZW4lMjBwYXNzJTIwdGhlJTIwbWFzayUyMGFzJTIwZm9sbG93cyUwQWZyb20lMjBmbGF4JTIwaW1wb3J0JTIwdHJhdmVyc2VfdXRpbCUwQSUwQW1vZGVsJTIwJTNEJTIwRmxheEJlcnRNb2RlbC5mcm9tX3ByZXRyYWluZWQoJTIyZ29vZ2xlLWJlcnQlMkZiZXJ0LWJhc2UtY2FzZWQlMjIpJTBBZmxhdF9wYXJhbXMlMjAlM0QlMjB0cmF2ZXJzZV91dGlsLmZsYXR0ZW5fZGljdChtb2RlbC5wYXJhbXMpJTBBbWFzayUyMCUzRCUyMCU3QiUwQSUyMCUyMCUyMCUyMHBhdGglM0ElMjAocGF0aCU1Qi0yJTVEJTIwISUzRCUyMCglMjJMYXllck5vcm0lMjIlMkMlMjAlMjJiaWFzJTIyKSUyMGFuZCUyMHBhdGglNUItMiUzQSU1RCUyMCElM0QlMjAoJTIyTGF5ZXJOb3JtJTIyJTJDJTIwJTIyc2NhbGUlMjIpKSUwQSUyMCUyMCUyMCUyMGZvciUyMHBhdGglMjBpbiUyMGZsYXRfcGFyYW1zJTBBJTdEJTBBbWFzayUyMCUzRCUyMHRyYXZlcnNlX3V0aWwudW5mbGF0dGVuX2RpY3QobWFzayklMEFtb2RlbC5wYXJhbXMlMjAlM0QlMjBtb2RlbC50b19mcDE2KG1vZGVsLnBhcmFtcyUyQyUyMG1hc2sp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># By default, the model params will be in fp32, to cast these to float16</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_fp16(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If you want don&#x27;t want to cast certain parameters (for example layer norm bias and scale)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># then pass the mask as follows</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> flax <span class="hljs-keyword">import</span> traverse_util

<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>flat_params = traverse_util.flatten_dict(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = {
<span class="hljs-meta">... </span>    path: (path[-<span class="hljs-number">2</span>] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;bias&quot;</span>) <span class="hljs-keyword">and</span> path[-<span class="hljs-number">2</span>:] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;scale&quot;</span>))
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> flat_params
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = traverse_util.unflatten_dict(mask)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_fp16(model.params, mask)`,wrap:!1}}),{c(){d=r("p"),d.textContent=C,y=o(),c(b.$$.fragment)},l(i){d=a(i,"P",{"data-svelte-h":!0}),l(d)!=="svelte-kvfsh7"&&(d.textContent=C),y=n(i),p(b.$$.fragment,i)},m(i,J){_(i,d,J),_(i,y,J),h(b,i,J),w=!0},p:z,i(i){w||(f(b.$$.fragment,i),w=!0)},o(i){u(b.$$.fragment,i),w=!1},d(i){i&&(s(d),s(y)),g(b,i)}}}function fh(j){let d,C="Examples:",y,b,w;return b=new B({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEZsYXhCZXJ0TW9kZWwlMEElMEElMjMlMjBEb3dubG9hZCUyMG1vZGVsJTIwYW5kJTIwY29uZmlndXJhdGlvbiUyMGZyb20lMjBodWdnaW5nZmFjZS5jbyUwQW1vZGVsJTIwJTNEJTIwRmxheEJlcnRNb2RlbC5mcm9tX3ByZXRyYWluZWQoJTIyZ29vZ2xlLWJlcnQlMkZiZXJ0LWJhc2UtY2FzZWQlMjIpJTBBJTIzJTIwQnklMjBkZWZhdWx0JTJDJTIwdGhlJTIwbW9kZWwlMjBwYXJhbXMlMjB3aWxsJTIwYmUlMjBpbiUyMGZwMzIlMkMlMjB0byUyMGlsbHVzdHJhdGUlMjB0aGUlMjB1c2UlMjBvZiUyMHRoaXMlMjBtZXRob2QlMkMlMEElMjMlMjB3ZSdsbCUyMGZpcnN0JTIwY2FzdCUyMHRvJTIwZnAxNiUyMGFuZCUyMGJhY2slMjB0byUyMGZwMzIlMEFtb2RlbC5wYXJhbXMlMjAlM0QlMjBtb2RlbC50b19mMTYobW9kZWwucGFyYW1zKSUwQSUyMyUyMG5vdyUyMGNhc3QlMjBiYWNrJTIwdG8lMjBmcDMyJTBBbW9kZWwucGFyYW1zJTIwJTNEJTIwbW9kZWwudG9fZnAzMihtb2RlbC5wYXJhbXMp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># By default, the model params will be in fp32, to illustrate the use of this method,</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># we&#x27;ll first cast to fp16 and back to fp32</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_f16(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># now cast back to fp32</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_fp32(model.params)`,wrap:!1}}),{c(){d=r("p"),d.textContent=C,y=o(),c(b.$$.fragment)},l(i){d=a(i,"P",{"data-svelte-h":!0}),l(d)!=="svelte-kvfsh7"&&(d.textContent=C),y=n(i),p(b.$$.fragment,i)},m(i,J){_(i,d,J),_(i,y,J),h(b,i,J),w=!0},p:z,i(i){w||(f(b.$$.fragment,i),w=!0)},o(i){u(b.$$.fragment,i),w=!1},d(i){i&&(s(d),s(y)),g(b,i)}}}function uh(j){let d,C="Examples:",y,b,w;return b=new B({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMCU3Qm9iamVjdF9jbGFzcyU3RCUwQSUwQSU3Qm9iamVjdCU3RCUyMCUzRCUyMCU3Qm9iamVjdF9jbGFzcyU3RC5mcm9tX3ByZXRyYWluZWQoJTIyZ29vZ2xlLWJlcnQlMkZiZXJ0LWJhc2UtY2FzZWQlMjIpJTBBJTBBJTIzJTIwUHVzaCUyMHRoZSUyMCU3Qm9iamVjdCU3RCUyMHRvJTIweW91ciUyMG5hbWVzcGFjZSUyMHdpdGglMjB0aGUlMjBuYW1lJTIwJTIybXktZmluZXR1bmVkLWJlcnQlMjIuJTBBJTdCb2JqZWN0JTdELnB1c2hfdG9faHViKCUyMm15LWZpbmV0dW5lZC1iZXJ0JTIyKSUwQSUwQSUyMyUyMFB1c2glMjB0aGUlMjAlN0JvYmplY3QlN0QlMjB0byUyMGFuJTIwb3JnYW5pemF0aW9uJTIwd2l0aCUyMHRoZSUyMG5hbWUlMjAlMjJteS1maW5ldHVuZWQtYmVydCUyMi4lMEElN0JvYmplY3QlN0QucHVzaF90b19odWIoJTIyaHVnZ2luZ2ZhY2UlMkZteS1maW5ldHVuZWQtYmVydCUyMik=",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> {object_class}

{<span class="hljs-built_in">object</span>} = {object_class}.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the {object} to your namespace with the name &quot;my-finetuned-bert&quot;.</span>
{<span class="hljs-built_in">object</span>}.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the {object} to an organization with the name &quot;my-finetuned-bert&quot;.</span>
{<span class="hljs-built_in">object</span>}.push_to_hub(<span class="hljs-string">&quot;huggingface/my-finetuned-bert&quot;</span>)`,wrap:!1}}),{c(){d=r("p"),d.textContent=C,y=o(),c(b.$$.fragment)},l(i){d=a(i,"P",{"data-svelte-h":!0}),l(d)!=="svelte-kvfsh7"&&(d.textContent=C),y=n(i),p(b.$$.fragment,i)},m(i,J){_(i,d,J),_(i,y,J),h(b,i,J),w=!0},p:z,i(i){w||(f(b.$$.fragment,i),w=!0)},o(i){u(b.$$.fragment,i),w=!1},d(i){i&&(s(d),s(y)),g(b,i)}}}function gh(j){let d,C,y,b,w,i,J,Gm=`The base classes <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a>, <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>, and
<a href="/docs/transformers/main/en/main_classes/model#transformers.FlaxPreTrainedModel">FlaxPreTrainedModel</a> implement the common methods for loading/saving a model either from a local
file or directory, or from a pretrained model configuration provided by the library (downloaded from HuggingFace’s AWS
S3 repository).`,Ea,Tt,Bm=`<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> and <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> also implement a few methods which
are common among all the models to:`,Ya,xt,zm="<li>resize the input token embeddings when new tokens are added to the vocabulary</li> <li>prune the attention heads of the model.</li>",Na,wt,Lm=`The other methods that are common to each model are defined in <a href="/docs/transformers/main/en/main_classes/model#transformers.modeling_utils.ModuleUtilsMixin">ModuleUtilsMixin</a>
(for the PyTorch models) and <code>~modeling_tf_utils.TFModuleUtilsMixin</code> (for the TensorFlow models) or
for text generation, <a href="/docs/transformers/main/en/main_classes/text_generation#transformers.GenerationMixin">GenerationMixin</a> (for the PyTorch models),
<a href="/docs/transformers/main/en/main_classes/text_generation#transformers.TFGenerationMixin">TFGenerationMixin</a> (for the TensorFlow models) and
<a href="/docs/transformers/main/en/main_classes/text_generation#transformers.FlaxGenerationMixin">FlaxGenerationMixin</a> (for the Flax/JAX models).`,Qa,$t,Da,$,kt,pi,Jn,Vm="Base class for all models.",hi,Cn,Hm=`<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models as well as a few methods common to all models to:`,fi,Un,Xm="<li>resize the input embeddings,</li> <li>prune heads in the self-attention heads.</li>",ui,jn,Rm="Class attributes (overridden by derived classes):",gi,Zn,qm=`<li><p><strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) — A subclass of <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> to use as configuration class
for this model architecture.</p></li> <li><p><strong>load_tf_weights</strong> (<code>Callable</code>) — A python <em>method</em> for loading a TensorFlow checkpoint in a PyTorch model,
taking as arguments:</p> <ul><li><strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a>) — An instance of the model on which to load the TensorFlow checkpoint.</li> <li><strong>config</strong> (<code>PreTrainedConfig</code>) — An instance of the configuration associated to the model.</li> <li><strong>path</strong> (<code>str</code>) — A path to the TensorFlow checkpoint.</li></ul></li> <li><p><strong>base_model_prefix</strong> (<code>str</code>) — A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.</p></li> <li><p><strong>is_parallelizable</strong> (<code>bool</code>) — A flag indicating whether this model supports model parallelization.</p></li> <li><p><strong>main_input_name</strong> (<code>str</code>) — The name of the principal input to the model (often <code>input_ids</code> for NLP
models, <code>pixel_values</code> for vision models and <code>input_values</code> for speech models).</p></li>`,bi,D,Pt,_i,Fn,Em="Upload the model file to the 🤗 Model Hub.",yi,be,vi,S,Jt,Mi,In,Ym=`Add custom tags into the model that gets pushed to the Hugging Face Hub. Will
not overwrite existing tags in the model.`,Ti,_e,xi,ye,Ct,wi,Wn,Nm="Returns whether this model can generate sequences with <code>.generate()</code>.",$i,ve,Ut,ki,Gn,Qm="Removes the <code>_require_grads_hook</code>.",Pi,Me,jt,Ji,Bn,Dm=`Enables the gradients for the input embeddings. This is useful for fine-tuning adapter weights while keeping
the model weights fixed.`,Ci,Z,Zt,Ui,zn,Sm="Instantiate a pretrained pytorch model from a pre-trained model configuration.",ji,Ln,Am=`The model is set in evaluation mode by default using <code>model.eval()</code> (Dropout modules are deactivated). To train
the model, you should first set it back in training mode with <code>model.train()</code>.`,Zi,Vn,Om=`The warning <em>Weights from XXX not initialized from pretrained model</em> means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`,Fi,Hn,Km=`The warning <em>Weights from XXX not used in YYY</em> means that the layer XXX is not used by YYY, therefore those
weights are discarded.`,Ii,Te,Wi,xe,Gi,Xn,ec="<li><code>low_cpu_mem_usage</code> algorithm:</li>",Bi,Rn,tc="This is an experimental function that loads the model using ~1x model size CPU memory",zi,qn,oc="Here is how it works:",Li,En,nc=`<li>save which state_dict keys we have</li> <li>drop state_dict before the model is created, since the latter takes 1x model size CPU memory</li> <li>after the model has been instantiated switch to the meta device all params/buffers that
are going to be replaced from the loaded state_dict</li> <li>load state_dict 2nd time</li> <li>replace the params/buffers from the state_dict</li>`,Vi,Yn,rc="Currently, it can’t handle deepspeed ZeRO stage 3 and ignores loading errors",Hi,we,Ft,Xi,Nn,ac="Returns the model’s input embeddings.",Ri,$e,It,qi,Qn,sc=`Get the memory footprint of a model. This will return the memory footprint of the current model in bytes.
Useful to benchmark the memory footprint of the current model and design some tests. Solution inspired from the
PyTorch discussions: <a href="https://discuss.pytorch.org/t/gpu-memory-that-model-uses/56822/2" rel="nofollow">https://discuss.pytorch.org/t/gpu-memory-that-model-uses/56822/2</a>`,Ei,ke,Wt,Yi,Dn,ic="Returns the model’s output embeddings.",Ni,A,Gt,Qi,Sn,lc="Deactivates gradient checkpointing for the current model.",Di,An,dc=`Note that in other frameworks this feature can be referred to as “activation checkpointing” or “checkpoint
activations”.`,Si,H,Bt,Ai,On,mc="Activates gradient checkpointing for the current model.",Oi,Kn,cc=`Note that in other frameworks this feature can be referred to as “activation checkpointing” or “checkpoint
activations”.`,Ki,er,pc=`We pass the <code>__call__</code> method of the modules instead of <code>forward</code> because <code>__call__</code> attaches all the hooks of
the module. <a href="https://discuss.pytorch.org/t/any-different-between-model-input-and-model-forward-input/3690/2" rel="nofollow">https://discuss.pytorch.org/t/any-different-between-model-input-and-model-forward-input/3690/2</a>`,el,Pe,zt,tl,tr,hc=`If needed prunes and maybe initializes weights. If using a custom <code>PreTrainedModel</code>, you need to implement any
initialization logic in <code>_init_weights</code>.`,ol,Je,Lt,nl,or,fc=`A method executed at the end of each Transformer model initialization, to execute code that needs the model’s
modules properly initialized (such as weight initialization).`,rl,Ce,Vt,al,nr,uc="Prunes heads of the base model.",sl,O,Ht,il,rr,gc=`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`,ll,Ue,dl,K,Xt,ml,ar,bc="Resizes input token embeddings matrix of the model if <code>new_num_tokens != config.vocab_size</code>.",cl,sr,_c="Takes care of tying weights embeddings afterwards if the model class has a <code>tie_weights()</code> method.",pl,je,Rt,hl,ir,yc=`Reverts the transformation from <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.to_bettertransformer">to_bettertransformer()</a> so that the original modeling is
used, for example in order to save the model.`,fl,Ze,qt,ul,lr,vc=`Save a model and its configuration file to a directory, so that it can be re-loaded using the
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> class method.`,gl,Fe,Et,bl,dr,Mc="Set model’s input embeddings.",_l,ee,Yt,yl,mr,Tc="Tie the weights between the input embeddings and the output embeddings.",vl,cr,xc=`If the <code>torchscript</code> flag is set in the configuration, can’t handle parameter sharing so we are cloning the
weights instead.`,Ml,te,Nt,Tl,pr,wc=`Converts the model to use <a href="https://pytorch.org/docs/stable/generated/torch.nn.MultiheadAttention.html" rel="nofollow">PyTorch’s native attention
implementation</a>, integrated to
Transformers through <a href="https://huggingface.co/docs/optimum/bettertransformer/overview" rel="nofollow">Optimum library</a>. Only a
subset of all Transformers models are supported.`,xl,hr,$c=`PyTorch’s attention fastpath allows to speed up inference through kernel fusions and the use of <a href="https://pytorch.org/docs/stable/nested.html" rel="nofollow">nested
tensors</a>. Detailed benchmarks can be found in <a href="https://medium.com/pytorch/bettertransformer-out-of-the-box-performance-for-huggingface-transformers-3fbe27d50ab2" rel="nofollow">this blog
post</a>.`,wl,Ie,Qt,$l,fr,kc="Shows a one-time warning if the input_ids appear to contain padding and no attention mask was given.",Sa,ur,Aa,Dt,Oa,St,Pc='In Transformers 4.20.0, the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method has been reworked to accommodate large models using <a href="https://huggingface.co/docs/accelerate/big_modeling" rel="nofollow">Accelerate</a>. This requires Accelerate &gt;= 0.9.0 and PyTorch &gt;= 1.9.0. Instead of creating the full model, then loading the pretrained weights inside it (which takes twice the size of the model in RAM, one for the randomly initialized model, one for the weights), there is an option to create the model as an empty shell, then only materialize its parameters when the pretrained weights are loaded.',Ka,At,Jc="This option can be activated with <code>low_cpu_mem_usage=True</code>. The model is first created on the Meta device (with empty weights) and the state dict is then loaded inside it (shard by shard in the case of a sharded checkpoint). This way the maximum RAM used is the full size of the model only.",es,Ot,ts,Kt,Cc="Moreover, you can directly place the model on different devices if it doesn’t fully fit in RAM (only works for inference for now). With <code>device_map=&quot;auto&quot;</code>, Accelerate will determine where to put each layer to maximize the use of your fastest devices (GPUs) and offload the rest on the CPU, or even the hard drive if you don’t have enough GPU RAM (or CPU RAM). Even if the model is split across several devices, it will run as you would normally expect.",os,eo,Uc="When passing a <code>device_map</code>, <code>low_cpu_mem_usage</code> is automatically set to <code>True</code>, so you don’t need to specify it:",ns,to,rs,oo,jc="You can inspect how the model was split across devices by looking at its <code>hf_device_map</code> attribute:",as,no,ss,ro,is,ao,Zc="You can also write your own device map following the same format (a dictionary layer name to device). It should map all parameters of the model to a given device, but you don’t have to detail where all the submodules of one layer go if that layer is entirely on the same device. For instance, the following device map would work properly for T0pp (as long as you have the GPU memory):",ls,so,ds,io,Fc="Another way to minimize the memory impact of your model is to instantiate it at a lower precision dtype (like <code>torch.float16</code>) or use direct quantization techniques as described below.",ms,lo,cs,mo,Ic=`Under Pytorch a model normally gets instantiated with <code>torch.float32</code> format. This can be an issue if one tries to
load a model whose weights are in fp16, since it’d require twice as much memory. To overcome this limitation, you can
either explicitly pass the desired <code>dtype</code> using <code>torch_dtype</code> argument:`,ps,co,hs,po,Wc=`or, if you want the model to always load in the most optimal memory pattern, you can use the special value <code>&quot;auto&quot;</code>,
and then <code>dtype</code> will be automatically derived from the model’s weights:`,fs,ho,us,fo,Gc="Models instantiated from scratch can also be told which <code>dtype</code> to use with:",gs,uo,bs,go,Bc="Due to Pytorch design, this functionality is only available for floating dtypes.",_s,bo,ys,W,_o,kl,gr,zc="A few utilities for <code>torch.nn.Modules</code>, to be used as a mixin.",Pl,oe,yo,Jl,br,Lc="Add a memory hook before and after each sub-module forward pass to record increase in memory consumption.",Cl,_r,Vc=`Increase in memory consumption is stored in a <code>mem_rss_diff</code> attribute for each module and can be reset to zero
with <code>model.reset_memory_hooks_state()</code>.`,Ul,We,vo,jl,yr,Hc="Helper function to estimate the total number of tokens from the model inputs.",Zl,Ge,Mo,Fl,vr,Xc=`Get number of (optionally, non-embeddings) floating-point operations for the forward and backward passes of a
batch with this transformer model. Default approximation neglects the quadratic dependency on the number of
tokens (valid if <code>12 * d_model &lt;&lt; sequence_length</code>) as laid out in <a href="https://arxiv.org/pdf/2001.08361.pdf" rel="nofollow">this
paper</a> section 2.1. Should be overridden for transformers with parameter
re-use e.g. Albert or Universal Transformers, or if doing long-range modeling with very high sequence lengths.`,Il,Be,To,Wl,Mr,Rc="Makes broadcastable attention and causal masks so that future and masked tokens are ignored.",Gl,ze,xo,Bl,Tr,qc="Prepare the head mask if needed.",zl,Le,wo,Ll,xr,Ec="Invert an attention mask (e.g., switches 0. and 1.).",Vl,Ve,$o,Hl,wr,Yc="Get number of (optionally, trainable or non-embeddings) parameters in the module.",Xl,He,ko,Rl,$r,Nc='Reset the <code>mem_rss_diff</code> attribute of each module (see <a href="/docs/transformers/main/en/main_classes/model#transformers.modeling_utils.ModuleUtilsMixin.add_memory_hooks">add_memory_hooks()</a>).',vs,Po,Ms,x,Jo,ql,kr,Qc="Base class for all TF models.",El,Pr,Dc=`<a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models as well as a few methods common to all models to:`,Yl,Jr,Sc="<li>resize the input embeddings,</li> <li>prune heads in the self-attention heads.</li>",Nl,Cr,Ac="Class attributes (overridden by derived classes):",Ql,Ur,Oc=`<li><strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) — A subclass of <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> to use as configuration class
for this model architecture.</li> <li><strong>base_model_prefix</strong> (<code>str</code>) — A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.</li> <li><strong>main_input_name</strong> (<code>str</code>) — The name of the principal input to the model (often <code>input_ids</code> for NLP
models, <code>pixel_values</code> for vision models and <code>input_values</code> for speech models).</li>`,Dl,ne,Co,Sl,jr,Kc="Upload the model files to the 🤗 Model Hub while synchronizing a local clone of the repo in <code>repo_path_or_name</code>.",Al,Xe,Ol,Re,Uo,Kl,Zr,ep="Returns whether this model can generate sequences with <code>.generate()</code>.",ed,qe,jo,td,Fr,tp=`This is a thin wrapper that sets the model’s loss output head as the loss if the user does not specify a loss
function themselves.`,od,Ee,Zo,nd,Ir,op="Creates a draft of a model card using the information available to the <code>Trainer</code>.",rd,L,Fo,ad,Wr,np="Instantiate a pretrained TF 2.0 model from a pre-trained model configuration.",sd,Gr,rp=`The warning <em>Weights from XXX not initialized from pretrained model</em> means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`,id,Br,ap=`The warning <em>Weights from XXX not used in YYY</em> means that the layer XXX is not used by YYY, therefore those
weights are discarded.`,ld,Ye,dd,Ne,Io,md,zr,sp="Dict of bias attached to an LM head. The key represents the name of the bias attribute.",cd,Qe,Wo,pd,Lr,ip="Prepare the head mask if needed.",hd,De,Go,fd,Vr,lp="Returns the model’s input embeddings layer.",ud,Se,Bo,gd,Hr,dp="The LM Head layer. This method must be overwritten by all the models that have a lm head.",bd,Ae,zo,_d,Xr,mp="Returns the model’s output embeddings",yd,Oe,Lo,vd,Rr,cp=`Get the layer that handles a bias attribute in case the model has an LM head with weights tied to the
embeddings`,Md,Ke,Vo,Td,qr,pp="Get the concatenated _prefix name of the bias from the model name to the parent layer",xd,et,Ho,wd,Er,hp=`Wraps a HuggingFace <a href="https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset" rel="nofollow">Dataset</a> as a <code>tf.data.Dataset</code> with collation and batching. This method is
designed to create a “ready-to-use” dataset that can be passed directly to Keras methods like <code>fit()</code> without
further modification. The method will drop columns from the dataset if they don’t match input names for the
model. If you want to specify the column names to return rather than using the names that match this model, we
recommend using <code>Dataset.to_tf_dataset()</code> instead.`,$d,tt,Xo,kd,Yr,fp="Prunes heads of the base model.",Pd,re,Ro,Jd,Nr,up=`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`,Cd,ot,Ud,ae,qo,jd,Qr,gp="Resizes input token embeddings matrix of the model if <code>new_num_tokens != config.vocab_size</code>.",Zd,Dr,bp="Takes care of tying weights embeddings afterwards if the model class has a <code>tie_weights()</code> method.",Fd,nt,Eo,Id,Sr,_p=`Save a model and its configuration file to a directory, so that it can be re-loaded using the
<a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> class method.`,Wd,Ar,Yo,Gd,rt,No,Bd,Or,yp="Prepare the output of the saved model. Can be overridden if specific serving modifications are required.",zd,at,Qo,Ld,Kr,vp="Set all the bias in the LM head.",Vd,st,Do,Hd,ea,Mp="Set model’s input embeddings",Xd,it,So,Rd,ta,Tp="Set model’s output embeddings",qd,lt,Ao,Ed,oa,xp=`A modification of Keras’s default <code>train_step</code> that correctly handles matching outputs to labels for our models
and supports directly training on the loss output head. In addition, it ensures input keys are copied to the
labels where appropriate. It will also copy label keys into the input dict when using the dummy loss, to ensure
that they are available to the model during the forward pass.`,Yd,dt,Oo,Nd,na,wp=`A modification of Keras’s default <code>train_step</code> that correctly handles matching outputs to labels for our models
and supports directly training on the loss output head. In addition, it ensures input keys are copied to the
labels where appropriate. It will also copy label keys into the input dict when using the dummy loss, to ensure
that they are available to the model during the forward pass.`,Ts,Ko,xs,q,en,Qd,ra,$p="A few utilities for <code>keras.Model</code>, to be used as a mixin.",Dd,mt,tn,Sd,aa,kp="Get the number of (optionally, trainable) parameters in the model.",ws,on,$s,U,nn,Ad,sa,Pp="Base class for all models.",Od,ia,Jp=`<a href="/docs/transformers/main/en/main_classes/model#transformers.FlaxPreTrainedModel">FlaxPreTrainedModel</a> takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models.`,Kd,la,Cp="Class attributes (overridden by derived classes):",em,da,Up=`<li><strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) — A subclass of <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> to use as configuration class
for this model architecture.</li> <li><strong>base_model_prefix</strong> (<code>str</code>) — A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.</li> <li><strong>main_input_name</strong> (<code>str</code>) — The name of the principal input to the model (often <code>input_ids</code> for NLP
models, <code>pixel_values</code> for vision models and <code>input_values</code> for speech models).</li>`,tm,se,rn,om,ma,jp="Upload the model checkpoint to the 🤗 Model Hub.",nm,ct,rm,pt,an,am,ca,Zp=`Returns whether this model can generate sequences with <code>.generate()</code>. Returns:
<code>bool</code>: Whether this model can generate sequences with <code>.generate()</code>.`,sm,V,sn,im,pa,Fp="Instantiate a pretrained flax model from a pre-trained model configuration.",lm,ha,Ip=`The warning <em>Weights from XXX not initialized from pretrained model</em> means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`,dm,fa,Wp=`The warning <em>Weights from XXX not used in YYY</em> means that the layer XXX is not used by YYY, therefore those
weights are discarded.`,mm,ht,cm,ie,ln,pm,ua,Gp=`This is the same as <code>flax.serialization.from_bytes</code>
(https:lax.readthedocs.io/en/latest/_modules/flax/serialization.html#from_bytes) but for a sharded checkpoint.`,hm,ga,Bp=`This load is performed efficiently: each checkpoint shard is loaded one by one in RAM and deleted after being
loaded in the model.`,fm,le,dn,um,ba,zp=`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`,gm,ft,bm,ut,mn,_m,_a,Lp=`Save a model and its configuration file to a directory, so that it can be re-loaded using the
<code>[from_pretrained()](/docs/transformers/main/en/main_classes/model#transformers.FlaxPreTrainedModel.from_pretrained)</code> class method`,ym,X,cn,vm,ya,Vp=`Cast the floating-point <code>params</code> to <code>jax.numpy.bfloat16</code>. This returns a new <code>params</code> tree and does not cast
the <code>params</code> in place.`,Mm,va,Hp=`This method can be used on TPU to explicitly convert the model parameters to bfloat16 precision to do full
half-precision training or to save weights in bfloat16 for inference in order to save memory and improve speed.`,Tm,gt,xm,R,pn,wm,Ma,Xp=`Cast the floating-point <code>parmas</code> to <code>jax.numpy.float16</code>. This returns a new <code>params</code> tree and does not cast the
<code>params</code> in place.`,$m,Ta,Rp=`This method can be used on GPU to explicitly convert the model parameters to float16 precision to do full
half-precision training or to save weights in float16 for inference in order to save memory and improve speed.`,km,bt,Pm,de,hn,Jm,xa,qp=`Cast the floating-point <code>parmas</code> to <code>jax.numpy.float32</code>. This method can be used to explicitly convert the
model parameters to fp32 precision. This returns a new <code>params</code> tree and does not cast the <code>params</code> in place.`,Cm,_t,ks,fn,Ps,E,un,Um,wa,Ep="A Mixin containing the functionality to push a model or tokenizer to the hub.",jm,me,gn,Zm,$a,Yp="Upload the {object_files} to the 🤗 Model Hub.",Fm,yt,Js,bn,Cs,Y,_n,Im,ka,Np=`This is the same as
<a href="https://pytorch.org/docs/stable/generated/torch.nn.Module.html?highlight=load_state_dict#torch.nn.Module.load_state_dict" rel="nofollow"><code>torch.nn.Module.load_state_dict</code></a>
but for a sharded checkpoint.`,Wm,Pa,Qp=`This load is performed efficiently: each checkpoint shard is loaded one by one in RAM and deleted after being
loaded in the model.`,Us,qa,js;return w=new he({props:{title:"Models",local:"models",headingTag:"h1"}}),$t=new he({props:{title:"PreTrainedModel",local:"transformers.PreTrainedModel",headingTag:"h2"}}),kt=new T({props:{name:"class transformers.PreTrainedModel",anchor:"transformers.PreTrainedModel",parameters:[{name:"config",val:": PretrainedConfig"},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L1127"}}),Pt=new T({props:{name:"push_to_hub",anchor:"transformers.PreTrainedModel.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"use_temp_dir",val:": Optional = None"},{name:"commit_message",val:": Optional = None"},{name:"private",val:": Optional = None"},{name:"token",val:": Union = None"},{name:"max_shard_size",val:": Union = '5GB'"},{name:"create_pr",val:": bool = False"},{name:"safe_serialization",val:": bool = True"},{name:"revision",val:": str = None"},{name:"commit_description",val:": str = None"},{name:"tags",val:": Optional = None"},{name:"**deprecated_kwargs",val:""}],parametersDescription:[{anchor:"transformers.PreTrainedModel.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The name of the repository you want to push your model to. It should contain your organization name
when pushing to a given organization.`,name:"repo_id"},{anchor:"transformers.PreTrainedModel.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to use a temporary directory to store the files saved before they are pushed to the Hub.
Will default to <code>True</code> if there is no directory named like <code>repo_id</code>, <code>False</code> otherwise.`,name:"use_temp_dir"},{anchor:"transformers.PreTrainedModel.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;Upload model&quot;</code>.`,name:"commit_message"},{anchor:"transformers.PreTrainedModel.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private.`,name:"private"},{anchor:"transformers.PreTrainedModel.push_to_hub.token",description:`<strong>token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if <code>repo_url</code>
is not specified.`,name:"token"},{anchor:"transformers.PreTrainedModel.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;5GB&quot;</code>) &#x2014;
Only applicable for models. The maximum size for a checkpoint before being sharded. Checkpoints shard
will then be each of size lower than this size. If expressed as a string, needs to be digits followed
by a unit (like <code>&quot;5MB&quot;</code>). We default it to <code>&quot;5GB&quot;</code> so that users can easily load models on free-tier
Google Colab instances without any CPU OOM issues.`,name:"max_shard_size"},{anchor:"transformers.PreTrainedModel.push_to_hub.create_pr",description:`<strong>create_pr</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to create a PR with the uploaded files or directly commit.`,name:"create_pr"},{anchor:"transformers.PreTrainedModel.push_to_hub.safe_serialization",description:`<strong>safe_serialization</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to convert the model weights in safetensors format for safer serialization.`,name:"safe_serialization"},{anchor:"transformers.PreTrainedModel.push_to_hub.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Branch to push the uploaded files to.`,name:"revision"},{anchor:"transformers.PreTrainedModel.push_to_hub.commit_description",description:`<strong>commit_description</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The description of the commit that will be created`,name:"commit_description"},{anchor:"transformers.PreTrainedModel.push_to_hub.tags",description:`<strong>tags</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
List of tags to push on the Hub.`,name:"tags"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/utils/hub.py#L768"}}),be=new Q({props:{anchor:"transformers.PreTrainedModel.push_to_hub.example",$$slots:{default:[th]},$$scope:{ctx:j}}}),Jt=new T({props:{name:"add_model_tags",anchor:"transformers.PreTrainedModel.add_model_tags",parameters:[{name:"tags",val:": Union"}],parametersDescription:[{anchor:"transformers.PreTrainedModel.add_model_tags.tags",description:`<strong>tags</strong> (<code>Union[List[str], str]</code>) &#x2014;
The desired tags to inject in the model`,name:"tags"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L1240"}}),_e=new Q({props:{anchor:"transformers.PreTrainedModel.add_model_tags.example",$$slots:{default:[oh]},$$scope:{ctx:j}}}),Ct=new T({props:{name:"can_generate",anchor:"transformers.PreTrainedModel.can_generate",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L1412",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Whether this model can generate sequences with <code>.generate()</code>.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>bool</code></p>
`}}),Ut=new T({props:{name:"disable_input_require_grads",anchor:"transformers.PreTrainedModel.disable_input_require_grads",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L1557"}}),jt=new T({props:{name:"enable_input_require_grads",anchor:"transformers.PreTrainedModel.enable_input_require_grads",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L1546"}}),Zt=new T({props:{name:"from_pretrained",anchor:"transformers.PreTrainedModel.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": Union"},{name:"*model_args",val:""},{name:"config",val:": Union = None"},{name:"cache_dir",val:": Union = None"},{name:"ignore_mismatched_sizes",val:": bool = False"},{name:"force_download",val:": bool = False"},{name:"local_files_only",val:": bool = False"},{name:"token",val:": Union = None"},{name:"revision",val:": str = 'main'"},{name:"use_safetensors",val:": bool = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.PreTrainedModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
<li>A path or url to a model folder containing a <em>flax checkpoint file</em> in <em>.msgpack</em> format (e.g,
<code>./flax_model/</code> containing <code>flax_model.msgpack</code>). In this case, <code>from_flax</code> should be set to
<code>True</code>.</li>
<li><code>None</code> if you are both providing the configuration and state dictionary (resp. with keyword
arguments <code>config</code> and <code>state_dict</code>).</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.PreTrainedModel.from_pretrained.model_args",description:`<strong>model_args</strong> (sequence of positional arguments, <em>optional</em>) &#x2014;
All remaining positional arguments will be passed to the underlying model&#x2019;s <code>__init__</code> method.`,name:"model_args"},{anchor:"transformers.PreTrainedModel.from_pretrained.config",description:`<strong>config</strong> (<code>Union[PretrainedConfig, str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>an instance of a class derived from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>,</li>
<li>a string or path valid as input to <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>.</li>
</ul>
<p>Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.PreTrainedModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<code>Dict[str, torch.Tensor]</code>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.PreTrainedModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>Union[str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.PreTrainedModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.PreTrainedModel.from_pretrained.from_flax",description:`<strong>from_flax</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a Flax checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_flax"},{anchor:"transformers.PreTrainedModel.from_pretrained.ignore_mismatched_sizes",description:`<strong>ignore_mismatched_sizes</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to raise an error if some of the weights from the checkpoint do not have the same size
as the weights of the model (if for instance, you are instantiating a model with 10 labels from a
checkpoint with 3 labels).`,name:"ignore_mismatched_sizes"},{anchor:"transformers.PreTrainedModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.PreTrainedModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.PreTrainedModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.PreTrainedModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.PreTrainedModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (i.e., do not try to download the model).`,name:"local_files_only(bool,"},{anchor:"transformers.PreTrainedModel.from_pretrained.token",description:`<strong>token</strong> (<code>str</code> or <code>bool</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, or not specified, will use
the token generated when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"token"},{anchor:"transformers.PreTrainedModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>To test a pull request you made on the Hub, you can pass \`revision=&#x201C;refs/pr/<pr_number>&#x201C;.</pr_number></p>

					</div>`,name:"revision"},{anchor:"transformers.PreTrainedModel.from_pretrained.mirror",description:`<strong>mirror</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Mirror source to accelerate downloads in China. If you are from China and have an accessibility
problem, you can set this option to resolve it. Note that we do not guarantee the timeliness or safety.
Please refer to the mirror site for more information.`,name:"mirror"},{anchor:"transformers.PreTrainedModel.from_pretrained._fast_init(bool,",description:`<strong>_fast_init(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to disable fast initialization.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>One should only disable <em>_fast_init</em> to ensure backwards compatibility with <code>transformers.__version__ &lt; 4.6.0</code> for seeded model initialization. This argument will be removed at the next major version. See
<a href="https://github.com/huggingface/transformers/pull/11471" rel="nofollow">pull request 11471</a> for more information.</p>

					</div>`,name:"_fast_init(bool,"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L2578",parameterGroups:[{title:"Parameters for big model inference",parametersDescription:[{anchor:"transformers.PreTrainedModel.from_pretrained.low_cpu_mem_usage(bool,",description:`<strong>low_cpu_mem_usage(<code>bool</code>,</strong> <em>optional</em>) &#x2014;
Tries to not use more than 1x model size in CPU memory (including peak memory) while loading the model.
This is an experimental feature and a subject to change at any moment.`,name:"low_cpu_mem_usage(bool,"},{anchor:"transformers.PreTrainedModel.from_pretrained.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Override the default <code>torch.dtype</code> and load the model under a specific <code>dtype</code>. The different options
are:</p>
<ol>
<li>
<p><code>torch.float16</code> or <code>torch.bfloat16</code> or <code>torch.float</code>: load in a specified
<code>dtype</code>, ignoring the model&#x2019;s <code>config.torch_dtype</code> if one exists. If not specified</p>
<ul>
<li>the model will get loaded in <code>torch.float</code> (fp32).</li>
</ul>
</li>
<li>
<p><code>&quot;auto&quot;</code> - A <code>torch_dtype</code> entry in the <code>config.json</code> file of the model will be
attempted to be used. If this entry isn&#x2019;t found then next check the <code>dtype</code> of the first weight in
the checkpoint that&#x2019;s of a floating point type and use that as <code>dtype</code>. This will load the model
using the <code>dtype</code> it was saved in at the end of the training. It can&#x2019;t be used as an indicator of how
the model was trained. Since it could be trained in one of half precision dtypes, but saved in fp32.</p>
</li>
</ol>
<tip>
<p>For some models the <code>dtype</code> they were trained in is unknown - you may try to check the model&#x2019;s paper or
reach out to the authors and ask them to add this information to the model&#x2019;s card and to insert the
<code>torch_dtype</code> entry in <code>config.json</code> on the hub.</p>
</tip>`,name:"torch_dtype"},{anchor:"transformers.PreTrainedModel.from_pretrained.device_map",description:`<strong>device_map</strong> (<code>str</code> or <code>Dict[str, Union[int, str, torch.device]]</code> or <code>int</code> or <code>torch.device</code>, <em>optional</em>) &#x2014;
A map that specifies where each submodule should go. It doesn&#x2019;t need to be refined to each
parameter/buffer name, once a given module name is inside, every submodule of it will be sent to the
same device. If we only pass the device (<em>e.g.</em>, <code>&quot;cpu&quot;</code>, <code>&quot;cuda:1&quot;</code>, <code>&quot;mps&quot;</code>, or a GPU ordinal rank
like <code>1</code>) on which the model will be allocated, the device map will map the entire model to this
device. Passing <code>device_map = 0</code> means put the whole model on GPU 0.</p>
<p>To have Accelerate compute the most optimized <code>device_map</code> automatically, set <code>device_map=&quot;auto&quot;</code>. For
more information about each option see <a href="https://hf.co/docs/accelerate/main/en/usage_guides/big_modeling#designing-a-device-map" rel="nofollow">designing a device
map</a>.`,name:"device_map"},{anchor:"transformers.PreTrainedModel.from_pretrained.max_memory",description:`<strong>max_memory</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
A dictionary device identifier to maximum memory. Will default to the maximum memory available for each
GPU and the available CPU RAM if unset.`,name:"max_memory"},{anchor:"transformers.PreTrainedModel.from_pretrained.offload_folder",description:`<strong>offload_folder</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
If the <code>device_map</code> contains any value <code>&quot;disk&quot;</code>, the folder where we will offload weights.`,name:"offload_folder"},{anchor:"transformers.PreTrainedModel.from_pretrained.offload_state_dict",description:`<strong>offload_state_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If <code>True</code>, will temporarily offload the CPU state dict to the hard drive to avoid getting out of CPU
RAM if the weight of the CPU state dict + the biggest shard of the checkpoint does not fit. Defaults to
<code>True</code> when there is some disk offload.`,name:"offload_state_dict"},{anchor:"transformers.PreTrainedModel.from_pretrained.quantization_config",description:`<strong>quantization_config</strong> (<code>Union[QuantizationConfigMixin,Dict]</code>, <em>optional</em>) &#x2014;
A dictionary of configuration parameters or a QuantizationConfigMixin object for quantization (e.g
bitsandbytes, gptq). There may be other quantization-related kwargs, including <code>load_in_4bit</code> and
<code>load_in_8bit</code>, which are parsed by QuantizationConfigParser. Supported only for bitsandbytes
quantizations and not preferred. consider inserting all such arguments into quantization_config
instead.`,name:"quantization_config"},{anchor:"transformers.PreTrainedModel.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&quot;</code>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co, you can
specify the folder name here.`,name:"subfolder"},{anchor:"transformers.PreTrainedModel.from_pretrained.variant",description:`<strong>variant</strong> (<code>str</code>, <em>optional</em>) &#x2014;
If specified load weights from <code>variant</code> filename, <em>e.g.</em> pytorch_model.<variant>.bin. <code>variant</code> is
ignored when using <code>from_tf</code> or <code>from_flax</code>.</variant>`,name:"variant"},{anchor:"transformers.PreTrainedModel.from_pretrained.use_safetensors",description:`<strong>use_safetensors</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Whether or not to use <code>safetensors</code> checkpoints. Defaults to <code>None</code>. If not specified and <code>safetensors</code>
is not installed, it will be set to <code>False</code>.`,name:"use_safetensors"},{anchor:"transformers.PreTrainedModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (remaining dictionary of keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}]}}),Te=new ci({props:{$$slots:{default:[nh]},$$scope:{ctx:j}}}),xe=new Q({props:{anchor:"transformers.PreTrainedModel.from_pretrained.example",$$slots:{default:[rh]},$$scope:{ctx:j}}}),Ft=new T({props:{name:"get_input_embeddings",anchor:"transformers.PreTrainedModel.get_input_embeddings",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L1563",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A torch module mapping vocabulary to hidden states.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>nn.Module</code></p>
`}}),It=new T({props:{name:"get_memory_footprint",anchor:"transformers.PreTrainedModel.get_memory_footprint",parameters:[{name:"return_buffers",val:" = True"}],parametersDescription:[{anchor:"transformers.PreTrainedModel.get_memory_footprint.return_buffers",description:`<strong>return_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to return the size of the buffer tensors in the computation of the memory footprint. Buffers
are tensors that do not require gradients and not registered as parameters. E.g. mean and std in batch
norm layers. Please see: <a href="https://discuss.pytorch.org/t/what-pytorch-means-by-buffers/120266/2" rel="nofollow">https://discuss.pytorch.org/t/what-pytorch-means-by-buffers/120266/2</a>`,name:"return_buffers"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L2501"}}),Wt=new T({props:{name:"get_output_embeddings",anchor:"transformers.PreTrainedModel.get_output_embeddings",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L1589",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A torch module mapping hidden states to vocabulary.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>nn.Module</code></p>
`}}),Gt=new T({props:{name:"gradient_checkpointing_disable",anchor:"transformers.PreTrainedModel.gradient_checkpointing_disable",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L2141"}}),Bt=new T({props:{name:"gradient_checkpointing_enable",anchor:"transformers.PreTrainedModel.gradient_checkpointing_enable",parameters:[{name:"gradient_checkpointing_kwargs",val:" = None"}],parametersDescription:[{anchor:"transformers.PreTrainedModel.gradient_checkpointing_enable.gradient_checkpointing_kwargs",description:`<strong>gradient_checkpointing_kwargs</strong> (dict, <em>optional</em>) &#x2014;
Additional keyword arguments passed along to the <code>torch.utils.checkpoint.checkpoint</code> function.`,name:"gradient_checkpointing_kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L2077"}}),zt=new T({props:{name:"init_weights",anchor:"transformers.PreTrainedModel.init_weights",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L2043"}}),Lt=new T({props:{name:"post_init",anchor:"transformers.PreTrainedModel.post_init",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L1226"}}),Vt=new T({props:{name:"prune_heads",anchor:"transformers.PreTrainedModel.prune_heads",parameters:[{name:"heads_to_prune",val:": Dict"}],parametersDescription:[{anchor:"transformers.PreTrainedModel.prune_heads.heads_to_prune",description:`<strong>heads_to_prune</strong> (<code>Dict[int, List[int]]</code>) &#x2014;
Dictionary with keys being selected layer indices (<code>int</code>) and associated values being the list of heads
to prune in said layer (list of <code>int</code>). For instance {1: [0, 2], 2: [2, 3]} will prune heads 0 and 2 on
layer 1 and heads 2 and 3 on layer 2.`,name:"heads_to_prune"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L2060"}}),Ht=new T({props:{name:"register_for_auto_class",anchor:"transformers.PreTrainedModel.register_for_auto_class",parameters:[{name:"auto_class",val:" = 'AutoModel'"}],parametersDescription:[{anchor:"transformers.PreTrainedModel.register_for_auto_class.auto_class",description:`<strong>auto_class</strong> (<code>str</code> or <code>type</code>, <em>optional</em>, defaults to <code>&quot;AutoModel&quot;</code>) &#x2014;
The auto class to register this new model with.`,name:"auto_class"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L4080"}}),Ue=new ci({props:{warning:!0,$$slots:{default:[ah]},$$scope:{ctx:j}}}),Xt=new T({props:{name:"resize_token_embeddings",anchor:"transformers.PreTrainedModel.resize_token_embeddings",parameters:[{name:"new_num_tokens",val:": Optional = None"},{name:"pad_to_multiple_of",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.PreTrainedModel.resize_token_embeddings.new_num_tokens",description:`<strong>new_num_tokens</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The new number of tokens in the embedding matrix. Increasing the size will add newly initialized
vectors at the end. Reducing the size will remove vectors from the end. If not provided or <code>None</code>, just
returns a pointer to the input tokens <code>torch.nn.Embedding</code> module of the model without doing anything.`,name:"new_num_tokens"},{anchor:"transformers.PreTrainedModel.resize_token_embeddings.pad_to_multiple_of",description:`<strong>pad_to_multiple_of</strong> (<code>int</code>, <em>optional</em>) &#x2014;
If set will pad the embedding matrix to a multiple of the provided value.If <code>new_num_tokens</code> is set to
<code>None</code> will just pad the embedding to a multiple of <code>pad_to_multiple_of</code>.</p>
<p>This is especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute capability
<code>&gt;= 7.5</code> (Volta), or on TPUs which benefit from having sequence lengths be a multiple of 128. For more
details about this, or help on choosing the correct value for resizing, refer to this guide:
<a href="https://docs.nvidia.com/deeplearning/performance/dl-performance-matrix-multiplication/index.html#requirements-tc" rel="nofollow">https://docs.nvidia.com/deeplearning/performance/dl-performance-matrix-multiplication/index.html#requirements-tc</a>`,name:"pad_to_multiple_of"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L1761",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Pointer to the input tokens Embeddings Module of the model.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>torch.nn.Embedding</code></p>
`}}),Rt=new T({props:{name:"reverse_bettertransformer",anchor:"transformers.PreTrainedModel.reverse_bettertransformer",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L4134",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The model converted back to the original modeling.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"
>PreTrainedModel</a></p>
`}}),qt=new T({props:{name:"save_pretrained",anchor:"transformers.PreTrainedModel.save_pretrained",parameters:[{name:"save_directory",val:": Union"},{name:"is_main_process",val:": bool = True"},{name:"state_dict",val:": Optional = None"},{name:"save_function",val:": Callable = <function save at 0x7f71f79ca950>"},{name:"push_to_hub",val:": bool = False"},{name:"max_shard_size",val:": Union = '5GB'"},{name:"safe_serialization",val:": bool = True"},{name:"variant",val:": Optional = None"},{name:"token",val:": Union = None"},{name:"save_peft_format",val:": bool = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.PreTrainedModel.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"},{anchor:"transformers.PreTrainedModel.save_pretrained.is_main_process",description:`<strong>is_main_process</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether the process calling this is the main process or not. Useful when in distributed training like
TPUs and need to call this function on all processes. In this case, set <code>is_main_process=True</code> only on
the main process to avoid race conditions.`,name:"is_main_process"},{anchor:"transformers.PreTrainedModel.save_pretrained.state_dict",description:`<strong>state_dict</strong> (nested dictionary of <code>torch.Tensor</code>) &#x2014;
The state dictionary of the model to save. Will default to <code>self.state_dict()</code>, but can be used to only
save parts of the model or if special precautions need to be taken when recovering the state dictionary
of a model (like when using model parallelism).`,name:"state_dict"},{anchor:"transformers.PreTrainedModel.save_pretrained.save_function",description:`<strong>save_function</strong> (<code>Callable</code>) &#x2014;
The function to use to save the state dictionary. Useful on distributed training like TPUs when one
need to replace <code>torch.save</code> by another method.`,name:"save_function"},{anchor:"transformers.PreTrainedModel.save_pretrained.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push your model to the Hugging Face model hub after saving it. You can specify the
repository you want to push to with <code>repo_id</code> (will default to the name of <code>save_directory</code> in your
namespace).`,name:"push_to_hub"},{anchor:"transformers.PreTrainedModel.save_pretrained.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;5GB&quot;</code>) &#x2014;
The maximum size for a checkpoint before being sharded. Checkpoints shard will then be each of size
lower than this size. If expressed as a string, needs to be digits followed by a unit (like <code>&quot;5MB&quot;</code>).
We default it to 5GB in order for models to be able to run easily on free-tier google colab instances
without CPU OOM issues.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>If a single weight of the model is bigger than <code>max_shard_size</code>, it will be in its own checkpoint shard
which will be bigger than <code>max_shard_size</code>.</p>

					</div>`,name:"max_shard_size"},{anchor:"transformers.PreTrainedModel.save_pretrained.safe_serialization",description:`<strong>safe_serialization</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to save the model using <code>safetensors</code> or the traditional PyTorch way (that uses <code>pickle</code>).`,name:"safe_serialization"},{anchor:"transformers.PreTrainedModel.save_pretrained.variant",description:`<strong>variant</strong> (<code>str</code>, <em>optional</em>) &#x2014;
If specified, weights are saved in the format pytorch_model.<variant>.bin.</variant>`,name:"variant"},{anchor:"transformers.PreTrainedModel.save_pretrained.token",description:`<strong>token</strong> (<code>str</code> or <code>bool</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, or not specified, will use
the token generated when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"token"},{anchor:"transformers.PreTrainedModel.save_pretrained.save_peft_format",description:`<strong>save_peft_format</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
For backward compatibility with PEFT library, in case adapter weights are attached to the model, all
keys of the state dict of adapters needs to be pre-pended with <code>base_model.model</code>. Advanced users can
disable this behaviours by setting <code>save_peft_format</code> to <code>False</code>.`,name:"save_peft_format"},{anchor:"transformers.PreTrainedModel.save_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
Additional key word arguments passed along to the <a href="/docs/transformers/main/en/main_classes/model#transformers.utils.PushToHubMixin.push_to_hub">push_to_hub()</a> method.`,name:"kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L2174"}}),Et=new T({props:{name:"set_input_embeddings",anchor:"transformers.PreTrainedModel.set_input_embeddings",parameters:[{name:"value",val:": Module"}],parametersDescription:[{anchor:"transformers.PreTrainedModel.set_input_embeddings.value",description:"<strong>value</strong> (<code>nn.Module</code>) &#x2014; A module mapping vocabulary to hidden states.",name:"value"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L1576"}}),Yt=new T({props:{name:"tie_weights",anchor:"transformers.PreTrainedModel.tie_weights",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L1616"}}),Nt=new T({props:{name:"to_bettertransformer",anchor:"transformers.PreTrainedModel.to_bettertransformer",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L4106",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The model converted to BetterTransformer.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"
>PreTrainedModel</a></p>
`}}),Qt=new T({props:{name:"warn_if_padding_and_no_attention_mask",anchor:"transformers.PreTrainedModel.warn_if_padding_and_no_attention_mask",parameters:[{name:"input_ids",val:""},{name:"attention_mask",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L4156"}}),Dt=new he({props:{title:"Large model loading",local:"large-model-loading",headingTag:"h3"}}),Ot=new B({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Nb2RlbEZvclNlcTJTZXFMTSUwQSUwQXQwcHAlMjAlM0QlMjBBdXRvTW9kZWxGb3JTZXEyU2VxTE0uZnJvbV9wcmV0cmFpbmVkKCUyMmJpZ3NjaWVuY2UlMkZUMHBwJTIyJTJDJTIwbG93X2NwdV9tZW1fdXNhZ2UlM0RUcnVlKQ==",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSeq2SeqLM

t0pp = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;bigscience/T0pp&quot;</span>, low_cpu_mem_usage=<span class="hljs-literal">True</span>)`,wrap:!1}}),to=new B({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Nb2RlbEZvclNlcTJTZXFMTSUwQSUwQXQwcHAlMjAlM0QlMjBBdXRvTW9kZWxGb3JTZXEyU2VxTE0uZnJvbV9wcmV0cmFpbmVkKCUyMmJpZ3NjaWVuY2UlMkZUMHBwJTIyJTJDJTIwZGV2aWNlX21hcCUzRCUyMmF1dG8lMjIp",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSeq2SeqLM

t0pp = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;bigscience/T0pp&quot;</span>, device_map=<span class="hljs-string">&quot;auto&quot;</span>)`,wrap:!1}}),no=new B({props:{code:"dDBwcC5oZl9kZXZpY2VfbWFw",highlighted:"t0pp.hf_device_map",wrap:!1}}),ro=new B({props:{code:"JTdCJ3NoYXJlZCclM0ElMjAwJTJDJTBBJTIwJ2RlY29kZXIuZW1iZWRfdG9rZW5zJyUzQSUyMDAlMkMlMEElMjAnZW5jb2RlciclM0ElMjAwJTJDJTBBJTIwJ2RlY29kZXIuYmxvY2suMCclM0ElMjAwJTJDJTBBJTIwJ2RlY29kZXIuYmxvY2suMSclM0ElMjAxJTJDJTBBJTIwJ2RlY29kZXIuYmxvY2suMiclM0ElMjAxJTJDJTBBJTIwJ2RlY29kZXIuYmxvY2suMyclM0ElMjAxJTJDJTBBJTIwJ2RlY29kZXIuYmxvY2suNCclM0ElMjAxJTJDJTBBJTIwJ2RlY29kZXIuYmxvY2suNSclM0ElMjAxJTJDJTBBJTIwJ2RlY29kZXIuYmxvY2suNiclM0ElMjAxJTJDJTBBJTIwJ2RlY29kZXIuYmxvY2suNyclM0ElMjAxJTJDJTBBJTIwJ2RlY29kZXIuYmxvY2suOCclM0ElMjAxJTJDJTBBJTIwJ2RlY29kZXIuYmxvY2suOSclM0ElMjAxJTJDJTBBJTIwJ2RlY29kZXIuYmxvY2suMTAnJTNBJTIwMSUyQyUwQSUyMCdkZWNvZGVyLmJsb2NrLjExJyUzQSUyMDElMkMlMEElMjAnZGVjb2Rlci5ibG9jay4xMiclM0ElMjAxJTJDJTBBJTIwJ2RlY29kZXIuYmxvY2suMTMnJTNBJTIwMSUyQyUwQSUyMCdkZWNvZGVyLmJsb2NrLjE0JyUzQSUyMDElMkMlMEElMjAnZGVjb2Rlci5ibG9jay4xNSclM0ElMjAxJTJDJTBBJTIwJ2RlY29kZXIuYmxvY2suMTYnJTNBJTIwMSUyQyUwQSUyMCdkZWNvZGVyLmJsb2NrLjE3JyUzQSUyMDElMkMlMEElMjAnZGVjb2Rlci5ibG9jay4xOCclM0ElMjAxJTJDJTBBJTIwJ2RlY29kZXIuYmxvY2suMTknJTNBJTIwMSUyQyUwQSUyMCdkZWNvZGVyLmJsb2NrLjIwJyUzQSUyMDElMkMlMEElMjAnZGVjb2Rlci5ibG9jay4yMSclM0ElMjAxJTJDJTBBJTIwJ2RlY29kZXIuYmxvY2suMjInJTNBJTIwJ2NwdSclMkMlMEElMjAnZGVjb2Rlci5ibG9jay4yMyclM0ElMjAnY3B1JyUyQyUwQSUyMCdkZWNvZGVyLmZpbmFsX2xheWVyX25vcm0nJTNBJTIwJ2NwdSclMkMlMEElMjAnZGVjb2Rlci5kcm9wb3V0JyUzQSUyMCdjcHUnJTJDJTBBJTIwJ2xtX2hlYWQnJTNBJTIwJ2NwdSclN0Q=",highlighted:`{<span class="hljs-string">&#x27;shared&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;decoder.embed_tokens&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;encoder&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;decoder.block.0&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;decoder.block.1&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.2&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.3&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.4&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.5&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.6&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.7&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.8&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.9&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.10&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.11&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.12&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.13&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.14&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.15&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.16&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.17&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.18&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.19&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.20&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.21&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.22&#x27;</span>: <span class="hljs-string">&#x27;cpu&#x27;</span>,
 <span class="hljs-string">&#x27;decoder.block.23&#x27;</span>: <span class="hljs-string">&#x27;cpu&#x27;</span>,
 <span class="hljs-string">&#x27;decoder.final_layer_norm&#x27;</span>: <span class="hljs-string">&#x27;cpu&#x27;</span>,
 <span class="hljs-string">&#x27;decoder.dropout&#x27;</span>: <span class="hljs-string">&#x27;cpu&#x27;</span>,
 <span class="hljs-string">&#x27;lm_head&#x27;</span>: <span class="hljs-string">&#x27;cpu&#x27;</span>}`,wrap:!1}}),so=new B({props:{code:"ZGV2aWNlX21hcCUyMCUzRCUyMCU3QiUyMnNoYXJlZCUyMiUzQSUyMDAlMkMlMjAlMjJlbmNvZGVyJTIyJTNBJTIwMCUyQyUyMCUyMmRlY29kZXIlMjIlM0ElMjAxJTJDJTIwJTIybG1faGVhZCUyMiUzQSUyMDElN0Q=",highlighted:'device_map = {<span class="hljs-string">&quot;shared&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;encoder&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;decoder&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;lm_head&quot;</span>: <span class="hljs-number">1</span>}',wrap:!1}}),lo=new he({props:{title:"Model Instantiation dtype",local:"model-instantiation-dtype",headingTag:"h3"}}),co=new B({props:{code:"bW9kZWwlMjAlM0QlMjBUNUZvckNvbmRpdGlvbmFsR2VuZXJhdGlvbi5mcm9tX3ByZXRyYWluZWQoJTIydDUlMjIlMkMlMjB0b3JjaF9kdHlwZSUzRHRvcmNoLmZsb2F0MTYp",highlighted:'model = T5ForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;t5&quot;</span>, torch_dtype=torch.float16)',wrap:!1}}),ho=new B({props:{code:"bW9kZWwlMjAlM0QlMjBUNUZvckNvbmRpdGlvbmFsR2VuZXJhdGlvbi5mcm9tX3ByZXRyYWluZWQoJTIydDUlMjIlMkMlMjB0b3JjaF9kdHlwZSUzRCUyMmF1dG8lMjIp",highlighted:'model = T5ForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;t5&quot;</span>, torch_dtype=<span class="hljs-string">&quot;auto&quot;</span>)',wrap:!1}}),uo=new B({props:{code:"Y29uZmlnJTIwJTNEJTIwVDVDb25maWcuZnJvbV9wcmV0cmFpbmVkKCUyMnQ1JTIyKSUwQW1vZGVsJTIwJTNEJTIwQXV0b01vZGVsLmZyb21fY29uZmlnKGNvbmZpZyk=",highlighted:`config = T5Config.from_pretrained(<span class="hljs-string">&quot;t5&quot;</span>)
model = AutoModel.from_config(config)`,wrap:!1}}),bo=new he({props:{title:"ModuleUtilsMixin",local:"transformers.modeling_utils.ModuleUtilsMixin",headingTag:"h2"}}),_o=new T({props:{name:"class transformers.modeling_utils.ModuleUtilsMixin",anchor:"transformers.modeling_utils.ModuleUtilsMixin",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L822"}}),yo=new T({props:{name:"add_memory_hooks",anchor:"transformers.modeling_utils.ModuleUtilsMixin.add_memory_hooks",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L853"}}),vo=new T({props:{name:"estimate_tokens",anchor:"transformers.modeling_utils.ModuleUtilsMixin.estimate_tokens",parameters:[{name:"input_dict",val:": Dict"}],parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.estimate_tokens.inputs",description:"<strong>inputs</strong> (<code>dict</code>) &#x2014; The model inputs.",name:"inputs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L1079",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The total number of tokens.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>int</code></p>
`}}),Mo=new T({props:{name:"floating_point_ops",anchor:"transformers.modeling_utils.ModuleUtilsMixin.floating_point_ops",parameters:[{name:"input_dict",val:": Dict"},{name:"exclude_embeddings",val:": bool = True"}],parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.floating_point_ops.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
The batch size for the forward pass.`,name:"batch_size"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.floating_point_ops.sequence_length",description:`<strong>sequence_length</strong> (<code>int</code>) &#x2014;
The number of tokens in each line of the batch.`,name:"sequence_length"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.floating_point_ops.exclude_embeddings",description:`<strong>exclude_embeddings</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to count embedding and softmax operations.`,name:"exclude_embeddings"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L1100",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The number of floating-point operations.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>int</code></p>
`}}),To=new T({props:{name:"get_extended_attention_mask",anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_extended_attention_mask",parameters:[{name:"attention_mask",val:": Tensor"},{name:"input_shape",val:": Tuple"},{name:"device",val:": device = None"},{name:"dtype",val:": torch.float32 = None"}],parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_extended_attention_mask.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code>) &#x2014;
Mask with ones indicating tokens to attend to, zeros for tokens to ignore.`,name:"attention_mask"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_extended_attention_mask.input_shape",description:`<strong>input_shape</strong> (<code>Tuple[int]</code>) &#x2014;
The shape of the input to the model.`,name:"input_shape"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L941",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>torch.Tensor</code> The extended attention mask, with a the same dtype as <code>attention_mask.dtype</code>.</p>
`}}),xo=new T({props:{name:"get_head_mask",anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_head_mask",parameters:[{name:"head_mask",val:": Optional"},{name:"num_hidden_layers",val:": int"},{name:"is_attention_chunked",val:": bool = False"}],parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_head_mask.head_mask",description:`<strong>head_mask</strong> (<code>torch.Tensor</code> with shape <code>[num_heads]</code> or <code>[num_hidden_layers x num_heads]</code>, <em>optional</em>) &#x2014;
The mask indicating if we should keep the heads or not (1.0 for keep, 0.0 for discard).`,name:"head_mask"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_head_mask.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>) &#x2014;
The number of hidden layers in the model.`,name:"num_hidden_layers"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_head_mask.is_attention_chunked",description:`<strong>is_attention_chunked</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the attentions scores are computed by chunks or not.`,name:"is_attention_chunked"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L993",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>torch.Tensor</code> with shape <code>[num_hidden_layers x batch x num_heads x seq_length x seq_length]</code> or list with
<code>[None]</code> for each layer.</p>
`}}),wo=new T({props:{name:"invert_attention_mask",anchor:"transformers.modeling_utils.ModuleUtilsMixin.invert_attention_mask",parameters:[{name:"encoder_attention_mask",val:": Tensor"}],parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.invert_attention_mask.encoder_attention_mask",description:"<strong>encoder_attention_mask</strong> (<code>torch.Tensor</code>) &#x2014; An attention mask.",name:"encoder_attention_mask"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L889",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The inverted attention mask.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>torch.Tensor</code></p>
`}}),$o=new T({props:{name:"num_parameters",anchor:"transformers.modeling_utils.ModuleUtilsMixin.num_parameters",parameters:[{name:"only_trainable",val:": bool = False"},{name:"exclude_embeddings",val:": bool = False"}],parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.num_parameters.only_trainable",description:`<strong>only_trainable</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return only the number of trainable parameters`,name:"only_trainable"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.num_parameters.exclude_embeddings",description:`<strong>exclude_embeddings</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return only the number of non-embeddings parameters`,name:"exclude_embeddings"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L1031",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The number of parameters.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>int</code></p>
`}}),ko=new T({props:{name:"reset_memory_hooks_state",anchor:"transformers.modeling_utils.ModuleUtilsMixin.reset_memory_hooks_state",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L865"}}),Po=new he({props:{title:"TFPreTrainedModel",local:"transformers.TFPreTrainedModel",headingTag:"h2"}}),Jo=new T({props:{name:"class transformers.TFPreTrainedModel",anchor:"transformers.TFPreTrainedModel",parameters:[{name:"config",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L1061"}}),Co=new T({props:{name:"push_to_hub",anchor:"transformers.TFPreTrainedModel.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"use_temp_dir",val:": Optional[bool] = None"},{name:"commit_message",val:": Optional[str] = None"},{name:"private",val:": Optional[bool] = None"},{name:"max_shard_size",val:": Optional[Union[int, str]] = '10GB'"},{name:"token",val:": Optional[Union[bool, str]] = None"},{name:"use_auth_token",val:": Optional[Union[bool, str]] = None"},{name:"create_pr",val:": bool = False"},{name:"**base_model_card_args",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The name of the repository you want to push your model to. It should contain your organization name
when pushing to a given organization.`,name:"repo_id"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to use a temporary directory to store the files saved before they are pushed to the Hub.
Will default to <code>True</code> if there is no directory named like <code>repo_id</code>, <code>False</code> otherwise.`,name:"use_temp_dir"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;Upload model&quot;</code>.`,name:"commit_message"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private.`,name:"private"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.token",description:`<strong>token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if <code>repo_url</code>
is not specified.`,name:"token"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;10GB&quot;</code>) &#x2014;
Only applicable for models. The maximum size for a checkpoint before being sharded. Checkpoints shard
will then be each of size lower than this size. If expressed as a string, needs to be digits followed
by a unit (like <code>&quot;5MB&quot;</code>).`,name:"max_shard_size"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.create_pr",description:`<strong>create_pr</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to create a PR with the uploaded files or directly commit.`,name:"create_pr"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L3033"}}),Xe=new Q({props:{anchor:"transformers.TFPreTrainedModel.push_to_hub.example",$$slots:{default:[sh]},$$scope:{ctx:j}}}),Uo=new T({props:{name:"can_generate",anchor:"transformers.TFPreTrainedModel.can_generate",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L1317",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Whether this model can generate sequences with <code>.generate()</code>.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>bool</code></p>
`}}),jo=new T({props:{name:"compile",anchor:"transformers.TFPreTrainedModel.compile",parameters:[{name:"optimizer",val:" = 'rmsprop'"},{name:"loss",val:" = 'auto_with_warning'"},{name:"metrics",val:" = None"},{name:"loss_weights",val:" = None"},{name:"weighted_metrics",val:" = None"},{name:"run_eagerly",val:" = None"},{name:"steps_per_execution",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L1463"}}),Zo=new T({props:{name:"create_model_card",anchor:"transformers.TFPreTrainedModel.create_model_card",parameters:[{name:"output_dir",val:""},{name:"model_name",val:": str"},{name:"language",val:": Optional[str] = None"},{name:"license",val:": Optional[str] = None"},{name:"tags",val:": Optional[str] = None"},{name:"finetuned_from",val:": Optional[str] = None"},{name:"tasks",val:": Optional[str] = None"},{name:"dataset_tags",val:": Optional[Union[str, List[str]]] = None"},{name:"dataset",val:": Optional[Union[str, List[str]]] = None"},{name:"dataset_args",val:": Optional[Union[str, List[str]]] = None"}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.create_model_card.output_dir",description:`<strong>output_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The folder in which to create the model card.`,name:"output_dir"},{anchor:"transformers.TFPreTrainedModel.create_model_card.model_name",description:`<strong>model_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The name of the model.`,name:"model_name"},{anchor:"transformers.TFPreTrainedModel.create_model_card.language",description:`<strong>language</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The language of the model (if applicable)`,name:"language"},{anchor:"transformers.TFPreTrainedModel.create_model_card.license",description:`<strong>license</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The license of the model. Will default to the license of the pretrained model used, if the original
model given to the <code>Trainer</code> comes from a repo on the Hub.`,name:"license"},{anchor:"transformers.TFPreTrainedModel.create_model_card.tags",description:`<strong>tags</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>) &#x2014;
Some tags to be included in the metadata of the model card.`,name:"tags"},{anchor:"transformers.TFPreTrainedModel.create_model_card.finetuned_from",description:`<strong>finetuned_from</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The name of the model used to fine-tune this one (if applicable). Will default to the name of the repo
of the original model given to the <code>Trainer</code> (if it comes from the Hub).`,name:"finetuned_from"},{anchor:"transformers.TFPreTrainedModel.create_model_card.tasks",description:`<strong>tasks</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>) &#x2014;
One or several task identifiers, to be included in the metadata of the model card.`,name:"tasks"},{anchor:"transformers.TFPreTrainedModel.create_model_card.dataset_tags",description:`<strong>dataset_tags</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>) &#x2014;
One or several dataset tags, to be included in the metadata of the model card.`,name:"dataset_tags"},{anchor:"transformers.TFPreTrainedModel.create_model_card.dataset",description:`<strong>dataset</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>) &#x2014;
One or several dataset identifiers, to be included in the metadata of the model card.`,name:"dataset"},{anchor:"transformers.TFPreTrainedModel.create_model_card.dataset_args",description:`<strong>dataset_args</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>) &#x2014;
One or several dataset arguments, to be included in the metadata of the model card.`,name:"dataset_args"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L1758"}}),Fo=new T({props:{name:"from_pretrained",anchor:"transformers.TFPreTrainedModel.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": Optional[Union[str, os.PathLike]]"},{name:"*model_args",val:""},{name:"config",val:": Optional[Union[PretrainedConfig, str, os.PathLike]] = None"},{name:"cache_dir",val:": Optional[Union[str, os.PathLike]] = None"},{name:"ignore_mismatched_sizes",val:": bool = False"},{name:"force_download",val:": bool = False"},{name:"local_files_only",val:": bool = False"},{name:"token",val:": Optional[Union[str, bool]] = None"},{name:"revision",val:": str = 'main'"},{name:"use_safetensors",val:": bool = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
<li><code>None</code> if you are both providing the configuration and state dictionary (resp. with keyword
arguments <code>config</code> and <code>state_dict</code>).</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.model_args",description:`<strong>model_args</strong> (sequence of positional arguments, <em>optional</em>) &#x2014;
All remaining positional arguments will be passed to the underlying model&#x2019;s <code>__init__</code> method.`,name:"model_args"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.config",description:`<strong>config</strong> (<code>Union[PretrainedConfig, str]</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>an instance of a class derived from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>,</li>
<li>a string valid as input to <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>.</li>
</ul>
<p>Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch state_dict save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.ignore_mismatched_sizes",description:`<strong>ignore_mismatched_sizes</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to raise an error if some of the weights from the checkpoint do not have the same size
as the weights of the model (if for instance, you are instantiating a model with 10 labels from a
checkpoint with 3 labels).`,name:"ignore_mismatched_sizes"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.
proxies &#x2014;
(<code>Dict[str, str], </code>optional<code>): A dictionary of proxy servers to use by protocol or endpoint, e.g., </code>{&#x2018;http&#x2019;: &#x2018;foo.bar:3128&#x2019;, &#x2018;http://hostname&#x2019;: &#x2018;foo.bar:4012&#x2019;}<code>. The proxies are used on each request. output_loading_info(</code>bool<code>, *optional*, defaults to </code>False\`): Whether ot not to also return a
dictionary containing missing keys, unexpected keys and error messages.`,name:"resume_download"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.token",description:`<strong>token</strong> (<code>str</code> or <code>bool</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, or not specified, will use
the token generated when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"token"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L2466"}}),Ye=new Q({props:{anchor:"transformers.TFPreTrainedModel.from_pretrained.example",$$slots:{default:[ih]},$$scope:{ctx:j}}}),Io=new T({props:{name:"get_bias",anchor:"transformers.TFPreTrainedModel.get_bias",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L1898",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The weights representing the bias, None if not an LM model.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>tf.Variable</code></p>
`}}),Wo=new T({props:{name:"get_head_mask",anchor:"transformers.TFPreTrainedModel.get_head_mask",parameters:[{name:"head_mask",val:": tf.Tensor | None"},{name:"num_hidden_layers",val:": int"}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.get_head_mask.head_mask",description:`<strong>head_mask</strong> (<code>tf.Tensor</code> with shape <code>[num_heads]</code> or <code>[num_hidden_layers x num_heads]</code>, <em>optional</em>) &#x2014;
The mask indicating if we should keep the heads or not (1.0 for keep, 0.0 for discard).`,name:"head_mask"},{anchor:"transformers.TFPreTrainedModel.get_head_mask.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>) &#x2014;
The number of hidden layers in the model.`,name:"num_hidden_layers"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L1201",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>tf.Tensor</code> with shape <code>[num_hidden_layers x batch x num_heads x seq_length x seq_length]</code> or list with
<code>[None]</code> for each layer.</p>
`}}),Go=new T({props:{name:"get_input_embeddings",anchor:"transformers.TFPreTrainedModel.get_input_embeddings",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L1331",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The embeddings layer mapping vocabulary to hidden states.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>tf.Variable</code></p>
`}}),Bo=new T({props:{name:"get_lm_head",anchor:"transformers.TFPreTrainedModel.get_lm_head",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L1931",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The LM head layer if the model has one, None if not.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>keras.layers.Layer</code></p>
`}}),zo=new T({props:{name:"get_output_embeddings",anchor:"transformers.TFPreTrainedModel.get_output_embeddings",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L1838",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The new weights mapping vocabulary to hidden states.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>tf.Variable</code></p>
`}}),Lo=new T({props:{name:"get_output_layer_with_bias",anchor:"transformers.TFPreTrainedModel.get_output_layer_with_bias",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L1875",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The layer that handles the bias, None if not an LM model.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>keras.layers.Layer</code></p>
`}}),Vo=new T({props:{name:"get_prefix_bias_name",anchor:"transformers.TFPreTrainedModel.get_prefix_bias_name",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L1888",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The _prefix name of the bias.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>str</code></p>
`}}),Ho=new T({props:{name:"prepare_tf_dataset",anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset",parameters:[{name:"dataset",val:": 'datasets.Dataset'"},{name:"batch_size",val:": int = 8"},{name:"shuffle",val:": bool = True"},{name:"tokenizer",val:": Optional['PreTrainedTokenizerBase'] = None"},{name:"collate_fn",val:": Optional[Callable] = None"},{name:"collate_fn_args",val:": Optional[Dict[str, Any]] = None"},{name:"drop_remainder",val:": Optional[bool] = None"},{name:"prefetch",val:": bool = True"}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.dataset",description:`<strong>dataset</strong> (<code>Any</code>) &#x2014;
A [~<code>datasets.Dataset</code>] to be wrapped as a <code>tf.data.Dataset</code>.`,name:"dataset"},{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, defaults to 8) &#x2014;
The size of batches to return.`,name:"batch_size"},{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.shuffle",description:`<strong>shuffle</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to return samples from the dataset in random order. Usually <code>True</code> for training datasets and
<code>False</code> for validation/test datasets.`,name:"shuffle"},{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase">PreTrainedTokenizerBase</a>, <em>optional</em>) &#x2014;
A <code>PreTrainedTokenizer</code> that will be used to pad samples to create batches. Has no effect if a specific
<code>collate_fn</code> is passed instead.`,name:"tokenizer"},{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.collate_fn",description:`<strong>collate_fn</strong> (<code>Callable</code>, <em>optional</em>) &#x2014;
A function that collates samples from the dataset into a single batch. Defaults to
<code>DefaultDataCollator</code> if no <code>tokenizer</code> is supplied or <code>DataCollatorWithPadding</code> if a <code>tokenizer</code> is
passed.`,name:"collate_fn"},{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.collate_fn_args",description:`<strong>collate_fn_args</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
A dict of arguments to pass to the <code>collate_fn</code> alongside the list of samples.`,name:"collate_fn_args"},{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.drop_remainder",description:`<strong>drop_remainder</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to drop the final batch, if the batch_size does not evenly divide the dataset length. Defaults
to the same setting as <code>shuffle</code>.`,name:"drop_remainder"},{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.prefetch",description:`<strong>prefetch</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to add prefetching to the end of the <code>tf.data</code> pipeline. This is almost always beneficial for
performance, but can be disabled in edge cases.`,name:"prefetch"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L1358",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <code>tf.data.Dataset</code> which is ready to pass to the Keras API.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>Dataset</code></p>
`}}),Xo=new T({props:{name:"prune_heads",anchor:"transformers.TFPreTrainedModel.prune_heads",parameters:[{name:"heads_to_prune",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.prune_heads.heads_to_prune",description:`<strong>heads_to_prune</strong> (<code>Dict[int, List[int]]</code>) &#x2014;
Dictionary with keys being selected layer indices (<code>int</code>) and associated values being the list of heads
to prune in said layer (list of <code>int</code>). For instance {1: [0, 2], 2: [2, 3]} will prune heads 0 and 2 on
layer 1 and heads 2 and 3 on layer 2.`,name:"heads_to_prune"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L2278"}}),Ro=new T({props:{name:"register_for_auto_class",anchor:"transformers.TFPreTrainedModel.register_for_auto_class",parameters:[{name:"auto_class",val:" = 'TFAutoModel'"}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.register_for_auto_class.auto_class",description:`<strong>auto_class</strong> (<code>str</code> or <code>type</code>, <em>optional</em>, defaults to <code>&quot;TFAutoModel&quot;</code>) &#x2014;
The auto class to register this new model with.`,name:"auto_class"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L3142"}}),ot=new ci({props:{warning:!0,$$slots:{default:[lh]},$$scope:{ctx:j}}}),qo=new T({props:{name:"resize_token_embeddings",anchor:"transformers.TFPreTrainedModel.resize_token_embeddings",parameters:[{name:"new_num_tokens",val:": Optional[int] = None"}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.resize_token_embeddings.new_num_tokens",description:`<strong>new_num_tokens</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of new tokens in the embedding matrix. Increasing the size will add newly initialized
vectors at the end. Reducing the size will remove vectors from the end. If not provided or <code>None</code>, just
returns a pointer to the input tokens without doing anything.`,name:"new_num_tokens"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L1940",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Pointer to the input tokens of the model.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>tf.Variable</code> or <code>keras.layers.Embedding</code></p>
`}}),Eo=new T({props:{name:"save_pretrained",anchor:"transformers.TFPreTrainedModel.save_pretrained",parameters:[{name:"save_directory",val:""},{name:"saved_model",val:" = False"},{name:"version",val:" = 1"},{name:"push_to_hub",val:" = False"},{name:"signatures",val:" = None"},{name:"max_shard_size",val:": Union[int, str] = '10GB'"},{name:"create_pr",val:": bool = False"},{name:"safe_serialization",val:": bool = False"},{name:"token",val:": Optional[Union[str, bool]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.saved_model",description:`<strong>saved_model</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If the model has to be saved in saved model format as well or not.`,name:"saved_model"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.version",description:`<strong>version</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The version of the saved model. A saved model needs to be versioned in order to be properly loaded by
TensorFlow Serving as detailed in the official documentation
<a href="https://www.tensorflow.org/tfx/serving/serving_basic" rel="nofollow">https://www.tensorflow.org/tfx/serving/serving_basic</a>`,name:"version"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push your model to the Hugging Face model hub after saving it. You can specify the
repository you want to push to with <code>repo_id</code> (will default to the name of <code>save_directory</code> in your
namespace).`,name:"push_to_hub"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.signatures",description:`<strong>signatures</strong> (<code>dict</code> or <code>tf.function</code>, <em>optional</em>) &#x2014;
Model&#x2019;s signature used for serving. This will be passed to the <code>signatures</code> argument of model.save().`,name:"signatures"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;10GB&quot;</code>) &#x2014;
The maximum size for a checkpoint before being sharded. Checkpoints shard will then be each of size
lower than this size. If expressed as a string, needs to be digits followed by a unit (like <code>&quot;5MB&quot;</code>).</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>If a single weight of the model is bigger than <code>max_shard_size</code>, it will be in its own checkpoint shard
which will be bigger than <code>max_shard_size</code>.</p>

					</div>`,name:"max_shard_size"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.create_pr",description:`<strong>create_pr</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to create a PR with the uploaded files or directly commit.`,name:"create_pr"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.safe_serialization",description:`<strong>safe_serialization</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to save the model using <code>safetensors</code> or the traditional TensorFlow way (that uses <code>h5</code>).`,name:"safe_serialization"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.token",description:`<strong>token</strong> (<code>str</code> or <code>bool</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, or not specified, will use
the token generated when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"token"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
Additional key word arguments passed along to the <a href="/docs/transformers/main/en/main_classes/model#transformers.utils.PushToHubMixin.push_to_hub">push_to_hub()</a> method.`,name:"kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L2290"}}),Yo=new T({props:{name:"serving",anchor:"transformers.TFPreTrainedModel.serving",parameters:[{name:"inputs",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.serving.Method",description:"<strong>Method</strong> used for serving the model. Does not have a specific signature, but will be specialized as concrete &#x2014;",name:"Method"},{anchor:"transformers.TFPreTrainedModel.serving.functions",description:`<strong>functions</strong> when saving with <code>save_pretrained</code>. &#x2014;
inputs (<code>Dict[str, tf.Tensor]</code>):
The input of the saved model as a dictionary of tensors.`,name:"functions"}]}}),No=new T({props:{name:"serving_output",anchor:"transformers.TFPreTrainedModel.serving_output",parameters:[{name:"output",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L1293"}}),Qo=new T({props:{name:"set_bias",anchor:"transformers.TFPreTrainedModel.set_bias",parameters:[{name:"value",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.set_bias.value",description:`<strong>value</strong> (<code>Dict[tf.Variable]</code>) &#x2014;
All the new bias attached to an LM head.`,name:"value"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L1915"}}),Do=new T({props:{name:"set_input_embeddings",anchor:"transformers.TFPreTrainedModel.set_input_embeddings",parameters:[{name:"value",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.set_input_embeddings.value",description:`<strong>value</strong> (<code>tf.Variable</code>) &#x2014;
The new weights mapping hidden states to vocabulary.`,name:"value"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L1818"}}),So=new T({props:{name:"set_output_embeddings",anchor:"transformers.TFPreTrainedModel.set_output_embeddings",parameters:[{name:"value",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.set_output_embeddings.value",description:`<strong>value</strong> (<code>tf.Variable</code>) &#x2014;
The new weights mapping hidden states to vocabulary.`,name:"value"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L1858"}}),Ao=new T({props:{name:"test_step",anchor:"transformers.TFPreTrainedModel.test_step",parameters:[{name:"data",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L1654"}}),Oo=new T({props:{name:"train_step",anchor:"transformers.TFPreTrainedModel.train_step",parameters:[{name:"data",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L1546"}}),Ko=new he({props:{title:"TFModelUtilsMixin",local:"transformers.modeling_tf_utils.TFModelUtilsMixin",headingTag:"h2"}}),en=new T({props:{name:"class transformers.modeling_tf_utils.TFModelUtilsMixin",anchor:"transformers.modeling_tf_utils.TFModelUtilsMixin",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L117"}}),tn=new T({props:{name:"num_parameters",anchor:"transformers.modeling_tf_utils.TFModelUtilsMixin.num_parameters",parameters:[{name:"only_trainable",val:": bool = False"}],parametersDescription:[{anchor:"transformers.modeling_tf_utils.TFModelUtilsMixin.num_parameters.only_trainable",description:`<strong>only_trainable</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return only the number of trainable parameters`,name:"only_trainable"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_tf_utils.py#L122",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The number of parameters.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>int</code></p>
`}}),on=new he({props:{title:"FlaxPreTrainedModel",local:"transformers.FlaxPreTrainedModel",headingTag:"h2"}}),nn=new T({props:{name:"class transformers.FlaxPreTrainedModel",anchor:"transformers.FlaxPreTrainedModel",parameters:[{name:"config",val:": PretrainedConfig"},{name:"module",val:": Module"},{name:"input_shape",val:": Tuple = (1, 1)"},{name:"seed",val:": int = 0"},{name:"dtype",val:": dtype = <class 'jax.numpy.float32'>"},{name:"_do_init",val:": bool = True"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_flax_utils.py#L166"}}),rn=new T({props:{name:"push_to_hub",anchor:"transformers.FlaxPreTrainedModel.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"use_temp_dir",val:": Optional = None"},{name:"commit_message",val:": Optional = None"},{name:"private",val:": Optional = None"},{name:"token",val:": Union = None"},{name:"max_shard_size",val:": Union = '5GB'"},{name:"create_pr",val:": bool = False"},{name:"safe_serialization",val:": bool = True"},{name:"revision",val:": str = None"},{name:"commit_description",val:": str = None"},{name:"tags",val:": Optional = None"},{name:"**deprecated_kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The name of the repository you want to push your model to. It should contain your organization name
when pushing to a given organization.`,name:"repo_id"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to use a temporary directory to store the files saved before they are pushed to the Hub.
Will default to <code>True</code> if there is no directory named like <code>repo_id</code>, <code>False</code> otherwise.`,name:"use_temp_dir"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;Upload model&quot;</code>.`,name:"commit_message"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private.`,name:"private"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.token",description:`<strong>token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if <code>repo_url</code>
is not specified.`,name:"token"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;5GB&quot;</code>) &#x2014;
Only applicable for models. The maximum size for a checkpoint before being sharded. Checkpoints shard
will then be each of size lower than this size. If expressed as a string, needs to be digits followed
by a unit (like <code>&quot;5MB&quot;</code>). We default it to <code>&quot;5GB&quot;</code> so that users can easily load models on free-tier
Google Colab instances without any CPU OOM issues.`,name:"max_shard_size"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.create_pr",description:`<strong>create_pr</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to create a PR with the uploaded files or directly commit.`,name:"create_pr"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.safe_serialization",description:`<strong>safe_serialization</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to convert the model weights in safetensors format for safer serialization.`,name:"safe_serialization"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Branch to push the uploaded files to.`,name:"revision"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.commit_description",description:`<strong>commit_description</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The description of the commit that will be created`,name:"commit_description"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.tags",description:`<strong>tags</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
List of tags to push on the Hub.`,name:"tags"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/utils/hub.py#L768"}}),ct=new Q({props:{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.example",$$slots:{default:[dh]},$$scope:{ctx:j}}}),an=new T({props:{name:"can_generate",anchor:"transformers.FlaxPreTrainedModel.can_generate",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_flax_utils.py#L506"}}),sn=new T({props:{name:"from_pretrained",anchor:"transformers.FlaxPreTrainedModel.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": Union"},{name:"dtype",val:": dtype = <class 'jax.numpy.float32'>"},{name:"*model_args",val:""},{name:"config",val:": Union = None"},{name:"cache_dir",val:": Union = None"},{name:"ignore_mismatched_sizes",val:": bool = False"},{name:"force_download",val:": bool = False"},{name:"local_files_only",val:": bool = False"},{name:"token",val:": Union = None"},{name:"revision",val:": str = 'main'"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.FlaxPreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>pt index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In this case,
<code>from_pt</code> should be set to <code>True</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.dtype",description:`<strong>dtype</strong> (<code>jax.numpy.dtype</code>, <em>optional</em>, defaults to <code>jax.numpy.float32</code>) &#x2014;
The data type of the computation. Can be one of <code>jax.numpy.float32</code>, <code>jax.numpy.float16</code> (on GPUs) and
<code>jax.numpy.bfloat16</code> (on TPUs).</p>
<p>This can be used to enable mixed-precision training or half-precision inference on GPUs or TPUs. If
specified all the computation will be performed with the given <code>dtype</code>.</p>
<p><strong>Note that this only specifies the dtype of the computation and does not influence the dtype of model
parameters.</strong></p>
<p>If you wish to change the dtype of the model parameters, see <a href="/docs/transformers/main/en/main_classes/model#transformers.FlaxPreTrainedModel.to_fp16">to_fp16()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.FlaxPreTrainedModel.to_bf16">to_bf16()</a>.`,name:"dtype"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.model_args",description:`<strong>model_args</strong> (sequence of positional arguments, <em>optional</em>) &#x2014;
All remaining positional arguments will be passed to the underlying model&#x2019;s <code>__init__</code> method.`,name:"model_args"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.config",description:`<strong>config</strong> (<code>Union[PretrainedConfig, str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>an instance of a class derived from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>,</li>
<li>a string or path valid as input to <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>.</li>
</ul>
<p>Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>Union[str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.ignore_mismatched_sizes",description:`<strong>ignore_mismatched_sizes</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to raise an error if some of the weights from the checkpoint do not have the same size
as the weights of the model (if for instance, you are instantiating a model with 10 labels from a
checkpoint with 3 labels).`,name:"ignore_mismatched_sizes"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (i.e., do not try to download the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.token",description:`<strong>token</strong> (<code>str</code> or <code>bool</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, or not specified, will use
the token generated when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"token"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_flax_utils.py#L518"}}),ht=new Q({props:{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.example",$$slots:{default:[mh]},$$scope:{ctx:j}}}),ln=new T({props:{name:"load_flax_sharded_weights",anchor:"transformers.FlaxPreTrainedModel.load_flax_sharded_weights",parameters:[{name:"shard_files",val:""}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.load_flax_sharded_weights.shard_files",description:`<strong>shard_files</strong> (<code>List[str]</code> &#x2014;
The list of shard files to load.`,name:"shard_files"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_flax_utils.py#L459",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A nested dictionary of the model parameters, in the expected format for flax models : <code>&#123;'model': &#123;'params': &#123;'...'&#125;&#125;&#125;</code>.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>Dict</code></p>
`}}),dn=new T({props:{name:"register_for_auto_class",anchor:"transformers.FlaxPreTrainedModel.register_for_auto_class",parameters:[{name:"auto_class",val:" = 'FlaxAutoModel'"}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.register_for_auto_class.auto_class",description:`<strong>auto_class</strong> (<code>str</code> or <code>type</code>, <em>optional</em>, defaults to <code>&quot;FlaxAutoModel&quot;</code>) &#x2014;
The auto class to register this new model with.`,name:"auto_class"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_flax_utils.py#L1225"}}),ft=new ci({props:{warning:!0,$$slots:{default:[ch]},$$scope:{ctx:j}}}),mn=new T({props:{name:"save_pretrained",anchor:"transformers.FlaxPreTrainedModel.save_pretrained",parameters:[{name:"save_directory",val:": Union"},{name:"params",val:" = None"},{name:"push_to_hub",val:" = False"},{name:"max_shard_size",val:" = '10GB'"},{name:"token",val:": Union = None"},{name:"safe_serialization",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"},{anchor:"transformers.FlaxPreTrainedModel.save_pretrained.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push your model to the Hugging Face model hub after saving it. You can specify the
repository you want to push to with <code>repo_id</code> (will default to the name of <code>save_directory</code> in your
namespace).`,name:"push_to_hub"},{anchor:"transformers.FlaxPreTrainedModel.save_pretrained.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;10GB&quot;</code>) &#x2014;
The maximum size for a checkpoint before being sharded. Checkpoints shard will then be each of size
lower than this size. If expressed as a string, needs to be digits followed by a unit (like <code>&quot;5MB&quot;</code>).</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>If a single weight of the model is bigger than <code>max_shard_size</code>, it will be in its own checkpoint shard
which will be bigger than <code>max_shard_size</code>.</p>

					</div>`,name:"max_shard_size"},{anchor:"transformers.FlaxPreTrainedModel.save_pretrained.token",description:`<strong>token</strong> (<code>str</code> or <code>bool</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, or not specified, will use
the token generated when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"token"},{anchor:"transformers.FlaxPreTrainedModel.save_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
Additional key word arguments passed along to the <a href="/docs/transformers/main/en/main_classes/model#transformers.utils.PushToHubMixin.push_to_hub">push_to_hub()</a> method.`,name:"kwargs"},{anchor:"transformers.FlaxPreTrainedModel.save_pretrained.safe_serialization",description:`<strong>safe_serialization</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to save the model using <code>safetensors</code> or through msgpack.`,name:"safe_serialization"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_flax_utils.py#L1087"}}),cn=new T({props:{name:"to_bf16",anchor:"transformers.FlaxPreTrainedModel.to_bf16",parameters:[{name:"params",val:": Union"},{name:"mask",val:": Any = None"}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.to_bf16.params",description:`<strong>params</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> of model parameters.`,name:"params"},{anchor:"transformers.FlaxPreTrainedModel.to_bf16.mask",description:`<strong>mask</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> with same structure as the <code>params</code> tree. The leaves should be booleans, <code>True</code> for params
you want to cast, and should be <code>False</code> for those you want to skip.`,name:"mask"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_flax_utils.py#L329"}}),gt=new Q({props:{anchor:"transformers.FlaxPreTrainedModel.to_bf16.example",$$slots:{default:[ph]},$$scope:{ctx:j}}}),pn=new T({props:{name:"to_fp16",anchor:"transformers.FlaxPreTrainedModel.to_fp16",parameters:[{name:"params",val:": Union"},{name:"mask",val:": Any = None"}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.to_fp16.params",description:`<strong>params</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> of model parameters.`,name:"params"},{anchor:"transformers.FlaxPreTrainedModel.to_fp16.mask",description:`<strong>mask</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> with same structure as the <code>params</code> tree. The leaves should be booleans, <code>True</code> for params
you want to cast, and should be <code>False</code> for those you want to skip`,name:"mask"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_flax_utils.py#L395"}}),bt=new Q({props:{anchor:"transformers.FlaxPreTrainedModel.to_fp16.example",$$slots:{default:[hh]},$$scope:{ctx:j}}}),hn=new T({props:{name:"to_fp32",anchor:"transformers.FlaxPreTrainedModel.to_fp32",parameters:[{name:"params",val:": Union"},{name:"mask",val:": Any = None"}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.to_fp32.params",description:`<strong>params</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> of model parameters.`,name:"params"},{anchor:"transformers.FlaxPreTrainedModel.to_fp32.mask",description:`<strong>mask</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> with same structure as the <code>params</code> tree. The leaves should be booleans, <code>True</code> for params
you want to cast, and should be <code>False</code> for those you want to skip`,name:"mask"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_flax_utils.py#L368"}}),_t=new Q({props:{anchor:"transformers.FlaxPreTrainedModel.to_fp32.example",$$slots:{default:[fh]},$$scope:{ctx:j}}}),fn=new he({props:{title:"Pushing to the Hub",local:"transformers.utils.PushToHubMixin",headingTag:"h2"}}),un=new T({props:{name:"class transformers.utils.PushToHubMixin",anchor:"transformers.utils.PushToHubMixin",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/utils/hub.py#L652"}}),gn=new T({props:{name:"push_to_hub",anchor:"transformers.utils.PushToHubMixin.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"use_temp_dir",val:": Optional = None"},{name:"commit_message",val:": Optional = None"},{name:"private",val:": Optional = None"},{name:"token",val:": Union = None"},{name:"max_shard_size",val:": Union = '5GB'"},{name:"create_pr",val:": bool = False"},{name:"safe_serialization",val:": bool = True"},{name:"revision",val:": str = None"},{name:"commit_description",val:": str = None"},{name:"tags",val:": Optional = None"},{name:"**deprecated_kwargs",val:""}],parametersDescription:[{anchor:"transformers.utils.PushToHubMixin.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The name of the repository you want to push your {object} to. It should contain your organization name
when pushing to a given organization.`,name:"repo_id"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to use a temporary directory to store the files saved before they are pushed to the Hub.
Will default to <code>True</code> if there is no directory named like <code>repo_id</code>, <code>False</code> otherwise.`,name:"use_temp_dir"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;Upload {object}&quot;</code>.`,name:"commit_message"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private.`,name:"private"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.token",description:`<strong>token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if <code>repo_url</code>
is not specified.`,name:"token"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;5GB&quot;</code>) &#x2014;
Only applicable for models. The maximum size for a checkpoint before being sharded. Checkpoints shard
will then be each of size lower than this size. If expressed as a string, needs to be digits followed
by a unit (like <code>&quot;5MB&quot;</code>). We default it to <code>&quot;5GB&quot;</code> so that users can easily load models on free-tier
Google Colab instances without any CPU OOM issues.`,name:"max_shard_size"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.create_pr",description:`<strong>create_pr</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to create a PR with the uploaded files or directly commit.`,name:"create_pr"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.safe_serialization",description:`<strong>safe_serialization</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to convert the model weights in safetensors format for safer serialization.`,name:"safe_serialization"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Branch to push the uploaded files to.`,name:"revision"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.commit_description",description:`<strong>commit_description</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The description of the commit that will be created`,name:"commit_description"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.tags",description:`<strong>tags</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
List of tags to push on the Hub.`,name:"tags"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/utils/hub.py#L768"}}),yt=new Q({props:{anchor:"transformers.utils.PushToHubMixin.push_to_hub.example",$$slots:{default:[uh]},$$scope:{ctx:j}}}),bn=new he({props:{title:"Sharded checkpoints",local:"transformers.modeling_utils.load_sharded_checkpoint",headingTag:"h2"}}),_n=new T({props:{name:"transformers.modeling_utils.load_sharded_checkpoint",anchor:"transformers.modeling_utils.load_sharded_checkpoint",parameters:[{name:"model",val:""},{name:"folder",val:""},{name:"strict",val:" = True"},{name:"prefer_safe",val:" = True"}],parametersDescription:[{anchor:"transformers.modeling_utils.load_sharded_checkpoint.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model in which to load the checkpoint.",name:"model"},{anchor:"transformers.modeling_utils.load_sharded_checkpoint.folder",description:"<strong>folder</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014; A path to a folder containing the sharded checkpoint.",name:"folder"},{anchor:"transformers.modeling_utils.load_sharded_checkpoint.strict",description:"<strong>strict</strong> (<code>bool</code>, *optional<code>, defaults to </code>True`) &#x2014;\nWhether to strictly enforce that the keys in the model state dict match the keys in the sharded checkpoint.",name:"strict"},{anchor:"transformers.modeling_utils.load_sharded_checkpoint.prefer_safe",description:`<strong>prefer_safe</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If both safetensors and PyTorch save files are present in checkpoint and <code>prefer_safe</code> is True, the
safetensors files will be loaded. Otherwise, PyTorch files are always loaded when possible.`,name:"prefer_safe"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/modeling_utils.py#L414",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A named tuple with <code>missing_keys</code> and <code>unexpected_keys</code> fields</p>
<ul>
<li><code>missing_keys</code> is a list of str containing the missing keys</li>
<li><code>unexpected_keys</code> is a list of str containing the unexpected keys</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>NamedTuple</code></p>
`}}),{c(){d=r("meta"),C=o(),y=r("p"),b=o(),c(w.$$.fragment),i=o(),J=r("p"),J.innerHTML=Gm,Ea=o(),Tt=r("p"),Tt.innerHTML=Bm,Ya=o(),xt=r("ul"),xt.innerHTML=zm,Na=o(),wt=r("p"),wt.innerHTML=Lm,Qa=o(),c($t.$$.fragment),Da=o(),$=r("div"),c(kt.$$.fragment),pi=o(),Jn=r("p"),Jn.textContent=Vm,hi=o(),Cn=r("p"),Cn.innerHTML=Hm,fi=o(),Un=r("ul"),Un.innerHTML=Xm,ui=o(),jn=r("p"),jn.textContent=Rm,gi=o(),Zn=r("ul"),Zn.innerHTML=qm,bi=o(),D=r("div"),c(Pt.$$.fragment),_i=o(),Fn=r("p"),Fn.textContent=Em,yi=o(),c(be.$$.fragment),vi=o(),S=r("div"),c(Jt.$$.fragment),Mi=o(),In=r("p"),In.textContent=Ym,Ti=o(),c(_e.$$.fragment),xi=o(),ye=r("div"),c(Ct.$$.fragment),wi=o(),Wn=r("p"),Wn.innerHTML=Nm,$i=o(),ve=r("div"),c(Ut.$$.fragment),ki=o(),Gn=r("p"),Gn.innerHTML=Qm,Pi=o(),Me=r("div"),c(jt.$$.fragment),Ji=o(),Bn=r("p"),Bn.textContent=Dm,Ci=o(),Z=r("div"),c(Zt.$$.fragment),Ui=o(),zn=r("p"),zn.textContent=Sm,ji=o(),Ln=r("p"),Ln.innerHTML=Am,Zi=o(),Vn=r("p"),Vn.innerHTML=Om,Fi=o(),Hn=r("p"),Hn.innerHTML=Km,Ii=o(),c(Te.$$.fragment),Wi=o(),c(xe.$$.fragment),Gi=o(),Xn=r("ul"),Xn.innerHTML=ec,Bi=o(),Rn=r("p"),Rn.textContent=tc,zi=o(),qn=r("p"),qn.textContent=oc,Li=o(),En=r("ol"),En.innerHTML=nc,Vi=o(),Yn=r("p"),Yn.textContent=rc,Hi=o(),we=r("div"),c(Ft.$$.fragment),Xi=o(),Nn=r("p"),Nn.textContent=ac,Ri=o(),$e=r("div"),c(It.$$.fragment),qi=o(),Qn=r("p"),Qn.innerHTML=sc,Ei=o(),ke=r("div"),c(Wt.$$.fragment),Yi=o(),Dn=r("p"),Dn.textContent=ic,Ni=o(),A=r("div"),c(Gt.$$.fragment),Qi=o(),Sn=r("p"),Sn.textContent=lc,Di=o(),An=r("p"),An.textContent=dc,Si=o(),H=r("div"),c(Bt.$$.fragment),Ai=o(),On=r("p"),On.textContent=mc,Oi=o(),Kn=r("p"),Kn.textContent=cc,Ki=o(),er=r("p"),er.innerHTML=pc,el=o(),Pe=r("div"),c(zt.$$.fragment),tl=o(),tr=r("p"),tr.innerHTML=hc,ol=o(),Je=r("div"),c(Lt.$$.fragment),nl=o(),or=r("p"),or.textContent=fc,rl=o(),Ce=r("div"),c(Vt.$$.fragment),al=o(),nr=r("p"),nr.textContent=uc,sl=o(),O=r("div"),c(Ht.$$.fragment),il=o(),rr=r("p"),rr.textContent=gc,ll=o(),c(Ue.$$.fragment),dl=o(),K=r("div"),c(Xt.$$.fragment),ml=o(),ar=r("p"),ar.innerHTML=bc,cl=o(),sr=r("p"),sr.innerHTML=_c,pl=o(),je=r("div"),c(Rt.$$.fragment),hl=o(),ir=r("p"),ir.innerHTML=yc,fl=o(),Ze=r("div"),c(qt.$$.fragment),ul=o(),lr=r("p"),lr.innerHTML=vc,gl=o(),Fe=r("div"),c(Et.$$.fragment),bl=o(),dr=r("p"),dr.textContent=Mc,_l=o(),ee=r("div"),c(Yt.$$.fragment),yl=o(),mr=r("p"),mr.textContent=Tc,vl=o(),cr=r("p"),cr.innerHTML=xc,Ml=o(),te=r("div"),c(Nt.$$.fragment),Tl=o(),pr=r("p"),pr.innerHTML=wc,xl=o(),hr=r("p"),hr.innerHTML=$c,wl=o(),Ie=r("div"),c(Qt.$$.fragment),$l=o(),fr=r("p"),fr.textContent=kc,Sa=o(),ur=r("a"),Aa=o(),c(Dt.$$.fragment),Oa=o(),St=r("p"),St.innerHTML=Pc,Ka=o(),At=r("p"),At.innerHTML=Jc,es=o(),c(Ot.$$.fragment),ts=o(),Kt=r("p"),Kt.innerHTML=Cc,os=o(),eo=r("p"),eo.innerHTML=Uc,ns=o(),c(to.$$.fragment),rs=o(),oo=r("p"),oo.innerHTML=jc,as=o(),c(no.$$.fragment),ss=o(),c(ro.$$.fragment),is=o(),ao=r("p"),ao.textContent=Zc,ls=o(),c(so.$$.fragment),ds=o(),io=r("p"),io.innerHTML=Fc,ms=o(),c(lo.$$.fragment),cs=o(),mo=r("p"),mo.innerHTML=Ic,ps=o(),c(co.$$.fragment),hs=o(),po=r("p"),po.innerHTML=Wc,fs=o(),c(ho.$$.fragment),us=o(),fo=r("p"),fo.innerHTML=Gc,gs=o(),c(uo.$$.fragment),bs=o(),go=r("p"),go.textContent=Bc,_s=o(),c(bo.$$.fragment),ys=o(),W=r("div"),c(_o.$$.fragment),kl=o(),gr=r("p"),gr.innerHTML=zc,Pl=o(),oe=r("div"),c(yo.$$.fragment),Jl=o(),br=r("p"),br.textContent=Lc,Cl=o(),_r=r("p"),_r.innerHTML=Vc,Ul=o(),We=r("div"),c(vo.$$.fragment),jl=o(),yr=r("p"),yr.textContent=Hc,Zl=o(),Ge=r("div"),c(Mo.$$.fragment),Fl=o(),vr=r("p"),vr.innerHTML=Xc,Il=o(),Be=r("div"),c(To.$$.fragment),Wl=o(),Mr=r("p"),Mr.textContent=Rc,Gl=o(),ze=r("div"),c(xo.$$.fragment),Bl=o(),Tr=r("p"),Tr.textContent=qc,zl=o(),Le=r("div"),c(wo.$$.fragment),Ll=o(),xr=r("p"),xr.textContent=Ec,Vl=o(),Ve=r("div"),c($o.$$.fragment),Hl=o(),wr=r("p"),wr.textContent=Yc,Xl=o(),He=r("div"),c(ko.$$.fragment),Rl=o(),$r=r("p"),$r.innerHTML=Nc,vs=o(),c(Po.$$.fragment),Ms=o(),x=r("div"),c(Jo.$$.fragment),ql=o(),kr=r("p"),kr.textContent=Qc,El=o(),Pr=r("p"),Pr.innerHTML=Dc,Yl=o(),Jr=r("ul"),Jr.innerHTML=Sc,Nl=o(),Cr=r("p"),Cr.textContent=Ac,Ql=o(),Ur=r("ul"),Ur.innerHTML=Oc,Dl=o(),ne=r("div"),c(Co.$$.fragment),Sl=o(),jr=r("p"),jr.innerHTML=Kc,Al=o(),c(Xe.$$.fragment),Ol=o(),Re=r("div"),c(Uo.$$.fragment),Kl=o(),Zr=r("p"),Zr.innerHTML=ep,ed=o(),qe=r("div"),c(jo.$$.fragment),td=o(),Fr=r("p"),Fr.textContent=tp,od=o(),Ee=r("div"),c(Zo.$$.fragment),nd=o(),Ir=r("p"),Ir.innerHTML=op,rd=o(),L=r("div"),c(Fo.$$.fragment),ad=o(),Wr=r("p"),Wr.textContent=np,sd=o(),Gr=r("p"),Gr.innerHTML=rp,id=o(),Br=r("p"),Br.innerHTML=ap,ld=o(),c(Ye.$$.fragment),dd=o(),Ne=r("div"),c(Io.$$.fragment),md=o(),zr=r("p"),zr.textContent=sp,cd=o(),Qe=r("div"),c(Wo.$$.fragment),pd=o(),Lr=r("p"),Lr.textContent=ip,hd=o(),De=r("div"),c(Go.$$.fragment),fd=o(),Vr=r("p"),Vr.textContent=lp,ud=o(),Se=r("div"),c(Bo.$$.fragment),gd=o(),Hr=r("p"),Hr.textContent=dp,bd=o(),Ae=r("div"),c(zo.$$.fragment),_d=o(),Xr=r("p"),Xr.textContent=mp,yd=o(),Oe=r("div"),c(Lo.$$.fragment),vd=o(),Rr=r("p"),Rr.textContent=cp,Md=o(),Ke=r("div"),c(Vo.$$.fragment),Td=o(),qr=r("p"),qr.textContent=pp,xd=o(),et=r("div"),c(Ho.$$.fragment),wd=o(),Er=r("p"),Er.innerHTML=hp,$d=o(),tt=r("div"),c(Xo.$$.fragment),kd=o(),Yr=r("p"),Yr.textContent=fp,Pd=o(),re=r("div"),c(Ro.$$.fragment),Jd=o(),Nr=r("p"),Nr.textContent=up,Cd=o(),c(ot.$$.fragment),Ud=o(),ae=r("div"),c(qo.$$.fragment),jd=o(),Qr=r("p"),Qr.innerHTML=gp,Zd=o(),Dr=r("p"),Dr.innerHTML=bp,Fd=o(),nt=r("div"),c(Eo.$$.fragment),Id=o(),Sr=r("p"),Sr.innerHTML=_p,Wd=o(),Ar=r("div"),c(Yo.$$.fragment),Gd=o(),rt=r("div"),c(No.$$.fragment),Bd=o(),Or=r("p"),Or.textContent=yp,zd=o(),at=r("div"),c(Qo.$$.fragment),Ld=o(),Kr=r("p"),Kr.textContent=vp,Vd=o(),st=r("div"),c(Do.$$.fragment),Hd=o(),ea=r("p"),ea.textContent=Mp,Xd=o(),it=r("div"),c(So.$$.fragment),Rd=o(),ta=r("p"),ta.textContent=Tp,qd=o(),lt=r("div"),c(Ao.$$.fragment),Ed=o(),oa=r("p"),oa.innerHTML=xp,Yd=o(),dt=r("div"),c(Oo.$$.fragment),Nd=o(),na=r("p"),na.innerHTML=wp,Ts=o(),c(Ko.$$.fragment),xs=o(),q=r("div"),c(en.$$.fragment),Qd=o(),ra=r("p"),ra.innerHTML=$p,Dd=o(),mt=r("div"),c(tn.$$.fragment),Sd=o(),aa=r("p"),aa.textContent=kp,ws=o(),c(on.$$.fragment),$s=o(),U=r("div"),c(nn.$$.fragment),Ad=o(),sa=r("p"),sa.textContent=Pp,Od=o(),ia=r("p"),ia.innerHTML=Jp,Kd=o(),la=r("p"),la.textContent=Cp,em=o(),da=r("ul"),da.innerHTML=Up,tm=o(),se=r("div"),c(rn.$$.fragment),om=o(),ma=r("p"),ma.textContent=jp,nm=o(),c(ct.$$.fragment),rm=o(),pt=r("div"),c(an.$$.fragment),am=o(),ca=r("p"),ca.innerHTML=Zp,sm=o(),V=r("div"),c(sn.$$.fragment),im=o(),pa=r("p"),pa.textContent=Fp,lm=o(),ha=r("p"),ha.innerHTML=Ip,dm=o(),fa=r("p"),fa.innerHTML=Wp,mm=o(),c(ht.$$.fragment),cm=o(),ie=r("div"),c(ln.$$.fragment),pm=o(),ua=r("p"),ua.innerHTML=Gp,hm=o(),ga=r("p"),ga.textContent=Bp,fm=o(),le=r("div"),c(dn.$$.fragment),um=o(),ba=r("p"),ba.textContent=zp,gm=o(),c(ft.$$.fragment),bm=o(),ut=r("div"),c(mn.$$.fragment),_m=o(),_a=r("p"),_a.innerHTML=Lp,ym=o(),X=r("div"),c(cn.$$.fragment),vm=o(),ya=r("p"),ya.innerHTML=Vp,Mm=o(),va=r("p"),va.textContent=Hp,Tm=o(),c(gt.$$.fragment),xm=o(),R=r("div"),c(pn.$$.fragment),wm=o(),Ma=r("p"),Ma.innerHTML=Xp,$m=o(),Ta=r("p"),Ta.textContent=Rp,km=o(),c(bt.$$.fragment),Pm=o(),de=r("div"),c(hn.$$.fragment),Jm=o(),xa=r("p"),xa.innerHTML=qp,Cm=o(),c(_t.$$.fragment),ks=o(),c(fn.$$.fragment),Ps=o(),E=r("div"),c(un.$$.fragment),Um=o(),wa=r("p"),wa.textContent=Ep,jm=o(),me=r("div"),c(gn.$$.fragment),Zm=o(),$a=r("p"),$a.textContent=Yp,Fm=o(),c(yt.$$.fragment),Js=o(),c(bn.$$.fragment),Cs=o(),Y=r("div"),c(_n.$$.fragment),Im=o(),ka=r("p"),ka.innerHTML=Np,Wm=o(),Pa=r("p"),Pa.textContent=Qp,Us=o(),qa=r("p"),this.h()},l(e){const m=eh("svelte-u9bgzb",document.head);d=a(m,"META",{name:!0,content:!0}),m.forEach(s),C=n(e),y=a(e,"P",{}),v(y).forEach(s),b=n(e),p(w.$$.fragment,e),i=n(e),J=a(e,"P",{"data-svelte-h":!0}),l(J)!=="svelte-zbcrud"&&(J.innerHTML=Gm),Ea=n(e),Tt=a(e,"P",{"data-svelte-h":!0}),l(Tt)!=="svelte-q45k9t"&&(Tt.innerHTML=Bm),Ya=n(e),xt=a(e,"UL",{"data-svelte-h":!0}),l(xt)!=="svelte-1jiiwof"&&(xt.innerHTML=zm),Na=n(e),wt=a(e,"P",{"data-svelte-h":!0}),l(wt)!=="svelte-cclo3a"&&(wt.innerHTML=Lm),Qa=n(e),p($t.$$.fragment,e),Da=n(e),$=a(e,"DIV",{class:!0});var P=v($);p(kt.$$.fragment,P),pi=n(P),Jn=a(P,"P",{"data-svelte-h":!0}),l(Jn)!=="svelte-12nk4t7"&&(Jn.textContent=Vm),hi=n(P),Cn=a(P,"P",{"data-svelte-h":!0}),l(Cn)!=="svelte-k0nhho"&&(Cn.innerHTML=Hm),fi=n(P),Un=a(P,"UL",{"data-svelte-h":!0}),l(Un)!=="svelte-6o6r8w"&&(Un.innerHTML=Xm),ui=n(P),jn=a(P,"P",{"data-svelte-h":!0}),l(jn)!=="svelte-1qxxkvo"&&(jn.textContent=Rm),gi=n(P),Zn=a(P,"UL",{"data-svelte-h":!0}),l(Zn)!=="svelte-1pj7uos"&&(Zn.innerHTML=qm),bi=n(P),D=a(P,"DIV",{class:!0});var fe=v(D);p(Pt.$$.fragment,fe),_i=n(fe),Fn=a(fe,"P",{"data-svelte-h":!0}),l(Fn)!=="svelte-1j9019y"&&(Fn.textContent=Em),yi=n(fe),p(be.$$.fragment,fe),fe.forEach(s),vi=n(P),S=a(P,"DIV",{class:!0});var ue=v(S);p(Jt.$$.fragment,ue),Mi=n(ue),In=a(ue,"P",{"data-svelte-h":!0}),l(In)!=="svelte-1mcxpi"&&(In.textContent=Ym),Ti=n(ue),p(_e.$$.fragment,ue),ue.forEach(s),xi=n(P),ye=a(P,"DIV",{class:!0});var yn=v(ye);p(Ct.$$.fragment,yn),wi=n(yn),Wn=a(yn,"P",{"data-svelte-h":!0}),l(Wn)!=="svelte-1r2xt0l"&&(Wn.innerHTML=Nm),yn.forEach(s),$i=n(P),ve=a(P,"DIV",{class:!0});var vn=v(ve);p(Ut.$$.fragment,vn),ki=n(vn),Gn=a(vn,"P",{"data-svelte-h":!0}),l(Gn)!=="svelte-1arq2q9"&&(Gn.innerHTML=Qm),vn.forEach(s),Pi=n(P),Me=a(P,"DIV",{class:!0});var Mn=v(Me);p(jt.$$.fragment,Mn),Ji=n(Mn),Bn=a(Mn,"P",{"data-svelte-h":!0}),l(Bn)!=="svelte-gf3f10"&&(Bn.textContent=Dm),Mn.forEach(s),Ci=n(P),Z=a(P,"DIV",{class:!0});var I=v(Z);p(Zt.$$.fragment,I),Ui=n(I),zn=a(I,"P",{"data-svelte-h":!0}),l(zn)!=="svelte-1m220hc"&&(zn.textContent=Sm),ji=n(I),Ln=a(I,"P",{"data-svelte-h":!0}),l(Ln)!=="svelte-1vvzid2"&&(Ln.innerHTML=Am),Zi=n(I),Vn=a(I,"P",{"data-svelte-h":!0}),l(Vn)!=="svelte-floidm"&&(Vn.innerHTML=Om),Fi=n(I),Hn=a(I,"P",{"data-svelte-h":!0}),l(Hn)!=="svelte-5vnnmn"&&(Hn.innerHTML=Km),Ii=n(I),p(Te.$$.fragment,I),Wi=n(I),p(xe.$$.fragment,I),Gi=n(I),Xn=a(I,"UL",{"data-svelte-h":!0}),l(Xn)!=="svelte-14hq6us"&&(Xn.innerHTML=ec),Bi=n(I),Rn=a(I,"P",{"data-svelte-h":!0}),l(Rn)!=="svelte-1ndujqx"&&(Rn.textContent=tc),zi=n(I),qn=a(I,"P",{"data-svelte-h":!0}),l(qn)!=="svelte-h5finb"&&(qn.textContent=oc),Li=n(I),En=a(I,"OL",{"data-svelte-h":!0}),l(En)!=="svelte-17iv4ty"&&(En.innerHTML=nc),Vi=n(I),Yn=a(I,"P",{"data-svelte-h":!0}),l(Yn)!=="svelte-1kh2krb"&&(Yn.textContent=rc),I.forEach(s),Hi=n(P),we=a(P,"DIV",{class:!0});var Tn=v(we);p(Ft.$$.fragment,Tn),Xi=n(Tn),Nn=a(Tn,"P",{"data-svelte-h":!0}),l(Nn)!=="svelte-1oe3d1l"&&(Nn.textContent=ac),Tn.forEach(s),Ri=n(P),$e=a(P,"DIV",{class:!0});var xn=v($e);p(It.$$.fragment,xn),qi=n(xn),Qn=a(xn,"P",{"data-svelte-h":!0}),l(Qn)!=="svelte-1o6lvix"&&(Qn.innerHTML=sc),xn.forEach(s),Ei=n(P),ke=a(P,"DIV",{class:!0});var wn=v(ke);p(Wt.$$.fragment,wn),Yi=n(wn),Dn=a(wn,"P",{"data-svelte-h":!0}),l(Dn)!=="svelte-1en7lnm"&&(Dn.textContent=ic),wn.forEach(s),Ni=n(P),A=a(P,"DIV",{class:!0});var ge=v(A);p(Gt.$$.fragment,ge),Qi=n(ge),Sn=a(ge,"P",{"data-svelte-h":!0}),l(Sn)!=="svelte-x1yzxn"&&(Sn.textContent=lc),Di=n(ge),An=a(ge,"P",{"data-svelte-h":!0}),l(An)!=="svelte-1c0vp3s"&&(An.textContent=dc),ge.forEach(s),Si=n(P),H=a(P,"DIV",{class:!0});var N=v(H);p(Bt.$$.fragment,N),Ai=n(N),On=a(N,"P",{"data-svelte-h":!0}),l(On)!=="svelte-vu1mp6"&&(On.textContent=mc),Oi=n(N),Kn=a(N,"P",{"data-svelte-h":!0}),l(Kn)!=="svelte-1c0vp3s"&&(Kn.textContent=cc),Ki=n(N),er=a(N,"P",{"data-svelte-h":!0}),l(er)!=="svelte-1entg0x"&&(er.innerHTML=pc),N.forEach(s),el=n(P),Pe=a(P,"DIV",{class:!0});var $n=v(Pe);p(zt.$$.fragment,$n),tl=n($n),tr=a($n,"P",{"data-svelte-h":!0}),l(tr)!=="svelte-1gceydr"&&(tr.innerHTML=hc),$n.forEach(s),ol=n(P),Je=a(P,"DIV",{class:!0});var kn=v(Je);p(Lt.$$.fragment,kn),nl=n(kn),or=a(kn,"P",{"data-svelte-h":!0}),l(or)!=="svelte-kxy0hj"&&(or.textContent=fc),kn.forEach(s),rl=n(P),Ce=a(P,"DIV",{class:!0});var Pn=v(Ce);p(Vt.$$.fragment,Pn),al=n(Pn),nr=a(Pn,"P",{"data-svelte-h":!0}),l(nr)!=="svelte-qvrpxu"&&(nr.textContent=uc),Pn.forEach(s),sl=n(P),O=a(P,"DIV",{class:!0});var Ja=v(O);p(Ht.$$.fragment,Ja),il=n(Ja),rr=a(Ja,"P",{"data-svelte-h":!0}),l(rr)!=="svelte-1ie4sav"&&(rr.textContent=gc),ll=n(Ja),p(Ue.$$.fragment,Ja),Ja.forEach(s),dl=n(P),K=a(P,"DIV",{class:!0});var Ca=v(K);p(Xt.$$.fragment,Ca),ml=n(Ca),ar=a(Ca,"P",{"data-svelte-h":!0}),l(ar)!=="svelte-sgsur1"&&(ar.innerHTML=bc),cl=n(Ca),sr=a(Ca,"P",{"data-svelte-h":!0}),l(sr)!=="svelte-1t4xas4"&&(sr.innerHTML=_c),Ca.forEach(s),pl=n(P),je=a(P,"DIV",{class:!0});var Zs=v(je);p(Rt.$$.fragment,Zs),hl=n(Zs),ir=a(Zs,"P",{"data-svelte-h":!0}),l(ir)!=="svelte-nzcguu"&&(ir.innerHTML=yc),Zs.forEach(s),fl=n(P),Ze=a(P,"DIV",{class:!0});var Fs=v(Ze);p(qt.$$.fragment,Fs),ul=n(Fs),lr=a(Fs,"P",{"data-svelte-h":!0}),l(lr)!=="svelte-1div8ut"&&(lr.innerHTML=vc),Fs.forEach(s),gl=n(P),Fe=a(P,"DIV",{class:!0});var Is=v(Fe);p(Et.$$.fragment,Is),bl=n(Is),dr=a(Is,"P",{"data-svelte-h":!0}),l(dr)!=="svelte-107jmv5"&&(dr.textContent=Mc),Is.forEach(s),_l=n(P),ee=a(P,"DIV",{class:!0});var Ua=v(ee);p(Yt.$$.fragment,Ua),yl=n(Ua),mr=a(Ua,"P",{"data-svelte-h":!0}),l(mr)!=="svelte-5nt4be"&&(mr.textContent=Tc),vl=n(Ua),cr=a(Ua,"P",{"data-svelte-h":!0}),l(cr)!=="svelte-1ti0hxu"&&(cr.innerHTML=xc),Ua.forEach(s),Ml=n(P),te=a(P,"DIV",{class:!0});var ja=v(te);p(Nt.$$.fragment,ja),Tl=n(ja),pr=a(ja,"P",{"data-svelte-h":!0}),l(pr)!=="svelte-1sq1344"&&(pr.innerHTML=wc),xl=n(ja),hr=a(ja,"P",{"data-svelte-h":!0}),l(hr)!=="svelte-1p16ejc"&&(hr.innerHTML=$c),ja.forEach(s),wl=n(P),Ie=a(P,"DIV",{class:!0});var Ws=v(Ie);p(Qt.$$.fragment,Ws),$l=n(Ws),fr=a(Ws,"P",{"data-svelte-h":!0}),l(fr)!=="svelte-nkp8sx"&&(fr.textContent=kc),Ws.forEach(s),P.forEach(s),Sa=n(e),ur=a(e,"A",{id:!0}),v(ur).forEach(s),Aa=n(e),p(Dt.$$.fragment,e),Oa=n(e),St=a(e,"P",{"data-svelte-h":!0}),l(St)!=="svelte-d69ley"&&(St.innerHTML=Pc),Ka=n(e),At=a(e,"P",{"data-svelte-h":!0}),l(At)!=="svelte-1o9smzw"&&(At.innerHTML=Jc),es=n(e),p(Ot.$$.fragment,e),ts=n(e),Kt=a(e,"P",{"data-svelte-h":!0}),l(Kt)!=="svelte-1rgo8dd"&&(Kt.innerHTML=Cc),os=n(e),eo=a(e,"P",{"data-svelte-h":!0}),l(eo)!=="svelte-1rt7qjf"&&(eo.innerHTML=Uc),ns=n(e),p(to.$$.fragment,e),rs=n(e),oo=a(e,"P",{"data-svelte-h":!0}),l(oo)!=="svelte-lzbzke"&&(oo.innerHTML=jc),as=n(e),p(no.$$.fragment,e),ss=n(e),p(ro.$$.fragment,e),is=n(e),ao=a(e,"P",{"data-svelte-h":!0}),l(ao)!=="svelte-yl2hc2"&&(ao.textContent=Zc),ls=n(e),p(so.$$.fragment,e),ds=n(e),io=a(e,"P",{"data-svelte-h":!0}),l(io)!=="svelte-10ti06c"&&(io.innerHTML=Fc),ms=n(e),p(lo.$$.fragment,e),cs=n(e),mo=a(e,"P",{"data-svelte-h":!0}),l(mo)!=="svelte-g6esk5"&&(mo.innerHTML=Ic),ps=n(e),p(co.$$.fragment,e),hs=n(e),po=a(e,"P",{"data-svelte-h":!0}),l(po)!=="svelte-cc9ykr"&&(po.innerHTML=Wc),fs=n(e),p(ho.$$.fragment,e),us=n(e),fo=a(e,"P",{"data-svelte-h":!0}),l(fo)!=="svelte-74b08n"&&(fo.innerHTML=Gc),gs=n(e),p(uo.$$.fragment,e),bs=n(e),go=a(e,"P",{"data-svelte-h":!0}),l(go)!=="svelte-1xwn0bq"&&(go.textContent=Bc),_s=n(e),p(bo.$$.fragment,e),ys=n(e),W=a(e,"DIV",{class:!0});var G=v(W);p(_o.$$.fragment,G),kl=n(G),gr=a(G,"P",{"data-svelte-h":!0}),l(gr)!=="svelte-9daxpl"&&(gr.innerHTML=zc),Pl=n(G),oe=a(G,"DIV",{class:!0});var Za=v(oe);p(yo.$$.fragment,Za),Jl=n(Za),br=a(Za,"P",{"data-svelte-h":!0}),l(br)!=="svelte-bszdl"&&(br.textContent=Lc),Cl=n(Za),_r=a(Za,"P",{"data-svelte-h":!0}),l(_r)!=="svelte-1yhz50g"&&(_r.innerHTML=Vc),Za.forEach(s),Ul=n(G),We=a(G,"DIV",{class:!0});var Gs=v(We);p(vo.$$.fragment,Gs),jl=n(Gs),yr=a(Gs,"P",{"data-svelte-h":!0}),l(yr)!=="svelte-1vzpsnb"&&(yr.textContent=Hc),Gs.forEach(s),Zl=n(G),Ge=a(G,"DIV",{class:!0});var Bs=v(Ge);p(Mo.$$.fragment,Bs),Fl=n(Bs),vr=a(Bs,"P",{"data-svelte-h":!0}),l(vr)!=="svelte-1quexap"&&(vr.innerHTML=Xc),Bs.forEach(s),Il=n(G),Be=a(G,"DIV",{class:!0});var zs=v(Be);p(To.$$.fragment,zs),Wl=n(zs),Mr=a(zs,"P",{"data-svelte-h":!0}),l(Mr)!=="svelte-qy1xxb"&&(Mr.textContent=Rc),zs.forEach(s),Gl=n(G),ze=a(G,"DIV",{class:!0});var Ls=v(ze);p(xo.$$.fragment,Ls),Bl=n(Ls),Tr=a(Ls,"P",{"data-svelte-h":!0}),l(Tr)!=="svelte-1y1rtu0"&&(Tr.textContent=qc),Ls.forEach(s),zl=n(G),Le=a(G,"DIV",{class:!0});var Vs=v(Le);p(wo.$$.fragment,Vs),Ll=n(Vs),xr=a(Vs,"P",{"data-svelte-h":!0}),l(xr)!=="svelte-1tbhnug"&&(xr.textContent=Ec),Vs.forEach(s),Vl=n(G),Ve=a(G,"DIV",{class:!0});var Hs=v(Ve);p($o.$$.fragment,Hs),Hl=n(Hs),wr=a(Hs,"P",{"data-svelte-h":!0}),l(wr)!=="svelte-vktrn"&&(wr.textContent=Yc),Hs.forEach(s),Xl=n(G),He=a(G,"DIV",{class:!0});var Xs=v(He);p(ko.$$.fragment,Xs),Rl=n(Xs),$r=a(Xs,"P",{"data-svelte-h":!0}),l($r)!=="svelte-110elzx"&&($r.innerHTML=Nc),Xs.forEach(s),G.forEach(s),vs=n(e),p(Po.$$.fragment,e),Ms=n(e),x=a(e,"DIV",{class:!0});var k=v(x);p(Jo.$$.fragment,k),ql=n(k),kr=a(k,"P",{"data-svelte-h":!0}),l(kr)!=="svelte-ho56tp"&&(kr.textContent=Qc),El=n(k),Pr=a(k,"P",{"data-svelte-h":!0}),l(Pr)!=="svelte-1ku0uw4"&&(Pr.innerHTML=Dc),Yl=n(k),Jr=a(k,"UL",{"data-svelte-h":!0}),l(Jr)!=="svelte-6o6r8w"&&(Jr.innerHTML=Sc),Nl=n(k),Cr=a(k,"P",{"data-svelte-h":!0}),l(Cr)!=="svelte-1qxxkvo"&&(Cr.textContent=Ac),Ql=n(k),Ur=a(k,"UL",{"data-svelte-h":!0}),l(Ur)!=="svelte-1giaft3"&&(Ur.innerHTML=Oc),Dl=n(k),ne=a(k,"DIV",{class:!0});var Fa=v(ne);p(Co.$$.fragment,Fa),Sl=n(Fa),jr=a(Fa,"P",{"data-svelte-h":!0}),l(jr)!=="svelte-8nftbo"&&(jr.innerHTML=Kc),Al=n(Fa),p(Xe.$$.fragment,Fa),Fa.forEach(s),Ol=n(k),Re=a(k,"DIV",{class:!0});var Rs=v(Re);p(Uo.$$.fragment,Rs),Kl=n(Rs),Zr=a(Rs,"P",{"data-svelte-h":!0}),l(Zr)!=="svelte-1r2xt0l"&&(Zr.innerHTML=ep),Rs.forEach(s),ed=n(k),qe=a(k,"DIV",{class:!0});var qs=v(qe);p(jo.$$.fragment,qs),td=n(qs),Fr=a(qs,"P",{"data-svelte-h":!0}),l(Fr)!=="svelte-wsnq9n"&&(Fr.textContent=tp),qs.forEach(s),od=n(k),Ee=a(k,"DIV",{class:!0});var Es=v(Ee);p(Zo.$$.fragment,Es),nd=n(Es),Ir=a(Es,"P",{"data-svelte-h":!0}),l(Ir)!=="svelte-1mh859w"&&(Ir.innerHTML=op),Es.forEach(s),rd=n(k),L=a(k,"DIV",{class:!0});var ce=v(L);p(Fo.$$.fragment,ce),ad=n(ce),Wr=a(ce,"P",{"data-svelte-h":!0}),l(Wr)!=="svelte-vc5x03"&&(Wr.textContent=np),sd=n(ce),Gr=a(ce,"P",{"data-svelte-h":!0}),l(Gr)!=="svelte-floidm"&&(Gr.innerHTML=rp),id=n(ce),Br=a(ce,"P",{"data-svelte-h":!0}),l(Br)!=="svelte-5vnnmn"&&(Br.innerHTML=ap),ld=n(ce),p(Ye.$$.fragment,ce),ce.forEach(s),dd=n(k),Ne=a(k,"DIV",{class:!0});var Ys=v(Ne);p(Io.$$.fragment,Ys),md=n(Ys),zr=a(Ys,"P",{"data-svelte-h":!0}),l(zr)!=="svelte-ja4l5b"&&(zr.textContent=sp),Ys.forEach(s),cd=n(k),Qe=a(k,"DIV",{class:!0});var Ns=v(Qe);p(Wo.$$.fragment,Ns),pd=n(Ns),Lr=a(Ns,"P",{"data-svelte-h":!0}),l(Lr)!=="svelte-1y1rtu0"&&(Lr.textContent=ip),Ns.forEach(s),hd=n(k),De=a(k,"DIV",{class:!0});var Qs=v(De);p(Go.$$.fragment,Qs),fd=n(Qs),Vr=a(Qs,"P",{"data-svelte-h":!0}),l(Vr)!=="svelte-1g2truu"&&(Vr.textContent=lp),Qs.forEach(s),ud=n(k),Se=a(k,"DIV",{class:!0});var Ds=v(Se);p(Bo.$$.fragment,Ds),gd=n(Ds),Hr=a(Ds,"P",{"data-svelte-h":!0}),l(Hr)!=="svelte-1hvwe3j"&&(Hr.textContent=dp),Ds.forEach(s),bd=n(k),Ae=a(k,"DIV",{class:!0});var Ss=v(Ae);p(zo.$$.fragment,Ss),_d=n(Ss),Xr=a(Ss,"P",{"data-svelte-h":!0}),l(Xr)!=="svelte-1mu3td8"&&(Xr.textContent=mp),Ss.forEach(s),yd=n(k),Oe=a(k,"DIV",{class:!0});var As=v(Oe);p(Lo.$$.fragment,As),vd=n(As),Rr=a(As,"P",{"data-svelte-h":!0}),l(Rr)!=="svelte-ib1802"&&(Rr.textContent=cp),As.forEach(s),Md=n(k),Ke=a(k,"DIV",{class:!0});var Os=v(Ke);p(Vo.$$.fragment,Os),Td=n(Os),qr=a(Os,"P",{"data-svelte-h":!0}),l(qr)!=="svelte-1vipzyv"&&(qr.textContent=pp),Os.forEach(s),xd=n(k),et=a(k,"DIV",{class:!0});var Ks=v(et);p(Ho.$$.fragment,Ks),wd=n(Ks),Er=a(Ks,"P",{"data-svelte-h":!0}),l(Er)!=="svelte-13xt7o7"&&(Er.innerHTML=hp),Ks.forEach(s),$d=n(k),tt=a(k,"DIV",{class:!0});var ei=v(tt);p(Xo.$$.fragment,ei),kd=n(ei),Yr=a(ei,"P",{"data-svelte-h":!0}),l(Yr)!=="svelte-qvrpxu"&&(Yr.textContent=fp),ei.forEach(s),Pd=n(k),re=a(k,"DIV",{class:!0});var Ia=v(re);p(Ro.$$.fragment,Ia),Jd=n(Ia),Nr=a(Ia,"P",{"data-svelte-h":!0}),l(Nr)!=="svelte-1ie4sav"&&(Nr.textContent=up),Cd=n(Ia),p(ot.$$.fragment,Ia),Ia.forEach(s),Ud=n(k),ae=a(k,"DIV",{class:!0});var Wa=v(ae);p(qo.$$.fragment,Wa),jd=n(Wa),Qr=a(Wa,"P",{"data-svelte-h":!0}),l(Qr)!=="svelte-sgsur1"&&(Qr.innerHTML=gp),Zd=n(Wa),Dr=a(Wa,"P",{"data-svelte-h":!0}),l(Dr)!=="svelte-1t4xas4"&&(Dr.innerHTML=bp),Wa.forEach(s),Fd=n(k),nt=a(k,"DIV",{class:!0});var ti=v(nt);p(Eo.$$.fragment,ti),Id=n(ti),Sr=a(ti,"P",{"data-svelte-h":!0}),l(Sr)!=="svelte-1yks4bb"&&(Sr.innerHTML=_p),ti.forEach(s),Wd=n(k),Ar=a(k,"DIV",{class:!0});var Dp=v(Ar);p(Yo.$$.fragment,Dp),Dp.forEach(s),Gd=n(k),rt=a(k,"DIV",{class:!0});var oi=v(rt);p(No.$$.fragment,oi),Bd=n(oi),Or=a(oi,"P",{"data-svelte-h":!0}),l(Or)!=="svelte-4zpnur"&&(Or.textContent=yp),oi.forEach(s),zd=n(k),at=a(k,"DIV",{class:!0});var ni=v(at);p(Qo.$$.fragment,ni),Ld=n(ni),Kr=a(ni,"P",{"data-svelte-h":!0}),l(Kr)!=="svelte-cmhrcy"&&(Kr.textContent=vp),ni.forEach(s),Vd=n(k),st=a(k,"DIV",{class:!0});var ri=v(st);p(Do.$$.fragment,ri),Hd=n(ri),ea=a(ri,"P",{"data-svelte-h":!0}),l(ea)!=="svelte-1ouwbwr"&&(ea.textContent=Mp),ri.forEach(s),Xd=n(k),it=a(k,"DIV",{class:!0});var ai=v(it);p(So.$$.fragment,ai),Rd=n(ai),ta=a(ai,"P",{"data-svelte-h":!0}),l(ta)!=="svelte-x8fgs0"&&(ta.textContent=Tp),ai.forEach(s),qd=n(k),lt=a(k,"DIV",{class:!0});var si=v(lt);p(Ao.$$.fragment,si),Ed=n(si),oa=a(si,"P",{"data-svelte-h":!0}),l(oa)!=="svelte-oo8tit"&&(oa.innerHTML=xp),si.forEach(s),Yd=n(k),dt=a(k,"DIV",{class:!0});var ii=v(dt);p(Oo.$$.fragment,ii),Nd=n(ii),na=a(ii,"P",{"data-svelte-h":!0}),l(na)!=="svelte-oo8tit"&&(na.innerHTML=wp),ii.forEach(s),k.forEach(s),Ts=n(e),p(Ko.$$.fragment,e),xs=n(e),q=a(e,"DIV",{class:!0});var Ga=v(q);p(en.$$.fragment,Ga),Qd=n(Ga),ra=a(Ga,"P",{"data-svelte-h":!0}),l(ra)!=="svelte-1dqi2f3"&&(ra.innerHTML=$p),Dd=n(Ga),mt=a(Ga,"DIV",{class:!0});var li=v(mt);p(tn.$$.fragment,li),Sd=n(li),aa=a(li,"P",{"data-svelte-h":!0}),l(aa)!=="svelte-im20fs"&&(aa.textContent=kp),li.forEach(s),Ga.forEach(s),ws=n(e),p(on.$$.fragment,e),$s=n(e),U=a(e,"DIV",{class:!0});var F=v(U);p(nn.$$.fragment,F),Ad=n(F),sa=a(F,"P",{"data-svelte-h":!0}),l(sa)!=="svelte-12nk4t7"&&(sa.textContent=Pp),Od=n(F),ia=a(F,"P",{"data-svelte-h":!0}),l(ia)!=="svelte-eltemh"&&(ia.innerHTML=Jp),Kd=n(F),la=a(F,"P",{"data-svelte-h":!0}),l(la)!=="svelte-1qxxkvo"&&(la.textContent=Cp),em=n(F),da=a(F,"UL",{"data-svelte-h":!0}),l(da)!=="svelte-1giaft3"&&(da.innerHTML=Up),tm=n(F),se=a(F,"DIV",{class:!0});var Ba=v(se);p(rn.$$.fragment,Ba),om=n(Ba),ma=a(Ba,"P",{"data-svelte-h":!0}),l(ma)!=="svelte-a8hf5e"&&(ma.textContent=jp),nm=n(Ba),p(ct.$$.fragment,Ba),Ba.forEach(s),rm=n(F),pt=a(F,"DIV",{class:!0});var di=v(pt);p(an.$$.fragment,di),am=n(di),ca=a(di,"P",{"data-svelte-h":!0}),l(ca)!=="svelte-12hq10t"&&(ca.innerHTML=Zp),di.forEach(s),sm=n(F),V=a(F,"DIV",{class:!0});var pe=v(V);p(sn.$$.fragment,pe),im=n(pe),pa=a(pe,"P",{"data-svelte-h":!0}),l(pa)!=="svelte-1oaqdrm"&&(pa.textContent=Fp),lm=n(pe),ha=a(pe,"P",{"data-svelte-h":!0}),l(ha)!=="svelte-floidm"&&(ha.innerHTML=Ip),dm=n(pe),fa=a(pe,"P",{"data-svelte-h":!0}),l(fa)!=="svelte-5vnnmn"&&(fa.innerHTML=Wp),mm=n(pe),p(ht.$$.fragment,pe),pe.forEach(s),cm=n(F),ie=a(F,"DIV",{class:!0});var za=v(ie);p(ln.$$.fragment,za),pm=n(za),ua=a(za,"P",{"data-svelte-h":!0}),l(ua)!=="svelte-plzzd0"&&(ua.innerHTML=Gp),hm=n(za),ga=a(za,"P",{"data-svelte-h":!0}),l(ga)!=="svelte-bzl1lx"&&(ga.textContent=Bp),za.forEach(s),fm=n(F),le=a(F,"DIV",{class:!0});var La=v(le);p(dn.$$.fragment,La),um=n(La),ba=a(La,"P",{"data-svelte-h":!0}),l(ba)!=="svelte-1ie4sav"&&(ba.textContent=zp),gm=n(La),p(ft.$$.fragment,La),La.forEach(s),bm=n(F),ut=a(F,"DIV",{class:!0});var mi=v(ut);p(mn.$$.fragment,mi),_m=n(mi),_a=a(mi,"P",{"data-svelte-h":!0}),l(_a)!=="svelte-12ebkah"&&(_a.innerHTML=Lp),mi.forEach(s),ym=n(F),X=a(F,"DIV",{class:!0});var vt=v(X);p(cn.$$.fragment,vt),vm=n(vt),ya=a(vt,"P",{"data-svelte-h":!0}),l(ya)!=="svelte-16uni9u"&&(ya.innerHTML=Vp),Mm=n(vt),va=a(vt,"P",{"data-svelte-h":!0}),l(va)!=="svelte-qh3hgx"&&(va.textContent=Hp),Tm=n(vt),p(gt.$$.fragment,vt),vt.forEach(s),xm=n(F),R=a(F,"DIV",{class:!0});var Mt=v(R);p(pn.$$.fragment,Mt),wm=n(Mt),Ma=a(Mt,"P",{"data-svelte-h":!0}),l(Ma)!=="svelte-uock64"&&(Ma.innerHTML=Xp),$m=n(Mt),Ta=a(Mt,"P",{"data-svelte-h":!0}),l(Ta)!=="svelte-1rko7go"&&(Ta.textContent=Rp),km=n(Mt),p(bt.$$.fragment,Mt),Mt.forEach(s),Pm=n(F),de=a(F,"DIV",{class:!0});var Va=v(de);p(hn.$$.fragment,Va),Jm=n(Va),xa=a(Va,"P",{"data-svelte-h":!0}),l(xa)!=="svelte-1jvan3s"&&(xa.innerHTML=qp),Cm=n(Va),p(_t.$$.fragment,Va),Va.forEach(s),F.forEach(s),ks=n(e),p(fn.$$.fragment,e),Ps=n(e),E=a(e,"DIV",{class:!0});var Ha=v(E);p(un.$$.fragment,Ha),Um=n(Ha),wa=a(Ha,"P",{"data-svelte-h":!0}),l(wa)!=="svelte-s2i98"&&(wa.textContent=Ep),jm=n(Ha),me=a(Ha,"DIV",{class:!0});var Xa=v(me);p(gn.$$.fragment,Xa),Zm=n(Xa),$a=a(Xa,"P",{"data-svelte-h":!0}),l($a)!=="svelte-am4l6x"&&($a.textContent=Yp),Fm=n(Xa),p(yt.$$.fragment,Xa),Xa.forEach(s),Ha.forEach(s),Js=n(e),p(bn.$$.fragment,e),Cs=n(e),Y=a(e,"DIV",{class:!0});var Ra=v(Y);p(_n.$$.fragment,Ra),Im=n(Ra),ka=a(Ra,"P",{"data-svelte-h":!0}),l(ka)!=="svelte-16tfby7"&&(ka.innerHTML=Np),Wm=n(Ra),Pa=a(Ra,"P",{"data-svelte-h":!0}),l(Pa)!=="svelte-bzl1lx"&&(Pa.textContent=Qp),Ra.forEach(s),Us=n(e),qa=a(e,"P",{}),v(qa).forEach(s),this.h()},h(){M(d,"name","hf:doc:metadata"),M(d,"content",bh),M(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ur,"id","from_pretrained-torch-dtype"),M(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(x,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,m){t(document.head,d),_(e,C,m),_(e,y,m),_(e,b,m),h(w,e,m),_(e,i,m),_(e,J,m),_(e,Ea,m),_(e,Tt,m),_(e,Ya,m),_(e,xt,m),_(e,Na,m),_(e,wt,m),_(e,Qa,m),h($t,e,m),_(e,Da,m),_(e,$,m),h(kt,$,null),t($,pi),t($,Jn),t($,hi),t($,Cn),t($,fi),t($,Un),t($,ui),t($,jn),t($,gi),t($,Zn),t($,bi),t($,D),h(Pt,D,null),t(D,_i),t(D,Fn),t(D,yi),h(be,D,null),t($,vi),t($,S),h(Jt,S,null),t(S,Mi),t(S,In),t(S,Ti),h(_e,S,null),t($,xi),t($,ye),h(Ct,ye,null),t(ye,wi),t(ye,Wn),t($,$i),t($,ve),h(Ut,ve,null),t(ve,ki),t(ve,Gn),t($,Pi),t($,Me),h(jt,Me,null),t(Me,Ji),t(Me,Bn),t($,Ci),t($,Z),h(Zt,Z,null),t(Z,Ui),t(Z,zn),t(Z,ji),t(Z,Ln),t(Z,Zi),t(Z,Vn),t(Z,Fi),t(Z,Hn),t(Z,Ii),h(Te,Z,null),t(Z,Wi),h(xe,Z,null),t(Z,Gi),t(Z,Xn),t(Z,Bi),t(Z,Rn),t(Z,zi),t(Z,qn),t(Z,Li),t(Z,En),t(Z,Vi),t(Z,Yn),t($,Hi),t($,we),h(Ft,we,null),t(we,Xi),t(we,Nn),t($,Ri),t($,$e),h(It,$e,null),t($e,qi),t($e,Qn),t($,Ei),t($,ke),h(Wt,ke,null),t(ke,Yi),t(ke,Dn),t($,Ni),t($,A),h(Gt,A,null),t(A,Qi),t(A,Sn),t(A,Di),t(A,An),t($,Si),t($,H),h(Bt,H,null),t(H,Ai),t(H,On),t(H,Oi),t(H,Kn),t(H,Ki),t(H,er),t($,el),t($,Pe),h(zt,Pe,null),t(Pe,tl),t(Pe,tr),t($,ol),t($,Je),h(Lt,Je,null),t(Je,nl),t(Je,or),t($,rl),t($,Ce),h(Vt,Ce,null),t(Ce,al),t(Ce,nr),t($,sl),t($,O),h(Ht,O,null),t(O,il),t(O,rr),t(O,ll),h(Ue,O,null),t($,dl),t($,K),h(Xt,K,null),t(K,ml),t(K,ar),t(K,cl),t(K,sr),t($,pl),t($,je),h(Rt,je,null),t(je,hl),t(je,ir),t($,fl),t($,Ze),h(qt,Ze,null),t(Ze,ul),t(Ze,lr),t($,gl),t($,Fe),h(Et,Fe,null),t(Fe,bl),t(Fe,dr),t($,_l),t($,ee),h(Yt,ee,null),t(ee,yl),t(ee,mr),t(ee,vl),t(ee,cr),t($,Ml),t($,te),h(Nt,te,null),t(te,Tl),t(te,pr),t(te,xl),t(te,hr),t($,wl),t($,Ie),h(Qt,Ie,null),t(Ie,$l),t(Ie,fr),_(e,Sa,m),_(e,ur,m),_(e,Aa,m),h(Dt,e,m),_(e,Oa,m),_(e,St,m),_(e,Ka,m),_(e,At,m),_(e,es,m),h(Ot,e,m),_(e,ts,m),_(e,Kt,m),_(e,os,m),_(e,eo,m),_(e,ns,m),h(to,e,m),_(e,rs,m),_(e,oo,m),_(e,as,m),h(no,e,m),_(e,ss,m),h(ro,e,m),_(e,is,m),_(e,ao,m),_(e,ls,m),h(so,e,m),_(e,ds,m),_(e,io,m),_(e,ms,m),h(lo,e,m),_(e,cs,m),_(e,mo,m),_(e,ps,m),h(co,e,m),_(e,hs,m),_(e,po,m),_(e,fs,m),h(ho,e,m),_(e,us,m),_(e,fo,m),_(e,gs,m),h(uo,e,m),_(e,bs,m),_(e,go,m),_(e,_s,m),h(bo,e,m),_(e,ys,m),_(e,W,m),h(_o,W,null),t(W,kl),t(W,gr),t(W,Pl),t(W,oe),h(yo,oe,null),t(oe,Jl),t(oe,br),t(oe,Cl),t(oe,_r),t(W,Ul),t(W,We),h(vo,We,null),t(We,jl),t(We,yr),t(W,Zl),t(W,Ge),h(Mo,Ge,null),t(Ge,Fl),t(Ge,vr),t(W,Il),t(W,Be),h(To,Be,null),t(Be,Wl),t(Be,Mr),t(W,Gl),t(W,ze),h(xo,ze,null),t(ze,Bl),t(ze,Tr),t(W,zl),t(W,Le),h(wo,Le,null),t(Le,Ll),t(Le,xr),t(W,Vl),t(W,Ve),h($o,Ve,null),t(Ve,Hl),t(Ve,wr),t(W,Xl),t(W,He),h(ko,He,null),t(He,Rl),t(He,$r),_(e,vs,m),h(Po,e,m),_(e,Ms,m),_(e,x,m),h(Jo,x,null),t(x,ql),t(x,kr),t(x,El),t(x,Pr),t(x,Yl),t(x,Jr),t(x,Nl),t(x,Cr),t(x,Ql),t(x,Ur),t(x,Dl),t(x,ne),h(Co,ne,null),t(ne,Sl),t(ne,jr),t(ne,Al),h(Xe,ne,null),t(x,Ol),t(x,Re),h(Uo,Re,null),t(Re,Kl),t(Re,Zr),t(x,ed),t(x,qe),h(jo,qe,null),t(qe,td),t(qe,Fr),t(x,od),t(x,Ee),h(Zo,Ee,null),t(Ee,nd),t(Ee,Ir),t(x,rd),t(x,L),h(Fo,L,null),t(L,ad),t(L,Wr),t(L,sd),t(L,Gr),t(L,id),t(L,Br),t(L,ld),h(Ye,L,null),t(x,dd),t(x,Ne),h(Io,Ne,null),t(Ne,md),t(Ne,zr),t(x,cd),t(x,Qe),h(Wo,Qe,null),t(Qe,pd),t(Qe,Lr),t(x,hd),t(x,De),h(Go,De,null),t(De,fd),t(De,Vr),t(x,ud),t(x,Se),h(Bo,Se,null),t(Se,gd),t(Se,Hr),t(x,bd),t(x,Ae),h(zo,Ae,null),t(Ae,_d),t(Ae,Xr),t(x,yd),t(x,Oe),h(Lo,Oe,null),t(Oe,vd),t(Oe,Rr),t(x,Md),t(x,Ke),h(Vo,Ke,null),t(Ke,Td),t(Ke,qr),t(x,xd),t(x,et),h(Ho,et,null),t(et,wd),t(et,Er),t(x,$d),t(x,tt),h(Xo,tt,null),t(tt,kd),t(tt,Yr),t(x,Pd),t(x,re),h(Ro,re,null),t(re,Jd),t(re,Nr),t(re,Cd),h(ot,re,null),t(x,Ud),t(x,ae),h(qo,ae,null),t(ae,jd),t(ae,Qr),t(ae,Zd),t(ae,Dr),t(x,Fd),t(x,nt),h(Eo,nt,null),t(nt,Id),t(nt,Sr),t(x,Wd),t(x,Ar),h(Yo,Ar,null),t(x,Gd),t(x,rt),h(No,rt,null),t(rt,Bd),t(rt,Or),t(x,zd),t(x,at),h(Qo,at,null),t(at,Ld),t(at,Kr),t(x,Vd),t(x,st),h(Do,st,null),t(st,Hd),t(st,ea),t(x,Xd),t(x,it),h(So,it,null),t(it,Rd),t(it,ta),t(x,qd),t(x,lt),h(Ao,lt,null),t(lt,Ed),t(lt,oa),t(x,Yd),t(x,dt),h(Oo,dt,null),t(dt,Nd),t(dt,na),_(e,Ts,m),h(Ko,e,m),_(e,xs,m),_(e,q,m),h(en,q,null),t(q,Qd),t(q,ra),t(q,Dd),t(q,mt),h(tn,mt,null),t(mt,Sd),t(mt,aa),_(e,ws,m),h(on,e,m),_(e,$s,m),_(e,U,m),h(nn,U,null),t(U,Ad),t(U,sa),t(U,Od),t(U,ia),t(U,Kd),t(U,la),t(U,em),t(U,da),t(U,tm),t(U,se),h(rn,se,null),t(se,om),t(se,ma),t(se,nm),h(ct,se,null),t(U,rm),t(U,pt),h(an,pt,null),t(pt,am),t(pt,ca),t(U,sm),t(U,V),h(sn,V,null),t(V,im),t(V,pa),t(V,lm),t(V,ha),t(V,dm),t(V,fa),t(V,mm),h(ht,V,null),t(U,cm),t(U,ie),h(ln,ie,null),t(ie,pm),t(ie,ua),t(ie,hm),t(ie,ga),t(U,fm),t(U,le),h(dn,le,null),t(le,um),t(le,ba),t(le,gm),h(ft,le,null),t(U,bm),t(U,ut),h(mn,ut,null),t(ut,_m),t(ut,_a),t(U,ym),t(U,X),h(cn,X,null),t(X,vm),t(X,ya),t(X,Mm),t(X,va),t(X,Tm),h(gt,X,null),t(U,xm),t(U,R),h(pn,R,null),t(R,wm),t(R,Ma),t(R,$m),t(R,Ta),t(R,km),h(bt,R,null),t(U,Pm),t(U,de),h(hn,de,null),t(de,Jm),t(de,xa),t(de,Cm),h(_t,de,null),_(e,ks,m),h(fn,e,m),_(e,Ps,m),_(e,E,m),h(un,E,null),t(E,Um),t(E,wa),t(E,jm),t(E,me),h(gn,me,null),t(me,Zm),t(me,$a),t(me,Fm),h(yt,me,null),_(e,Js,m),h(bn,e,m),_(e,Cs,m),_(e,Y,m),h(_n,Y,null),t(Y,Im),t(Y,ka),t(Y,Wm),t(Y,Pa),_(e,Us,m),_(e,qa,m),js=!0},p(e,[m]){const P={};m&2&&(P.$$scope={dirty:m,ctx:e}),be.$set(P);const fe={};m&2&&(fe.$$scope={dirty:m,ctx:e}),_e.$set(fe);const ue={};m&2&&(ue.$$scope={dirty:m,ctx:e}),Te.$set(ue);const yn={};m&2&&(yn.$$scope={dirty:m,ctx:e}),xe.$set(yn);const vn={};m&2&&(vn.$$scope={dirty:m,ctx:e}),Ue.$set(vn);const Mn={};m&2&&(Mn.$$scope={dirty:m,ctx:e}),Xe.$set(Mn);const I={};m&2&&(I.$$scope={dirty:m,ctx:e}),Ye.$set(I);const Tn={};m&2&&(Tn.$$scope={dirty:m,ctx:e}),ot.$set(Tn);const xn={};m&2&&(xn.$$scope={dirty:m,ctx:e}),ct.$set(xn);const wn={};m&2&&(wn.$$scope={dirty:m,ctx:e}),ht.$set(wn);const ge={};m&2&&(ge.$$scope={dirty:m,ctx:e}),ft.$set(ge);const N={};m&2&&(N.$$scope={dirty:m,ctx:e}),gt.$set(N);const $n={};m&2&&($n.$$scope={dirty:m,ctx:e}),bt.$set($n);const kn={};m&2&&(kn.$$scope={dirty:m,ctx:e}),_t.$set(kn);const Pn={};m&2&&(Pn.$$scope={dirty:m,ctx:e}),yt.$set(Pn)},i(e){js||(f(w.$$.fragment,e),f($t.$$.fragment,e),f(kt.$$.fragment,e),f(Pt.$$.fragment,e),f(be.$$.fragment,e),f(Jt.$$.fragment,e),f(_e.$$.fragment,e),f(Ct.$$.fragment,e),f(Ut.$$.fragment,e),f(jt.$$.fragment,e),f(Zt.$$.fragment,e),f(Te.$$.fragment,e),f(xe.$$.fragment,e),f(Ft.$$.fragment,e),f(It.$$.fragment,e),f(Wt.$$.fragment,e),f(Gt.$$.fragment,e),f(Bt.$$.fragment,e),f(zt.$$.fragment,e),f(Lt.$$.fragment,e),f(Vt.$$.fragment,e),f(Ht.$$.fragment,e),f(Ue.$$.fragment,e),f(Xt.$$.fragment,e),f(Rt.$$.fragment,e),f(qt.$$.fragment,e),f(Et.$$.fragment,e),f(Yt.$$.fragment,e),f(Nt.$$.fragment,e),f(Qt.$$.fragment,e),f(Dt.$$.fragment,e),f(Ot.$$.fragment,e),f(to.$$.fragment,e),f(no.$$.fragment,e),f(ro.$$.fragment,e),f(so.$$.fragment,e),f(lo.$$.fragment,e),f(co.$$.fragment,e),f(ho.$$.fragment,e),f(uo.$$.fragment,e),f(bo.$$.fragment,e),f(_o.$$.fragment,e),f(yo.$$.fragment,e),f(vo.$$.fragment,e),f(Mo.$$.fragment,e),f(To.$$.fragment,e),f(xo.$$.fragment,e),f(wo.$$.fragment,e),f($o.$$.fragment,e),f(ko.$$.fragment,e),f(Po.$$.fragment,e),f(Jo.$$.fragment,e),f(Co.$$.fragment,e),f(Xe.$$.fragment,e),f(Uo.$$.fragment,e),f(jo.$$.fragment,e),f(Zo.$$.fragment,e),f(Fo.$$.fragment,e),f(Ye.$$.fragment,e),f(Io.$$.fragment,e),f(Wo.$$.fragment,e),f(Go.$$.fragment,e),f(Bo.$$.fragment,e),f(zo.$$.fragment,e),f(Lo.$$.fragment,e),f(Vo.$$.fragment,e),f(Ho.$$.fragment,e),f(Xo.$$.fragment,e),f(Ro.$$.fragment,e),f(ot.$$.fragment,e),f(qo.$$.fragment,e),f(Eo.$$.fragment,e),f(Yo.$$.fragment,e),f(No.$$.fragment,e),f(Qo.$$.fragment,e),f(Do.$$.fragment,e),f(So.$$.fragment,e),f(Ao.$$.fragment,e),f(Oo.$$.fragment,e),f(Ko.$$.fragment,e),f(en.$$.fragment,e),f(tn.$$.fragment,e),f(on.$$.fragment,e),f(nn.$$.fragment,e),f(rn.$$.fragment,e),f(ct.$$.fragment,e),f(an.$$.fragment,e),f(sn.$$.fragment,e),f(ht.$$.fragment,e),f(ln.$$.fragment,e),f(dn.$$.fragment,e),f(ft.$$.fragment,e),f(mn.$$.fragment,e),f(cn.$$.fragment,e),f(gt.$$.fragment,e),f(pn.$$.fragment,e),f(bt.$$.fragment,e),f(hn.$$.fragment,e),f(_t.$$.fragment,e),f(fn.$$.fragment,e),f(un.$$.fragment,e),f(gn.$$.fragment,e),f(yt.$$.fragment,e),f(bn.$$.fragment,e),f(_n.$$.fragment,e),js=!0)},o(e){u(w.$$.fragment,e),u($t.$$.fragment,e),u(kt.$$.fragment,e),u(Pt.$$.fragment,e),u(be.$$.fragment,e),u(Jt.$$.fragment,e),u(_e.$$.fragment,e),u(Ct.$$.fragment,e),u(Ut.$$.fragment,e),u(jt.$$.fragment,e),u(Zt.$$.fragment,e),u(Te.$$.fragment,e),u(xe.$$.fragment,e),u(Ft.$$.fragment,e),u(It.$$.fragment,e),u(Wt.$$.fragment,e),u(Gt.$$.fragment,e),u(Bt.$$.fragment,e),u(zt.$$.fragment,e),u(Lt.$$.fragment,e),u(Vt.$$.fragment,e),u(Ht.$$.fragment,e),u(Ue.$$.fragment,e),u(Xt.$$.fragment,e),u(Rt.$$.fragment,e),u(qt.$$.fragment,e),u(Et.$$.fragment,e),u(Yt.$$.fragment,e),u(Nt.$$.fragment,e),u(Qt.$$.fragment,e),u(Dt.$$.fragment,e),u(Ot.$$.fragment,e),u(to.$$.fragment,e),u(no.$$.fragment,e),u(ro.$$.fragment,e),u(so.$$.fragment,e),u(lo.$$.fragment,e),u(co.$$.fragment,e),u(ho.$$.fragment,e),u(uo.$$.fragment,e),u(bo.$$.fragment,e),u(_o.$$.fragment,e),u(yo.$$.fragment,e),u(vo.$$.fragment,e),u(Mo.$$.fragment,e),u(To.$$.fragment,e),u(xo.$$.fragment,e),u(wo.$$.fragment,e),u($o.$$.fragment,e),u(ko.$$.fragment,e),u(Po.$$.fragment,e),u(Jo.$$.fragment,e),u(Co.$$.fragment,e),u(Xe.$$.fragment,e),u(Uo.$$.fragment,e),u(jo.$$.fragment,e),u(Zo.$$.fragment,e),u(Fo.$$.fragment,e),u(Ye.$$.fragment,e),u(Io.$$.fragment,e),u(Wo.$$.fragment,e),u(Go.$$.fragment,e),u(Bo.$$.fragment,e),u(zo.$$.fragment,e),u(Lo.$$.fragment,e),u(Vo.$$.fragment,e),u(Ho.$$.fragment,e),u(Xo.$$.fragment,e),u(Ro.$$.fragment,e),u(ot.$$.fragment,e),u(qo.$$.fragment,e),u(Eo.$$.fragment,e),u(Yo.$$.fragment,e),u(No.$$.fragment,e),u(Qo.$$.fragment,e),u(Do.$$.fragment,e),u(So.$$.fragment,e),u(Ao.$$.fragment,e),u(Oo.$$.fragment,e),u(Ko.$$.fragment,e),u(en.$$.fragment,e),u(tn.$$.fragment,e),u(on.$$.fragment,e),u(nn.$$.fragment,e),u(rn.$$.fragment,e),u(ct.$$.fragment,e),u(an.$$.fragment,e),u(sn.$$.fragment,e),u(ht.$$.fragment,e),u(ln.$$.fragment,e),u(dn.$$.fragment,e),u(ft.$$.fragment,e),u(mn.$$.fragment,e),u(cn.$$.fragment,e),u(gt.$$.fragment,e),u(pn.$$.fragment,e),u(bt.$$.fragment,e),u(hn.$$.fragment,e),u(_t.$$.fragment,e),u(fn.$$.fragment,e),u(un.$$.fragment,e),u(gn.$$.fragment,e),u(yt.$$.fragment,e),u(bn.$$.fragment,e),u(_n.$$.fragment,e),js=!1},d(e){e&&(s(C),s(y),s(b),s(i),s(J),s(Ea),s(Tt),s(Ya),s(xt),s(Na),s(wt),s(Qa),s(Da),s($),s(Sa),s(ur),s(Aa),s(Oa),s(St),s(Ka),s(At),s(es),s(ts),s(Kt),s(os),s(eo),s(ns),s(rs),s(oo),s(as),s(ss),s(is),s(ao),s(ls),s(ds),s(io),s(ms),s(cs),s(mo),s(ps),s(hs),s(po),s(fs),s(us),s(fo),s(gs),s(bs),s(go),s(_s),s(ys),s(W),s(vs),s(Ms),s(x),s(Ts),s(xs),s(q),s(ws),s($s),s(U),s(ks),s(Ps),s(E),s(Js),s(Cs),s(Y),s(Us),s(qa)),s(d),g(w,e),g($t,e),g(kt),g(Pt),g(be),g(Jt),g(_e),g(Ct),g(Ut),g(jt),g(Zt),g(Te),g(xe),g(Ft),g(It),g(Wt),g(Gt),g(Bt),g(zt),g(Lt),g(Vt),g(Ht),g(Ue),g(Xt),g(Rt),g(qt),g(Et),g(Yt),g(Nt),g(Qt),g(Dt,e),g(Ot,e),g(to,e),g(no,e),g(ro,e),g(so,e),g(lo,e),g(co,e),g(ho,e),g(uo,e),g(bo,e),g(_o),g(yo),g(vo),g(Mo),g(To),g(xo),g(wo),g($o),g(ko),g(Po,e),g(Jo),g(Co),g(Xe),g(Uo),g(jo),g(Zo),g(Fo),g(Ye),g(Io),g(Wo),g(Go),g(Bo),g(zo),g(Lo),g(Vo),g(Ho),g(Xo),g(Ro),g(ot),g(qo),g(Eo),g(Yo),g(No),g(Qo),g(Do),g(So),g(Ao),g(Oo),g(Ko,e),g(en),g(tn),g(on,e),g(nn),g(rn),g(ct),g(an),g(sn),g(ht),g(ln),g(dn),g(ft),g(mn),g(cn),g(gt),g(pn),g(bt),g(hn),g(_t),g(fn,e),g(un),g(gn),g(yt),g(bn,e),g(_n)}}}const bh='{"title":"Models","local":"models","sections":[{"title":"PreTrainedModel","local":"transformers.PreTrainedModel","sections":[{"title":"Large model loading","local":"large-model-loading","sections":[],"depth":3},{"title":"Model Instantiation dtype","local":"model-instantiation-dtype","sections":[],"depth":3}],"depth":2},{"title":"ModuleUtilsMixin","local":"transformers.modeling_utils.ModuleUtilsMixin","sections":[],"depth":2},{"title":"TFPreTrainedModel","local":"transformers.TFPreTrainedModel","sections":[],"depth":2},{"title":"TFModelUtilsMixin","local":"transformers.modeling_tf_utils.TFModelUtilsMixin","sections":[],"depth":2},{"title":"FlaxPreTrainedModel","local":"transformers.FlaxPreTrainedModel","sections":[],"depth":2},{"title":"Pushing to the Hub","local":"transformers.utils.PushToHubMixin","sections":[],"depth":2},{"title":"Sharded checkpoints","local":"transformers.modeling_utils.load_sharded_checkpoint","sections":[],"depth":2}],"depth":1}';function _h(j){return Ap(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class kh extends Op{constructor(d){super(),Kp(this,d,_h,gh,Sp,{})}}export{kh as component};
