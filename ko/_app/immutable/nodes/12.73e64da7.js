import{s as ge,o as ye,n as z}from"../chunks/scheduler.56730f09.js";import{S as he,i as be,g as u,s as r,r as d,A as je,h as f,f as e,c as i,j as fe,u as $,x as j,k as de,y as _e,a as l,v as g,d as y,t as h,w as b}from"../chunks/index.1f144517.js";import{T as zt}from"../chunks/Tip.41e845e5.js";import{C as q}from"../chunks/CodeBlock.738eeccb.js";import{F as $e,M as xs}from"../chunks/Markdown.c541024b.js";import{H as Q}from"../chunks/Heading.57d46534.js";function Me(w){let n,c='configuration 파일을 딕셔너리로 저장하거나 사용자 정의 configuration 속성과 기본 configuration 속성의 차이점만 저장할 수도 있습니다! 자세한 내용은 <a href="main_classes/configuration">configuration</a> 문서를 참조하세요.';return{c(){n=u("p"),n.innerHTML=c},l(a){n=f(a,"P",{"data-svelte-h":!0}),j(n)!=="svelte-p4ht4o"&&(n.innerHTML=c)},m(a,o){l(a,n,o)},p:z,d(a){a&&e(n)}}}function ve(w){let n,c="사용자 지정 configuration 속성을 모델에 가져옵니다:",a,o,_,M,C="이제 사전 학습된 가중치 대신 임의의 값을 가진 모델이 생성됩니다. 이 모델을 훈련하기 전까지는 유용하게 사용할 수 없습니다. 훈련은 비용과 시간이 많이 소요되는 프로세스입니다. 일반적으로 훈련에 필요한 리소스의 일부만 사용하면서 더 나은 결과를 더 빨리 얻으려면 사전 훈련된 모델을 사용하는 것이 좋습니다.",R,v,J="사전 학습된 모델을 <code>from_pretrained()</code>로 생성합니다:",m,T,U,W,G="🤗 Transformers에서 제공한 모델의 사전 학습된 가중치를 사용하는 경우 기본 모델 configuration을 자동으로 불러옵니다. 그러나 원하는 경우 기본 모델 configuration 속성의 일부 또는 전부를 사용자 지정으로 바꿀 수 있습니다:",x,k,V;return o=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpc3RpbEJlcnRNb2RlbCUwQSUwQW15X2NvbmZpZyUyMCUzRCUyMERpc3RpbEJlcnRDb25maWcuZnJvbV9wcmV0cmFpbmVkKCUyMi4lMkZ5b3VyX21vZGVsX3NhdmVfcGF0aCUyRmNvbmZpZy5qc29uJTIyKSUwQW1vZGVsJTIwJTNEJTIwRGlzdGlsQmVydE1vZGVsKG15X2NvbmZpZyk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span>my_config = DistilBertConfig.from_pretrained(<span class="hljs-string">&quot;./your_model_save_path/config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DistilBertModel(my_config)`,wrap:!1}}),T=new q({props:{code:"bW9kZWwlMjAlM0QlMjBEaXN0aWxCZXJ0TW9kZWwuZnJvbV9wcmV0cmFpbmVkKCUyMmRpc3RpbGJlcnQlMkZkaXN0aWxiZXJ0LWJhc2UtdW5jYXNlZCUyMik=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model = DistilBertModel.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)',wrap:!1}}),k=new q({props:{code:"bW9kZWwlMjAlM0QlMjBEaXN0aWxCZXJ0TW9kZWwuZnJvbV9wcmV0cmFpbmVkKCUyMmRpc3RpbGJlcnQlMkZkaXN0aWxiZXJ0LWJhc2UtdW5jYXNlZCUyMiUyQyUyMGNvbmZpZyUzRG15X2NvbmZpZyk=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model = DistilBertModel.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>, config=my_config)',wrap:!1}}),{c(){n=u("p"),n.textContent=c,a=r(),d(o.$$.fragment),_=r(),M=u("p"),M.textContent=C,R=r(),v=u("p"),v.innerHTML=J,m=r(),d(T.$$.fragment),U=r(),W=u("p"),W.textContent=G,x=r(),d(k.$$.fragment)},l(p){n=f(p,"P",{"data-svelte-h":!0}),j(n)!=="svelte-14tvdkn"&&(n.textContent=c),a=i(p),$(o.$$.fragment,p),_=i(p),M=f(p,"P",{"data-svelte-h":!0}),j(M)!=="svelte-1x90d88"&&(M.textContent=C),R=i(p),v=f(p,"P",{"data-svelte-h":!0}),j(v)!=="svelte-157o62u"&&(v.innerHTML=J),m=i(p),$(T.$$.fragment,p),U=i(p),W=f(p,"P",{"data-svelte-h":!0}),j(W)!=="svelte-yuz877"&&(W.textContent=G),x=i(p),$(k.$$.fragment,p)},m(p,Z){l(p,n,Z),l(p,a,Z),g(o,p,Z),l(p,_,Z),l(p,M,Z),l(p,R,Z),l(p,v,Z),l(p,m,Z),g(T,p,Z),l(p,U,Z),l(p,W,Z),l(p,x,Z),g(k,p,Z),V=!0},p:z,i(p){V||(y(o.$$.fragment,p),y(T.$$.fragment,p),y(k.$$.fragment,p),V=!0)},o(p){h(o.$$.fragment,p),h(T.$$.fragment,p),h(k.$$.fragment,p),V=!1},d(p){p&&(e(n),e(a),e(_),e(M),e(R),e(v),e(m),e(U),e(W),e(x)),b(o,p),b(T,p),b(k,p)}}}function Te(w){let n,c;return n=new xs({props:{$$slots:{default:[ve]},$$scope:{ctx:w}}}),{c(){d(n.$$.fragment)},l(a){$(n.$$.fragment,a)},m(a,o){g(n,a,o),c=!0},p(a,o){const _={};o&2&&(_.$$scope={dirty:o,ctx:a}),n.$set(_)},i(a){c||(y(n.$$.fragment,a),c=!0)},o(a){h(n.$$.fragment,a),c=!1},d(a){b(n,a)}}}function Ze(w){let n,c="사용자 지정 configuration 속성을 모델에 불러옵니다:",a,o,_,M,C="이제 사전 학습된 가중치 대신 임의의 값을 가진 모델이 생성됩니다. 이 모델을 훈련하기 전까지는 유용하게 사용할 수 없습니다. 훈련은 비용과 시간이 많이 소요되는 프로세스입니다. 일반적으로 훈련에 필요한 리소스의 일부만 사용하면서 더 나은 결과를 더 빨리 얻으려면 사전 훈련된 모델을 사용하는 것이 좋습니다.",R,v,J="사전 학습된 모델을 <code>from_pretrained()</code>로 생성합니다:",m,T,U,W,G="🤗 Transformers에서 제공한 모델의 사전 학습된 가중치를 사용하는 경우 기본 모델 configuration을 자동으로 불러옵니다. 그러나 원하는 경우 기본 모델 configuration 속성의 일부 또는 전부를 사용자 지정으로 바꿀 수 있습니다:",x,k,V;return o=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFRGRGlzdGlsQmVydE1vZGVsJTBBJTBBbXlfY29uZmlnJTIwJTNEJTIwRGlzdGlsQmVydENvbmZpZy5mcm9tX3ByZXRyYWluZWQoJTIyLiUyRnlvdXJfbW9kZWxfc2F2ZV9wYXRoJTJGbXlfY29uZmlnLmpzb24lMjIpJTBBdGZfbW9kZWwlMjAlM0QlMjBURkRpc3RpbEJlcnRNb2RlbChteV9jb25maWcp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFDistilBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span>my_config = DistilBertConfig.from_pretrained(<span class="hljs-string">&quot;./your_model_save_path/my_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFDistilBertModel(my_config)`,wrap:!1}}),T=new q({props:{code:"dGZfbW9kZWwlMjAlM0QlMjBURkRpc3RpbEJlcnRNb2RlbC5mcm9tX3ByZXRyYWluZWQoJTIyZGlzdGlsYmVydCUyRmRpc3RpbGJlcnQtYmFzZS11bmNhc2VkJTIyKQ==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFDistilBertModel.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)',wrap:!1}}),k=new q({props:{code:"dGZfbW9kZWwlMjAlM0QlMjBURkRpc3RpbEJlcnRNb2RlbC5mcm9tX3ByZXRyYWluZWQoJTIyZGlzdGlsYmVydCUyRmRpc3RpbGJlcnQtYmFzZS11bmNhc2VkJTIyJTJDJTIwY29uZmlnJTNEbXlfY29uZmlnKQ==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFDistilBertModel.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>, config=my_config)',wrap:!1}}),{c(){n=u("p"),n.textContent=c,a=r(),d(o.$$.fragment),_=r(),M=u("p"),M.textContent=C,R=r(),v=u("p"),v.innerHTML=J,m=r(),d(T.$$.fragment),U=r(),W=u("p"),W.textContent=G,x=r(),d(k.$$.fragment)},l(p){n=f(p,"P",{"data-svelte-h":!0}),j(n)!=="svelte-1jf8wr"&&(n.textContent=c),a=i(p),$(o.$$.fragment,p),_=i(p),M=f(p,"P",{"data-svelte-h":!0}),j(M)!=="svelte-1x90d88"&&(M.textContent=C),R=i(p),v=f(p,"P",{"data-svelte-h":!0}),j(v)!=="svelte-157o62u"&&(v.innerHTML=J),m=i(p),$(T.$$.fragment,p),U=i(p),W=f(p,"P",{"data-svelte-h":!0}),j(W)!=="svelte-yuz877"&&(W.textContent=G),x=i(p),$(k.$$.fragment,p)},m(p,Z){l(p,n,Z),l(p,a,Z),g(o,p,Z),l(p,_,Z),l(p,M,Z),l(p,R,Z),l(p,v,Z),l(p,m,Z),g(T,p,Z),l(p,U,Z),l(p,W,Z),l(p,x,Z),g(k,p,Z),V=!0},p:z,i(p){V||(y(o.$$.fragment,p),y(T.$$.fragment,p),y(k.$$.fragment,p),V=!0)},o(p){h(o.$$.fragment,p),h(T.$$.fragment,p),h(k.$$.fragment,p),V=!1},d(p){p&&(e(n),e(a),e(_),e(M),e(R),e(v),e(m),e(U),e(W),e(x)),b(o,p),b(T,p),b(k,p)}}}function we(w){let n,c;return n=new xs({props:{$$slots:{default:[Ze]},$$scope:{ctx:w}}}),{c(){d(n.$$.fragment)},l(a){$(n.$$.fragment,a)},m(a,o){g(n,a,o),c=!0},p(a,o){const _={};o&2&&(_.$$scope={dirty:o,ctx:a}),n.$set(_)},i(a){c||(y(n.$$.fragment,a),c=!0)},o(a){h(n.$$.fragment,a),c=!1},d(a){b(n,a)}}}function qe(w){let n,c="예를 들어, <code>DistilBertForSequenceClassification</code>은 시퀀스 분류 헤드가 있는 기본 DistilBERT 모델입니다. 시퀀스 분류 헤드는 풀링된 출력 위에 있는 선형 레이어입니다.",a,o,_,M,C="다른 모델 헤드로 전환하여 이 체크포인트를 다른 작업에 쉽게 재사용할 수 있습니다. 질의응답 작업의 경우, <code>DistilBertForQuestionAnswering</code> 모델 헤드를 사용할 수 있습니다. 질의응답 헤드는 숨겨진 상태 출력 위에 선형 레이어가 있다는 점을 제외하면 시퀀스 분류 헤드와 유사합니다.",R,v,J;return o=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpc3RpbEJlcnRGb3JTZXF1ZW5jZUNsYXNzaWZpY2F0aW9uJTBBJTBBbW9kZWwlMjAlM0QlMjBEaXN0aWxCZXJ0Rm9yU2VxdWVuY2VDbGFzc2lmaWNhdGlvbi5mcm9tX3ByZXRyYWluZWQoJTIyZGlzdGlsYmVydCUyRmRpc3RpbGJlcnQtYmFzZS11bmNhc2VkJTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model = DistilBertForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)`,wrap:!1}}),v=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpc3RpbEJlcnRGb3JRdWVzdGlvbkFuc3dlcmluZyUwQSUwQW1vZGVsJTIwJTNEJTIwRGlzdGlsQmVydEZvclF1ZXN0aW9uQW5zd2VyaW5nLmZyb21fcHJldHJhaW5lZCglMjJkaXN0aWxiZXJ0JTJGZGlzdGlsYmVydC1iYXNlLXVuY2FzZWQlMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span>model = DistilBertForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)`,wrap:!1}}),{c(){n=u("p"),n.innerHTML=c,a=r(),d(o.$$.fragment),_=r(),M=u("p"),M.innerHTML=C,R=r(),d(v.$$.fragment)},l(m){n=f(m,"P",{"data-svelte-h":!0}),j(n)!=="svelte-1d1i7tu"&&(n.innerHTML=c),a=i(m),$(o.$$.fragment,m),_=i(m),M=f(m,"P",{"data-svelte-h":!0}),j(M)!=="svelte-127ugzm"&&(M.innerHTML=C),R=i(m),$(v.$$.fragment,m)},m(m,T){l(m,n,T),l(m,a,T),g(o,m,T),l(m,_,T),l(m,M,T),l(m,R,T),g(v,m,T),J=!0},p:z,i(m){J||(y(o.$$.fragment,m),y(v.$$.fragment,m),J=!0)},o(m){h(o.$$.fragment,m),h(v.$$.fragment,m),J=!1},d(m){m&&(e(n),e(a),e(_),e(M),e(R)),b(o,m),b(v,m)}}}function Je(w){let n,c;return n=new xs({props:{$$slots:{default:[qe]},$$scope:{ctx:w}}}),{c(){d(n.$$.fragment)},l(a){$(n.$$.fragment,a)},m(a,o){g(n,a,o),c=!0},p(a,o){const _={};o&2&&(_.$$scope={dirty:o,ctx:a}),n.$set(_)},i(a){c||(y(n.$$.fragment,a),c=!0)},o(a){h(n.$$.fragment,a),c=!1},d(a){b(n,a)}}}function Re(w){let n,c="예를 들어, <code>TFDistilBertForSequenceClassification</code>은 시퀀스 분류 헤드가 있는 기본 DistilBERT 모델입니다. 시퀀스 분류 헤드는 풀링된 출력 위에 있는 선형 레이어입니다.",a,o,_,M,C="다른 모델 헤드로 전환하여 이 체크포인트를 다른 작업에 쉽게 재사용할 수 있습니다. 질의응답 작업의 경우, <code>TFDistilBertForQuestionAnswering</code> 모델 헤드를 사용할 수 있습니다. 질의응답 헤드는 숨겨진 상태 출력 위에 선형 레이어가 있다는 점을 제외하면 시퀀스 분류 헤드와 유사합니다.",R,v,J;return o=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFRGRGlzdGlsQmVydEZvclNlcXVlbmNlQ2xhc3NpZmljYXRpb24lMEElMEF0Zl9tb2RlbCUyMCUzRCUyMFRGRGlzdGlsQmVydEZvclNlcXVlbmNlQ2xhc3NpZmljYXRpb24uZnJvbV9wcmV0cmFpbmVkKCUyMmRpc3RpbGJlcnQlMkZkaXN0aWxiZXJ0LWJhc2UtdW5jYXNlZCUyMik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFDistilBertForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFDistilBertForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)`,wrap:!1}}),v=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFRGRGlzdGlsQmVydEZvclF1ZXN0aW9uQW5zd2VyaW5nJTBBJTBBdGZfbW9kZWwlMjAlM0QlMjBURkRpc3RpbEJlcnRGb3JRdWVzdGlvbkFuc3dlcmluZy5mcm9tX3ByZXRyYWluZWQoJTIyZGlzdGlsYmVydCUyRmRpc3RpbGJlcnQtYmFzZS11bmNhc2VkJTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFDistilBertForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFDistilBertForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)`,wrap:!1}}),{c(){n=u("p"),n.innerHTML=c,a=r(),d(o.$$.fragment),_=r(),M=u("p"),M.innerHTML=C,R=r(),d(v.$$.fragment)},l(m){n=f(m,"P",{"data-svelte-h":!0}),j(n)!=="svelte-io5rj8"&&(n.innerHTML=c),a=i(m),$(o.$$.fragment,m),_=i(m),M=f(m,"P",{"data-svelte-h":!0}),j(M)!=="svelte-87qals"&&(M.innerHTML=C),R=i(m),$(v.$$.fragment,m)},m(m,T){l(m,n,T),l(m,a,T),g(o,m,T),l(m,_,T),l(m,M,T),l(m,R,T),g(v,m,T),J=!0},p:z,i(m){J||(y(o.$$.fragment,m),y(v.$$.fragment,m),J=!0)},o(m){h(o.$$.fragment,m),h(v.$$.fragment,m),J=!1},d(m){m&&(e(n),e(a),e(_),e(M),e(R)),b(o,m),b(v,m)}}}function We(w){let n,c;return n=new xs({props:{$$slots:{default:[Re]},$$scope:{ctx:w}}}),{c(){d(n.$$.fragment)},l(a){$(n.$$.fragment,a)},m(a,o){g(n,a,o),c=!0},p(a,o){const _={};o&2&&(_.$$scope={dirty:o,ctx:a}),n.$set(_)},i(a){c||(y(n.$$.fragment,a),c=!0)},o(a){h(n.$$.fragment,a),c=!1},d(a){b(n,a)}}}function ke(w){let n,c='모든 모델이 빠른 토크나이저를 지원하는 것은 아닙니다. 이 <a href="index#supported-frameworks">표</a>에서 모델의 빠른 토크나이저 지원 여부를 확인하세요.';return{c(){n=u("p"),n.innerHTML=c},l(a){n=f(a,"P",{"data-svelte-h":!0}),j(n)!=="svelte-w2xdht"&&(n.innerHTML=c)},m(a,o){l(a,n,o)},p:z,d(a){a&&e(n)}}}function Ce(w){let n,c="<code>AutoTokenizer</code>는 기본적으로 빠른 토크나이저를 가져오려고 합니다. 이 동작을 비활성화하려면 <code>from_pretrained</code>에서 <code>use_fast=False</code>를 설정하면 됩니다.";return{c(){n=u("p"),n.innerHTML=c},l(a){n=f(a,"P",{"data-svelte-h":!0}),j(n)!=="svelte-7sn66f"&&(n.innerHTML=c)},m(a,o){l(a,n,o)},p:z,d(a){a&&e(n)}}}function Ue(w){let n,c="사용자 지정을 원하지 않는 경우 <code>from_pretrained</code> 메소드를 사용하여 모델의 기본 이미지 프로세서 매개변수를 불러오면 됩니다.";return{c(){n=u("p"),n.innerHTML=c},l(a){n=f(a,"P",{"data-svelte-h":!0}),j(n)!=="svelte-f8vs2z"&&(n.innerHTML=c)},m(a,o){l(a,n,o)},p:z,d(a){a&&e(n)}}}function Ve(w){let n,c="사용자 지정이 필요하지 않은 경우 <code>from_pretrained</code> 메소드를 사용하여 모델의 기본 특성 추출기 ㅁ개변수를 불러 오면 됩니다.";return{c(){n=u("p"),n.innerHTML=c},l(a){n=f(a,"P",{"data-svelte-h":!0}),j(n)!=="svelte-vnhffe"&&(n.innerHTML=c)},m(a,o){l(a,n,o)},p:z,d(a){a&&e(n)}}}function Ge(w){let n,c,a,o,_,M,C,R='<a href="model_doc/auto"><code>AutoClass</code></a>는 모델 아키텍처를 자동으로 추론하고 미리 학습된 configuration과 가중치를 다운로드합니다. 일반적으로 체크포인트에 구애받지 않는 코드를 생성하려면 <code>AutoClass</code>를 사용하는 것이 좋습니다. 하지만 특정 모델 파라미터를 보다 세밀하게 제어하고자 하는 사용자는 몇 가지 기본 클래스만으로 커스텀 🤗 Transformers 모델을 생성할 수 있습니다. 이는 🤗 Transformers 모델을 연구, 교육 또는 실험하는 데 관심이 있는 모든 사용자에게 특히 유용할 수 있습니다. 이 가이드에서는 ‘AutoClass’를 사용하지 않고 커스텀 모델을 만드는 방법에 대해 알아보겠습니다:',v,J,m="<li>모델 configuration을 가져오고 사용자 지정합니다.</li> <li>모델 아키텍처를 생성합니다.</li> <li>텍스트에 사용할 느리거나 빠른 토큰화기를 만듭니다.</li> <li>비전 작업을 위한 이미지 프로세서를 생성합니다.</li> <li>오디오 작업을 위한 특성 추출기를 생성합니다.</li> <li>멀티모달 작업용 프로세서를 생성합니다.</li>",T,U,W,G,x='<a href="main_classes/configuration">configuration</a>은 모델의 특정 속성을 나타냅니다. 각 모델 구성에는 서로 다른 속성이 있습니다. 예를 들어, 모든 NLP 모델에는 <code>hidden_size</code>, <code>num_attention_heads</code>, <code>num_hidden_layers</code> 및 <code>vocab_size</code> 속성이 공통으로 있습니다. 이러한 속성은 모델을 구성할 attention heads 또는 hidden layers의 수를 지정합니다.',k,V,p='<a href="model_doc/distilbert">DistilBERT</a> 속성을 검사하기 위해 <code>DistilBertConfig</code>에 접근하여 자세히 살펴봅니다:',Z,N,Ht,I,zs="<code>DistilBertConfig</code>는 기본 <code>DistilBertModel</code>을 빌드하는 데 사용되는 모든 기본 속성을 표시합니다. 모든 속성은 커스터마이징이 가능하므로 실험을 위한 공간을 만들 수 있습니다. 예를 들어 기본 모델을 다음과 같이 커스터마이즈할 수 있습니다:",Xt,P,Hs="<li><code>activation</code> 파라미터로 다른 활성화 함수를 사용해 보세요.</li> <li><code>attention_dropout</code> 파라미터를 사용하여 어텐션 확률에 더 높은 드롭아웃 비율을 사용하세요.</li>",Ft,D,Bt,S,Xs="사전 학습된 모델 속성은 <code>from_pretrained()</code> 함수에서 수정할 수 있습니다:",Et,A,Yt,K,Fs="모델 구성이 만족스러우면 <code>save_pretrained()</code>로 저장할 수 있습니다. 설정 파일은 지정된 작업 경로에 JSON 파일로 저장됩니다:",Lt,O,Qt,tt,Bs="configuration 파일을 재사용하려면 <code>from_pretrained()</code>를 사용하여 가져오세요:",Nt,st,It,H,Pt,et,Dt,lt,Es='다음 단계는 <a href="main_classes/models">모델(model)</a>을 만드는 것입니다. 느슨하게 아키텍처라고도 불리는 모델은 각 계층이 수행하는 동작과 발생하는 작업을 정의합니다. configuration의 <code>num_hidden_layers</code>와 같은 속성은 아키텍처를 정의하는 데 사용됩니다. 모든 모델은 기본 클래스 <code>PreTrainedModel</code>과 입력 임베딩 크기 조정 및 셀프 어텐션 헤드 가지 치기와 같은 몇 가지 일반적인 메소드를 공유합니다. 또한 모든 모델은 <a href="https://pytorch.org/docs/stable/generated/torch.nn.Module.html" rel="nofollow"><code>torch.nn.Module</code></a>, <a href="https://www.tensorflow.org/api_docs/python/tf/keras/Model" rel="nofollow"><code>tf.keras.Model</code></a> 또는 <a href="https://flax.readthedocs.io/en/latest/api_reference/flax.linen/module.html" rel="nofollow"><code>flax.linen.Module</code></a>의 서브클래스이기도 합니다. 즉, 모델은 각 프레임워크의 사용법과 호환됩니다.',St,X,At,nt,Kt,at,Ys="이 시점에서 <em>은닉 상태(hidden state)</em>를 출력하는 기본 DistilBERT 모델을 갖게 됩니다. 은닉 상태는 최종 출력을 생성하기 위해 모델 헤드에 입력으로 전달됩니다. 🤗 Transformers는 모델이 해당 작업을 지원하는 한 각 작업마다 다른 모델 헤드를 제공합니다(즉, 번역과 같은 시퀀스 간 작업에는 DistilBERT를 사용할 수 없음).",Ot,F,ts,pt,ss,rt,Ls='텍스트 데이터에 모델을 사용하기 전에 마지막으로 필요한 기본 클래스는 원시 텍스트를 텐서로 변환하는 <a href="main_classes/tokenizer">토크나이저</a>입니다. 🤗 Transformers에 사용할 수 있는 토크나이저는 두 가지 유형이 있습니다:',es,it,Qs=`<li><code>PreTrainedTokenizer</code>: 파이썬으로 구현된 토크나이저입니다.</li> <li><code>PreTrainedTokenizerFast</code>: Rust 기반 <a href="https://huggingface.co/docs/tokenizers/python/latest/" rel="nofollow">🤗 Tokenizer</a> 라이브러리로 만들어진 토크나이저입니다. 이 토크나이저는 Rust로 구현되어 배치 토큰화에서 특히 빠릅니다. 빠른 토크나이저는 토큰을 원래 단어나 문자에 매핑하는 <em>오프셋 매핑</em>과 같은 추가 메소드도 제공합니다.
두 토크나이저 모두 인코딩 및 디코딩, 새 토큰 추가, 특수 토큰 관리와 같은 일반적인 방법을 지원합니다.</li>`,ls,B,ns,ot,Ns="토크나이저를 직접 학습한 경우, <em>어휘(vocabulary)</em> 파일에서 토크나이저를 만들 수 있습니다:",as,mt,ps,ct,Is="사용자 지정 토크나이저의 어휘는 사전 학습된 모델의 토크나이저에서 생성된 어휘와 다를 수 있다는 점을 기억하는 것이 중요합니다. 사전 학습된 모델을 사용하는 경우 사전 학습된 모델의 어휘를 사용해야 하며, 그렇지 않으면 입력이 의미를 갖지 못합니다. <code>DistilBertTokenizer</code> 클래스를 사용하여 사전 학습된 모델의 어휘로 토크나이저를 생성합니다:",rs,ut,is,ft,Ps="<code>DistilBertTokenizerFast</code> 클래스로 빠른 토크나이저를 생성합니다:",os,dt,ms,E,cs,$t,us,gt,Ds="이미지 프로세서(image processor)는 비전 입력을 처리합니다. 기본 <code>ImageProcessingMixin</code> 클래스에서 상속합니다.",fs,yt,Ss='사용하려면 사용 중인 모델과 연결된 이미지 프로세서를 생성합니다. 예를 들어, 이미지 분류에 <a href="model_doc/vit">ViT</a>를 사용하는 경우 기본 <code>ViTImageProcessor</code>를 생성합니다:',ds,ht,$s,Y,gs,bt,As="사용자 지정 이미지 프로세서를 생성하려면 <code>ViTImageProcessor</code> 파라미터를 수정합니다:",ys,jt,hs,_t,bs,Mt,Ks="특성 추출기(feature extractor)는 오디오 입력을 처리합니다. 기본 <code>FeatureExtractionMixin</code> 클래스에서 상속되며, 오디오 입력을 처리하기 위해 <code>SequenceFeatureExtractor</code> 클래스에서 상속할 수도 있습니다.",js,vt,Os='사용하려면 사용 중인 모델과 연결된 특성 추출기를 생성합니다. 예를 들어, 오디오 분류에 <a href="model_doc/wav2vec2">Wav2Vec2</a>를 사용하는 경우 기본 <code>Wav2Vec2FeatureExtractor</code>를 생성합니다:',_s,Tt,Ms,L,vs,Zt,te="사용자 지정 특성 추출기를 만들려면 <code>Wav2Vec2FeatureExtractor</code> 매개변수를 수정합니다:",Ts,wt,Zs,qt,ws,Jt,se="멀티모달 작업을 지원하는 모델의 경우, 🤗 Transformers는 특성 추출기 및 토크나이저와 같은 처리 클래스를 단일 객체로 편리하게 래핑하는 프로세서 클래스를 제공합니다. 예를 들어, 자동 음성 인식 작업(Automatic Speech Recognition task (ASR))에 <code>Wav2Vec2Processor</code>를 사용한다고 가정해 보겠습니다. 자동 음성 인식 작업은 오디오를 텍스트로 변환하므로 특성 추출기와 토크나이저가 필요합니다.",qs,Rt,ee="오디오 입력을 처리할 특성 추출기를 만듭니다:",Js,Wt,Rs,kt,le="텍스트 입력을 처리할 토크나이저를 만듭니다:",Ws,Ct,ks,Ut,ne="<code>Wav2Vec2Processor</code>에서 특성 추출기와 토크나이저를 결합합니다:",Cs,Vt,Us,Gt,ae="configuration과 모델이라는 두 가지 기본 클래스와 추가 전처리 클래스(토크나이저, 이미지 프로세서, 특성 추출기 또는 프로세서)를 사용하면 🤗 Transformers에서 지원하는 모든 모델을 만들 수 있습니다. 이러한 각 기본 클래스는 구성이 가능하므로 원하는 특정 속성을 사용할 수 있습니다. 학습을 위해 모델을 쉽게 설정하거나 기존의 사전 학습된 모델을 수정하여 미세 조정할 수 있습니다.",Vs,xt,Gs;return _=new Q({props:{title:"맞춤형 아키텍처 만들기",local:"create-a-custom-architecture",headingTag:"h1"}}),U=new Q({props:{title:"Configuration",local:"configuration",headingTag:"h2"}}),N=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpc3RpbEJlcnRDb25maWclMEElMEFjb25maWclMjAlM0QlMjBEaXN0aWxCZXJ0Q29uZmlnKCklMEFwcmludChjb25maWcp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertConfig

<span class="hljs-meta">&gt;&gt;&gt; </span>config = DistilBertConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(config)
DistilBertConfig {
  <span class="hljs-string">&quot;activation&quot;</span>: <span class="hljs-string">&quot;gelu&quot;</span>,
  <span class="hljs-string">&quot;attention_dropout&quot;</span>: <span class="hljs-number">0.1</span>,
  <span class="hljs-string">&quot;dim&quot;</span>: <span class="hljs-number">768</span>,
  <span class="hljs-string">&quot;dropout&quot;</span>: <span class="hljs-number">0.1</span>,
  <span class="hljs-string">&quot;hidden_dim&quot;</span>: <span class="hljs-number">3072</span>,
  <span class="hljs-string">&quot;initializer_range&quot;</span>: <span class="hljs-number">0.02</span>,
  <span class="hljs-string">&quot;max_position_embeddings&quot;</span>: <span class="hljs-number">512</span>,
  <span class="hljs-string">&quot;model_type&quot;</span>: <span class="hljs-string">&quot;distilbert&quot;</span>,
  <span class="hljs-string">&quot;n_heads&quot;</span>: <span class="hljs-number">12</span>,
  <span class="hljs-string">&quot;n_layers&quot;</span>: <span class="hljs-number">6</span>,
  <span class="hljs-string">&quot;pad_token_id&quot;</span>: <span class="hljs-number">0</span>,
  <span class="hljs-string">&quot;qa_dropout&quot;</span>: <span class="hljs-number">0.1</span>,
  <span class="hljs-string">&quot;seq_classif_dropout&quot;</span>: <span class="hljs-number">0.2</span>,
  <span class="hljs-string">&quot;sinusoidal_pos_embds&quot;</span>: false,
  <span class="hljs-string">&quot;transformers_version&quot;</span>: <span class="hljs-string">&quot;4.16.2&quot;</span>,
  <span class="hljs-string">&quot;vocab_size&quot;</span>: <span class="hljs-number">30522</span>
}`,wrap:!1}}),D=new q({props:{code:"bXlfY29uZmlnJTIwJTNEJTIwRGlzdGlsQmVydENvbmZpZyhhY3RpdmF0aW9uJTNEJTIycmVsdSUyMiUyQyUyMGF0dGVudGlvbl9kcm9wb3V0JTNEMC40KSUwQXByaW50KG15X2NvbmZpZyk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>my_config = DistilBertConfig(activation=<span class="hljs-string">&quot;relu&quot;</span>, attention_dropout=<span class="hljs-number">0.4</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(my_config)
DistilBertConfig {
  <span class="hljs-string">&quot;activation&quot;</span>: <span class="hljs-string">&quot;relu&quot;</span>,
  <span class="hljs-string">&quot;attention_dropout&quot;</span>: <span class="hljs-number">0.4</span>,
  <span class="hljs-string">&quot;dim&quot;</span>: <span class="hljs-number">768</span>,
  <span class="hljs-string">&quot;dropout&quot;</span>: <span class="hljs-number">0.1</span>,
  <span class="hljs-string">&quot;hidden_dim&quot;</span>: <span class="hljs-number">3072</span>,
  <span class="hljs-string">&quot;initializer_range&quot;</span>: <span class="hljs-number">0.02</span>,
  <span class="hljs-string">&quot;max_position_embeddings&quot;</span>: <span class="hljs-number">512</span>,
  <span class="hljs-string">&quot;model_type&quot;</span>: <span class="hljs-string">&quot;distilbert&quot;</span>,
  <span class="hljs-string">&quot;n_heads&quot;</span>: <span class="hljs-number">12</span>,
  <span class="hljs-string">&quot;n_layers&quot;</span>: <span class="hljs-number">6</span>,
  <span class="hljs-string">&quot;pad_token_id&quot;</span>: <span class="hljs-number">0</span>,
  <span class="hljs-string">&quot;qa_dropout&quot;</span>: <span class="hljs-number">0.1</span>,
  <span class="hljs-string">&quot;seq_classif_dropout&quot;</span>: <span class="hljs-number">0.2</span>,
  <span class="hljs-string">&quot;sinusoidal_pos_embds&quot;</span>: false,
  <span class="hljs-string">&quot;transformers_version&quot;</span>: <span class="hljs-string">&quot;4.16.2&quot;</span>,
  <span class="hljs-string">&quot;vocab_size&quot;</span>: <span class="hljs-number">30522</span>
}`,wrap:!1}}),A=new q({props:{code:"bXlfY29uZmlnJTIwJTNEJTIwRGlzdGlsQmVydENvbmZpZy5mcm9tX3ByZXRyYWluZWQoJTIyZGlzdGlsYmVydCUyRmRpc3RpbGJlcnQtYmFzZS11bmNhc2VkJTIyJTJDJTIwYWN0aXZhdGlvbiUzRCUyMnJlbHUlMjIlMkMlMjBhdHRlbnRpb25fZHJvcG91dCUzRDAuNCk=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>my_config = DistilBertConfig.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>, activation=<span class="hljs-string">&quot;relu&quot;</span>, attention_dropout=<span class="hljs-number">0.4</span>)',wrap:!1}}),O=new q({props:{code:"bXlfY29uZmlnLnNhdmVfcHJldHJhaW5lZChzYXZlX2RpcmVjdG9yeSUzRCUyMi4lMkZ5b3VyX21vZGVsX3NhdmVfcGF0aCUyMik=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>my_config.save_pretrained(save_directory=<span class="hljs-string">&quot;./your_model_save_path&quot;</span>)',wrap:!1}}),st=new q({props:{code:"bXlfY29uZmlnJTIwJTNEJTIwRGlzdGlsQmVydENvbmZpZy5mcm9tX3ByZXRyYWluZWQoJTIyLiUyRnlvdXJfbW9kZWxfc2F2ZV9wYXRoJTJGY29uZmlnLmpzb24lMjIp",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>my_config = DistilBertConfig.from_pretrained(<span class="hljs-string">&quot;./your_model_save_path/config.json&quot;</span>)',wrap:!1}}),H=new zt({props:{$$slots:{default:[Me]},$$scope:{ctx:w}}}),et=new Q({props:{title:"모델",local:"model",headingTag:"h2"}}),X=new $e({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[we],pytorch:[Te]},$$scope:{ctx:w}}}),nt=new Q({props:{title:"모델 헤드",local:"model-heads",headingTag:"h3"}}),F=new $e({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[We],pytorch:[Je]},$$scope:{ctx:w}}}),pt=new Q({props:{title:"토크나이저",local:"tokenizer",headingTag:"h2"}}),B=new zt({props:{warning:!0,$$slots:{default:[ke]},$$scope:{ctx:w}}}),mt=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpc3RpbEJlcnRUb2tlbml6ZXIlMEElMEFteV90b2tlbml6ZXIlMjAlM0QlMjBEaXN0aWxCZXJ0VG9rZW5pemVyKHZvY2FiX2ZpbGUlM0QlMjJteV92b2NhYl9maWxlLnR4dCUyMiUyQyUyMGRvX2xvd2VyX2Nhc2UlM0RGYWxzZSUyQyUyMHBhZGRpbmdfc2lkZSUzRCUyMmxlZnQlMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>my_tokenizer = DistilBertTokenizer(vocab_file=<span class="hljs-string">&quot;my_vocab_file.txt&quot;</span>, do_lower_case=<span class="hljs-literal">False</span>, padding_side=<span class="hljs-string">&quot;left&quot;</span>)`,wrap:!1}}),ut=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpc3RpbEJlcnRUb2tlbml6ZXIlMEElMEFzbG93X3Rva2VuaXplciUyMCUzRCUyMERpc3RpbEJlcnRUb2tlbml6ZXIuZnJvbV9wcmV0cmFpbmVkKCUyMmRpc3RpbGJlcnQlMkZkaXN0aWxiZXJ0LWJhc2UtdW5jYXNlZCUyMik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>slow_tokenizer = DistilBertTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)`,wrap:!1}}),dt=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpc3RpbEJlcnRUb2tlbml6ZXJGYXN0JTBBJTBBZmFzdF90b2tlbml6ZXIlMjAlM0QlMjBEaXN0aWxCZXJ0VG9rZW5pemVyRmFzdC5mcm9tX3ByZXRyYWluZWQoJTIyZGlzdGlsYmVydCUyRmRpc3RpbGJlcnQtYmFzZS11bmNhc2VkJTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertTokenizerFast

<span class="hljs-meta">&gt;&gt;&gt; </span>fast_tokenizer = DistilBertTokenizerFast.from_pretrained(<span class="hljs-string">&quot;distilbert/distilbert-base-uncased&quot;</span>)`,wrap:!1}}),E=new zt({props:{$$slots:{default:[Ce]},$$scope:{ctx:w}}}),$t=new Q({props:{title:"이미지 프로세서",local:"image-processor",headingTag:"h2"}}),ht=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFZpVEltYWdlUHJvY2Vzc29yJTBBJTBBdml0X2V4dHJhY3RvciUyMCUzRCUyMFZpVEltYWdlUHJvY2Vzc29yKCklMEFwcmludCh2aXRfZXh0cmFjdG9yKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ViTImageProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span>vit_extractor = ViTImageProcessor()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(vit_extractor)
ViTImageProcessor {
  <span class="hljs-string">&quot;do_normalize&quot;</span>: true,
  <span class="hljs-string">&quot;do_resize&quot;</span>: true,
  <span class="hljs-string">&quot;feature_extractor_type&quot;</span>: <span class="hljs-string">&quot;ViTImageProcessor&quot;</span>,
  <span class="hljs-string">&quot;image_mean&quot;</span>: [
    <span class="hljs-number">0.5</span>,
    <span class="hljs-number">0.5</span>,
    <span class="hljs-number">0.5</span>
  ],
  <span class="hljs-string">&quot;image_std&quot;</span>: [
    <span class="hljs-number">0.5</span>,
    <span class="hljs-number">0.5</span>,
    <span class="hljs-number">0.5</span>
  ],
  <span class="hljs-string">&quot;resample&quot;</span>: <span class="hljs-number">2</span>,
  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">224</span>
}`,wrap:!1}}),Y=new zt({props:{$$slots:{default:[Ue]},$$scope:{ctx:w}}}),jt=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFZpVEltYWdlUHJvY2Vzc29yJTBBJTBBbXlfdml0X2V4dHJhY3RvciUyMCUzRCUyMFZpVEltYWdlUHJvY2Vzc29yKHJlc2FtcGxlJTNEJTIyUElMLkltYWdlLkJPWCUyMiUyQyUyMGRvX25vcm1hbGl6ZSUzREZhbHNlJTJDJTIwaW1hZ2VfbWVhbiUzRCU1QjAuMyUyQyUyMDAuMyUyQyUyMDAuMyU1RCklMEFwcmludChteV92aXRfZXh0cmFjdG9yKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ViTImageProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span>my_vit_extractor = ViTImageProcessor(resample=<span class="hljs-string">&quot;PIL.Image.BOX&quot;</span>, do_normalize=<span class="hljs-literal">False</span>, image_mean=[<span class="hljs-number">0.3</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.3</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(my_vit_extractor)
ViTImageProcessor {
  <span class="hljs-string">&quot;do_normalize&quot;</span>: false,
  <span class="hljs-string">&quot;do_resize&quot;</span>: true,
  <span class="hljs-string">&quot;feature_extractor_type&quot;</span>: <span class="hljs-string">&quot;ViTImageProcessor&quot;</span>,
  <span class="hljs-string">&quot;image_mean&quot;</span>: [
    <span class="hljs-number">0.3</span>,
    <span class="hljs-number">0.3</span>,
    <span class="hljs-number">0.3</span>
  ],
  <span class="hljs-string">&quot;image_std&quot;</span>: [
    <span class="hljs-number">0.5</span>,
    <span class="hljs-number">0.5</span>,
    <span class="hljs-number">0.5</span>
  ],
  <span class="hljs-string">&quot;resample&quot;</span>: <span class="hljs-string">&quot;PIL.Image.BOX&quot;</span>,
  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">224</span>
}`,wrap:!1}}),_t=new Q({props:{title:"특성 추출기",local:"feature-extractor",headingTag:"h2"}}),Tt=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFdhdjJWZWMyRmVhdHVyZUV4dHJhY3RvciUwQSUwQXcydjJfZXh0cmFjdG9yJTIwJTNEJTIwV2F2MlZlYzJGZWF0dXJlRXh0cmFjdG9yKCklMEFwcmludCh3MnYyX2V4dHJhY3Rvcik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Wav2Vec2FeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span>w2v2_extractor = Wav2Vec2FeatureExtractor()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(w2v2_extractor)
Wav2Vec2FeatureExtractor {
  <span class="hljs-string">&quot;do_normalize&quot;</span>: true,
  <span class="hljs-string">&quot;feature_extractor_type&quot;</span>: <span class="hljs-string">&quot;Wav2Vec2FeatureExtractor&quot;</span>,
  <span class="hljs-string">&quot;feature_size&quot;</span>: <span class="hljs-number">1</span>,
  <span class="hljs-string">&quot;padding_side&quot;</span>: <span class="hljs-string">&quot;right&quot;</span>,
  <span class="hljs-string">&quot;padding_value&quot;</span>: <span class="hljs-number">0.0</span>,
  <span class="hljs-string">&quot;return_attention_mask&quot;</span>: false,
  <span class="hljs-string">&quot;sampling_rate&quot;</span>: <span class="hljs-number">16000</span>
}`,wrap:!1}}),L=new zt({props:{$$slots:{default:[Ve]},$$scope:{ctx:w}}}),wt=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFdhdjJWZWMyRmVhdHVyZUV4dHJhY3RvciUwQSUwQXcydjJfZXh0cmFjdG9yJTIwJTNEJTIwV2F2MlZlYzJGZWF0dXJlRXh0cmFjdG9yKHNhbXBsaW5nX3JhdGUlM0Q4MDAwJTJDJTIwZG9fbm9ybWFsaXplJTNERmFsc2UpJTBBcHJpbnQodzJ2Ml9leHRyYWN0b3Ip",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Wav2Vec2FeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span>w2v2_extractor = Wav2Vec2FeatureExtractor(sampling_rate=<span class="hljs-number">8000</span>, do_normalize=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(w2v2_extractor)
Wav2Vec2FeatureExtractor {
  <span class="hljs-string">&quot;do_normalize&quot;</span>: false,
  <span class="hljs-string">&quot;feature_extractor_type&quot;</span>: <span class="hljs-string">&quot;Wav2Vec2FeatureExtractor&quot;</span>,
  <span class="hljs-string">&quot;feature_size&quot;</span>: <span class="hljs-number">1</span>,
  <span class="hljs-string">&quot;padding_side&quot;</span>: <span class="hljs-string">&quot;right&quot;</span>,
  <span class="hljs-string">&quot;padding_value&quot;</span>: <span class="hljs-number">0.0</span>,
  <span class="hljs-string">&quot;return_attention_mask&quot;</span>: false,
  <span class="hljs-string">&quot;sampling_rate&quot;</span>: <span class="hljs-number">8000</span>
}`,wrap:!1}}),qt=new Q({props:{title:"프로세서",local:"processor",headingTag:"h2"}}),Wt=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFdhdjJWZWMyRmVhdHVyZUV4dHJhY3RvciUwQSUwQWZlYXR1cmVfZXh0cmFjdG9yJTIwJTNEJTIwV2F2MlZlYzJGZWF0dXJlRXh0cmFjdG9yKHBhZGRpbmdfdmFsdWUlM0QxLjAlMkMlMjBkb19ub3JtYWxpemUlM0RUcnVlKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Wav2Vec2FeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = Wav2Vec2FeatureExtractor(padding_value=<span class="hljs-number">1.0</span>, do_normalize=<span class="hljs-literal">True</span>)`,wrap:!1}}),Ct=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFdhdjJWZWMyQ1RDVG9rZW5pemVyJTBBJTBBdG9rZW5pemVyJTIwJTNEJTIwV2F2MlZlYzJDVENUb2tlbml6ZXIodm9jYWJfZmlsZSUzRCUyMm15X3ZvY2FiX2ZpbGUudHh0JTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Wav2Vec2CTCTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = Wav2Vec2CTCTokenizer(vocab_file=<span class="hljs-string">&quot;my_vocab_file.txt&quot;</span>)`,wrap:!1}}),Vt=new q({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFdhdjJWZWMyUHJvY2Vzc29yJTBBJTBBcHJvY2Vzc29yJTIwJTNEJTIwV2F2MlZlYzJQcm9jZXNzb3IoZmVhdHVyZV9leHRyYWN0b3IlM0RmZWF0dXJlX2V4dHJhY3RvciUyQyUyMHRva2VuaXplciUzRHRva2VuaXplcik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Wav2Vec2Processor

<span class="hljs-meta">&gt;&gt;&gt; </span>processor = Wav2Vec2Processor(feature_extractor=feature_extractor, tokenizer=tokenizer)`,wrap:!1}}),{c(){n=u("meta"),c=r(),a=u("p"),o=r(),d(_.$$.fragment),M=r(),C=u("p"),C.innerHTML=R,v=r(),J=u("ul"),J.innerHTML=m,T=r(),d(U.$$.fragment),W=r(),G=u("p"),G.innerHTML=x,k=r(),V=u("p"),V.innerHTML=p,Z=r(),d(N.$$.fragment),Ht=r(),I=u("p"),I.innerHTML=zs,Xt=r(),P=u("ul"),P.innerHTML=Hs,Ft=r(),d(D.$$.fragment),Bt=r(),S=u("p"),S.innerHTML=Xs,Et=r(),d(A.$$.fragment),Yt=r(),K=u("p"),K.innerHTML=Fs,Lt=r(),d(O.$$.fragment),Qt=r(),tt=u("p"),tt.innerHTML=Bs,Nt=r(),d(st.$$.fragment),It=r(),d(H.$$.fragment),Pt=r(),d(et.$$.fragment),Dt=r(),lt=u("p"),lt.innerHTML=Es,St=r(),d(X.$$.fragment),At=r(),d(nt.$$.fragment),Kt=r(),at=u("p"),at.innerHTML=Ys,Ot=r(),d(F.$$.fragment),ts=r(),d(pt.$$.fragment),ss=r(),rt=u("p"),rt.innerHTML=Ls,es=r(),it=u("ul"),it.innerHTML=Qs,ls=r(),d(B.$$.fragment),ns=r(),ot=u("p"),ot.innerHTML=Ns,as=r(),d(mt.$$.fragment),ps=r(),ct=u("p"),ct.innerHTML=Is,rs=r(),d(ut.$$.fragment),is=r(),ft=u("p"),ft.innerHTML=Ps,os=r(),d(dt.$$.fragment),ms=r(),d(E.$$.fragment),cs=r(),d($t.$$.fragment),us=r(),gt=u("p"),gt.innerHTML=Ds,fs=r(),yt=u("p"),yt.innerHTML=Ss,ds=r(),d(ht.$$.fragment),$s=r(),d(Y.$$.fragment),gs=r(),bt=u("p"),bt.innerHTML=As,ys=r(),d(jt.$$.fragment),hs=r(),d(_t.$$.fragment),bs=r(),Mt=u("p"),Mt.innerHTML=Ks,js=r(),vt=u("p"),vt.innerHTML=Os,_s=r(),d(Tt.$$.fragment),Ms=r(),d(L.$$.fragment),vs=r(),Zt=u("p"),Zt.innerHTML=te,Ts=r(),d(wt.$$.fragment),Zs=r(),d(qt.$$.fragment),ws=r(),Jt=u("p"),Jt.innerHTML=se,qs=r(),Rt=u("p"),Rt.textContent=ee,Js=r(),d(Wt.$$.fragment),Rs=r(),kt=u("p"),kt.textContent=le,Ws=r(),d(Ct.$$.fragment),ks=r(),Ut=u("p"),Ut.innerHTML=ne,Cs=r(),d(Vt.$$.fragment),Us=r(),Gt=u("p"),Gt.textContent=ae,Vs=r(),xt=u("p"),this.h()},l(t){const s=je("svelte-u9bgzb",document.head);n=f(s,"META",{name:!0,content:!0}),s.forEach(e),c=i(t),a=f(t,"P",{}),fe(a).forEach(e),o=i(t),$(_.$$.fragment,t),M=i(t),C=f(t,"P",{"data-svelte-h":!0}),j(C)!=="svelte-19ve0b1"&&(C.innerHTML=R),v=i(t),J=f(t,"UL",{"data-svelte-h":!0}),j(J)!=="svelte-1ebb2km"&&(J.innerHTML=m),T=i(t),$(U.$$.fragment,t),W=i(t),G=f(t,"P",{"data-svelte-h":!0}),j(G)!=="svelte-1u7e78i"&&(G.innerHTML=x),k=i(t),V=f(t,"P",{"data-svelte-h":!0}),j(V)!=="svelte-1ujadwn"&&(V.innerHTML=p),Z=i(t),$(N.$$.fragment,t),Ht=i(t),I=f(t,"P",{"data-svelte-h":!0}),j(I)!=="svelte-ipet8t"&&(I.innerHTML=zs),Xt=i(t),P=f(t,"UL",{"data-svelte-h":!0}),j(P)!=="svelte-oc0ep3"&&(P.innerHTML=Hs),Ft=i(t),$(D.$$.fragment,t),Bt=i(t),S=f(t,"P",{"data-svelte-h":!0}),j(S)!=="svelte-17dbfyt"&&(S.innerHTML=Xs),Et=i(t),$(A.$$.fragment,t),Yt=i(t),K=f(t,"P",{"data-svelte-h":!0}),j(K)!=="svelte-1ep9ypn"&&(K.innerHTML=Fs),Lt=i(t),$(O.$$.fragment,t),Qt=i(t),tt=f(t,"P",{"data-svelte-h":!0}),j(tt)!=="svelte-743pg9"&&(tt.innerHTML=Bs),Nt=i(t),$(st.$$.fragment,t),It=i(t),$(H.$$.fragment,t),Pt=i(t),$(et.$$.fragment,t),Dt=i(t),lt=f(t,"P",{"data-svelte-h":!0}),j(lt)!=="svelte-fqn4bx"&&(lt.innerHTML=Es),St=i(t),$(X.$$.fragment,t),At=i(t),$(nt.$$.fragment,t),Kt=i(t),at=f(t,"P",{"data-svelte-h":!0}),j(at)!=="svelte-x49xse"&&(at.innerHTML=Ys),Ot=i(t),$(F.$$.fragment,t),ts=i(t),$(pt.$$.fragment,t),ss=i(t),rt=f(t,"P",{"data-svelte-h":!0}),j(rt)!=="svelte-tr0od4"&&(rt.innerHTML=Ls),es=i(t),it=f(t,"UL",{"data-svelte-h":!0}),j(it)!=="svelte-1s73745"&&(it.innerHTML=Qs),ls=i(t),$(B.$$.fragment,t),ns=i(t),ot=f(t,"P",{"data-svelte-h":!0}),j(ot)!=="svelte-1ydtv7o"&&(ot.innerHTML=Ns),as=i(t),$(mt.$$.fragment,t),ps=i(t),ct=f(t,"P",{"data-svelte-h":!0}),j(ct)!=="svelte-hd5xug"&&(ct.innerHTML=Is),rs=i(t),$(ut.$$.fragment,t),is=i(t),ft=f(t,"P",{"data-svelte-h":!0}),j(ft)!=="svelte-1vv93q7"&&(ft.innerHTML=Ps),os=i(t),$(dt.$$.fragment,t),ms=i(t),$(E.$$.fragment,t),cs=i(t),$($t.$$.fragment,t),us=i(t),gt=f(t,"P",{"data-svelte-h":!0}),j(gt)!=="svelte-jxznvs"&&(gt.innerHTML=Ds),fs=i(t),yt=f(t,"P",{"data-svelte-h":!0}),j(yt)!=="svelte-c66cfm"&&(yt.innerHTML=Ss),ds=i(t),$(ht.$$.fragment,t),$s=i(t),$(Y.$$.fragment,t),gs=i(t),bt=f(t,"P",{"data-svelte-h":!0}),j(bt)!=="svelte-3v1zkp"&&(bt.innerHTML=As),ys=i(t),$(jt.$$.fragment,t),hs=i(t),$(_t.$$.fragment,t),bs=i(t),Mt=f(t,"P",{"data-svelte-h":!0}),j(Mt)!=="svelte-1h5zevg"&&(Mt.innerHTML=Ks),js=i(t),vt=f(t,"P",{"data-svelte-h":!0}),j(vt)!=="svelte-mindlu"&&(vt.innerHTML=Os),_s=i(t),$(Tt.$$.fragment,t),Ms=i(t),$(L.$$.fragment,t),vs=i(t),Zt=f(t,"P",{"data-svelte-h":!0}),j(Zt)!=="svelte-1hh3a05"&&(Zt.innerHTML=te),Ts=i(t),$(wt.$$.fragment,t),Zs=i(t),$(qt.$$.fragment,t),ws=i(t),Jt=f(t,"P",{"data-svelte-h":!0}),j(Jt)!=="svelte-m80yeb"&&(Jt.innerHTML=se),qs=i(t),Rt=f(t,"P",{"data-svelte-h":!0}),j(Rt)!=="svelte-rxz7k7"&&(Rt.textContent=ee),Js=i(t),$(Wt.$$.fragment,t),Rs=i(t),kt=f(t,"P",{"data-svelte-h":!0}),j(kt)!=="svelte-1pis3oo"&&(kt.textContent=le),Ws=i(t),$(Ct.$$.fragment,t),ks=i(t),Ut=f(t,"P",{"data-svelte-h":!0}),j(Ut)!=="svelte-1ou4ndv"&&(Ut.innerHTML=ne),Cs=i(t),$(Vt.$$.fragment,t),Us=i(t),Gt=f(t,"P",{"data-svelte-h":!0}),j(Gt)!=="svelte-wnze"&&(Gt.textContent=ae),Vs=i(t),xt=f(t,"P",{}),fe(xt).forEach(e),this.h()},h(){de(n,"name","hf:doc:metadata"),de(n,"content",xe)},m(t,s){_e(document.head,n),l(t,c,s),l(t,a,s),l(t,o,s),g(_,t,s),l(t,M,s),l(t,C,s),l(t,v,s),l(t,J,s),l(t,T,s),g(U,t,s),l(t,W,s),l(t,G,s),l(t,k,s),l(t,V,s),l(t,Z,s),g(N,t,s),l(t,Ht,s),l(t,I,s),l(t,Xt,s),l(t,P,s),l(t,Ft,s),g(D,t,s),l(t,Bt,s),l(t,S,s),l(t,Et,s),g(A,t,s),l(t,Yt,s),l(t,K,s),l(t,Lt,s),g(O,t,s),l(t,Qt,s),l(t,tt,s),l(t,Nt,s),g(st,t,s),l(t,It,s),g(H,t,s),l(t,Pt,s),g(et,t,s),l(t,Dt,s),l(t,lt,s),l(t,St,s),g(X,t,s),l(t,At,s),g(nt,t,s),l(t,Kt,s),l(t,at,s),l(t,Ot,s),g(F,t,s),l(t,ts,s),g(pt,t,s),l(t,ss,s),l(t,rt,s),l(t,es,s),l(t,it,s),l(t,ls,s),g(B,t,s),l(t,ns,s),l(t,ot,s),l(t,as,s),g(mt,t,s),l(t,ps,s),l(t,ct,s),l(t,rs,s),g(ut,t,s),l(t,is,s),l(t,ft,s),l(t,os,s),g(dt,t,s),l(t,ms,s),g(E,t,s),l(t,cs,s),g($t,t,s),l(t,us,s),l(t,gt,s),l(t,fs,s),l(t,yt,s),l(t,ds,s),g(ht,t,s),l(t,$s,s),g(Y,t,s),l(t,gs,s),l(t,bt,s),l(t,ys,s),g(jt,t,s),l(t,hs,s),g(_t,t,s),l(t,bs,s),l(t,Mt,s),l(t,js,s),l(t,vt,s),l(t,_s,s),g(Tt,t,s),l(t,Ms,s),g(L,t,s),l(t,vs,s),l(t,Zt,s),l(t,Ts,s),g(wt,t,s),l(t,Zs,s),g(qt,t,s),l(t,ws,s),l(t,Jt,s),l(t,qs,s),l(t,Rt,s),l(t,Js,s),g(Wt,t,s),l(t,Rs,s),l(t,kt,s),l(t,Ws,s),g(Ct,t,s),l(t,ks,s),l(t,Ut,s),l(t,Cs,s),g(Vt,t,s),l(t,Us,s),l(t,Gt,s),l(t,Vs,s),l(t,xt,s),Gs=!0},p(t,[s]){const pe={};s&2&&(pe.$$scope={dirty:s,ctx:t}),H.$set(pe);const re={};s&2&&(re.$$scope={dirty:s,ctx:t}),X.$set(re);const ie={};s&2&&(ie.$$scope={dirty:s,ctx:t}),F.$set(ie);const oe={};s&2&&(oe.$$scope={dirty:s,ctx:t}),B.$set(oe);const me={};s&2&&(me.$$scope={dirty:s,ctx:t}),E.$set(me);const ce={};s&2&&(ce.$$scope={dirty:s,ctx:t}),Y.$set(ce);const ue={};s&2&&(ue.$$scope={dirty:s,ctx:t}),L.$set(ue)},i(t){Gs||(y(_.$$.fragment,t),y(U.$$.fragment,t),y(N.$$.fragment,t),y(D.$$.fragment,t),y(A.$$.fragment,t),y(O.$$.fragment,t),y(st.$$.fragment,t),y(H.$$.fragment,t),y(et.$$.fragment,t),y(X.$$.fragment,t),y(nt.$$.fragment,t),y(F.$$.fragment,t),y(pt.$$.fragment,t),y(B.$$.fragment,t),y(mt.$$.fragment,t),y(ut.$$.fragment,t),y(dt.$$.fragment,t),y(E.$$.fragment,t),y($t.$$.fragment,t),y(ht.$$.fragment,t),y(Y.$$.fragment,t),y(jt.$$.fragment,t),y(_t.$$.fragment,t),y(Tt.$$.fragment,t),y(L.$$.fragment,t),y(wt.$$.fragment,t),y(qt.$$.fragment,t),y(Wt.$$.fragment,t),y(Ct.$$.fragment,t),y(Vt.$$.fragment,t),Gs=!0)},o(t){h(_.$$.fragment,t),h(U.$$.fragment,t),h(N.$$.fragment,t),h(D.$$.fragment,t),h(A.$$.fragment,t),h(O.$$.fragment,t),h(st.$$.fragment,t),h(H.$$.fragment,t),h(et.$$.fragment,t),h(X.$$.fragment,t),h(nt.$$.fragment,t),h(F.$$.fragment,t),h(pt.$$.fragment,t),h(B.$$.fragment,t),h(mt.$$.fragment,t),h(ut.$$.fragment,t),h(dt.$$.fragment,t),h(E.$$.fragment,t),h($t.$$.fragment,t),h(ht.$$.fragment,t),h(Y.$$.fragment,t),h(jt.$$.fragment,t),h(_t.$$.fragment,t),h(Tt.$$.fragment,t),h(L.$$.fragment,t),h(wt.$$.fragment,t),h(qt.$$.fragment,t),h(Wt.$$.fragment,t),h(Ct.$$.fragment,t),h(Vt.$$.fragment,t),Gs=!1},d(t){t&&(e(c),e(a),e(o),e(M),e(C),e(v),e(J),e(T),e(W),e(G),e(k),e(V),e(Z),e(Ht),e(I),e(Xt),e(P),e(Ft),e(Bt),e(S),e(Et),e(Yt),e(K),e(Lt),e(Qt),e(tt),e(Nt),e(It),e(Pt),e(Dt),e(lt),e(St),e(At),e(Kt),e(at),e(Ot),e(ts),e(ss),e(rt),e(es),e(it),e(ls),e(ns),e(ot),e(as),e(ps),e(ct),e(rs),e(is),e(ft),e(os),e(ms),e(cs),e(us),e(gt),e(fs),e(yt),e(ds),e($s),e(gs),e(bt),e(ys),e(hs),e(bs),e(Mt),e(js),e(vt),e(_s),e(Ms),e(vs),e(Zt),e(Ts),e(Zs),e(ws),e(Jt),e(qs),e(Rt),e(Js),e(Rs),e(kt),e(Ws),e(ks),e(Ut),e(Cs),e(Us),e(Gt),e(Vs),e(xt)),e(n),b(_,t),b(U,t),b(N,t),b(D,t),b(A,t),b(O,t),b(st,t),b(H,t),b(et,t),b(X,t),b(nt,t),b(F,t),b(pt,t),b(B,t),b(mt,t),b(ut,t),b(dt,t),b(E,t),b($t,t),b(ht,t),b(Y,t),b(jt,t),b(_t,t),b(Tt,t),b(L,t),b(wt,t),b(qt,t),b(Wt,t),b(Ct,t),b(Vt,t)}}}const xe='{"title":"맞춤형 아키텍처 만들기","local":"create-a-custom-architecture","sections":[{"title":"Configuration","local":"configuration","sections":[],"depth":2},{"title":"모델","local":"model","sections":[{"title":"모델 헤드","local":"model-heads","sections":[],"depth":3}],"depth":2},{"title":"토크나이저","local":"tokenizer","sections":[],"depth":2},{"title":"이미지 프로세서","local":"image-processor","sections":[],"depth":2},{"title":"특성 추출기","local":"feature-extractor","sections":[],"depth":2},{"title":"프로세서","local":"processor","sections":[],"depth":2}],"depth":1}';function ze(w){return ye(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Le extends he{constructor(n){super(),be(this,n,ze,Ge,ge,{})}}export{Le as component};
