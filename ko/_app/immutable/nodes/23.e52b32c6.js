import{s as ca,o as ma,n as re}from"../chunks/scheduler.56730f09.js";import{S as pa,i as ua,g as i,s as n,r as p,A as ha,h as l,f as t,c as a,j as M,u,x as m,k as x,y as s,a as r,v as h,d as f,t as g,w as _}from"../chunks/index.1f144517.js";import{T as wo}from"../chunks/Tip.41e845e5.js";import{D as F,E as Mo}from"../chunks/ExampleCodeBlock.ee3463c7.js";import{C as It}from"../chunks/CodeBlock.738eeccb.js";import{P as fa}from"../chunks/PipelineTag.82d6c31e.js";import{H as R}from"../chunks/Heading.57d46534.js";function ga(C){let d,v="<code>Llama2</code> 모델은 <code>bfloat16</code>을 사용하여 훈련되었지만, 원래 추론은 <code>float16</code>을 사용합니다. 허브에 업로드된 체크포인트는 <code>torch_dtype = &#39;float16&#39;</code>을 사용하며, 이는 <code>AutoModel</code> API에 의해 체크포인트를 <code>torch.float32</code>에서 <code>torch.float16</code>으로 캐스팅하는 데 사용됩니다.",c,b,w="온라인 가중치의 <code>dtype</code>은 <code>model = AutoModelForCausalLM.from_pretrained(&quot;path&quot;, torch_dtype = &quot;auto&quot;)</code>를 사용하여 모델을 초기화할 때 <code>torch_dtype=&quot;auto&quot;</code>를 사용하지 않는 한 대부분 관련이 없습니다. 그 이유는 모델이 먼저 다운로드될 것이고 (온라인 체크포인트의 <code>dtype</code>을 사용하여) 그다음에 기본 <code>dtype</code>인 <code>torch</code>로 캐스팅하고(<code>torch.float32</code>가 됨), 마지막으로 구성(configuration)에서 제공된 <code>torch_dtype</code>이 있는 경우 이를 사용하기 때문입니다.",k,T,ie="모델을 <code>float16</code>에서 훈련하는 것은 권장되지 않으며 <code>nan</code>을 생성하는 것으로 알려져 있습니다. 따라서 모델은 <code>bfloat16</code>에서 훈련되어야 합니다.";return{c(){d=i("p"),d.innerHTML=v,c=n(),b=i("p"),b.innerHTML=w,k=n(),T=i("p"),T.innerHTML=ie},l($){d=l($,"P",{"data-svelte-h":!0}),m(d)!=="svelte-17o3s0r"&&(d.innerHTML=v),c=a($),b=l($,"P",{"data-svelte-h":!0}),m(b)!=="svelte-twggkk"&&(b.innerHTML=w),k=a($),T=l($,"P",{"data-svelte-h":!0}),m(T)!=="svelte-ulakwv"&&(T.innerHTML=ie)},m($,Z){r($,d,Z),r($,c,Z),r($,b,Z),r($,k,Z),r($,T,Z)},p:re,d($){$&&(t(d),t(c),t(b),t(k),t(T))}}}function _a(C){let d,v;return d=new It({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMExsYW1hTW9kZWwlMkMlMjBMbGFtYUNvbmZpZyUwQSUwQSUyMyUyMEluaXRpYWxpemluZyUyMGElMjBMTGFNQSUyMGxsYW1hLTdiJTIwc3R5bGUlMjBjb25maWd1cmF0aW9uJTBBY29uZmlndXJhdGlvbiUyMCUzRCUyMExsYW1hQ29uZmlnKCklMEElMEElMjMlMjBJbml0aWFsaXppbmclMjBhJTIwbW9kZWwlMjBmcm9tJTIwdGhlJTIwbGxhbWEtN2IlMjBzdHlsZSUyMGNvbmZpZ3VyYXRpb24lMEFtb2RlbCUyMCUzRCUyMExsYW1hTW9kZWwoY29uZmlndXJhdGlvbiklMEElMEElMjMlMjBBY2Nlc3NpbmclMjB0aGUlMjBtb2RlbCUyMGNvbmZpZ3VyYXRpb24lMEFjb25maWd1cmF0aW9uJTIwJTNEJTIwbW9kZWwuY29uZmln",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> LlamaModel, LlamaConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a LLaMA llama-7b style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = LlamaConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the llama-7b style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = LlamaModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`,wrap:!1}}),{c(){p(d.$$.fragment)},l(c){u(d.$$.fragment,c)},m(c,b){h(d,c,b),v=!0},p:re,i(c){v||(f(d.$$.fragment,c),v=!0)},o(c){g(d.$$.fragment,c),v=!1},d(c){_(d,c)}}}function ka(C){let d,v="sequence pair mask has the following format:",c,b,w;return b=new It({props:{code:"MCUyMDAlMjAwJTIwMCUyMDAlMjAwJTIwMCUyMDAlMjAwJTIwMCUyMDAlMjAxJTIwMSUyMDElMjAxJTIwMSUyMDElMjAxJTIwMSUyMDElMEElN0MlMjBmaXJzdCUyMHNlcXVlbmNlJTIwJTIwJTIwJTIwJTdDJTIwc2Vjb25kJTIwc2VxdWVuY2UlMjAlN0M=",highlighted:`0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1 1
| first sequence    | second sequence |`,wrap:!1}}),{c(){d=i("p"),d.textContent=v,c=n(),p(b.$$.fragment)},l(k){d=l(k,"P",{"data-svelte-h":!0}),m(d)!=="svelte-16klr56"&&(d.textContent=v),c=a(k),u(b.$$.fragment,k)},m(k,T){r(k,d,T),r(k,c,T),h(b,k,T),w=!0},p:re,i(k){w||(f(b.$$.fragment,k),w=!0)},o(k){g(b.$$.fragment,k),w=!1},d(k){k&&(t(d),t(c)),_(b,k)}}}function ba(C){let d,v;return d=new It({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMExsYW1hVG9rZW5pemVyRmFzdCUwQSUwQXRva2VuaXplciUyMCUzRCUyMExsYW1hVG9rZW5pemVyRmFzdC5mcm9tX3ByZXRyYWluZWQoJTIyaGYtaW50ZXJuYWwtdGVzdGluZyUyRmxsYW1hLXRva2VuaXplciUyMiklMEF0b2tlbml6ZXIuZW5jb2RlKCUyMkhlbGxvJTIwdGhpcyUyMGlzJTIwYSUyMHRlc3QlMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> LlamaTokenizerFast

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = LlamaTokenizerFast.from_pretrained(<span class="hljs-string">&quot;hf-internal-testing/llama-tokenizer&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.encode(<span class="hljs-string">&quot;Hello this is a test&quot;</span>)
[<span class="hljs-number">1</span>, <span class="hljs-number">15043</span>, <span class="hljs-number">445</span>, <span class="hljs-number">338</span>, <span class="hljs-number">263</span>, <span class="hljs-number">1243</span>]`,wrap:!1}}),{c(){p(d.$$.fragment)},l(c){u(d.$$.fragment,c)},m(c,b){h(d,c,b),v=!0},p:re,i(c){v||(f(d.$$.fragment,c),v=!0)},o(c){g(d.$$.fragment,c),v=!1},d(c){_(d,c)}}}function va(C){let d,v=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){d=i("p"),d.innerHTML=v},l(c){d=l(c,"P",{"data-svelte-h":!0}),m(d)!=="svelte-fincs2"&&(d.innerHTML=v)},m(c,b){r(c,d,b)},p:re,d(c){c&&t(d)}}}function ya(C){let d,v=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){d=i("p"),d.innerHTML=v},l(c){d=l(c,"P",{"data-svelte-h":!0}),m(d)!=="svelte-fincs2"&&(d.innerHTML=v)},m(c,b){r(c,d,b)},p:re,d(c){c&&t(d)}}}function La(C){let d,v="Example:",c,b,w;return b=new It({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMkMlMjBMbGFtYUZvckNhdXNhbExNJTBBJTBBbW9kZWwlMjAlM0QlMjBMbGFtYUZvckNhdXNhbExNLmZyb21fcHJldHJhaW5lZCglMjJtZXRhLWxsYW1hJTJGTGxhbWEtMi03Yi1oZiUyMiklMEF0b2tlbml6ZXIlMjAlM0QlMjBBdXRvVG9rZW5pemVyLmZyb21fcHJldHJhaW5lZCglMjJtZXRhLWxsYW1hJTJGTGxhbWEtMi03Yi1oZiUyMiklMEElMEFwcm9tcHQlMjAlM0QlMjAlMjJIZXklMkMlMjBhcmUlMjB5b3UlMjBjb25zY2lvdXMlM0YlMjBDYW4lMjB5b3UlMjB0YWxrJTIwdG8lMjBtZSUzRiUyMiUwQWlucHV0cyUyMCUzRCUyMHRva2VuaXplcihwcm9tcHQlMkMlMjByZXR1cm5fdGVuc29ycyUzRCUyMnB0JTIyKSUwQSUwQSUyMyUyMEdlbmVyYXRlJTBBZ2VuZXJhdGVfaWRzJTIwJTNEJTIwbW9kZWwuZ2VuZXJhdGUoaW5wdXRzLmlucHV0X2lkcyUyQyUyMG1heF9sZW5ndGglM0QzMCklMEF0b2tlbml6ZXIuYmF0Y2hfZGVjb2RlKGdlbmVyYXRlX2lkcyUyQyUyMHNraXBfc3BlY2lhbF90b2tlbnMlM0RUcnVlJTJDJTIwY2xlYW5fdXBfdG9rZW5pemF0aW9uX3NwYWNlcyUzREZhbHNlKSU1QjAlNUQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, LlamaForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span>model = LlamaForCausalLM.from_pretrained(<span class="hljs-string">&quot;meta-llama/Llama-2-7b-hf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;meta-llama/Llama-2-7b-hf&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>prompt = <span class="hljs-string">&quot;Hey, are you conscious? Can you talk to me?&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(prompt, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Generate</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>generate_ids = model.generate(inputs.input_ids, max_length=<span class="hljs-number">30</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.batch_decode(generate_ids, skip_special_tokens=<span class="hljs-literal">True</span>, clean_up_tokenization_spaces=<span class="hljs-literal">False</span>)[<span class="hljs-number">0</span>]
<span class="hljs-string">&quot;Hey, are you conscious? Can you talk to me?\\nI&#x27;m not conscious, but I can talk to you.&quot;</span>`,wrap:!1}}),{c(){d=i("p"),d.textContent=v,c=n(),p(b.$$.fragment)},l(k){d=l(k,"P",{"data-svelte-h":!0}),m(d)!=="svelte-11lpom8"&&(d.textContent=v),c=a(k),u(b.$$.fragment,k)},m(k,T){r(k,d,T),r(k,c,T),h(b,k,T),w=!0},p:re,i(k){w||(f(b.$$.fragment,k),w=!0)},o(k){g(b.$$.fragment,k),w=!1},d(k){k&&(t(d),t(c)),_(b,k)}}}function Ta(C){let d,v=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){d=i("p"),d.innerHTML=v},l(c){d=l(c,"P",{"data-svelte-h":!0}),m(d)!=="svelte-fincs2"&&(d.innerHTML=v)},m(c,b){r(c,d,b)},p:re,d(c){c&&t(d)}}}function $a(C){let d,v,c,b,w,k,T,ie,$,Z='Llama2 모델은 Hugo Touvron, Louis Martin, Kevin Stone, Peter Albert, Amjad Almahairi, Ya1smine Babaei, Nikolay Bashlykov, Soumya Batra, Prajjwal Bhargava, Shruti Bhosale, Dan Bikel, Lukas Blecher, Cristian Canton Ferrer, Moya Chen, Guillem Cucurull, David Esiobu, Jude Fernandes, Jeremy Fu, Wenyin Fu, Brian Fuller, Cynthia Gao, Vedanuj Goswami, Naman Goyal, Anthony Hartshorn, Saghar Hosseini, Rui Hou, Hakan Inan, Marcin Kardas, Viktor Kerkez Madian Khabsa, Isabel Kloumann, Artem Korenev, Punit Singh Koura, Marie-Anne Lachaux, Thibaut Lavril, Jenya Lee, Diana Liskovich, Yinghai Lu, Yuning Mao, Xavier Martinet, Todor Mihaylov, Pushkar Mishra, Igor Molybog, Yixin Nie, Andrew Poulton, Jeremy Reizenstein, Rashi Rungta, Kalyan Saladi, Alan Schelten, Ruan Silva, Eric Michael Smith, Ranjan Subramanian, Xiaoqing EllenTan, Binh Tang, Ross Taylor, Adina Williams, Jian Xiang Kuan, Puxin Xu, Zheng Yan, Iliyan Zarov, Yuchen Zhang, Angela Fan, Melanie Kambadur, Sharan Narang, Aurelien Rodriguez, Robert Stojnic, Sergey Edunov, Thomas Scialom의 논문 <a href="https://ai.meta.com/research/publications/llama-2-open-foundation-and-fine-tuned-chat-models/" rel="nofollow">LLaMA: Open Foundation and Fine-Tuned Chat Models</a>에서 제안되었습니다. 채팅 어플리케이션에 맞게 미세 조정된 체크포인트를 포함된 7B에서 70B 범위의 매개변수를 가진 기초 언어 모델 모음입니다!',Ut,le,bn="논문의 초록은 다음과 같습니다:",St,de,vn="<em>이 연구에서 우리는 70억에서 700억 파라미터의 범위에서 사전 훈련 및 미세 조정된 대규모 언어 모델(LLMs)의 모음인 Llama 2를 개발 및 공개합니다. Llama 2-Chat라고 불리는 미세 조정된 LLMs은 대화 사용 사례에 최적화되었습니다. 우리의 모델은 테스트한 대부분의 벤치마크에서 오픈 소스 채팅 모델보다 성능이 뛰어나며, 유용성과 안전성에 대한 인적 평가를 바탕으로 비공개 소스 모델을 대체할 수 있는 적절한 대안이 될 수 있습니다. 우리는 Llama 2-Chat의 미세 조정 및 안전성 향상의 접근 방식에 대한 자세한 설명을 제공하여 커뮤니티가 우리의 작업을 기반으로 LLMs의 책임있는 개발에 기여할 수 있도록 합니다.</em>",Et,ce,yn='<a href="https://huggingface.co/models?search=llama2" rel="nofollow">여기</a>에서 모든 Llama2 모델을 확인할 수 있습니다.',Jt,B,Nt,me,Ln="🍯 팁:",Gt,pe,Tn='<li>Llama2 모델의 가중치는 <a href="https://ai.meta.com/resources/models-and-libraries/llama-downloads/" rel="nofollow">이 양식</a>을 작성하여 얻을 수 있습니다.</li> <li>아키텍처는 처음 버전의 Llama와 매우 유사하며, <a href="https://arxiv.org/pdf/2305.13245.pdf" rel="nofollow">이 논문</a>의 내용에 따라 Grouped Query Attention (GQA)이 추가되었습니다.</li> <li><code>config.pretraining_tp</code>를 1과 다른 값으로 설정하면 더 정확하지만 느린 선형 레이어 계산이 활성화되어 원본 로짓과 더 잘 일치하게 됩니다.</li> <li>원래 모델은 <code>pad_id = -1</code>을 사용하는데, 이는 패딩 토큰이 없음을 의미합니다. 동일한 로직을 사용할 수 없으므로 <code>tokenizer.add_special_tokens({&quot;pad_token&quot;:&quot;&lt;pad&gt;&quot;})</code>를 사용하여 패딩 토큰을 추가하고 이에 따라 토큰 임베딩 크기를 조정해야 합니다. 또한 <code>model.config.pad_token_id</code>를 설정해야 합니다. 모델의 <code>embed_tokens</code> 레이어는 <code>self.embed_tokens = nn.Embedding(config.vocab_size, config.hidden_size, self.config.padding_idx)</code>로 초기화되어, 패딩 토큰 인코딩이 0을 출력하도록 합니다. 따라서 초기화 시에 전달하는 것을 권장합니다.</li> <li>양식을 작성하고 모델 체크포인트 접근 권한을 얻은 후에는 이미 변환된 체크포인트를 사용할 수 있습니다. 그렇지 않고 자신의 모델을 직접 변환하려는 경우, <a href="https://github.com/huggingface/transformers/blob/main/src/transformers/models/llama/convert_llama_weights_to_hf.py" rel="nofollow">변환 스크립트</a>를 자유롭게 사용하세요. 스크립트는 다음과 같은 예시의 명령어로 호출할 수 있습니다:</li>',Dt,ue,Rt,he,$n="<li>변환 후 모델과 토크나이저는 다음과 같이 로드할 수 있습니다:</li>",Zt,fe,Bt,ge,wn="스크립트를 실행하려면 모델을 float16 정밀도로 전부 호스트할 수 있을 만큼 충분한 CPU RAM이 필요합니다 (가장 큰 버전이 여러 체크포인트로 제공되더라도 각 체크포인트는 모델 가중치의 일부만을 포함하므로 모두 RAM에 로드해야 합니다). 75B 모델의 경우, 총 145GB의 RAM이 필요합니다.",Vt,_e,Mn='<li>LLaMA 토크나이저는 <a href="https://github.com/google/sentencepiece" rel="nofollow">sentencepiece</a>를 기반으로 한 BPE 모델입니다. sentencepiece의 특징 중 하나는 시퀀스를 디코딩할 때 첫 번째 토큰이 단어의 시작이면 (예: “Banana”) 토크나이저는 문자열 앞에 접두사 공간을 추가하지 않는 것입니다.</li>',Qt,ke,xn='이 모델은 <a href="https://huggingface.co/ArthurZ" rel="nofollow">Arthur Zucker</a>가 <a href="https://huggingface.co/lysandre" rel="nofollow">Lysandre Debut</a>의 도움을 받아 제공하였습니다. Hugging Face에서의 구현 코드는 <a href="https://github.com/EleutherAI/gpt-neox" rel="nofollow">여기</a>의 GPT-NeoX 를 기반으로 합니다. 저자의 원래 코드는 <a href="https://github.com/facebookresearch/llama" rel="nofollow">여기</a>에서 찾을 수 있습니다.',Xt,be,Yt,ve,zn="LLaMA2를 시작하는 데 도움이 될 Hugging Face의 공식 및 커뮤니티(🌎로 표시) 리소스 목록입니다. 여기에 새로운 리소스를 추가하기 위해서 Pull Request를 열어 주시면 검토하겠습니다! 리소스는 기존 리소스와 중복되지 않는 새로운 것을 보여주는 것이 이상적입니다.",Ot,ye,Cn='<li><a href="https://huggingface.co/blog/llama2" rel="nofollow">Llama 2 is here - get it on Hugging Face</a>, Llama 2에 관한 블로그 포스트와 🤗 Transformers 및 🤗 PEFT와 함께 사용하는 방법에 대한 내용입니다.</li> <li><a href="https://www.philschmid.de/llama-2" rel="nofollow">LLaMA 2 - Every Resource you need</a>, LLaMA 2에 대해 알아보고 빠르게 시작하는 데 필요한 관련 리소스의 모음입니다.</li>',Kt,Le,eo,Te,Fn='<li>Google Colab에서 QLoRA와 4-bit 정밀도를 사용하여 Llama 2를 미세 조정하는 방법에 대한 <a href="https://colab.research.google.com/drive/1PEQyJO1-f6j0S_XJ8DV50NkpzasXkrzd?usp=sharing" rel="nofollow">노트북</a>입니다. 🌎</li> <li>“Llama-v2-7b-guanaco” 모델을 4-bit QLoRA로 미세 조정하고 PDF에서 Q&amp;A 데이터셋을 생성하는 방법에 대한 <a href="https://colab.research.google.com/drive/134o_cXcMe_lsvl15ZE_4Y75Kstepsntu?usp=sharing" rel="nofollow">노트북</a>입니다. 🌎</li>',to,$e,qn="⚗️ 최적화",oo,we,Pn='<li><a href="https://huggingface.co/blog/dpo-trl" rel="nofollow">Llama 2를 DPO로 미세 조정하기</a>, TRL 라이브러리의 DPO 방법을 사용하여 특정 데이터셋에서 Llama 2를 미세 조정하는 방법을 안내하는 가이드입니다.</li> <li><a href="https://www.philschmid.de/instruction-tune-llama-2" rel="nofollow">확장 가이드: Llama 2 명령어 조정</a>, 입력에서 명령어를 생성하도록 Llama 2를 훈련시키는 방법을 안내하는 가이드로, 명령어를 따르는 모델에서 명령어를 주는 모델로 변환합니다.</li> <li>개인 컴퓨터에서 QLoRA와 TRL을 사용하여 Llama 2 모델을 미세 조정하는 방법에 대한 <a href="https://colab.research.google.com/drive/1SYpgFpcmtIUzdE7pxqknrM4ArCASfkFQ?usp=sharing" rel="nofollow">노트북</a>입니다. 🌎</li>',no,Me,jn="⚡️ 추론",ao,xe,In='<li>AutoGPTQ 라이브러리의 GPTQ를 사용하여 Llama 2 모델을 양자화하는 방법에 대한 <a href="https://colab.research.google.com/drive/1TC56ArKerXUpbgRy5vM3woRsbTEVNq7h?usp=sharing" rel="nofollow">노트북</a>입니다. 🌎</li> <li>로컬 컴퓨터나 Google Colab에서 4-bit 양자화로 Llama 2 채팅 모델을 실행하는 방법에 대한 <a href="https://colab.research.google.com/drive/1X1z9Q6domMKl2CnEM0QGHNwidLfR4dW2?usp=sharing" rel="nofollow">노트북</a>입니다. 🌎</li>',so,ze,Wn="🚀 배포",ro,Ce,Hn='<li><a href="https://www.philschmid.de/sagemaker-llama2-qlora" rel="nofollow">Amazon SageMaker에서 LLaMA 2 (7-70B) 미세 조정하기</a>, Amazon SageMaker에서 QLoRA 미세 조정 및 배포에 이르기까지의 완전한 가이드입니다.</li> <li><a href="https://www.philschmid.de/sagemaker-llama-llm" rel="nofollow">Amazon SageMaker에서 Llama 2 7B/13B/70B 배포하기</a>, 안전하고 확장 가능한 배포를 위해 Hugging Face의 LLM DLC 컨테이너를 사용하는 방법에 대한 가이드입니다.</li>',io,Fe,lo,W,qe,xo,ot,An=`This is the configuration class to store the configuration of a <a href="/docs/transformers/main/ko/model_doc/llama2#transformers.LlamaModel">LlamaModel</a>. It is used to instantiate an LLaMA
model according to the specified arguments, defining the model architecture. Instantiating a configuration with the
defaults will yield a similar configuration to that of the LLaMA-7B.`,zo,nt,Un=`Configuration objects inherit from <code>PretrainedConfig</code> and can be used to control the model outputs. Read the
documentation from <code>PretrainedConfig</code> for more information.`,Co,V,co,Pe,mo,q,je,Fo,at,Sn=`Construct a Llama tokenizer. Based on byte-level Byte-Pair-Encoding. The default padding token is unset as there is
no padding token in the original model.`,qo,st,Ie,Po,Q,We,jo,rt,En=`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer <code>prepare_for_model</code> method.`,Io,H,He,Wo,it,Jn="Creates a mask from the two sequences passed to be used in a sequence-pair classification task. An ALBERT",Ho,X,Ao,lt,Nn="if token_ids_1 is None, only returns the first portion of the mask (0s).",Uo,Y,Ae,So,dt,Gn="Save the vocabulary and special tokens file to a directory.",po,Ue,uo,y,Se,Eo,ct,Dn="Construct a Llama tokenizer. Based on byte-level Byte-Pair-Encoding.",Jo,mt,Rn="This uses notably ByteFallback and no normalization.",No,O,Go,pt,Zn=`If you want to change the <code>bos_token</code> or the <code>eos_token</code>, make sure to specify them when initializing the model, or
call <code>tokenizer.update_post_processor()</code> to make sure that the post-processing is correctly done (otherwise the
values of the first token and final token of an encoded sequence will not be correct). For more details, checkout
[post-processors] (<a href="https://huggingface.co/docs/tokenizers/api/post-processors" rel="nofollow">https://huggingface.co/docs/tokenizers/api/post-processors</a>) documentation.`,Do,ut,Bn=`This tokenizer inherits from <code>PreTrainedTokenizerFast</code> which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`,Ro,ht,Ee,Zo,K,Je,Bo,ft,Vn=`Retrieves sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer <code>prepare_for_model</code> or <code>encode_plus</code> methods.`,Vo,E,Ne,Qo,gt,Qn=`Create the token type IDs corresponding to the sequences passed. <a href="../glossary#token-type-ids">What are token type
IDs?</a>`,Xo,_t,Xn="Should be overridden in a subclass if the model has a special way of building those.",Yo,ee,Ge,Oo,kt,Yn="Updates the underlying post processor with the current <code>bos_token</code> and <code>eos_token</code>.",Ko,bt,De,ho,Re,fo,P,Ze,en,vt,On=`The bare LLaMA Model outputting raw hidden-states without any specific head on top.
This model inherits from <code>PreTrainedModel</code>. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`,tn,yt,Kn=`This model is also a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`,on,Lt,ea="Transformer decoder consisting of <em>config.num_hidden_layers</em> layers. Each layer is a <code>LlamaDecoderLayer</code>",nn,J,Be,an,Tt,ta='The <a href="/docs/transformers/main/ko/model_doc/llama2#transformers.LlamaModel">LlamaModel</a> forward method, overrides the <code>__call__</code> special method.',sn,te,go,Ve,_o,D,Qe,rn,A,Xe,ln,$t,oa='The <a href="/docs/transformers/main/ko/model_doc/llama2#transformers.LlamaForCausalLM">LlamaForCausalLM</a> forward method, overrides the <code>__call__</code> special method.',dn,oe,cn,ne,ko,Ye,bo,z,Oe,mn,wt,na="The LLaMa Model transformer with a sequence classification head on top (linear layer).",pn,Mt,aa=`<a href="/docs/transformers/main/ko/model_doc/llama2#transformers.LlamaForSequenceClassification">LlamaForSequenceClassification</a> uses the last token in order to do the classification, as other causal models
(e.g. GPT-2) do.`,un,xt,sa=`Since it does classification on the last token, it requires to know the position of the last token. If a
<code>pad_token_id</code> is defined in the configuration, it finds the last token that is not a padding token in each row. If
no <code>pad_token_id</code> is defined, it simply takes the last value in each row of the batch. Since it cannot guess the
padding tokens when <code>inputs_embeds</code> are passed instead of <code>input_ids</code>, it does the same (take the last value in
each row of the batch).`,hn,zt,ra=`This model inherits from <code>PreTrainedModel</code>. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`,fn,Ct,ia=`This model is also a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`,gn,N,Ke,_n,Ft,la='The <a href="/docs/transformers/main/ko/model_doc/llama2#transformers.LlamaForSequenceClassification">LlamaForSequenceClassification</a> forward method, overrides the <code>__call__</code> special method.',kn,ae,vo,Wt,yo;return w=new R({props:{title:"Llama2",local:"llama2",headingTag:"h1"}}),T=new R({props:{title:"개요",local:"overview",headingTag:"h2"}}),B=new wo({props:{warning:!0,$$slots:{default:[ga]},$$scope:{ctx:C}}}),ue=new It({props:{code:"cHl0aG9uJTIwc3JjJTJGdHJhbnNmb3JtZXJzJTJGbW9kZWxzJTJGbGxhbWElMkZjb252ZXJ0X2xsYW1hX3dlaWdodHNfdG9faGYucHklMjAlNUMlMEElMjAlMjAlMjAlMjAtLWlucHV0X2RpciUyMCUyRnBhdGglMkZ0byUyRmRvd25sb2FkZWQlMkZsbGFtYSUyRndlaWdodHMlMjAtLW1vZGVsX3NpemUlMjA3QiUyMC0tb3V0cHV0X2RpciUyMCUyRm91dHB1dCUyRnBhdGg=",highlighted:`python src/transformers/models/llama/convert_llama_weights_to_hf.py \\
    --input_dir /path/to/downloaded/llama/weights --model_size 7B --output_dir /output/path`,wrap:!1}}),fe=new It({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMExsYW1hRm9yQ2F1c2FsTE0lMkMlMjBMbGFtYVRva2VuaXplciUwQSUwQXRva2VuaXplciUyMCUzRCUyMExsYW1hVG9rZW5pemVyLmZyb21fcHJldHJhaW5lZCglMjIlMkZvdXRwdXQlMkZwYXRoJTIyKSUwQW1vZGVsJTIwJTNEJTIwTGxhbWFGb3JDYXVzYWxMTS5mcm9tX3ByZXRyYWluZWQoJTIyJTJGb3V0cHV0JTJGcGF0aCUyMik=",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> LlamaForCausalLM, LlamaTokenizer

tokenizer = LlamaTokenizer.from_pretrained(<span class="hljs-string">&quot;/output/path&quot;</span>)
model = LlamaForCausalLM.from_pretrained(<span class="hljs-string">&quot;/output/path&quot;</span>)`,wrap:!1}}),be=new R({props:{title:"리소스",local:"resources",headingTag:"h2"}}),Le=new fa({props:{pipeline:"text-generation"}}),Fe=new R({props:{title:"LlamaConfig",local:"llamaconfig ][ transformers.LlamaConfig",headingTag:"h2"}}),qe=new F({props:{name:"class transformers.LlamaConfig",anchor:"transformers.LlamaConfig",parameters:[{name:"vocab_size",val:" = 32000"},{name:"hidden_size",val:" = 4096"},{name:"intermediate_size",val:" = 11008"},{name:"num_hidden_layers",val:" = 32"},{name:"num_attention_heads",val:" = 32"},{name:"num_key_value_heads",val:" = None"},{name:"hidden_act",val:" = 'silu'"},{name:"max_position_embeddings",val:" = 2048"},{name:"initializer_range",val:" = 0.02"},{name:"rms_norm_eps",val:" = 1e-06"},{name:"use_cache",val:" = True"},{name:"pad_token_id",val:" = None"},{name:"bos_token_id",val:" = 1"},{name:"eos_token_id",val:" = 2"},{name:"pretraining_tp",val:" = 1"},{name:"tie_word_embeddings",val:" = False"},{name:"rope_theta",val:" = 10000.0"},{name:"rope_scaling",val:" = None"},{name:"attention_bias",val:" = False"},{name:"attention_dropout",val:" = 0.0"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.LlamaConfig.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 32000) &#x2014;
Vocabulary size of the LLaMA model. Defines the number of different tokens that can be represented by the
<code>inputs_ids</code> passed when calling <a href="/docs/transformers/main/ko/model_doc/llama2#transformers.LlamaModel">LlamaModel</a>`,name:"vocab_size"},{anchor:"transformers.LlamaConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 4096) &#x2014;
Dimension of the hidden representations.`,name:"hidden_size"},{anchor:"transformers.LlamaConfig.intermediate_size",description:`<strong>intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 11008) &#x2014;
Dimension of the MLP representations.`,name:"intermediate_size"},{anchor:"transformers.LlamaConfig.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 32) &#x2014;
Number of hidden layers in the Transformer decoder.`,name:"num_hidden_layers"},{anchor:"transformers.LlamaConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 32) &#x2014;
Number of attention heads for each attention layer in the Transformer decoder.`,name:"num_attention_heads"},{anchor:"transformers.LlamaConfig.num_key_value_heads",description:`<strong>num_key_value_heads</strong> (<code>int</code>, <em>optional</em>) &#x2014;
This is the number of key_value heads that should be used to implement Grouped Query Attention. If
<code>num_key_value_heads=num_attention_heads</code>, the model will use Multi Head Attention (MHA), if
<code>num_key_value_heads=1 the model will use Multi Query Attention (MQA) otherwise GQA is used. When converting a multi-head checkpoint to a GQA checkpoint, each group key and value head should be constructed by meanpooling all the original heads within that group. For more details checkout [this paper](https://arxiv.org/pdf/2305.13245.pdf). If it is not specified, will default to </code>num_attention_heads\`.`,name:"num_key_value_heads"},{anchor:"transformers.LlamaConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;silu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the decoder.`,name:"hidden_act"},{anchor:"transformers.LlamaConfig.max_position_embeddings",description:`<strong>max_position_embeddings</strong> (<code>int</code>, <em>optional</em>, defaults to 2048) &#x2014;
The maximum sequence length that this model might ever be used with. Llama 1 supports up to 2048 tokens,
Llama 2 up to 4096, CodeLlama up to 16384.`,name:"max_position_embeddings"},{anchor:"transformers.LlamaConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.LlamaConfig.rms_norm_eps",description:`<strong>rms_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-06) &#x2014;
The epsilon used by the rms normalization layers.`,name:"rms_norm_eps"},{anchor:"transformers.LlamaConfig.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the model should return the last key/values attentions (not used by all models). Only
relevant if <code>config.is_decoder=True</code>.`,name:"use_cache"},{anchor:"transformers.LlamaConfig.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Padding token id.`,name:"pad_token_id"},{anchor:"transformers.LlamaConfig.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Beginning of stream token id.`,name:"bos_token_id"},{anchor:"transformers.LlamaConfig.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 2) &#x2014;
End of stream token id.`,name:"eos_token_id"},{anchor:"transformers.LlamaConfig.pretraining_tp",description:`<strong>pretraining_tp</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Experimental feature. Tensor parallelism rank used during pretraining. Please refer to <a href="https://huggingface.co/docs/transformers/main/perf_train_gpu_many#tensor-parallelism" rel="nofollow">this
document</a> to understand more about it. This value is
necessary to ensure exact reproducibility of the pretraining results. Please refer to <a href="https://github.com/pytorch/pytorch/issues/76232" rel="nofollow">this
issue</a>.`,name:"pretraining_tp"},{anchor:"transformers.LlamaConfig.tie_word_embeddings",description:`<strong>tie_word_embeddings</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to tie weight embeddings`,name:"tie_word_embeddings"},{anchor:"transformers.LlamaConfig.rope_theta",description:`<strong>rope_theta</strong> (<code>float</code>, <em>optional</em>, defaults to 10000.0) &#x2014;
The base period of the RoPE embeddings.`,name:"rope_theta"},{anchor:"transformers.LlamaConfig.rope_scaling",description:`<strong>rope_scaling</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
Dictionary containing the scaling configuration for the RoPE embeddings. Currently supports two scaling
strategies: linear and dynamic. Their scaling factor must be a float greater than 1. The expected format is
<code>{&quot;type&quot;: strategy name, &quot;factor&quot;: scaling factor}</code>. When using this flag, don&#x2019;t update
<code>max_position_embeddings</code> to the expected new maximum. See the following thread for more information on how
these scaling strategies behave:
<a href="https://www.reddit.com/r/LocalLLaMA/comments/14mrgpr/dynamically_scaled_rope_further_increases/" rel="nofollow">https://www.reddit.com/r/LocalLLaMA/comments/14mrgpr/dynamically_scaled_rope_further_increases/</a>. This is an
experimental feature, subject to breaking API changes in future versions.`,name:"rope_scaling"},{anchor:"transformers.LlamaConfig.attention_bias",description:`<strong>attention_bias</strong> (<code>bool</code>, defaults to <code>False</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use a bias in the query, key, value and output projection layers during self-attention.`,name:"attention_bias"},{anchor:"transformers.LlamaConfig.attention_dropout",description:`<strong>attention_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_dropout"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/llama/configuration_llama.py#L31"}}),V=new Mo({props:{anchor:"transformers.LlamaConfig.example",$$slots:{default:[_a]},$$scope:{ctx:C}}}),Pe=new R({props:{title:"LlamaTokenizer",local:"llamatokenizer ][ transformers.LlamaTokenizer",headingTag:"h2"}}),je=new F({props:{name:"class transformers.LlamaTokenizer",anchor:"transformers.LlamaTokenizer",parameters:[{name:"vocab_file",val:""},{name:"unk_token",val:" = '<unk>'"},{name:"bos_token",val:" = '<s>'"},{name:"eos_token",val:" = '</s>'"},{name:"pad_token",val:" = None"},{name:"sp_model_kwargs",val:": Optional = None"},{name:"add_bos_token",val:" = True"},{name:"add_eos_token",val:" = False"},{name:"clean_up_tokenization_spaces",val:" = False"},{name:"use_default_system_prompt",val:" = False"},{name:"spaces_between_special_tokens",val:" = False"},{name:"legacy",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.LlamaTokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
Path to the vocabulary file.`,name:"vocab_file"},{anchor:"transformers.LlamaTokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code> or <code>tokenizers.AddedToken</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.LlamaTokenizer.bos_token",description:`<strong>bos_token</strong> (<code>str</code> or <code>tokenizers.AddedToken</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sequence token that was used during pretraining. Can be used a sequence classifier token.`,name:"bos_token"},{anchor:"transformers.LlamaTokenizer.eos_token",description:`<strong>eos_token</strong> (<code>str</code> or <code>tokenizers.AddedToken</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.`,name:"eos_token"},{anchor:"transformers.LlamaTokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code> or <code>tokenizers.AddedToken</code>, <em>optional</em>) &#x2014;
A special token used to make arrays of tokens the same size for batching purpose. Will then be ignored by
attention mechanisms or loss computation.`,name:"pad_token"},{anchor:"transformers.LlamaTokenizer.sp_model_kwargs",description:`<strong>sp_model_kwargs</strong> (<code>Dict[str, Any]</code>, <code>Optional</code>, <em>optional</em>) &#x2014;
Will be passed to the <code>SentencePieceProcessor.__init__()</code> method. The <a href="https://github.com/google/sentencepiece/tree/master/python" rel="nofollow">Python wrapper for
SentencePiece</a> can be used, among other things,
to set:</p>
<ul>
<li>
<p><code>enable_sampling</code>: Enable subword regularization.</p>
</li>
<li>
<p><code>nbest_size</code>: Sampling parameters for unigram. Invalid for BPE-Dropout.</p>
<ul>
<li><code>nbest_size = {0,1}</code>: No sampling is performed.</li>
<li><code>nbest_size &gt; 1</code>: samples from the nbest_size results.</li>
<li><code>nbest_size &lt; 0</code>: assuming that nbest_size is infinite and samples from the all hypothesis (lattice)
using forward-filtering-and-backward-sampling algorithm.</li>
</ul>
</li>
<li>
<p><code>alpha</code>: Smoothing parameter for unigram sampling, and dropout probability of merge operations for
BPE-dropout.</p>
</li>
</ul>`,name:"sp_model_kwargs"},{anchor:"transformers.LlamaTokenizer.add_bos_token",description:`<strong>add_bos_token</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to add an <code>bos_token</code> at the start of sequences.`,name:"add_bos_token"},{anchor:"transformers.LlamaTokenizer.add_eos_token",description:`<strong>add_eos_token</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to add an <code>eos_token</code> at the end of sequences.`,name:"add_eos_token"},{anchor:"transformers.LlamaTokenizer.clean_up_tokenization_spaces",description:`<strong>clean_up_tokenization_spaces</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to cleanup spaces after decoding, cleanup consists in removing potential artifacts like
extra spaces.`,name:"clean_up_tokenization_spaces"},{anchor:"transformers.LlamaTokenizer.use_default_system_prompt",description:`<strong>use_default_system_prompt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the default system prompt for Llama should be used.`,name:"use_default_system_prompt"},{anchor:"transformers.LlamaTokenizer.spaces_between_special_tokens",description:`<strong>spaces_between_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to add spaces between special tokens.`,name:"spaces_between_special_tokens"},{anchor:"transformers.LlamaTokenizer.legacy",description:`<strong>legacy</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the <code>legacy</code> behavior of the tokenizer should be used. Legacy is before the merge of #24622
and #25224 which includes fixes to properly handle tokens that appear after special tokens. A simple
example:</p>
<ul>
<li><code>legacy=True</code>:</li>
</ul>`,name:"legacy"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/llama/tokenization_llama.py#L66"}}),Ie=new F({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.LlamaTokenizer.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:""},{name:"token_ids_1",val:" = None"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/llama/tokenization_llama.py#L333"}}),We=new F({props:{name:"get_special_tokens_mask",anchor:"transformers.LlamaTokenizer.get_special_tokens_mask",parameters:[{name:"token_ids_0",val:": List"},{name:"token_ids_1",val:": Optional = None"},{name:"already_has_special_tokens",val:": bool = False"}],parametersDescription:[{anchor:"transformers.LlamaTokenizer.get_special_tokens_mask.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.LlamaTokenizer.get_special_tokens_mask.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"},{anchor:"transformers.LlamaTokenizer.get_special_tokens_mask.already_has_special_tokens",description:`<strong>already_has_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the token list is already formatted with special tokens for the model.`,name:"already_has_special_tokens"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/llama/tokenization_llama.py#L344",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>List[int]</code></p>
`}}),He=new F({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.LlamaTokenizer.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": List"},{name:"token_ids_1",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.LlamaTokenizer.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of ids.`,name:"token_ids_0"},{anchor:"transformers.LlamaTokenizer.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/llama/tokenization_llama.py#L381",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>List of <a href="../glossary#token-type-ids">token type IDs</a> according to the given sequence(s).</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>List[int]</code></p>
`}}),X=new Mo({props:{anchor:"transformers.LlamaTokenizer.create_token_type_ids_from_sequences.example",$$slots:{default:[ka]},$$scope:{ctx:C}}}),Ae=new F({props:{name:"save_vocabulary",anchor:"transformers.LlamaTokenizer.save_vocabulary",parameters:[{name:"save_directory",val:""},{name:"filename_prefix",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.LlamaTokenizer.save_vocabulary.save_directory",description:`<strong>save_directory</strong> (<code>str</code>) &#x2014;
The directory in which to save the vocabulary.`,name:"save_directory"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/llama/tokenization_llama.py#L306",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Paths to the files saved.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>Tuple(str)</code></p>
`}}),Ue=new R({props:{title:"LlamaTokenizerFast",local:"llamatokenizerfast ][ transformers.LlamaTokenizerFast",headingTag:"h2"}}),Se=new F({props:{name:"class transformers.LlamaTokenizerFast",anchor:"transformers.LlamaTokenizerFast",parameters:[{name:"vocab_file",val:" = None"},{name:"tokenizer_file",val:" = None"},{name:"clean_up_tokenization_spaces",val:" = False"},{name:"unk_token",val:" = '<unk>'"},{name:"bos_token",val:" = '<s>'"},{name:"eos_token",val:" = '</s>'"},{name:"add_bos_token",val:" = True"},{name:"add_eos_token",val:" = False"},{name:"use_default_system_prompt",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.LlamaTokenizerFast.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>, <em>optional</em>) &#x2014;
<a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a> file (generally has a .model extension) that
contains the vocabulary necessary to instantiate a tokenizer.`,name:"vocab_file"},{anchor:"transformers.LlamaTokenizerFast.tokenizer_file",description:`<strong>tokenizer_file</strong> (<code>str</code>, <em>optional</em>) &#x2014;
<a href="https://github.com/huggingface/tokenizers" rel="nofollow">tokenizers</a> file (generally has a .json extension) that
contains everything needed to load the tokenizer.`,name:"tokenizer_file"},{anchor:"transformers.LlamaTokenizerFast.clean_up_tokenization_spaces",description:`<strong>clean_up_tokenization_spaces</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to cleanup spaces after decoding, cleanup consists in removing potential artifacts like
extra spaces.`,name:"clean_up_tokenization_spaces"},{anchor:"transformers.LlamaTokenizerFast.unk_token",description:`<strong>unk_token</strong> (<code>str</code> or <code>tokenizers.AddedToken</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.LlamaTokenizerFast.bos_token",description:`<strong>bos_token</strong> (<code>str</code> or <code>tokenizers.AddedToken</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sequence token that was used during pretraining. Can be used a sequence classifier token.`,name:"bos_token"},{anchor:"transformers.LlamaTokenizerFast.eos_token",description:`<strong>eos_token</strong> (<code>str</code> or <code>tokenizers.AddedToken</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.`,name:"eos_token"},{anchor:"transformers.LlamaTokenizerFast.add_bos_token",description:`<strong>add_bos_token</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to add an <code>bos_token</code> at the start of sequences.`,name:"add_bos_token"},{anchor:"transformers.LlamaTokenizerFast.add_eos_token",description:`<strong>add_eos_token</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to add an <code>eos_token</code> at the end of sequences.`,name:"add_eos_token"},{anchor:"transformers.LlamaTokenizerFast.use_default_system_prompt",description:`<strong>use_default_system_prompt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the default system prompt for Llama should be used.`,name:"use_default_system_prompt"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/llama/tokenization_llama_fast.py#L57"}}),O=new Mo({props:{anchor:"transformers.LlamaTokenizerFast.example",$$slots:{default:[ba]},$$scope:{ctx:C}}}),Ee=new F({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.LlamaTokenizerFast.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:""},{name:"token_ids_1",val:" = None"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/llama/tokenization_llama_fast.py#L272"}}),Je=new F({props:{name:"get_special_tokens_mask",anchor:"transformers.LlamaTokenizerFast.get_special_tokens_mask",parameters:[{name:"token_ids_0",val:": List"},{name:"token_ids_1",val:": Optional = None"},{name:"already_has_special_tokens",val:": bool = False"}],parametersDescription:[{anchor:"transformers.LlamaTokenizerFast.get_special_tokens_mask.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of ids of the first sequence.`,name:"token_ids_0"},{anchor:"transformers.LlamaTokenizerFast.get_special_tokens_mask.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
List of ids of the second sequence.`,name:"token_ids_1"},{anchor:"transformers.LlamaTokenizerFast.get_special_tokens_mask.already_has_special_tokens",description:`<strong>already_has_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the token list is already formatted with special tokens for the model.`,name:"already_has_special_tokens"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tokenization_utils_base.py#L3798",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>1 for a special token, 0 for a sequence token.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A list of integers in the range [0, 1]</p>
`}}),Ne=new F({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.LlamaTokenizerFast.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": List"},{name:"token_ids_1",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.LlamaTokenizerFast.create_token_type_ids_from_sequences.token_ids_0",description:"<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014; The first tokenized sequence.",name:"token_ids_0"},{anchor:"transformers.LlamaTokenizerFast.create_token_type_ids_from_sequences.token_ids_1",description:"<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014; The second tokenized sequence.",name:"token_ids_1"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/tokenization_utils_base.py#L3328",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The token type ids.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>List[int]</code></p>
`}}),Ge=new F({props:{name:"update_post_processor",anchor:"transformers.LlamaTokenizerFast.update_post_processor",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/llama/tokenization_llama_fast.py#L146"}}),De=new F({props:{name:"save_vocabulary",anchor:"transformers.LlamaTokenizerFast.save_vocabulary",parameters:[{name:"save_directory",val:": str"},{name:"filename_prefix",val:": Optional = None"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/llama/tokenization_llama_fast.py#L190"}}),Re=new R({props:{title:"LlamaModel",local:"llamamodel ][ transformers.LlamaModel",headingTag:"h2"}}),Ze=new F({props:{name:"class transformers.LlamaModel",anchor:"transformers.LlamaModel",parameters:[{name:"config",val:": LlamaConfig"}],parametersDescription:[{anchor:"transformers.LlamaModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/ko/model_doc/llama2#transformers.LlamaConfig">LlamaConfig</a>) &#x2014;
Model configuration class with all the parameters of the model. Initializing with a config file does not
load the weights associated with the model, only the configuration. Check out the
<code>from_pretrained()</code> method to load the model weights.
config &#x2014; LlamaConfig`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/llama/modeling_llama.py#L879"}}),Be=new F({props:{name:"forward",anchor:"transformers.LlamaModel.forward",parameters:[{name:"input_ids",val:": LongTensor = None"},{name:"attention_mask",val:": Optional = None"},{name:"position_ids",val:": Optional = None"},{name:"past_key_values",val:": Optional = None"},{name:"inputs_embeds",val:": Optional = None"},{name:"use_cache",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"},{name:"cache_position",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.LlamaModel.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provide
it.</p>
<p>Indices can be obtained using <code>AutoTokenizer</code>. See <code>PreTrainedTokenizer.encode()</code> and
<code>PreTrainedTokenizer.__call__()</code> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LlamaModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a></p>
<p>Indices can be obtained using <code>AutoTokenizer</code>. See <code>PreTrainedTokenizer.encode()</code> and
<code>PreTrainedTokenizer.__call__()</code> for details.</p>
<p>If <code>past_key_values</code> is used, optionally only the last <code>input_ids</code> have to be input (see
<code>past_key_values</code>).</p>
<p>If you want to change padding behavior, you should read <code>modeling_opt._prepare_decoder_attention_mask</code>
and modify to your needs. See diagram 1 in <a href="https://arxiv.org/abs/1910.13461" rel="nofollow">the paper</a> for more
information on the default strategy.</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"attention_mask"},{anchor:"transformers.LlamaModel.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.n_positions - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.LlamaModel.forward.past_key_values",description:`<strong>past_key_values</strong> (<code>Cache</code> or <code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>) &#x2014;
Pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attention
blocks) that can be used to speed up sequential decoding. This typically consists in the <code>past_key_values</code>
returned by the model at a previous stage of decoding, when <code>use_cache=True</code> or <code>config.use_cache=True</code>.</p>
<p>Two formats are allowed:</p>
<ul>
<li>a <code>Cache</code> instance;</li>
<li>Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of
shape <code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>). This is also known as the legacy
cache format.</li>
</ul>
<p>The model will output the same cache format that is fed as input. If no <code>past_key_values</code> are passed, the
legacy cache format will be returned.</p>
<p>If <code>past_key_values</code> are used, the user can optionally input only the last <code>input_ids</code> (those that don&#x2019;t
have their past key value states given to this model) of shape <code>(batch_size, 1)</code> instead of all <code>input_ids</code>
of shape <code>(batch_size, sequence_length)</code>.`,name:"past_key_values"},{anchor:"transformers.LlamaModel.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.LlamaModel.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see
<code>past_key_values</code>).`,name:"use_cache"},{anchor:"transformers.LlamaModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.LlamaModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.LlamaModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <code>ModelOutput</code> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/llama/modeling_llama.py#L915"}}),te=new wo({props:{$$slots:{default:[va]},$$scope:{ctx:C}}}),Ve=new R({props:{title:"LlamaForCausalLM",local:"llamaforcausallm ][ transformers.LlamaForCausalLM",headingTag:"h2"}}),Qe=new F({props:{name:"class transformers.LlamaForCausalLM",anchor:"transformers.LlamaForCausalLM",parameters:[{name:"config",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/llama/modeling_llama.py#L1070"}}),Xe=new F({props:{name:"forward",anchor:"transformers.LlamaForCausalLM.forward",parameters:[{name:"input_ids",val:": LongTensor = None"},{name:"attention_mask",val:": Optional = None"},{name:"position_ids",val:": Optional = None"},{name:"past_key_values",val:": Optional = None"},{name:"inputs_embeds",val:": Optional = None"},{name:"labels",val:": Optional = None"},{name:"use_cache",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"},{name:"cache_position",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.LlamaForCausalLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provide
it.</p>
<p>Indices can be obtained using <code>AutoTokenizer</code>. See <code>PreTrainedTokenizer.encode()</code> and
<code>PreTrainedTokenizer.__call__()</code> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LlamaForCausalLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a></p>
<p>Indices can be obtained using <code>AutoTokenizer</code>. See <code>PreTrainedTokenizer.encode()</code> and
<code>PreTrainedTokenizer.__call__()</code> for details.</p>
<p>If <code>past_key_values</code> is used, optionally only the last <code>input_ids</code> have to be input (see
<code>past_key_values</code>).</p>
<p>If you want to change padding behavior, you should read <code>modeling_opt._prepare_decoder_attention_mask</code>
and modify to your needs. See diagram 1 in <a href="https://arxiv.org/abs/1910.13461" rel="nofollow">the paper</a> for more
information on the default strategy.</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"attention_mask"},{anchor:"transformers.LlamaForCausalLM.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.n_positions - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.LlamaForCausalLM.forward.past_key_values",description:`<strong>past_key_values</strong> (<code>Cache</code> or <code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>) &#x2014;
Pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attention
blocks) that can be used to speed up sequential decoding. This typically consists in the <code>past_key_values</code>
returned by the model at a previous stage of decoding, when <code>use_cache=True</code> or <code>config.use_cache=True</code>.</p>
<p>Two formats are allowed:</p>
<ul>
<li>a <code>Cache</code> instance;</li>
<li>Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of
shape <code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>). This is also known as the legacy
cache format.</li>
</ul>
<p>The model will output the same cache format that is fed as input. If no <code>past_key_values</code> are passed, the
legacy cache format will be returned.</p>
<p>If <code>past_key_values</code> are used, the user can optionally input only the last <code>input_ids</code> (those that don&#x2019;t
have their past key value states given to this model) of shape <code>(batch_size, 1)</code> instead of all <code>input_ids</code>
of shape <code>(batch_size, sequence_length)</code>.`,name:"past_key_values"},{anchor:"transformers.LlamaForCausalLM.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.LlamaForCausalLM.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see
<code>past_key_values</code>).`,name:"use_cache"},{anchor:"transformers.LlamaForCausalLM.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.LlamaForCausalLM.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.LlamaForCausalLM.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <code>ModelOutput</code> instead of a plain tuple.</p>
<p>Args &#x2014;
labels (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>):
Labels for computing the masked language modeling loss. Indices should either be in <code>[0, ..., config.vocab_size]</code> or -100 (see <code>input_ids</code> docstring). Tokens with indices set to <code>-100</code> are ignored
(masked), the loss is only computed for the tokens with labels in <code>[0, ..., config.vocab_size]</code>.`,name:"return_dict"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/llama/modeling_llama.py#L1100",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <code>transformers.modeling_outputs.CausalLMOutputWithPast</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/ko/model_doc/llama2#transformers.LlamaConfig"
>LlamaConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) — Language modeling loss (for next-token prediction).</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) — Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).</p>
</li>
<li>
<p><strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) — Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>)</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks) that can be used (see
<code>past_key_values</code> input) to speed up sequential decoding.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>transformers.modeling_outputs.CausalLMOutputWithPast</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),oe=new wo({props:{$$slots:{default:[ya]},$$scope:{ctx:C}}}),ne=new Mo({props:{anchor:"transformers.LlamaForCausalLM.forward.example",$$slots:{default:[La]},$$scope:{ctx:C}}}),Ye=new R({props:{title:"LlamaForSequenceClassification",local:"llamaforsequenceclassification ][ transformers.LlamaForSequenceClassification",headingTag:"h2"}}),Oe=new F({props:{name:"class transformers.LlamaForSequenceClassification",anchor:"transformers.LlamaForSequenceClassification",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.LlamaForSequenceClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/ko/model_doc/llama2#transformers.LlamaConfig">LlamaConfig</a>) &#x2014;
Model configuration class with all the parameters of the model. Initializing with a config file does not
load the weights associated with the model, only the configuration. Check out the
<code>from_pretrained()</code> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/llama/modeling_llama.py#L1277"}}),Ke=new F({props:{name:"forward",anchor:"transformers.LlamaForSequenceClassification.forward",parameters:[{name:"input_ids",val:": LongTensor = None"},{name:"attention_mask",val:": Optional = None"},{name:"position_ids",val:": Optional = None"},{name:"past_key_values",val:": Optional = None"},{name:"inputs_embeds",val:": Optional = None"},{name:"labels",val:": Optional = None"},{name:"use_cache",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.LlamaForSequenceClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provide
it.</p>
<p>Indices can be obtained using <code>AutoTokenizer</code>. See <code>PreTrainedTokenizer.encode()</code> and
<code>PreTrainedTokenizer.__call__()</code> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LlamaForSequenceClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a></p>
<p>Indices can be obtained using <code>AutoTokenizer</code>. See <code>PreTrainedTokenizer.encode()</code> and
<code>PreTrainedTokenizer.__call__()</code> for details.</p>
<p>If <code>past_key_values</code> is used, optionally only the last <code>input_ids</code> have to be input (see
<code>past_key_values</code>).</p>
<p>If you want to change padding behavior, you should read <code>modeling_opt._prepare_decoder_attention_mask</code>
and modify to your needs. See diagram 1 in <a href="https://arxiv.org/abs/1910.13461" rel="nofollow">the paper</a> for more
information on the default strategy.</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"attention_mask"},{anchor:"transformers.LlamaForSequenceClassification.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.n_positions - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.LlamaForSequenceClassification.forward.past_key_values",description:`<strong>past_key_values</strong> (<code>Cache</code> or <code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>) &#x2014;
Pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attention
blocks) that can be used to speed up sequential decoding. This typically consists in the <code>past_key_values</code>
returned by the model at a previous stage of decoding, when <code>use_cache=True</code> or <code>config.use_cache=True</code>.</p>
<p>Two formats are allowed:</p>
<ul>
<li>a <code>Cache</code> instance;</li>
<li>Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of
shape <code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>). This is also known as the legacy
cache format.</li>
</ul>
<p>The model will output the same cache format that is fed as input. If no <code>past_key_values</code> are passed, the
legacy cache format will be returned.</p>
<p>If <code>past_key_values</code> are used, the user can optionally input only the last <code>input_ids</code> (those that don&#x2019;t
have their past key value states given to this model) of shape <code>(batch_size, 1)</code> instead of all <code>input_ids</code>
of shape <code>(batch_size, sequence_length)</code>.`,name:"past_key_values"},{anchor:"transformers.LlamaForSequenceClassification.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.LlamaForSequenceClassification.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see
<code>past_key_values</code>).`,name:"use_cache"},{anchor:"transformers.LlamaForSequenceClassification.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.LlamaForSequenceClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.LlamaForSequenceClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <code>ModelOutput</code> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.LlamaForSequenceClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the sequence classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/llama/modeling_llama.py#L1308"}}),ae=new wo({props:{$$slots:{default:[Ta]},$$scope:{ctx:C}}}),{c(){d=i("meta"),v=n(),c=i("p"),b=n(),p(w.$$.fragment),k=n(),p(T.$$.fragment),ie=n(),$=i("p"),$.innerHTML=Z,Ut=n(),le=i("p"),le.textContent=bn,St=n(),de=i("p"),de.innerHTML=vn,Et=n(),ce=i("p"),ce.innerHTML=yn,Jt=n(),p(B.$$.fragment),Nt=n(),me=i("p"),me.textContent=Ln,Gt=n(),pe=i("ul"),pe.innerHTML=Tn,Dt=n(),p(ue.$$.fragment),Rt=n(),he=i("ul"),he.innerHTML=$n,Zt=n(),p(fe.$$.fragment),Bt=n(),ge=i("p"),ge.textContent=wn,Vt=n(),_e=i("ul"),_e.innerHTML=Mn,Qt=n(),ke=i("p"),ke.innerHTML=xn,Xt=n(),p(be.$$.fragment),Yt=n(),ve=i("p"),ve.textContent=zn,Ot=n(),ye=i("ul"),ye.innerHTML=Cn,Kt=n(),p(Le.$$.fragment),eo=n(),Te=i("ul"),Te.innerHTML=Fn,to=n(),$e=i("p"),$e.textContent=qn,oo=n(),we=i("ul"),we.innerHTML=Pn,no=n(),Me=i("p"),Me.textContent=jn,ao=n(),xe=i("ul"),xe.innerHTML=In,so=n(),ze=i("p"),ze.textContent=Wn,ro=n(),Ce=i("ul"),Ce.innerHTML=Hn,io=n(),p(Fe.$$.fragment),lo=n(),W=i("div"),p(qe.$$.fragment),xo=n(),ot=i("p"),ot.innerHTML=An,zo=n(),nt=i("p"),nt.innerHTML=Un,Co=n(),p(V.$$.fragment),co=n(),p(Pe.$$.fragment),mo=n(),q=i("div"),p(je.$$.fragment),Fo=n(),at=i("p"),at.textContent=Sn,qo=n(),st=i("div"),p(Ie.$$.fragment),Po=n(),Q=i("div"),p(We.$$.fragment),jo=n(),rt=i("p"),rt.innerHTML=En,Io=n(),H=i("div"),p(He.$$.fragment),Wo=n(),it=i("p"),it.textContent=Jn,Ho=n(),p(X.$$.fragment),Ao=n(),lt=i("p"),lt.textContent=Nn,Uo=n(),Y=i("div"),p(Ae.$$.fragment),So=n(),dt=i("p"),dt.textContent=Gn,po=n(),p(Ue.$$.fragment),uo=n(),y=i("div"),p(Se.$$.fragment),Eo=n(),ct=i("p"),ct.textContent=Dn,Jo=n(),mt=i("p"),mt.textContent=Rn,No=n(),p(O.$$.fragment),Go=n(),pt=i("p"),pt.innerHTML=Zn,Do=n(),ut=i("p"),ut.innerHTML=Bn,Ro=n(),ht=i("div"),p(Ee.$$.fragment),Zo=n(),K=i("div"),p(Je.$$.fragment),Bo=n(),ft=i("p"),ft.innerHTML=Vn,Vo=n(),E=i("div"),p(Ne.$$.fragment),Qo=n(),gt=i("p"),gt.innerHTML=Qn,Xo=n(),_t=i("p"),_t.textContent=Xn,Yo=n(),ee=i("div"),p(Ge.$$.fragment),Oo=n(),kt=i("p"),kt.innerHTML=Yn,Ko=n(),bt=i("div"),p(De.$$.fragment),ho=n(),p(Re.$$.fragment),fo=n(),P=i("div"),p(Ze.$$.fragment),en=n(),vt=i("p"),vt.innerHTML=On,tn=n(),yt=i("p"),yt.innerHTML=Kn,on=n(),Lt=i("p"),Lt.innerHTML=ea,nn=n(),J=i("div"),p(Be.$$.fragment),an=n(),Tt=i("p"),Tt.innerHTML=ta,sn=n(),p(te.$$.fragment),go=n(),p(Ve.$$.fragment),_o=n(),D=i("div"),p(Qe.$$.fragment),rn=n(),A=i("div"),p(Xe.$$.fragment),ln=n(),$t=i("p"),$t.innerHTML=oa,dn=n(),p(oe.$$.fragment),cn=n(),p(ne.$$.fragment),ko=n(),p(Ye.$$.fragment),bo=n(),z=i("div"),p(Oe.$$.fragment),mn=n(),wt=i("p"),wt.textContent=na,pn=n(),Mt=i("p"),Mt.innerHTML=aa,un=n(),xt=i("p"),xt.innerHTML=sa,hn=n(),zt=i("p"),zt.innerHTML=ra,fn=n(),Ct=i("p"),Ct.innerHTML=ia,gn=n(),N=i("div"),p(Ke.$$.fragment),_n=n(),Ft=i("p"),Ft.innerHTML=la,kn=n(),p(ae.$$.fragment),vo=n(),Wt=i("p"),this.h()},l(e){const o=ha("svelte-u9bgzb",document.head);d=l(o,"META",{name:!0,content:!0}),o.forEach(t),v=a(e),c=l(e,"P",{}),M(c).forEach(t),b=a(e),u(w.$$.fragment,e),k=a(e),u(T.$$.fragment,e),ie=a(e),$=l(e,"P",{"data-svelte-h":!0}),m($)!=="svelte-1mg2hun"&&($.innerHTML=Z),Ut=a(e),le=l(e,"P",{"data-svelte-h":!0}),m(le)!=="svelte-e5r8wp"&&(le.textContent=bn),St=a(e),de=l(e,"P",{"data-svelte-h":!0}),m(de)!=="svelte-18r1nwx"&&(de.innerHTML=vn),Et=a(e),ce=l(e,"P",{"data-svelte-h":!0}),m(ce)!=="svelte-yxvvyr"&&(ce.innerHTML=yn),Jt=a(e),u(B.$$.fragment,e),Nt=a(e),me=l(e,"P",{"data-svelte-h":!0}),m(me)!=="svelte-1u4pjic"&&(me.textContent=Ln),Gt=a(e),pe=l(e,"UL",{"data-svelte-h":!0}),m(pe)!=="svelte-p2ih1q"&&(pe.innerHTML=Tn),Dt=a(e),u(ue.$$.fragment,e),Rt=a(e),he=l(e,"UL",{"data-svelte-h":!0}),m(he)!=="svelte-11p27m1"&&(he.innerHTML=$n),Zt=a(e),u(fe.$$.fragment,e),Bt=a(e),ge=l(e,"P",{"data-svelte-h":!0}),m(ge)!=="svelte-45syni"&&(ge.textContent=wn),Vt=a(e),_e=l(e,"UL",{"data-svelte-h":!0}),m(_e)!=="svelte-w3e8c3"&&(_e.innerHTML=Mn),Qt=a(e),ke=l(e,"P",{"data-svelte-h":!0}),m(ke)!=="svelte-1yrcdop"&&(ke.innerHTML=xn),Xt=a(e),u(be.$$.fragment,e),Yt=a(e),ve=l(e,"P",{"data-svelte-h":!0}),m(ve)!=="svelte-109c5g6"&&(ve.textContent=zn),Ot=a(e),ye=l(e,"UL",{"data-svelte-h":!0}),m(ye)!=="svelte-13tfjo2"&&(ye.innerHTML=Cn),Kt=a(e),u(Le.$$.fragment,e),eo=a(e),Te=l(e,"UL",{"data-svelte-h":!0}),m(Te)!=="svelte-18uwvgq"&&(Te.innerHTML=Fn),to=a(e),$e=l(e,"P",{"data-svelte-h":!0}),m($e)!=="svelte-14a1znp"&&($e.textContent=qn),oo=a(e),we=l(e,"UL",{"data-svelte-h":!0}),m(we)!=="svelte-10ni5hq"&&(we.innerHTML=Pn),no=a(e),Me=l(e,"P",{"data-svelte-h":!0}),m(Me)!=="svelte-1x58uo"&&(Me.textContent=jn),ao=a(e),xe=l(e,"UL",{"data-svelte-h":!0}),m(xe)!=="svelte-a0syhq"&&(xe.innerHTML=In),so=a(e),ze=l(e,"P",{"data-svelte-h":!0}),m(ze)!=="svelte-3z2x4b"&&(ze.textContent=Wn),ro=a(e),Ce=l(e,"UL",{"data-svelte-h":!0}),m(Ce)!=="svelte-jjnuxc"&&(Ce.innerHTML=Hn),io=a(e),u(Fe.$$.fragment,e),lo=a(e),W=l(e,"DIV",{class:!0});var U=M(W);u(qe.$$.fragment,U),xo=a(U),ot=l(U,"P",{"data-svelte-h":!0}),m(ot)!=="svelte-e7ysf1"&&(ot.innerHTML=An),zo=a(U),nt=l(U,"P",{"data-svelte-h":!0}),m(nt)!=="svelte-huu8ef"&&(nt.innerHTML=Un),Co=a(U),u(V.$$.fragment,U),U.forEach(t),co=a(e),u(Pe.$$.fragment,e),mo=a(e),q=l(e,"DIV",{class:!0});var j=M(q);u(je.$$.fragment,j),Fo=a(j),at=l(j,"P",{"data-svelte-h":!0}),m(at)!=="svelte-qfiu5a"&&(at.textContent=Sn),qo=a(j),st=l(j,"DIV",{class:!0});var Ht=M(st);u(Ie.$$.fragment,Ht),Ht.forEach(t),Po=a(j),Q=l(j,"DIV",{class:!0});var et=M(Q);u(We.$$.fragment,et),jo=a(et),rt=l(et,"P",{"data-svelte-h":!0}),m(rt)!=="svelte-1f4f5kp"&&(rt.innerHTML=En),et.forEach(t),Io=a(j),H=l(j,"DIV",{class:!0});var S=M(H);u(He.$$.fragment,S),Wo=a(S),it=l(S,"P",{"data-svelte-h":!0}),m(it)!=="svelte-13bfd60"&&(it.textContent=Jn),Ho=a(S),u(X.$$.fragment,S),Ao=a(S),lt=l(S,"P",{"data-svelte-h":!0}),m(lt)!=="svelte-wtrslu"&&(lt.textContent=Nn),S.forEach(t),Uo=a(j),Y=l(j,"DIV",{class:!0});var tt=M(Y);u(Ae.$$.fragment,tt),So=a(tt),dt=l(tt,"P",{"data-svelte-h":!0}),m(dt)!=="svelte-1slb66l"&&(dt.textContent=Gn),tt.forEach(t),j.forEach(t),po=a(e),u(Ue.$$.fragment,e),uo=a(e),y=l(e,"DIV",{class:!0});var L=M(y);u(Se.$$.fragment,L),Eo=a(L),ct=l(L,"P",{"data-svelte-h":!0}),m(ct)!=="svelte-15tdcz8"&&(ct.textContent=Dn),Jo=a(L),mt=l(L,"P",{"data-svelte-h":!0}),m(mt)!=="svelte-llhmpa"&&(mt.textContent=Rn),No=a(L),u(O.$$.fragment,L),Go=a(L),pt=l(L,"P",{"data-svelte-h":!0}),m(pt)!=="svelte-cnb6q1"&&(pt.innerHTML=Zn),Do=a(L),ut=l(L,"P",{"data-svelte-h":!0}),m(ut)!=="svelte-1ndfe3e"&&(ut.innerHTML=Bn),Ro=a(L),ht=l(L,"DIV",{class:!0});var At=M(ht);u(Ee.$$.fragment,At),At.forEach(t),Zo=a(L),K=l(L,"DIV",{class:!0});var Lo=M(K);u(Je.$$.fragment,Lo),Bo=a(Lo),ft=l(Lo,"P",{"data-svelte-h":!0}),m(ft)!=="svelte-1wmjg8a"&&(ft.innerHTML=Vn),Lo.forEach(t),Vo=a(L),E=l(L,"DIV",{class:!0});var qt=M(E);u(Ne.$$.fragment,qt),Qo=a(qt),gt=l(qt,"P",{"data-svelte-h":!0}),m(gt)!=="svelte-zj1vf1"&&(gt.innerHTML=Qn),Xo=a(qt),_t=l(qt,"P",{"data-svelte-h":!0}),m(_t)!=="svelte-9vptpw"&&(_t.textContent=Xn),qt.forEach(t),Yo=a(L),ee=l(L,"DIV",{class:!0});var To=M(ee);u(Ge.$$.fragment,To),Oo=a(To),kt=l(To,"P",{"data-svelte-h":!0}),m(kt)!=="svelte-nfci2w"&&(kt.innerHTML=Yn),To.forEach(t),Ko=a(L),bt=l(L,"DIV",{class:!0});var da=M(bt);u(De.$$.fragment,da),da.forEach(t),L.forEach(t),ho=a(e),u(Re.$$.fragment,e),fo=a(e),P=l(e,"DIV",{class:!0});var G=M(P);u(Ze.$$.fragment,G),en=a(G),vt=l(G,"P",{"data-svelte-h":!0}),m(vt)!=="svelte-16gi54p"&&(vt.innerHTML=On),tn=a(G),yt=l(G,"P",{"data-svelte-h":!0}),m(yt)!=="svelte-hswkmf"&&(yt.innerHTML=Kn),on=a(G),Lt=l(G,"P",{"data-svelte-h":!0}),m(Lt)!=="svelte-eom0yk"&&(Lt.innerHTML=ea),nn=a(G),J=l(G,"DIV",{class:!0});var Pt=M(J);u(Be.$$.fragment,Pt),an=a(Pt),Tt=l(Pt,"P",{"data-svelte-h":!0}),m(Tt)!=="svelte-1hj4k2x"&&(Tt.innerHTML=ta),sn=a(Pt),u(te.$$.fragment,Pt),Pt.forEach(t),G.forEach(t),go=a(e),u(Ve.$$.fragment,e),_o=a(e),D=l(e,"DIV",{class:!0});var $o=M(D);u(Qe.$$.fragment,$o),rn=a($o),A=l($o,"DIV",{class:!0});var se=M(A);u(Xe.$$.fragment,se),ln=a(se),$t=l(se,"P",{"data-svelte-h":!0}),m($t)!=="svelte-cwjvpl"&&($t.innerHTML=oa),dn=a(se),u(oe.$$.fragment,se),cn=a(se),u(ne.$$.fragment,se),se.forEach(t),$o.forEach(t),ko=a(e),u(Ye.$$.fragment,e),bo=a(e),z=l(e,"DIV",{class:!0});var I=M(z);u(Oe.$$.fragment,I),mn=a(I),wt=l(I,"P",{"data-svelte-h":!0}),m(wt)!=="svelte-62must"&&(wt.textContent=na),pn=a(I),Mt=l(I,"P",{"data-svelte-h":!0}),m(Mt)!=="svelte-1v4exue"&&(Mt.innerHTML=aa),un=a(I),xt=l(I,"P",{"data-svelte-h":!0}),m(xt)!=="svelte-10ugs3m"&&(xt.innerHTML=sa),hn=a(I),zt=l(I,"P",{"data-svelte-h":!0}),m(zt)!=="svelte-ehy44e"&&(zt.innerHTML=ra),fn=a(I),Ct=l(I,"P",{"data-svelte-h":!0}),m(Ct)!=="svelte-hswkmf"&&(Ct.innerHTML=ia),gn=a(I),N=l(I,"DIV",{class:!0});var jt=M(N);u(Ke.$$.fragment,jt),_n=a(jt),Ft=l(jt,"P",{"data-svelte-h":!0}),m(Ft)!=="svelte-tc4cob"&&(Ft.innerHTML=la),kn=a(jt),u(ae.$$.fragment,jt),jt.forEach(t),I.forEach(t),vo=a(e),Wt=l(e,"P",{}),M(Wt).forEach(t),this.h()},h(){x(d,"name","hf:doc:metadata"),x(d,"content",wa),x(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),x(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,o){s(document.head,d),r(e,v,o),r(e,c,o),r(e,b,o),h(w,e,o),r(e,k,o),h(T,e,o),r(e,ie,o),r(e,$,o),r(e,Ut,o),r(e,le,o),r(e,St,o),r(e,de,o),r(e,Et,o),r(e,ce,o),r(e,Jt,o),h(B,e,o),r(e,Nt,o),r(e,me,o),r(e,Gt,o),r(e,pe,o),r(e,Dt,o),h(ue,e,o),r(e,Rt,o),r(e,he,o),r(e,Zt,o),h(fe,e,o),r(e,Bt,o),r(e,ge,o),r(e,Vt,o),r(e,_e,o),r(e,Qt,o),r(e,ke,o),r(e,Xt,o),h(be,e,o),r(e,Yt,o),r(e,ve,o),r(e,Ot,o),r(e,ye,o),r(e,Kt,o),h(Le,e,o),r(e,eo,o),r(e,Te,o),r(e,to,o),r(e,$e,o),r(e,oo,o),r(e,we,o),r(e,no,o),r(e,Me,o),r(e,ao,o),r(e,xe,o),r(e,so,o),r(e,ze,o),r(e,ro,o),r(e,Ce,o),r(e,io,o),h(Fe,e,o),r(e,lo,o),r(e,W,o),h(qe,W,null),s(W,xo),s(W,ot),s(W,zo),s(W,nt),s(W,Co),h(V,W,null),r(e,co,o),h(Pe,e,o),r(e,mo,o),r(e,q,o),h(je,q,null),s(q,Fo),s(q,at),s(q,qo),s(q,st),h(Ie,st,null),s(q,Po),s(q,Q),h(We,Q,null),s(Q,jo),s(Q,rt),s(q,Io),s(q,H),h(He,H,null),s(H,Wo),s(H,it),s(H,Ho),h(X,H,null),s(H,Ao),s(H,lt),s(q,Uo),s(q,Y),h(Ae,Y,null),s(Y,So),s(Y,dt),r(e,po,o),h(Ue,e,o),r(e,uo,o),r(e,y,o),h(Se,y,null),s(y,Eo),s(y,ct),s(y,Jo),s(y,mt),s(y,No),h(O,y,null),s(y,Go),s(y,pt),s(y,Do),s(y,ut),s(y,Ro),s(y,ht),h(Ee,ht,null),s(y,Zo),s(y,K),h(Je,K,null),s(K,Bo),s(K,ft),s(y,Vo),s(y,E),h(Ne,E,null),s(E,Qo),s(E,gt),s(E,Xo),s(E,_t),s(y,Yo),s(y,ee),h(Ge,ee,null),s(ee,Oo),s(ee,kt),s(y,Ko),s(y,bt),h(De,bt,null),r(e,ho,o),h(Re,e,o),r(e,fo,o),r(e,P,o),h(Ze,P,null),s(P,en),s(P,vt),s(P,tn),s(P,yt),s(P,on),s(P,Lt),s(P,nn),s(P,J),h(Be,J,null),s(J,an),s(J,Tt),s(J,sn),h(te,J,null),r(e,go,o),h(Ve,e,o),r(e,_o,o),r(e,D,o),h(Qe,D,null),s(D,rn),s(D,A),h(Xe,A,null),s(A,ln),s(A,$t),s(A,dn),h(oe,A,null),s(A,cn),h(ne,A,null),r(e,ko,o),h(Ye,e,o),r(e,bo,o),r(e,z,o),h(Oe,z,null),s(z,mn),s(z,wt),s(z,pn),s(z,Mt),s(z,un),s(z,xt),s(z,hn),s(z,zt),s(z,fn),s(z,Ct),s(z,gn),s(z,N),h(Ke,N,null),s(N,_n),s(N,Ft),s(N,kn),h(ae,N,null),r(e,vo,o),r(e,Wt,o),yo=!0},p(e,[o]){const U={};o&2&&(U.$$scope={dirty:o,ctx:e}),B.$set(U);const j={};o&2&&(j.$$scope={dirty:o,ctx:e}),V.$set(j);const Ht={};o&2&&(Ht.$$scope={dirty:o,ctx:e}),X.$set(Ht);const et={};o&2&&(et.$$scope={dirty:o,ctx:e}),O.$set(et);const S={};o&2&&(S.$$scope={dirty:o,ctx:e}),te.$set(S);const tt={};o&2&&(tt.$$scope={dirty:o,ctx:e}),oe.$set(tt);const L={};o&2&&(L.$$scope={dirty:o,ctx:e}),ne.$set(L);const At={};o&2&&(At.$$scope={dirty:o,ctx:e}),ae.$set(At)},i(e){yo||(f(w.$$.fragment,e),f(T.$$.fragment,e),f(B.$$.fragment,e),f(ue.$$.fragment,e),f(fe.$$.fragment,e),f(be.$$.fragment,e),f(Le.$$.fragment,e),f(Fe.$$.fragment,e),f(qe.$$.fragment,e),f(V.$$.fragment,e),f(Pe.$$.fragment,e),f(je.$$.fragment,e),f(Ie.$$.fragment,e),f(We.$$.fragment,e),f(He.$$.fragment,e),f(X.$$.fragment,e),f(Ae.$$.fragment,e),f(Ue.$$.fragment,e),f(Se.$$.fragment,e),f(O.$$.fragment,e),f(Ee.$$.fragment,e),f(Je.$$.fragment,e),f(Ne.$$.fragment,e),f(Ge.$$.fragment,e),f(De.$$.fragment,e),f(Re.$$.fragment,e),f(Ze.$$.fragment,e),f(Be.$$.fragment,e),f(te.$$.fragment,e),f(Ve.$$.fragment,e),f(Qe.$$.fragment,e),f(Xe.$$.fragment,e),f(oe.$$.fragment,e),f(ne.$$.fragment,e),f(Ye.$$.fragment,e),f(Oe.$$.fragment,e),f(Ke.$$.fragment,e),f(ae.$$.fragment,e),yo=!0)},o(e){g(w.$$.fragment,e),g(T.$$.fragment,e),g(B.$$.fragment,e),g(ue.$$.fragment,e),g(fe.$$.fragment,e),g(be.$$.fragment,e),g(Le.$$.fragment,e),g(Fe.$$.fragment,e),g(qe.$$.fragment,e),g(V.$$.fragment,e),g(Pe.$$.fragment,e),g(je.$$.fragment,e),g(Ie.$$.fragment,e),g(We.$$.fragment,e),g(He.$$.fragment,e),g(X.$$.fragment,e),g(Ae.$$.fragment,e),g(Ue.$$.fragment,e),g(Se.$$.fragment,e),g(O.$$.fragment,e),g(Ee.$$.fragment,e),g(Je.$$.fragment,e),g(Ne.$$.fragment,e),g(Ge.$$.fragment,e),g(De.$$.fragment,e),g(Re.$$.fragment,e),g(Ze.$$.fragment,e),g(Be.$$.fragment,e),g(te.$$.fragment,e),g(Ve.$$.fragment,e),g(Qe.$$.fragment,e),g(Xe.$$.fragment,e),g(oe.$$.fragment,e),g(ne.$$.fragment,e),g(Ye.$$.fragment,e),g(Oe.$$.fragment,e),g(Ke.$$.fragment,e),g(ae.$$.fragment,e),yo=!1},d(e){e&&(t(v),t(c),t(b),t(k),t(ie),t($),t(Ut),t(le),t(St),t(de),t(Et),t(ce),t(Jt),t(Nt),t(me),t(Gt),t(pe),t(Dt),t(Rt),t(he),t(Zt),t(Bt),t(ge),t(Vt),t(_e),t(Qt),t(ke),t(Xt),t(Yt),t(ve),t(Ot),t(ye),t(Kt),t(eo),t(Te),t(to),t($e),t(oo),t(we),t(no),t(Me),t(ao),t(xe),t(so),t(ze),t(ro),t(Ce),t(io),t(lo),t(W),t(co),t(mo),t(q),t(po),t(uo),t(y),t(ho),t(fo),t(P),t(go),t(_o),t(D),t(ko),t(bo),t(z),t(vo),t(Wt)),t(d),_(w,e),_(T,e),_(B,e),_(ue,e),_(fe,e),_(be,e),_(Le,e),_(Fe,e),_(qe),_(V),_(Pe,e),_(je),_(Ie),_(We),_(He),_(X),_(Ae),_(Ue,e),_(Se),_(O),_(Ee),_(Je),_(Ne),_(Ge),_(De),_(Re,e),_(Ze),_(Be),_(te),_(Ve,e),_(Qe),_(Xe),_(oe),_(ne),_(Ye,e),_(Oe),_(Ke),_(ae)}}}const wa='{"title":"Llama2","local":"llama2","sections":[{"title":"개요","local":"overview","sections":[],"depth":2},{"title":"리소스","local":"resources","sections":[],"depth":2},{"title":"LlamaConfig","local":"llamaconfig ][ transformers.LlamaConfig","sections":[],"depth":2},{"title":"LlamaTokenizer","local":"llamatokenizer ][ transformers.LlamaTokenizer","sections":[],"depth":2},{"title":"LlamaTokenizerFast","local":"llamatokenizerfast ][ transformers.LlamaTokenizerFast","sections":[],"depth":2},{"title":"LlamaModel","local":"llamamodel ][ transformers.LlamaModel","sections":[],"depth":2},{"title":"LlamaForCausalLM","local":"llamaforcausallm ][ transformers.LlamaForCausalLM","sections":[],"depth":2},{"title":"LlamaForSequenceClassification","local":"llamaforsequenceclassification ][ transformers.LlamaForSequenceClassification","sections":[],"depth":2}],"depth":1}';function Ma(C){return ma(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ia extends pa{constructor(d){super(),ua(this,d,Ma,$a,ca,{})}}export{Ia as component};
