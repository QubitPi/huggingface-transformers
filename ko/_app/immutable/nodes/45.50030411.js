import{s as He,o as Re,n as I}from"../chunks/scheduler.56730f09.js";import{S as Xe,i as Ye,g as c,s as e,r as h,A as Ne,h as m,f as n,c as p,j as Be,u as j,x as u,k as _,y as qe,a as l,v as b,d as i,t as o,w as f}from"../chunks/index.1f144517.js";import{T as Ua}from"../chunks/Tip.41e845e5.js";import{Y as ze}from"../chunks/Youtube.62e0f062.js";import{C as g}from"../chunks/CodeBlock.738eeccb.js";import{D as Fe}from"../chunks/DocNotebookDropdown.243c3df7.js";import{F as Qe,M as We}from"../chunks/Markdown.c541024b.js";import{H as U}from"../chunks/Heading.57d46534.js";function Le(J){let t,d="<code>AutoProcessor</code>는 <strong>언제나</strong> 작동하여 토크나이저, 이미지 프로세서, 특성 추출기 또는 프로세서 등 사용 중인 모델에 맞는 클래스를 자동으로 선택합니다.";return{c(){t=c("p"),t.innerHTML=d},l(r){t=m(r,"P",{"data-svelte-h":!0}),u(t)!=="svelte-8prefl"&&(t.innerHTML=d)},m(r,M){l(r,t,M)},p:I,d(r){r&&n(t)}}}function Ee(J){let t,d="사전훈련된 모델을 사용할 계획이라면 모델과 함께 사전훈련된 토크나이저를 사용하는 것이 중요합니다. 이렇게 하면 텍스트가 사전훈련 말뭉치와 동일한 방식으로 분할되고 사전훈련 중에 동일한 해당 토큰-인덱스 쌍(일반적으로 <em>vocab</em>이라고 함)을 사용합니다.";return{c(){t=c("p"),t.innerHTML=d},l(r){t=m(r,"P",{"data-svelte-h":!0}),u(t)!=="svelte-1qm7hmc"&&(t.innerHTML=d)},m(r,M){l(r,t,M)},p:I,d(r){r&&n(t)}}}function Ae(J){let t,d='다양한 패딩과 잘라내기 인수에 대해 더 알아보려면 <a href="./pad_truncation">패딩과 잘라내기</a> 개념 가이드를 확인해보세요.';return{c(){t=c("p"),t.innerHTML=d},l(r){t=m(r,"P",{"data-svelte-h":!0}),u(t)!=="svelte-5nyjl5"&&(t.innerHTML=d)},m(r,M){l(r,t,M)},p:I,d(r){r&&n(t)}}}function Pe(J){let t,d;return t=new g({props:{code:"YmF0Y2hfc2VudGVuY2VzJTIwJTNEJTIwJTVCJTBBJTIwJTIwJTIwJTIwJTIyQnV0JTIwd2hhdCUyMGFib3V0JTIwc2Vjb25kJTIwYnJlYWtmYXN0JTNGJTIyJTJDJTBBJTIwJTIwJTIwJTIwJTIyRG9uJ3QlMjB0aGluayUyMGhlJTIwa25vd3MlMjBhYm91dCUyMHNlY29uZCUyMGJyZWFrZmFzdCUyQyUyMFBpcC4lMjIlMkMlMEElMjAlMjAlMjAlMjAlMjJXaGF0JTIwYWJvdXQlMjBlbGV2ZW5zaWVzJTNGJTIyJTJDJTBBJTVEJTBBZW5jb2RlZF9pbnB1dCUyMCUzRCUyMHRva2VuaXplcihiYXRjaF9zZW50ZW5jZXMlMkMlMjBwYWRkaW5nJTNEVHJ1ZSUyQyUyMHRydW5jYXRpb24lM0RUcnVlJTJDJTIwcmV0dXJuX3RlbnNvcnMlM0QlMjJwdCUyMiklMEFwcmludChlbmNvZGVkX2lucHV0KQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>batch_sentences = [
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;But what about second breakfast?&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Don&#x27;t think he knows about second breakfast, Pip.&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;What about elevensies?&quot;</span>,
<span class="hljs-meta">... </span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_input = tokenizer(batch_sentences, padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(encoded_input)
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([[<span class="hljs-number">101</span>, <span class="hljs-number">1252</span>, <span class="hljs-number">1184</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">1248</span>, <span class="hljs-number">6462</span>, <span class="hljs-number">136</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
                      [<span class="hljs-number">101</span>, <span class="hljs-number">1790</span>, <span class="hljs-number">112</span>, <span class="hljs-number">189</span>, <span class="hljs-number">1341</span>, <span class="hljs-number">1119</span>, <span class="hljs-number">3520</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">1248</span>, <span class="hljs-number">6462</span>, <span class="hljs-number">117</span>, <span class="hljs-number">21902</span>, <span class="hljs-number">1643</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>],
                      [<span class="hljs-number">101</span>, <span class="hljs-number">1327</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">5450</span>, <span class="hljs-number">23434</span>, <span class="hljs-number">136</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
                           [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
                           [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]),
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
                           [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],
                           [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]])}`,wrap:!1}}),{c(){h(t.$$.fragment)},l(r){j(t.$$.fragment,r)},m(r,M){b(t,r,M),d=!0},p:I,i(r){d||(i(t.$$.fragment,r),d=!0)},o(r){o(t.$$.fragment,r),d=!1},d(r){f(t,r)}}}function Se(J){let t,d;return t=new We({props:{$$slots:{default:[Pe]},$$scope:{ctx:J}}}),{c(){h(t.$$.fragment)},l(r){j(t.$$.fragment,r)},m(r,M){b(t,r,M),d=!0},p(r,M){const $={};M&2&&($.$$scope={dirty:M,ctx:r}),t.$set($)},i(r){d||(i(t.$$.fragment,r),d=!0)},o(r){o(t.$$.fragment,r),d=!1},d(r){f(t,r)}}}function De(J){let t,d;return t=new g({props:{code:"YmF0Y2hfc2VudGVuY2VzJTIwJTNEJTIwJTVCJTBBJTIwJTIwJTIwJTIwJTIyQnV0JTIwd2hhdCUyMGFib3V0JTIwc2Vjb25kJTIwYnJlYWtmYXN0JTNGJTIyJTJDJTBBJTIwJTIwJTIwJTIwJTIyRG9uJ3QlMjB0aGluayUyMGhlJTIwa25vd3MlMjBhYm91dCUyMHNlY29uZCUyMGJyZWFrZmFzdCUyQyUyMFBpcC4lMjIlMkMlMEElMjAlMjAlMjAlMjAlMjJXaGF0JTIwYWJvdXQlMjBlbGV2ZW5zaWVzJTNGJTIyJTJDJTBBJTVEJTBBZW5jb2RlZF9pbnB1dCUyMCUzRCUyMHRva2VuaXplcihiYXRjaF9zZW50ZW5jZXMlMkMlMjBwYWRkaW5nJTNEVHJ1ZSUyQyUyMHRydW5jYXRpb24lM0RUcnVlJTJDJTIwcmV0dXJuX3RlbnNvcnMlM0QlMjJ0ZiUyMiklMEFwcmludChlbmNvZGVkX2lucHV0KQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>batch_sentences = [
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;But what about second breakfast?&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Don&#x27;t think he knows about second breakfast, Pip.&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;What about elevensies?&quot;</span>,
<span class="hljs-meta">... </span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_input = tokenizer(batch_sentences, padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(encoded_input)
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: &lt;tf.Tensor: shape=(<span class="hljs-number">2</span>, <span class="hljs-number">9</span>), dtype=int32, numpy=
array([[<span class="hljs-number">101</span>, <span class="hljs-number">1252</span>, <span class="hljs-number">1184</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">1248</span>, <span class="hljs-number">6462</span>, <span class="hljs-number">136</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
       [<span class="hljs-number">101</span>, <span class="hljs-number">1790</span>, <span class="hljs-number">112</span>, <span class="hljs-number">189</span>, <span class="hljs-number">1341</span>, <span class="hljs-number">1119</span>, <span class="hljs-number">3520</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">1248</span>, <span class="hljs-number">6462</span>, <span class="hljs-number">117</span>, <span class="hljs-number">21902</span>, <span class="hljs-number">1643</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>],
       [<span class="hljs-number">101</span>, <span class="hljs-number">1327</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">5450</span>, <span class="hljs-number">23434</span>, <span class="hljs-number">136</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]],
      dtype=int32)&gt;,
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: &lt;tf.Tensor: shape=(<span class="hljs-number">2</span>, <span class="hljs-number">9</span>), dtype=int32, numpy=
array([[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
       [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
       [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]], dtype=int32)&gt;,
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: &lt;tf.Tensor: shape=(<span class="hljs-number">2</span>, <span class="hljs-number">9</span>), dtype=int32, numpy=
array([[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
       [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],
       [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]], dtype=int32)&gt;}`,wrap:!1}}),{c(){h(t.$$.fragment)},l(r){j(t.$$.fragment,r)},m(r,M){b(t,r,M),d=!0},p:I,i(r){d||(i(t.$$.fragment,r),d=!0)},o(r){o(t.$$.fragment,r),d=!1},d(r){f(t,r)}}}function Ke(J){let t,d;return t=new We({props:{$$slots:{default:[De]},$$scope:{ctx:J}}}),{c(){h(t.$$.fragment)},l(r){j(t.$$.fragment,r)},m(r,M){b(t,r,M),d=!0},p(r,M){const $={};M&2&&($.$$scope={dirty:M,ctx:r}),t.$set($)},i(r){d||(i(t.$$.fragment,r),d=!0)},o(r){o(t.$$.fragment,r),d=!1},d(r){f(t,r)}}}function Oe(J){let t,d=`이미지 전처리는 이미지 증강 기법을 몇 가지 적용한 뒤에 할 수도 있습니다.
이미지 전처리 및 이미지 증강은 모두 이미지 데이터를 변형하지만, 서로 다른 목적을 가지고 있습니다:`,r,M,$=`<li>이미지 증강은 과적합(over-fitting)을 방지하고 모델의 견고함(resiliency)을 높이는 데 도움이 되는 방식으로 이미지를 수정합니다.
밝기와 색상 조정, 자르기, 회전, 크기 조정, 확대/축소 등 다양한 방법으로 데이터를 증강할 수 있습니다.
그러나 증강으로 이미지의 의미가 바뀌지 않도록 주의해야 합니다.</li> <li>이미지 전처리는 이미지가 모델이 예상하는 입력 형식과 일치하도록 보장합니다.
컴퓨터 비전 모델을 미세 조정할 때 이미지는 모델이 초기에 훈련될 때와 정확히 같은 방식으로 전처리되어야 합니다.</li>`,y,w,F="이미지 증강에는 원하는 라이브러리를 무엇이든 사용할 수 있습니다. 이미지 전처리에는 모델과 연결된 <code>ImageProcessor</code>를 사용합니다.";return{c(){t=c("p"),t.textContent=d,r=e(),M=c("ul"),M.innerHTML=$,y=e(),w=c("p"),w.innerHTML=F},l(T){t=m(T,"P",{"data-svelte-h":!0}),u(t)!=="svelte-fh9zuk"&&(t.textContent=d),r=p(T),M=m(T,"UL",{"data-svelte-h":!0}),u(M)!=="svelte-1gppyte"&&(M.innerHTML=$),y=p(T),w=m(T,"P",{"data-svelte-h":!0}),u(w)!=="svelte-wokouf"&&(w.innerHTML=F)},m(T,v){l(T,t,v),l(T,r,v),l(T,M,v),l(T,y,v),l(T,w,v)},p:I,d(T){T&&(n(t),n(r),n(M),n(y),n(w))}}}function sp(J){let t,d="데이터 세트가 상당히 크기 때문에 🤗 Datasets의 <code>split</code> 매개변수를 사용하여 훈련 세트에서 작은 샘플만 가져오세요!";return{c(){t=c("p"),t.innerHTML=d},l(r){t=m(r,"P",{"data-svelte-h":!0}),u(t)!=="svelte-1ozj54"&&(t.innerHTML=d)},m(r,M){l(r,t,M)},p:I,d(r){r&&n(t)}}}function ap(J){let t,d=`위의 예에서는 이미지 증강 중에 이미지 크기를 조정했기 때문에 <code>do_resize=False</code>로 설정하고, 해당 <code>image_processor</code>에서 <code>size</code> 속성을 활용했습니다.
이미지 증강 중에 이미지 크기를 조정하지 않은 경우 이 매개변수를 생략하세요.
기본적으로는 <code>ImageProcessor</code>가 크기 조정을 처리합니다.`,r,M,$="증강 변환 과정에서 이미지를 정규화하려면 <code>image_processor.image_mean</code> 및 <code>image_processor.image_std</code> 값을 사용하세요.";return{c(){t=c("p"),t.innerHTML=d,r=e(),M=c("p"),M.innerHTML=$},l(y){t=m(y,"P",{"data-svelte-h":!0}),u(t)!=="svelte-1yu321o"&&(t.innerHTML=d),r=p(y),M=m(y,"P",{"data-svelte-h":!0}),u(M)!=="svelte-mx1c62"&&(M.innerHTML=$)},m(y,w){l(y,t,w),l(y,r,w),l(y,M,w)},p:I,d(y){y&&(n(t),n(r),n(M))}}}function np(J){let t,d=`<code>ImageProcessor</code>는 객체 감지, 시맨틱 세그멘테이션(semantic segmentation), 인스턴스 세그멘테이션(instance segmentation), 파놉틱 세그멘테이션(panoptic segmentation)과 같은 작업에 대한 후처리 방법을 제공합니다.
이러한 방법은 모델의 원시 출력을 경계 상자나 세그멘테이션 맵과 같은 의미 있는 예측으로 변환해줍니다.`;return{c(){t=c("p"),t.innerHTML=d},l(r){t=m(r,"P",{"data-svelte-h":!0}),u(t)!=="svelte-1nya0re"&&(t.innerHTML=d)},m(r,M){l(r,t,M)},p:I,d(r){r&&n(t)}}}function lp(J){let t,d,r,M,$,y,w,F,T,v="모델을 훈련하려면 데이터 세트를 모델에 맞는 입력 형식으로 전처리해야 합니다. 텍스트, 이미지 또는 오디오인지 관계없이 데이터를 텐서 배치로 변환하고 조립할 필요가 있습니다. 🤗 Transformers는 모델에 대한 데이터를 준비하는 데 도움이 되는 일련의 전처리 클래스를 제공합니다. 이 튜토리얼에서는 다음 내용을 배울 수 있습니다:",va,Q,Il='<li>텍스트는 <a href="./main_classes/tokenizer">Tokenizer</a>를 사용하여 토큰 시퀀스로 변환하고 토큰의 숫자 표현을 만든 후 텐서로 조립합니다.</li> <li>음성 및 오디오는 <a href="./main_classes/feature_extractor">Feature extractor</a>를 사용하여 오디오 파형에서 시퀀스 특성을 파악하여 텐서로 변환합니다.</li> <li>이미지 입력은 <a href="./main_classes/image">ImageProcessor</a>을 사용하여 이미지를 텐서로 변환합니다.</li> <li>멀티모달 입력은 <a href="./main_classes/processors">Processor</a>을 사용하여 토크나이저와 특성 추출기 또는 이미지 프로세서를 결합합니다.</li>',xa,x,Ca,L,vl="시작하기 전에 🤗 Datasets를 설치하여 실험에 사용할 데이터를 불러올 수 있습니다:",ka,E,Za,A,Ga,P,Va,S,xl='텍스트 데이터를 전처리하기 위한 기본 도구는 <a href="main_classes/tokenizer">tokenizer</a>입니다. 토크나이저는 일련의 규칙에 따라 텍스트를 <em>토큰</em>으로 나눕니다. 토큰은 숫자로 변환되고 텐서는 모델 입력이 됩니다. 모델에 필요한 추가 입력은 토크나이저에 의해 추가됩니다.',Ba,C,Wa,D,Cl="시작하려면 <code>AutoTokenizer.from_pretrained()</code> 메소드를 사용하여 사전훈련된 토크나이저를 불러오세요. 모델과 함께 사전훈련된 <em>vocab</em>을 다운로드합니다:",Ha,K,Ra,O,kl="그 다음으로 텍스트를 토크나이저에 넣어주세요:",Xa,ss,Ya,as,Zl="토크나이저는 세 가지 중요한 항목을 포함한 딕셔너리를 반환합니다:",Na,ns,Gl='<li><a href="glossary#input-ids">input_ids</a>는 문장의 각 토큰에 해당하는 인덱스입니다.</li> <li><a href="glossary#attention-mask">attention_mask</a>는 토큰을 처리해야 하는지 여부를 나타냅니다.</li> <li><a href="glossary#token-type-ids">token_type_ids</a>는 두 개 이상의 시퀀스가 있을 때 토큰이 속한 시퀀스를 식별합니다.</li>',qa,ls,Vl="<code>input_ids</code>를 디코딩하여 입력을 반환합니다:",za,es,Fa,ps,Bl=`토크나이저가 두 개의 특수한 토큰(분류 토큰 <code>CLS</code>와 분할 토큰 <code>SEP</code>)을 문장에 추가했습니다.
모든 모델에 특수한 토큰이 필요한 것은 아니지만, 필요하다면 토크나이저가 자동으로 추가합니다.`,Qa,ts,Wl="전처리할 문장이 여러 개 있는 경우에는 리스트로 토크나이저에 전달합니다:",La,rs,Ea,cs,Aa,ms,Hl="모델 입력인 텐서는 모양이 균일해야 하지만, 문장의 길이가 항상 같지는 않기 때문에 문제가 될 수 있습니다. 패딩은 짧은 문장에 특수한 <em>패딩 토큰</em>을 추가하여 텐서를 직사각형 모양이 되도록 하는 전략입니다.",Pa,us,Rl="<code>padding</code> 매개변수를 <code>True</code>로 설정하여 배치 내의 짧은 시퀀스를 가장 긴 시퀀스에 맞춰 패딩합니다.",Sa,hs,Da,js,Xl="길이가 짧은 첫 문장과 세 번째 문장이 이제 <code>0</code>으로 채워졌습니다.",Ka,bs,Oa,is,Yl="한편, 때로는 시퀀스가 모델에서 처리하기에 너무 길 수도 있습니다. 이 경우, 시퀀스를 더 짧게 줄일 필요가 있습니다.",sn,os,Nl="모델에서 허용하는 최대 길이로 시퀀스를 자르려면 <code>truncation</code> 매개변수를 <code>True</code>로 설정하세요:",an,fs,nn,k,ln,ds,en,Ms,ql="마지막으로, 토크나이저가 모델에 공급되는 실제 텐서를 반환하도록 합니다.",pn,gs,zl="<code>return_tensors</code> 매개변수를 PyTorch의 경우 <code>pt</code>, TensorFlow의 경우 <code>tf</code>로 설정하세요:",tn,Z,rn,Js,cn,Ts,Fl='오디오 작업은 모델에 맞는 데이터 세트를 준비하기 위해 <a href="main_classes/feature_extractor">특성 추출기</a>가 필요합니다. 특성 추출기는 원시 오디오 데이터에서 특성를 추출하고 이를 텐서로 변환하는 것이 목적입니다.',mn,$s,Ql='오디오 데이터 세트에 특성 추출기를 사용하는 방법을 보기 위해 <a href="https://huggingface.co/datasets/PolyAI/minds14" rel="nofollow">MInDS-14</a> 데이터 세트를 가져오세요. (데이터 세트를 가져오는 방법은 🤗 <a href="https://huggingface.co/docs/datasets/load_hub" rel="nofollow">데이터 세트 튜토리얼</a>에서 자세히 설명하고 있습니다.)',un,ys,hn,ws,Ll="<code>audio</code> 열의 첫 번째 요소에 접근하여 입력을 살펴보세요. <code>audio</code> 열을 호출하면 오디오 파일을 자동으로 가져오고 리샘플링합니다.",jn,_s,bn,Us,El="이렇게 하면 세 가지 항목이 반환됩니다:",on,Is,Al="<li><code>array</code>는 1D 배열로 가져와서 (필요한 경우) 리샘플링된 음성 신호입니다.</li> <li><code>path</code>는 오디오 파일의 위치를 가리킵니다.</li> <li><code>sampling_rate</code>는 음성 신호에서 초당 측정되는 데이터 포인트 수를 나타냅니다.</li>",fn,vs,Pl=`이 튜토리얼에서는 <a href="https://huggingface.co/facebook/wav2vec2-base" rel="nofollow">Wav2Vec2</a> 모델을 사용합니다. 모델 카드를 보면 Wav2Vec2가 16kHz 샘플링된 음성 오디오를 기반으로 사전훈련된 것을 알 수 있습니다.
모델을 사전훈련하는 데 사용된 데이터 세트의 샘플링 레이트와 오디오 데이터의 샘플링 레이트가 일치해야 합니다. 데이터의 샘플링 레이트가 다르면 데이터를 리샘플링해야 합니다.`,dn,xs,Sl="<li>🤗 Datasets의 <code>cast_column</code> 메소드를 사용하여 샘플링 레이트를 16kHz로 업샘플링하세요:</li>",Mn,Cs,gn,G,Dl="<li>오디오 파일을 리샘플링하기 위해 <code>audio</code> 열을 다시 호출합니다:</li>",Jn,ks,Tn,Zs,Kl=`다음으로, 입력을 정규화하고 패딩할 특성 추출기를 가져오세요. 텍스트 데이터의 경우, 더 짧은 시퀀스에 대해 <code>0</code>이 추가됩니다. 오디오 데이터에도 같은 개념이 적용됩니다.
특성 추출기는 배열에 <code>0</code>(묵음으로 해석)을 추가합니다.`,$n,Gs,Ol="<code>AutoFeatureExtractor.from_pretrained()</code>를 사용하여 특성 추출기를 가져오세요:",yn,Vs,wn,Bs,se="오디오 <code>array</code>를 특성 추출기에 전달하세요. 또한, 발생할 수 있는 조용한 오류(silent errors)를 더 잘 디버깅할 수 있도록 특성 추출기에 <code>sampling_rate</code> 인수를 추가하는 것을 권장합니다.",_n,Ws,Un,Hs,ae="토크나이저와 마찬가지로 배치 내에서 가변적인 시퀀스를 처리하기 위해 패딩 또는 잘라내기를 적용할 수 있습니다. 이 두 개의 오디오 샘플의 시퀀스 길이를 확인해보세요:",In,Rs,vn,Xs,ne="오디오 샘플의 길이가 동일하도록 데이터 세트를 전처리하는 함수를 만드세요. 최대 샘플 길이를 지정하면 특성 추출기가 해당 길이에 맞춰 시퀀스를 패딩하거나 잘라냅니다:",xn,Ys,Cn,Ns,le="<code>preprocess_function</code>을 데이터 세트의 처음 예시 몇 개에 적용해보세요:",kn,qs,Zn,zs,ee="이제 샘플 길이가 모두 같고 지정된 최대 길이에 맞게 되었습니다. 드디어 전처리된 데이터 세트를 모델에 전달할 수 있습니다!",Gn,Fs,Vn,Qs,Bn,Ls,pe=`컴퓨터 비전 작업의 경우, 모델에 대한 데이터 세트를 준비하기 위해 <a href="main_classes/image_processor">이미지 프로세서</a>가 필요합니다.
이미지 전처리는 이미지를 모델이 예상하는 입력으로 변환하는 여러 단계로 이루어집니다.
이러한 단계에는 크기 조정, 정규화, 색상 채널 보정, 이미지의 텐서 변환 등이 포함됩니다.`,Wn,V,Hn,Es,te=`<a href="https://huggingface.co/datasets/food101" rel="nofollow">food101</a> 데이터 세트를 가져와서 컴퓨터 비전 데이터 세트에서 이미지 프로세서를 어떻게 사용하는지 알아보세요.
데이터 세트를 불러오는 방법은 🤗 <a href="https://huggingface.co/docs/datasets/load_hub" rel="nofollow">데이터 세트 튜토리얼</a>을 참고하세요.`,Rn,B,Xn,As,Yn,Ps,re='다음으로, 🤗 Datasets의 <a href="https://huggingface.co/docs/datasets/package_reference/main_classes?highlight=image#datasets.Image" rel="nofollow"><code>image</code></a>로 이미지를 확인해보세요:',Nn,Ss,qn,W,ce='<img src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/vision-preprocess-tutorial.png"/>',zn,Ds,me="<code>AutoImageProcessor.from_pretrained()</code>로 이미지 프로세서를 가져오세요:",Fn,Ks,Qn,Os,ue=`먼저 이미지 증강 단계를 추가해 봅시다. 아무 라이브러리나 사용해도 괜찮지만, 이번 튜토리얼에서는 torchvision의 <a href="https://pytorch.org/vision/stable/transforms.html" rel="nofollow"><code>transforms</code></a> 모듈을 사용하겠습니다.
다른 데이터 증강 라이브러리를 사용해보고 싶다면, <a href="https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/image_classification_albumentations.ipynb" rel="nofollow">Albumentations</a> 또는 <a href="https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/image_classification_kornia.ipynb" rel="nofollow">Kornia notebooks</a>에서 어떻게 사용하는지 배울 수 있습니다.`,Ln,sa,he=`<li><a href="https://pytorch.org/vision/master/generated/torchvision.transforms.Compose.html" rel="nofollow"><code>Compose</code></a>로  <a href="https://pytorch.org/vision/main/generated/torchvision.transforms.RandomResizedCrop.html" rel="nofollow"><code>RandomResizedCrop</code></a>와 <a href="https://pytorch.org/vision/main/generated/torchvision.transforms.ColorJitter.html" rel="nofollow"><code>ColorJitter</code></a> 등 변환을 몇 가지 연결하세요.
참고로 크기 조정에 필요한 이미지의 크기 요구사항은 <code>image_processor</code>에서 가져올 수 있습니다.
일부 모델은 정확한 높이와 너비를 요구하지만, 제일 짧은 변의 길이(<code>shortest_edge</code>)만 정의된 모델도 있습니다.</li>`,En,aa,An,H,je=`<li>모델은 입력으로 <a href="model_doc/visionencoderdecoder#transformers.VisionEncoderDecoderModel.forward.pixel_values"><code>pixel_values</code></a>를 받습니다.
<code>ImageProcessor</code>는 이미지 정규화 및 적절한 텐서 생성을 처리할 수 있습니다.
배치 이미지에 대한 이미지 증강 및 이미지 전처리를 결합하고 <code>pixel_values</code>를 생성하는 함수를 만듭니다:</li>`,Pn,na,Sn,R,Dn,X,be='<li>🤗 Datasets의 <a href="https://huggingface.co/docs/datasets/process#format-transform" rel="nofollow"><code>set_transform</code></a>를 사용하여 실시간으로 변환을 적용합니다:</li>',Kn,la,On,Y,ie=`<li>이제 이미지에 접근하면 이미지 프로세서가 <code>pixel_values</code>를 추가한 것을 알 수 있습니다.
드디어 처리된 데이터 세트를 모델에 전달할 수 있습니다!</li>`,sl,ea,al,pa,oe="다음은 변형이 적용된 후의 이미지입니다. 이미지가 무작위로 잘려나갔고 색상 속성이 다릅니다.",nl,ta,ll,N,fe='<img src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/preprocessed_image.png"/>',el,q,pl,ra,tl,ca,de=`예를 들어, <a href="./model_doc/detr">DETR</a>와 같은 경우에는 모델이 훈련할 때 크기 조정 증강을 적용합니다.
이로 인해 배치 내 이미지 크기가 달라질 수 있습니다.
<code>DetrImageProcessor</code>의 <code>DetrImageProcessor.pad()</code>를 사용하고 사용자 정의 <code>collate_fn</code>을 정의해서 배치 이미지를 처리할 수 있습니다.`,rl,ma,cl,ua,ml,ha,Me=`멀티모달 입력이 필요한 작업의 경우, 모델에 데이터 세트를 준비하기 위한 <a href="main_classes/processors">프로세서</a>가 필요합니다.
프로세서는 토크나이저와 특성 추출기와 같은 두 가지 처리 객체를 결합합니다.`,ul,ja,ge=`<a href="https://huggingface.co/datasets/lj_speech" rel="nofollow">LJ Speech</a> 데이터 세트를 가져와서 자동 음성 인식(ASR)을 위한 프로세서를 사용하는 방법을 확인하세요.
(데이터 세트를 가져오는 방법에 대한 자세한 내용은 🤗 <a href="https://huggingface.co/docs/datasets/load_hub" rel="nofollow">데이터 세트 튜토리얼</a>에서 볼 수 있습니다.)`,hl,ba,jl,ia,Je="자동 음성 인식(ASR)에서는 <code>audio</code>와 <code>text</code>에만 집중하면 되므로, 다른 열들은 제거할 수 있습니다:",bl,oa,il,fa,Te="이제 <code>audio</code>와 <code>text</code>열을 살펴보세요:",ol,da,fl,Ma,$e='기존에 사전훈련된 모델에서 사용된 데이터 세트와 새로운 오디오 데이터 세트의 샘플링 레이트를 일치시키기 위해 오디오 데이터 세트의 샘플링 레이트를 <a href="preprocessing#audio">리샘플링</a>해야 합니다!',dl,ga,Ml,Ja,ye="<code>AutoProcessor.from_pretrained()</code>로 프로세서를 가져오세요:",gl,Ta,Jl,$a,we=`<li><code>array</code>에 들어 있는 오디오 데이터를 <code>input_values</code>로 변환하고 <code>text</code>를 토큰화하여 <code>labels</code>로 변환하는 함수를 만듭니다.
모델의 입력은 다음과 같습니다:</li>`,Tl,ya,$l,z,_e="<li>샘플을 <code>prepare_dataset</code> 함수에 적용하세요:</li>",yl,wa,wl,_a,Ue=`이제 프로세서가 <code>input_values</code>와 <code>labels</code>를 추가하고, 샘플링 레이트도 올바르게 16kHz로 다운샘플링했습니다.
드디어 처리된 데이터 세트를 모델에 전달할 수 있습니다!`,_l,Ia,Ul;return $=new U({props:{title:"전처리",local:"preprocess",headingTag:"h1"}}),w=new Fe({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Mixed",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/ko/preprocessing.ipynb"},{label:"PyTorch",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/ko/pytorch/preprocessing.ipynb"},{label:"TensorFlow",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/ko/tensorflow/preprocessing.ipynb"},{label:"Mixed",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/ko/preprocessing.ipynb"},{label:"PyTorch",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/ko/pytorch/preprocessing.ipynb"},{label:"TensorFlow",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/ko/tensorflow/preprocessing.ipynb"}]}}),x=new Ua({props:{$$slots:{default:[Le]},$$scope:{ctx:J}}}),E=new g({props:{code:"cGlwJTIwaW5zdGFsbCUyMGRhdGFzZXRz",highlighted:"pip install datasets",wrap:!1}}),A=new U({props:{title:"자연어처리",local:"natural-language-processing",headingTag:"h2"}}),P=new ze({props:{id:"Yffk5aydLzg"}}),C=new Ua({props:{$$slots:{default:[Ee]},$$scope:{ctx:J}}}),K=new g({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMEElMEF0b2tlbml6ZXIlMjAlM0QlMjBBdXRvVG9rZW5pemVyLmZyb21fcHJldHJhaW5lZCglMjJnb29nbGUtYmVydCUyRmJlcnQtYmFzZS1jYXNlZCUyMik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;google-bert/bert-base-cased&quot;</span>)`,wrap:!1}}),ss=new g({props:{code:"ZW5jb2RlZF9pbnB1dCUyMCUzRCUyMHRva2VuaXplciglMjJEbyUyMG5vdCUyMG1lZGRsZSUyMGluJTIwdGhlJTIwYWZmYWlycyUyMG9mJTIwd2l6YXJkcyUyQyUyMGZvciUyMHRoZXklMjBhcmUlMjBzdWJ0bGUlMjBhbmQlMjBxdWljayUyMHRvJTIwYW5nZXIuJTIyKSUwQXByaW50KGVuY29kZWRfaW5wdXQp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_input = tokenizer(<span class="hljs-string">&quot;Do not meddle in the affairs of wizards, for they are subtle and quick to anger.&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(encoded_input)
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: [<span class="hljs-number">101</span>, <span class="hljs-number">2079</span>, <span class="hljs-number">2025</span>, <span class="hljs-number">19960</span>, <span class="hljs-number">10362</span>, <span class="hljs-number">1999</span>, <span class="hljs-number">1996</span>, <span class="hljs-number">3821</span>, <span class="hljs-number">1997</span>, <span class="hljs-number">16657</span>, <span class="hljs-number">1010</span>, <span class="hljs-number">2005</span>, <span class="hljs-number">2027</span>, <span class="hljs-number">2024</span>, <span class="hljs-number">11259</span>, <span class="hljs-number">1998</span>, <span class="hljs-number">4248</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">4963</span>, <span class="hljs-number">1012</span>, <span class="hljs-number">102</span>],
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]}`,wrap:!1}}),es=new g({props:{code:"dG9rZW5pemVyLmRlY29kZShlbmNvZGVkX2lucHV0JTVCJTIyaW5wdXRfaWRzJTIyJTVEKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.decode(encoded_input[<span class="hljs-string">&quot;input_ids&quot;</span>])
<span class="hljs-string">&#x27;[CLS] Do not meddle in the affairs of wizards, for they are subtle and quick to anger. [SEP]&#x27;</span>`,wrap:!1}}),rs=new g({props:{code:"YmF0Y2hfc2VudGVuY2VzJTIwJTNEJTIwJTVCJTBBJTIwJTIwJTIwJTIwJTIyQnV0JTIwd2hhdCUyMGFib3V0JTIwc2Vjb25kJTIwYnJlYWtmYXN0JTNGJTIyJTJDJTBBJTIwJTIwJTIwJTIwJTIyRG9uJ3QlMjB0aGluayUyMGhlJTIwa25vd3MlMjBhYm91dCUyMHNlY29uZCUyMGJyZWFrZmFzdCUyQyUyMFBpcC4lMjIlMkMlMEElMjAlMjAlMjAlMjAlMjJXaGF0JTIwYWJvdXQlMjBlbGV2ZW5zaWVzJTNGJTIyJTJDJTBBJTVEJTBBZW5jb2RlZF9pbnB1dHMlMjAlM0QlMjB0b2tlbml6ZXIoYmF0Y2hfc2VudGVuY2VzKSUwQXByaW50KGVuY29kZWRfaW5wdXRzKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>batch_sentences = [
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;But what about second breakfast?&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Don&#x27;t think he knows about second breakfast, Pip.&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;What about elevensies?&quot;</span>,
<span class="hljs-meta">... </span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_inputs = tokenizer(batch_sentences)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(encoded_inputs)
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: [[<span class="hljs-number">101</span>, <span class="hljs-number">1252</span>, <span class="hljs-number">1184</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">1248</span>, <span class="hljs-number">6462</span>, <span class="hljs-number">136</span>, <span class="hljs-number">102</span>],
               [<span class="hljs-number">101</span>, <span class="hljs-number">1790</span>, <span class="hljs-number">112</span>, <span class="hljs-number">189</span>, <span class="hljs-number">1341</span>, <span class="hljs-number">1119</span>, <span class="hljs-number">3520</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">1248</span>, <span class="hljs-number">6462</span>, <span class="hljs-number">117</span>, <span class="hljs-number">21902</span>, <span class="hljs-number">1643</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>],
               [<span class="hljs-number">101</span>, <span class="hljs-number">1327</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">5450</span>, <span class="hljs-number">23434</span>, <span class="hljs-number">136</span>, <span class="hljs-number">102</span>]],
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
                    [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
                    [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]],
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: [[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],
                    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],
                    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]]}`,wrap:!1}}),cs=new U({props:{title:"패딩",local:"pad",headingTag:"h3"}}),hs=new g({props:{code:"YmF0Y2hfc2VudGVuY2VzJTIwJTNEJTIwJTVCJTBBJTIwJTIwJTIwJTIwJTIyQnV0JTIwd2hhdCUyMGFib3V0JTIwc2Vjb25kJTIwYnJlYWtmYXN0JTNGJTIyJTJDJTBBJTIwJTIwJTIwJTIwJTIyRG9uJ3QlMjB0aGluayUyMGhlJTIwa25vd3MlMjBhYm91dCUyMHNlY29uZCUyMGJyZWFrZmFzdCUyQyUyMFBpcC4lMjIlMkMlMEElMjAlMjAlMjAlMjAlMjJXaGF0JTIwYWJvdXQlMjBlbGV2ZW5zaWVzJTNGJTIyJTJDJTBBJTVEJTBBZW5jb2RlZF9pbnB1dCUyMCUzRCUyMHRva2VuaXplcihiYXRjaF9zZW50ZW5jZXMlMkMlMjBwYWRkaW5nJTNEVHJ1ZSklMEFwcmludChlbmNvZGVkX2lucHV0KQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>batch_sentences = [
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;But what about second breakfast?&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Don&#x27;t think he knows about second breakfast, Pip.&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;What about elevensies?&quot;</span>,
<span class="hljs-meta">... </span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_input = tokenizer(batch_sentences, padding=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(encoded_input)
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: [[<span class="hljs-number">101</span>, <span class="hljs-number">1252</span>, <span class="hljs-number">1184</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">1248</span>, <span class="hljs-number">6462</span>, <span class="hljs-number">136</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
               [<span class="hljs-number">101</span>, <span class="hljs-number">1790</span>, <span class="hljs-number">112</span>, <span class="hljs-number">189</span>, <span class="hljs-number">1341</span>, <span class="hljs-number">1119</span>, <span class="hljs-number">3520</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">1248</span>, <span class="hljs-number">6462</span>, <span class="hljs-number">117</span>, <span class="hljs-number">21902</span>, <span class="hljs-number">1643</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>],
               [<span class="hljs-number">101</span>, <span class="hljs-number">1327</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">5450</span>, <span class="hljs-number">23434</span>, <span class="hljs-number">136</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]],
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
                    [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
                    [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]],
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: [[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
                    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],
                    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]}`,wrap:!1}}),bs=new U({props:{title:"잘라내기",local:"truncation",headingTag:"h3"}}),fs=new g({props:{code:"YmF0Y2hfc2VudGVuY2VzJTIwJTNEJTIwJTVCJTBBJTIwJTIwJTIwJTIwJTIyQnV0JTIwd2hhdCUyMGFib3V0JTIwc2Vjb25kJTIwYnJlYWtmYXN0JTNGJTIyJTJDJTBBJTIwJTIwJTIwJTIwJTIyRG9uJ3QlMjB0aGluayUyMGhlJTIwa25vd3MlMjBhYm91dCUyMHNlY29uZCUyMGJyZWFrZmFzdCUyQyUyMFBpcC4lMjIlMkMlMEElMjAlMjAlMjAlMjAlMjJXaGF0JTIwYWJvdXQlMjBlbGV2ZW5zaWVzJTNGJTIyJTJDJTBBJTVEJTBBZW5jb2RlZF9pbnB1dCUyMCUzRCUyMHRva2VuaXplcihiYXRjaF9zZW50ZW5jZXMlMkMlMjBwYWRkaW5nJTNEVHJ1ZSUyQyUyMHRydW5jYXRpb24lM0RUcnVlKSUwQXByaW50KGVuY29kZWRfaW5wdXQp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>batch_sentences = [
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;But what about second breakfast?&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Don&#x27;t think he knows about second breakfast, Pip.&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;What about elevensies?&quot;</span>,
<span class="hljs-meta">... </span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_input = tokenizer(batch_sentences, padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(encoded_input)
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: [[<span class="hljs-number">101</span>, <span class="hljs-number">1252</span>, <span class="hljs-number">1184</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">1248</span>, <span class="hljs-number">6462</span>, <span class="hljs-number">136</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
               [<span class="hljs-number">101</span>, <span class="hljs-number">1790</span>, <span class="hljs-number">112</span>, <span class="hljs-number">189</span>, <span class="hljs-number">1341</span>, <span class="hljs-number">1119</span>, <span class="hljs-number">3520</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">1248</span>, <span class="hljs-number">6462</span>, <span class="hljs-number">117</span>, <span class="hljs-number">21902</span>, <span class="hljs-number">1643</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>],
               [<span class="hljs-number">101</span>, <span class="hljs-number">1327</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">5450</span>, <span class="hljs-number">23434</span>, <span class="hljs-number">136</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]],
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
                    [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
                    [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]],
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: [[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
                    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],
                    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]}`,wrap:!1}}),k=new Ua({props:{$$slots:{default:[Ae]},$$scope:{ctx:J}}}),ds=new U({props:{title:"텐서 만들기",local:"build-tensors",headingTag:"h3"}}),Z=new Qe({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[Ke],pytorch:[Se]},$$scope:{ctx:J}}}),Js=new U({props:{title:"오디오",local:"audio",headingTag:"h2"}}),ys=new g({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTJDJTIwQXVkaW8lMEElMEFkYXRhc2V0JTIwJTNEJTIwbG9hZF9kYXRhc2V0KCUyMlBvbHlBSSUyRm1pbmRzMTQlMjIlMkMlMjBuYW1lJTNEJTIyZW4tVVMlMjIlMkMlMjBzcGxpdCUzRCUyMnRyYWluJTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, name=<span class="hljs-string">&quot;en-US&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)`,wrap:!1}}),_s=new g({props:{code:"ZGF0YXNldCU1QjAlNUQlNUIlMjJhdWRpbyUyMiU1RA==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>]
{<span class="hljs-string">&#x27;array&#x27;</span>: array([ <span class="hljs-number">0.</span>        ,  <span class="hljs-number">0.00024414</span>, -<span class="hljs-number">0.00024414</span>, ..., -<span class="hljs-number">0.00024414</span>,
         <span class="hljs-number">0.</span>        ,  <span class="hljs-number">0.</span>        ], dtype=float32),
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/f14948e0e84be638dd7943ac36518a4cf3324e8b7aa331c5ab11541518e9368c/en-US~JOINT_ACCOUNT/602ba55abb1e6d0fbce92065.wav&#x27;</span>,
 <span class="hljs-string">&#x27;sampling_rate&#x27;</span>: <span class="hljs-number">8000</span>}`,wrap:!1}}),Cs=new g({props:{code:"ZGF0YXNldCUyMCUzRCUyMGRhdGFzZXQuY2FzdF9jb2x1bW4oJTIyYXVkaW8lMjIlMkMlMjBBdWRpbyhzYW1wbGluZ19yYXRlJTNEMTZfMDAwKSk=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16_000</span>))',wrap:!1}}),ks=new g({props:{code:"ZGF0YXNldCU1QjAlNUQlNUIlMjJhdWRpbyUyMiU1RA==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>]
{<span class="hljs-string">&#x27;array&#x27;</span>: array([ <span class="hljs-number">2.3443763e-05</span>,  <span class="hljs-number">2.1729663e-04</span>,  <span class="hljs-number">2.2145823e-04</span>, ...,
         <span class="hljs-number">3.8356509e-05</span>, -<span class="hljs-number">7.3497440e-06</span>, -<span class="hljs-number">2.1754686e-05</span>], dtype=float32),
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/f14948e0e84be638dd7943ac36518a4cf3324e8b7aa331c5ab11541518e9368c/en-US~JOINT_ACCOUNT/602ba55abb1e6d0fbce92065.wav&#x27;</span>,
 <span class="hljs-string">&#x27;sampling_rate&#x27;</span>: <span class="hljs-number">16000</span>}`,wrap:!1}}),Vs=new g({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9GZWF0dXJlRXh0cmFjdG9yJTBBJTBBZmVhdHVyZV9leHRyYWN0b3IlMjAlM0QlMjBBdXRvRmVhdHVyZUV4dHJhY3Rvci5mcm9tX3ByZXRyYWluZWQoJTIyZmFjZWJvb2slMkZ3YXYydmVjMi1iYXNlJTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base&quot;</span>)`,wrap:!1}}),Ws=new g({props:{code:"YXVkaW9faW5wdXQlMjAlM0QlMjAlNUJkYXRhc2V0JTVCMCU1RCU1QiUyMmF1ZGlvJTIyJTVEJTVCJTIyYXJyYXklMjIlNUQlNUQlMEFmZWF0dXJlX2V4dHJhY3RvcihhdWRpb19pbnB1dCUyQyUyMHNhbXBsaW5nX3JhdGUlM0QxNjAwMCk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>audio_input = [dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;array&quot;</span>]]
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor(audio_input, sampling_rate=<span class="hljs-number">16000</span>)
{<span class="hljs-string">&#x27;input_values&#x27;</span>: [array([ <span class="hljs-number">3.8106556e-04</span>,  <span class="hljs-number">2.7506407e-03</span>,  <span class="hljs-number">2.8015103e-03</span>, ...,
        <span class="hljs-number">5.6335266e-04</span>,  <span class="hljs-number">4.6588284e-06</span>, -<span class="hljs-number">1.7142107e-04</span>], dtype=float32)]}`,wrap:!1}}),Rs=new g({props:{code:"ZGF0YXNldCU1QjAlNUQlNUIlMjJhdWRpbyUyMiU1RCU1QiUyMmFycmF5JTIyJTVELnNoYXBlJTBBJTBBZGF0YXNldCU1QjElNUQlNUIlMjJhdWRpbyUyMiU1RCU1QiUyMmFycmF5JTIyJTVELnNoYXBl",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;array&quot;</span>].shape
(<span class="hljs-number">173398</span>,)

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">1</span>][<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;array&quot;</span>].shape
(<span class="hljs-number">106496</span>,)`,wrap:!1}}),Ys=new g({props:{code:"ZGVmJTIwcHJlcHJvY2Vzc19mdW5jdGlvbihleGFtcGxlcyklM0ElMEElMjAlMjAlMjAlMjBhdWRpb19hcnJheXMlMjAlM0QlMjAlNUJ4JTVCJTIyYXJyYXklMjIlNUQlMjBmb3IlMjB4JTIwaW4lMjBleGFtcGxlcyU1QiUyMmF1ZGlvJTIyJTVEJTVEJTBBJTIwJTIwJTIwJTIwaW5wdXRzJTIwJTNEJTIwZmVhdHVyZV9leHRyYWN0b3IoJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwYXVkaW9fYXJyYXlzJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwc2FtcGxpbmdfcmF0ZSUzRDE2MDAwJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwcGFkZGluZyUzRFRydWUlMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBtYXhfbGVuZ3RoJTNEMTAwMDAwJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwdHJ1bmNhdGlvbiUzRFRydWUlMkMlMEElMjAlMjAlMjAlMjApJTBBJTIwJTIwJTIwJTIwcmV0dXJuJTIwaW5wdXRz",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">preprocess_function</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    audio_arrays = [x[<span class="hljs-string">&quot;array&quot;</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;audio&quot;</span>]]
<span class="hljs-meta">... </span>    inputs = feature_extractor(
<span class="hljs-meta">... </span>        audio_arrays,
<span class="hljs-meta">... </span>        sampling_rate=<span class="hljs-number">16000</span>,
<span class="hljs-meta">... </span>        padding=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>        max_length=<span class="hljs-number">100000</span>,
<span class="hljs-meta">... </span>        truncation=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    )
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> inputs`,wrap:!1}}),qs=new g({props:{code:"cHJvY2Vzc2VkX2RhdGFzZXQlMjAlM0QlMjBwcmVwcm9jZXNzX2Z1bmN0aW9uKGRhdGFzZXQlNUIlM0E1JTVEKQ==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>processed_dataset = preprocess_function(dataset[:<span class="hljs-number">5</span>])',wrap:!1}}),Fs=new g({props:{code:"cHJvY2Vzc2VkX2RhdGFzZXQlNUIlMjJpbnB1dF92YWx1ZXMlMjIlNUQlNUIwJTVELnNoYXBlJTBBJTBBcHJvY2Vzc2VkX2RhdGFzZXQlNUIlMjJpbnB1dF92YWx1ZXMlMjIlNUQlNUIxJTVELnNoYXBl",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>processed_dataset[<span class="hljs-string">&quot;input_values&quot;</span>][<span class="hljs-number">0</span>].shape
(<span class="hljs-number">100000</span>,)

<span class="hljs-meta">&gt;&gt;&gt; </span>processed_dataset[<span class="hljs-string">&quot;input_values&quot;</span>][<span class="hljs-number">1</span>].shape
(<span class="hljs-number">100000</span>,)`,wrap:!1}}),Qs=new U({props:{title:"컴퓨터 비전",local:"computer-vision",headingTag:"h2"}}),V=new Ua({props:{$$slots:{default:[Oe]},$$scope:{ctx:J}}}),B=new Ua({props:{$$slots:{default:[sp]},$$scope:{ctx:J}}}),As=new g({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBJTBBZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJmb29kMTAxJTIyJTJDJTIwc3BsaXQlM0QlMjJ0cmFpbiU1QiUzQTEwMCU1RCUyMik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;food101&quot;</span>, split=<span class="hljs-string">&quot;train[:100]&quot;</span>)`,wrap:!1}}),Ss=new g({props:{code:"ZGF0YXNldCU1QjAlNUQlNUIlMjJpbWFnZSUyMiU1RA==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]',wrap:!1}}),Ks=new g({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9JbWFnZVByb2Nlc3NvciUwQSUwQWltYWdlX3Byb2Nlc3NvciUyMCUzRCUyMEF1dG9JbWFnZVByb2Nlc3Nvci5mcm9tX3ByZXRyYWluZWQoJTIyZ29vZ2xlJTJGdml0LWJhc2UtcGF0Y2gxNi0yMjQlMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoImageProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span>image_processor = AutoImageProcessor.from_pretrained(<span class="hljs-string">&quot;google/vit-base-patch16-224&quot;</span>)`,wrap:!1}}),aa=new g({props:{code:"ZnJvbSUyMHRvcmNodmlzaW9uLnRyYW5zZm9ybXMlMjBpbXBvcnQlMjBSYW5kb21SZXNpemVkQ3JvcCUyQyUyMENvbG9ySml0dGVyJTJDJTIwQ29tcG9zZSUwQSUwQXNpemUlMjAlM0QlMjAoJTBBJTIwJTIwJTIwJTIwaW1hZ2VfcHJvY2Vzc29yLnNpemUlNUIlMjJzaG9ydGVzdF9lZGdlJTIyJTVEJTBBJTIwJTIwJTIwJTIwaWYlMjAlMjJzaG9ydGVzdF9lZGdlJTIyJTIwaW4lMjBpbWFnZV9wcm9jZXNzb3Iuc2l6ZSUwQSUyMCUyMCUyMCUyMGVsc2UlMjAoaW1hZ2VfcHJvY2Vzc29yLnNpemUlNUIlMjJoZWlnaHQlMjIlNUQlMkMlMjBpbWFnZV9wcm9jZXNzb3Iuc2l6ZSU1QiUyMndpZHRoJTIyJTVEKSUwQSklMEElMEFfdHJhbnNmb3JtcyUyMCUzRCUyMENvbXBvc2UoJTVCUmFuZG9tUmVzaXplZENyb3Aoc2l6ZSklMkMlMjBDb2xvckppdHRlcihicmlnaHRuZXNzJTNEMC41JTJDJTIwaHVlJTNEMC41KSU1RCk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torchvision.transforms <span class="hljs-keyword">import</span> RandomResizedCrop, ColorJitter, Compose

<span class="hljs-meta">&gt;&gt;&gt; </span>size = (
<span class="hljs-meta">... </span>    image_processor.size[<span class="hljs-string">&quot;shortest_edge&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;shortest_edge&quot;</span> <span class="hljs-keyword">in</span> image_processor.size
<span class="hljs-meta">... </span>    <span class="hljs-keyword">else</span> (image_processor.size[<span class="hljs-string">&quot;height&quot;</span>], image_processor.size[<span class="hljs-string">&quot;width&quot;</span>])
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>_transforms = Compose([RandomResizedCrop(size), ColorJitter(brightness=<span class="hljs-number">0.5</span>, hue=<span class="hljs-number">0.5</span>)])`,wrap:!1}}),na=new g({props:{code:"ZGVmJTIwdHJhbnNmb3JtcyhleGFtcGxlcyklM0ElMEElMjAlMjAlMjAlMjBpbWFnZXMlMjAlM0QlMjAlNUJfdHJhbnNmb3JtcyhpbWcuY29udmVydCglMjJSR0IlMjIpKSUyMGZvciUyMGltZyUyMGluJTIwZXhhbXBsZXMlNUIlMjJpbWFnZSUyMiU1RCU1RCUwQSUyMCUyMCUyMCUyMGV4YW1wbGVzJTVCJTIycGl4ZWxfdmFsdWVzJTIyJTVEJTIwJTNEJTIwaW1hZ2VfcHJvY2Vzc29yKGltYWdlcyUyQyUyMGRvX3Jlc2l6ZSUzREZhbHNlJTJDJTIwcmV0dXJuX3RlbnNvcnMlM0QlMjJwdCUyMiklNUIlMjJwaXhlbF92YWx1ZXMlMjIlNUQlMEElMjAlMjAlMjAlMjByZXR1cm4lMjBleGFtcGxlcw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">transforms</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    images = [_transforms(img.convert(<span class="hljs-string">&quot;RGB&quot;</span>)) <span class="hljs-keyword">for</span> img <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;image&quot;</span>]]
<span class="hljs-meta">... </span>    examples[<span class="hljs-string">&quot;pixel_values&quot;</span>] = image_processor(images, do_resize=<span class="hljs-literal">False</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)[<span class="hljs-string">&quot;pixel_values&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> examples`,wrap:!1}}),R=new Ua({props:{$$slots:{default:[ap]},$$scope:{ctx:J}}}),la=new g({props:{code:"ZGF0YXNldC5zZXRfdHJhbnNmb3JtKHRyYW5zZm9ybXMp",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.set_transform(transforms)',wrap:!1}}),ea=new g({props:{code:"ZGF0YXNldCU1QjAlNUQua2V5cygp",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>].keys()',wrap:!1}}),ta=new g({props:{code:"aW1wb3J0JTIwbnVtcHklMjBhcyUyMG5wJTBBaW1wb3J0JTIwbWF0cGxvdGxpYi5weXBsb3QlMjBhcyUyMHBsdCUwQSUwQWltZyUyMCUzRCUyMGRhdGFzZXQlNUIwJTVEJTVCJTIycGl4ZWxfdmFsdWVzJTIyJTVEJTBBcGx0Lmltc2hvdyhpbWcucGVybXV0ZSgxJTJDJTIwMiUyQyUyMDApKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt

<span class="hljs-meta">&gt;&gt;&gt; </span>img = dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;pixel_values&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>plt.imshow(img.permute(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>))`,wrap:!1}}),q=new Ua({props:{$$slots:{default:[np]},$$scope:{ctx:J}}}),ra=new U({props:{title:"패딩",local:"pad",headingTag:"h3"}}),ma=new g({props:{code:"ZGVmJTIwY29sbGF0ZV9mbihiYXRjaCklM0ElMEElMjAlMjAlMjAlMjBwaXhlbF92YWx1ZXMlMjAlM0QlMjAlNUJpdGVtJTVCJTIycGl4ZWxfdmFsdWVzJTIyJTVEJTIwZm9yJTIwaXRlbSUyMGluJTIwYmF0Y2glNUQlMEElMjAlMjAlMjAlMjBlbmNvZGluZyUyMCUzRCUyMGltYWdlX3Byb2Nlc3Nvci5wYWQocGl4ZWxfdmFsdWVzJTJDJTIwcmV0dXJuX3RlbnNvcnMlM0QlMjJwdCUyMiklMEElMjAlMjAlMjAlMjBsYWJlbHMlMjAlM0QlMjAlNUJpdGVtJTVCJTIybGFiZWxzJTIyJTVEJTIwZm9yJTIwaXRlbSUyMGluJTIwYmF0Y2glNUQlMEElMjAlMjAlMjAlMjBiYXRjaCUyMCUzRCUyMCU3QiU3RCUwQSUyMCUyMCUyMCUyMGJhdGNoJTVCJTIycGl4ZWxfdmFsdWVzJTIyJTVEJTIwJTNEJTIwZW5jb2RpbmclNUIlMjJwaXhlbF92YWx1ZXMlMjIlNUQlMEElMjAlMjAlMjAlMjBiYXRjaCU1QiUyMnBpeGVsX21hc2slMjIlNUQlMjAlM0QlMjBlbmNvZGluZyU1QiUyMnBpeGVsX21hc2slMjIlNUQlMEElMjAlMjAlMjAlMjBiYXRjaCU1QiUyMmxhYmVscyUyMiU1RCUyMCUzRCUyMGxhYmVscyUwQSUyMCUyMCUyMCUyMHJldHVybiUyMGJhdGNo",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">collate_fn</span>(<span class="hljs-params">batch</span>):
<span class="hljs-meta">... </span>    pixel_values = [item[<span class="hljs-string">&quot;pixel_values&quot;</span>] <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> batch]
<span class="hljs-meta">... </span>    encoding = image_processor.pad(pixel_values, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">... </span>    labels = [item[<span class="hljs-string">&quot;labels&quot;</span>] <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> batch]
<span class="hljs-meta">... </span>    batch = {}
<span class="hljs-meta">... </span>    batch[<span class="hljs-string">&quot;pixel_values&quot;</span>] = encoding[<span class="hljs-string">&quot;pixel_values&quot;</span>]
<span class="hljs-meta">... </span>    batch[<span class="hljs-string">&quot;pixel_mask&quot;</span>] = encoding[<span class="hljs-string">&quot;pixel_mask&quot;</span>]
<span class="hljs-meta">... </span>    batch[<span class="hljs-string">&quot;labels&quot;</span>] = labels
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> batch`,wrap:!1}}),ua=new U({props:{title:"멀티모달",local:"multimodal",headingTag:"h2"}}),ba=new g({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBJTBBbGpfc3BlZWNoJTIwJTNEJTIwbG9hZF9kYXRhc2V0KCUyMmxqX3NwZWVjaCUyMiUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>lj_speech = load_dataset(<span class="hljs-string">&quot;lj_speech&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)`,wrap:!1}}),oa=new g({props:{code:"bGpfc3BlZWNoJTIwJTNEJTIwbGpfc3BlZWNoLm1hcChyZW1vdmVfY29sdW1ucyUzRCU1QiUyMmZpbGUlMjIlMkMlMjAlMjJpZCUyMiUyQyUyMCUyMm5vcm1hbGl6ZWRfdGV4dCUyMiU1RCk=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>lj_speech = lj_speech.<span class="hljs-built_in">map</span>(remove_columns=[<span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;normalized_text&quot;</span>])',wrap:!1}}),da=new g({props:{code:"bGpfc3BlZWNoJTVCMCU1RCU1QiUyMmF1ZGlvJTIyJTVEJTBBJTBBbGpfc3BlZWNoJTVCMCU1RCU1QiUyMnRleHQlMjIlNUQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>lj_speech[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>]
{<span class="hljs-string">&#x27;array&#x27;</span>: array([-<span class="hljs-number">7.3242188e-04</span>, -<span class="hljs-number">7.6293945e-04</span>, -<span class="hljs-number">6.4086914e-04</span>, ...,
         <span class="hljs-number">7.3242188e-04</span>,  <span class="hljs-number">2.1362305e-04</span>,  <span class="hljs-number">6.1035156e-05</span>], dtype=float32),
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/917ece08c95cf0c4115e45294e3cd0dee724a1165b7fc11798369308a465bd26/LJSpeech-1.1/wavs/LJ001-0001.wav&#x27;</span>,
 <span class="hljs-string">&#x27;sampling_rate&#x27;</span>: <span class="hljs-number">22050</span>}

<span class="hljs-meta">&gt;&gt;&gt; </span>lj_speech[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-string">&#x27;Printing, in the only sense with which we are at present concerned, differs from most if not from all the arts and crafts represented in the Exhibition&#x27;</span>`,wrap:!1}}),ga=new g({props:{code:"bGpfc3BlZWNoJTIwJTNEJTIwbGpfc3BlZWNoLmNhc3RfY29sdW1uKCUyMmF1ZGlvJTIyJTJDJTIwQXVkaW8oc2FtcGxpbmdfcmF0ZSUzRDE2XzAwMCkp",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>lj_speech = lj_speech.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16_000</span>))',wrap:!1}}),Ta=new g({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Qcm9jZXNzb3IlMEElMEFwcm9jZXNzb3IlMjAlM0QlMjBBdXRvUHJvY2Vzc29yLmZyb21fcHJldHJhaW5lZCglMjJmYWNlYm9vayUyRndhdjJ2ZWMyLWJhc2UtOTYwaCUyMik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)`,wrap:!1}}),ya=new g({props:{code:"ZGVmJTIwcHJlcGFyZV9kYXRhc2V0KGV4YW1wbGUpJTNBJTBBJTIwJTIwJTIwJTIwYXVkaW8lMjAlM0QlMjBleGFtcGxlJTVCJTIyYXVkaW8lMjIlNUQlMEElMEElMjAlMjAlMjAlMjBleGFtcGxlLnVwZGF0ZShwcm9jZXNzb3IoYXVkaW8lM0RhdWRpbyU1QiUyMmFycmF5JTIyJTVEJTJDJTIwdGV4dCUzRGV4YW1wbGUlNUIlMjJ0ZXh0JTIyJTVEJTJDJTIwc2FtcGxpbmdfcmF0ZSUzRDE2MDAwKSklMEElMEElMjAlMjAlMjAlMjByZXR1cm4lMjBleGFtcGxl",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">prepare_dataset</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    audio = example[<span class="hljs-string">&quot;audio&quot;</span>]

<span class="hljs-meta">... </span>    example.update(processor(audio=audio[<span class="hljs-string">&quot;array&quot;</span>], text=example[<span class="hljs-string">&quot;text&quot;</span>], sampling_rate=<span class="hljs-number">16000</span>))

<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example`,wrap:!1}}),wa=new g({props:{code:"cHJlcGFyZV9kYXRhc2V0KGxqX3NwZWVjaCU1QjAlNUQp",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>prepare_dataset(lj_speech[<span class="hljs-number">0</span>])',wrap:!1}}),{c(){t=c("meta"),d=e(),r=c("p"),M=e(),h($.$$.fragment),y=e(),h(w.$$.fragment),F=e(),T=c("p"),T.textContent=v,va=e(),Q=c("ul"),Q.innerHTML=Il,xa=e(),h(x.$$.fragment),Ca=e(),L=c("p"),L.textContent=vl,ka=e(),h(E.$$.fragment),Za=e(),h(A.$$.fragment),Ga=e(),h(P.$$.fragment),Va=e(),S=c("p"),S.innerHTML=xl,Ba=e(),h(C.$$.fragment),Wa=e(),D=c("p"),D.innerHTML=Cl,Ha=e(),h(K.$$.fragment),Ra=e(),O=c("p"),O.textContent=kl,Xa=e(),h(ss.$$.fragment),Ya=e(),as=c("p"),as.textContent=Zl,Na=e(),ns=c("ul"),ns.innerHTML=Gl,qa=e(),ls=c("p"),ls.innerHTML=Vl,za=e(),h(es.$$.fragment),Fa=e(),ps=c("p"),ps.innerHTML=Bl,Qa=e(),ts=c("p"),ts.textContent=Wl,La=e(),h(rs.$$.fragment),Ea=e(),h(cs.$$.fragment),Aa=e(),ms=c("p"),ms.innerHTML=Hl,Pa=e(),us=c("p"),us.innerHTML=Rl,Sa=e(),h(hs.$$.fragment),Da=e(),js=c("p"),js.innerHTML=Xl,Ka=e(),h(bs.$$.fragment),Oa=e(),is=c("p"),is.textContent=Yl,sn=e(),os=c("p"),os.innerHTML=Nl,an=e(),h(fs.$$.fragment),nn=e(),h(k.$$.fragment),ln=e(),h(ds.$$.fragment),en=e(),Ms=c("p"),Ms.textContent=ql,pn=e(),gs=c("p"),gs.innerHTML=zl,tn=e(),h(Z.$$.fragment),rn=e(),h(Js.$$.fragment),cn=e(),Ts=c("p"),Ts.innerHTML=Fl,mn=e(),$s=c("p"),$s.innerHTML=Ql,un=e(),h(ys.$$.fragment),hn=e(),ws=c("p"),ws.innerHTML=Ll,jn=e(),h(_s.$$.fragment),bn=e(),Us=c("p"),Us.textContent=El,on=e(),Is=c("ul"),Is.innerHTML=Al,fn=e(),vs=c("p"),vs.innerHTML=Pl,dn=e(),xs=c("ol"),xs.innerHTML=Sl,Mn=e(),h(Cs.$$.fragment),gn=e(),G=c("ol"),G.innerHTML=Dl,Jn=e(),h(ks.$$.fragment),Tn=e(),Zs=c("p"),Zs.innerHTML=Kl,$n=e(),Gs=c("p"),Gs.innerHTML=Ol,yn=e(),h(Vs.$$.fragment),wn=e(),Bs=c("p"),Bs.innerHTML=se,_n=e(),h(Ws.$$.fragment),Un=e(),Hs=c("p"),Hs.textContent=ae,In=e(),h(Rs.$$.fragment),vn=e(),Xs=c("p"),Xs.textContent=ne,xn=e(),h(Ys.$$.fragment),Cn=e(),Ns=c("p"),Ns.innerHTML=le,kn=e(),h(qs.$$.fragment),Zn=e(),zs=c("p"),zs.textContent=ee,Gn=e(),h(Fs.$$.fragment),Vn=e(),h(Qs.$$.fragment),Bn=e(),Ls=c("p"),Ls.innerHTML=pe,Wn=e(),h(V.$$.fragment),Hn=e(),Es=c("p"),Es.innerHTML=te,Rn=e(),h(B.$$.fragment),Xn=e(),h(As.$$.fragment),Yn=e(),Ps=c("p"),Ps.innerHTML=re,Nn=e(),h(Ss.$$.fragment),qn=e(),W=c("div"),W.innerHTML=ce,zn=e(),Ds=c("p"),Ds.innerHTML=me,Fn=e(),h(Ks.$$.fragment),Qn=e(),Os=c("p"),Os.innerHTML=ue,Ln=e(),sa=c("ol"),sa.innerHTML=he,En=e(),h(aa.$$.fragment),An=e(),H=c("ol"),H.innerHTML=je,Pn=e(),h(na.$$.fragment),Sn=e(),h(R.$$.fragment),Dn=e(),X=c("ol"),X.innerHTML=be,Kn=e(),h(la.$$.fragment),On=e(),Y=c("ol"),Y.innerHTML=ie,sl=e(),h(ea.$$.fragment),al=e(),pa=c("p"),pa.textContent=oe,nl=e(),h(ta.$$.fragment),ll=e(),N=c("div"),N.innerHTML=fe,el=e(),h(q.$$.fragment),pl=e(),h(ra.$$.fragment),tl=e(),ca=c("p"),ca.innerHTML=de,rl=e(),h(ma.$$.fragment),cl=e(),h(ua.$$.fragment),ml=e(),ha=c("p"),ha.innerHTML=Me,ul=e(),ja=c("p"),ja.innerHTML=ge,hl=e(),h(ba.$$.fragment),jl=e(),ia=c("p"),ia.innerHTML=Je,bl=e(),h(oa.$$.fragment),il=e(),fa=c("p"),fa.innerHTML=Te,ol=e(),h(da.$$.fragment),fl=e(),Ma=c("p"),Ma.innerHTML=$e,dl=e(),h(ga.$$.fragment),Ml=e(),Ja=c("p"),Ja.innerHTML=ye,gl=e(),h(Ta.$$.fragment),Jl=e(),$a=c("ol"),$a.innerHTML=we,Tl=e(),h(ya.$$.fragment),$l=e(),z=c("ol"),z.innerHTML=_e,yl=e(),h(wa.$$.fragment),wl=e(),_a=c("p"),_a.innerHTML=Ue,_l=e(),Ia=c("p"),this.h()},l(s){const a=Ne("svelte-u9bgzb",document.head);t=m(a,"META",{name:!0,content:!0}),a.forEach(n),d=p(s),r=m(s,"P",{}),Be(r).forEach(n),M=p(s),j($.$$.fragment,s),y=p(s),j(w.$$.fragment,s),F=p(s),T=m(s,"P",{"data-svelte-h":!0}),u(T)!=="svelte-1ueibi3"&&(T.textContent=v),va=p(s),Q=m(s,"UL",{"data-svelte-h":!0}),u(Q)!=="svelte-ngf5dq"&&(Q.innerHTML=Il),xa=p(s),j(x.$$.fragment,s),Ca=p(s),L=m(s,"P",{"data-svelte-h":!0}),u(L)!=="svelte-rmtgt1"&&(L.textContent=vl),ka=p(s),j(E.$$.fragment,s),Za=p(s),j(A.$$.fragment,s),Ga=p(s),j(P.$$.fragment,s),Va=p(s),S=m(s,"P",{"data-svelte-h":!0}),u(S)!=="svelte-kpujfp"&&(S.innerHTML=xl),Ba=p(s),j(C.$$.fragment,s),Wa=p(s),D=m(s,"P",{"data-svelte-h":!0}),u(D)!=="svelte-nnn6n0"&&(D.innerHTML=Cl),Ha=p(s),j(K.$$.fragment,s),Ra=p(s),O=m(s,"P",{"data-svelte-h":!0}),u(O)!=="svelte-u80qx0"&&(O.textContent=kl),Xa=p(s),j(ss.$$.fragment,s),Ya=p(s),as=m(s,"P",{"data-svelte-h":!0}),u(as)!=="svelte-ixh93j"&&(as.textContent=Zl),Na=p(s),ns=m(s,"UL",{"data-svelte-h":!0}),u(ns)!=="svelte-1tce14x"&&(ns.innerHTML=Gl),qa=p(s),ls=m(s,"P",{"data-svelte-h":!0}),u(ls)!=="svelte-1a1g138"&&(ls.innerHTML=Vl),za=p(s),j(es.$$.fragment,s),Fa=p(s),ps=m(s,"P",{"data-svelte-h":!0}),u(ps)!=="svelte-m6mlu2"&&(ps.innerHTML=Bl),Qa=p(s),ts=m(s,"P",{"data-svelte-h":!0}),u(ts)!=="svelte-css2bf"&&(ts.textContent=Wl),La=p(s),j(rs.$$.fragment,s),Ea=p(s),j(cs.$$.fragment,s),Aa=p(s),ms=m(s,"P",{"data-svelte-h":!0}),u(ms)!=="svelte-hmrxfb"&&(ms.innerHTML=Hl),Pa=p(s),us=m(s,"P",{"data-svelte-h":!0}),u(us)!=="svelte-2tf9js"&&(us.innerHTML=Rl),Sa=p(s),j(hs.$$.fragment,s),Da=p(s),js=m(s,"P",{"data-svelte-h":!0}),u(js)!=="svelte-o2a688"&&(js.innerHTML=Xl),Ka=p(s),j(bs.$$.fragment,s),Oa=p(s),is=m(s,"P",{"data-svelte-h":!0}),u(is)!=="svelte-i5pcfq"&&(is.textContent=Yl),sn=p(s),os=m(s,"P",{"data-svelte-h":!0}),u(os)!=="svelte-13rfu1z"&&(os.innerHTML=Nl),an=p(s),j(fs.$$.fragment,s),nn=p(s),j(k.$$.fragment,s),ln=p(s),j(ds.$$.fragment,s),en=p(s),Ms=m(s,"P",{"data-svelte-h":!0}),u(Ms)!=="svelte-abudyz"&&(Ms.textContent=ql),pn=p(s),gs=m(s,"P",{"data-svelte-h":!0}),u(gs)!=="svelte-140uq15"&&(gs.innerHTML=zl),tn=p(s),j(Z.$$.fragment,s),rn=p(s),j(Js.$$.fragment,s),cn=p(s),Ts=m(s,"P",{"data-svelte-h":!0}),u(Ts)!=="svelte-l8fn48"&&(Ts.innerHTML=Fl),mn=p(s),$s=m(s,"P",{"data-svelte-h":!0}),u($s)!=="svelte-rgh7on"&&($s.innerHTML=Ql),un=p(s),j(ys.$$.fragment,s),hn=p(s),ws=m(s,"P",{"data-svelte-h":!0}),u(ws)!=="svelte-1s5qc7n"&&(ws.innerHTML=Ll),jn=p(s),j(_s.$$.fragment,s),bn=p(s),Us=m(s,"P",{"data-svelte-h":!0}),u(Us)!=="svelte-7soiv8"&&(Us.textContent=El),on=p(s),Is=m(s,"UL",{"data-svelte-h":!0}),u(Is)!=="svelte-5q96q8"&&(Is.innerHTML=Al),fn=p(s),vs=m(s,"P",{"data-svelte-h":!0}),u(vs)!=="svelte-5qklin"&&(vs.innerHTML=Pl),dn=p(s),xs=m(s,"OL",{"data-svelte-h":!0}),u(xs)!=="svelte-wxp4z0"&&(xs.innerHTML=Sl),Mn=p(s),j(Cs.$$.fragment,s),gn=p(s),G=m(s,"OL",{start:!0,"data-svelte-h":!0}),u(G)!=="svelte-uiahc9"&&(G.innerHTML=Dl),Jn=p(s),j(ks.$$.fragment,s),Tn=p(s),Zs=m(s,"P",{"data-svelte-h":!0}),u(Zs)!=="svelte-uv2sks"&&(Zs.innerHTML=Kl),$n=p(s),Gs=m(s,"P",{"data-svelte-h":!0}),u(Gs)!=="svelte-1tjjt6d"&&(Gs.innerHTML=Ol),yn=p(s),j(Vs.$$.fragment,s),wn=p(s),Bs=m(s,"P",{"data-svelte-h":!0}),u(Bs)!=="svelte-wrzhj9"&&(Bs.innerHTML=se),_n=p(s),j(Ws.$$.fragment,s),Un=p(s),Hs=m(s,"P",{"data-svelte-h":!0}),u(Hs)!=="svelte-1nx5ga4"&&(Hs.textContent=ae),In=p(s),j(Rs.$$.fragment,s),vn=p(s),Xs=m(s,"P",{"data-svelte-h":!0}),u(Xs)!=="svelte-mzhho4"&&(Xs.textContent=ne),xn=p(s),j(Ys.$$.fragment,s),Cn=p(s),Ns=m(s,"P",{"data-svelte-h":!0}),u(Ns)!=="svelte-14lyav7"&&(Ns.innerHTML=le),kn=p(s),j(qs.$$.fragment,s),Zn=p(s),zs=m(s,"P",{"data-svelte-h":!0}),u(zs)!=="svelte-1xv268t"&&(zs.textContent=ee),Gn=p(s),j(Fs.$$.fragment,s),Vn=p(s),j(Qs.$$.fragment,s),Bn=p(s),Ls=m(s,"P",{"data-svelte-h":!0}),u(Ls)!=="svelte-1ab2ir5"&&(Ls.innerHTML=pe),Wn=p(s),j(V.$$.fragment,s),Hn=p(s),Es=m(s,"P",{"data-svelte-h":!0}),u(Es)!=="svelte-pbj4vr"&&(Es.innerHTML=te),Rn=p(s),j(B.$$.fragment,s),Xn=p(s),j(As.$$.fragment,s),Yn=p(s),Ps=m(s,"P",{"data-svelte-h":!0}),u(Ps)!=="svelte-5fuxy5"&&(Ps.innerHTML=re),Nn=p(s),j(Ss.$$.fragment,s),qn=p(s),W=m(s,"DIV",{class:!0,"data-svelte-h":!0}),u(W)!=="svelte-1jzdron"&&(W.innerHTML=ce),zn=p(s),Ds=m(s,"P",{"data-svelte-h":!0}),u(Ds)!=="svelte-17ykucz"&&(Ds.innerHTML=me),Fn=p(s),j(Ks.$$.fragment,s),Qn=p(s),Os=m(s,"P",{"data-svelte-h":!0}),u(Os)!=="svelte-9wpp1n"&&(Os.innerHTML=ue),Ln=p(s),sa=m(s,"OL",{"data-svelte-h":!0}),u(sa)!=="svelte-13xojgf"&&(sa.innerHTML=he),En=p(s),j(aa.$$.fragment,s),An=p(s),H=m(s,"OL",{start:!0,"data-svelte-h":!0}),u(H)!=="svelte-1ay5alp"&&(H.innerHTML=je),Pn=p(s),j(na.$$.fragment,s),Sn=p(s),j(R.$$.fragment,s),Dn=p(s),X=m(s,"OL",{start:!0,"data-svelte-h":!0}),u(X)!=="svelte-j4bxlm"&&(X.innerHTML=be),Kn=p(s),j(la.$$.fragment,s),On=p(s),Y=m(s,"OL",{start:!0,"data-svelte-h":!0}),u(Y)!=="svelte-wa3oj"&&(Y.innerHTML=ie),sl=p(s),j(ea.$$.fragment,s),al=p(s),pa=m(s,"P",{"data-svelte-h":!0}),u(pa)!=="svelte-1w2gpmw"&&(pa.textContent=oe),nl=p(s),j(ta.$$.fragment,s),ll=p(s),N=m(s,"DIV",{class:!0,"data-svelte-h":!0}),u(N)!=="svelte-mp8qzc"&&(N.innerHTML=fe),el=p(s),j(q.$$.fragment,s),pl=p(s),j(ra.$$.fragment,s),tl=p(s),ca=m(s,"P",{"data-svelte-h":!0}),u(ca)!=="svelte-1mc2nxl"&&(ca.innerHTML=de),rl=p(s),j(ma.$$.fragment,s),cl=p(s),j(ua.$$.fragment,s),ml=p(s),ha=m(s,"P",{"data-svelte-h":!0}),u(ha)!=="svelte-h8h0gt"&&(ha.innerHTML=Me),ul=p(s),ja=m(s,"P",{"data-svelte-h":!0}),u(ja)!=="svelte-1xwk211"&&(ja.innerHTML=ge),hl=p(s),j(ba.$$.fragment,s),jl=p(s),ia=m(s,"P",{"data-svelte-h":!0}),u(ia)!=="svelte-96gwra"&&(ia.innerHTML=Je),bl=p(s),j(oa.$$.fragment,s),il=p(s),fa=m(s,"P",{"data-svelte-h":!0}),u(fa)!=="svelte-jx6bjz"&&(fa.innerHTML=Te),ol=p(s),j(da.$$.fragment,s),fl=p(s),Ma=m(s,"P",{"data-svelte-h":!0}),u(Ma)!=="svelte-e7m14a"&&(Ma.innerHTML=$e),dl=p(s),j(ga.$$.fragment,s),Ml=p(s),Ja=m(s,"P",{"data-svelte-h":!0}),u(Ja)!=="svelte-3r4cq"&&(Ja.innerHTML=ye),gl=p(s),j(Ta.$$.fragment,s),Jl=p(s),$a=m(s,"OL",{"data-svelte-h":!0}),u($a)!=="svelte-1sf8982"&&($a.innerHTML=we),Tl=p(s),j(ya.$$.fragment,s),$l=p(s),z=m(s,"OL",{start:!0,"data-svelte-h":!0}),u(z)!=="svelte-a24cgt"&&(z.innerHTML=_e),yl=p(s),j(wa.$$.fragment,s),wl=p(s),_a=m(s,"P",{"data-svelte-h":!0}),u(_a)!=="svelte-uy0kqp"&&(_a.innerHTML=Ue),_l=p(s),Ia=m(s,"P",{}),Be(Ia).forEach(n),this.h()},h(){_(t,"name","hf:doc:metadata"),_(t,"content",ep),_(G,"start","2"),_(W,"class","flex justify-center"),_(H,"start","2"),_(X,"start","3"),_(Y,"start","4"),_(N,"class","flex justify-center"),_(z,"start","2")},m(s,a){qe(document.head,t),l(s,d,a),l(s,r,a),l(s,M,a),b($,s,a),l(s,y,a),b(w,s,a),l(s,F,a),l(s,T,a),l(s,va,a),l(s,Q,a),l(s,xa,a),b(x,s,a),l(s,Ca,a),l(s,L,a),l(s,ka,a),b(E,s,a),l(s,Za,a),b(A,s,a),l(s,Ga,a),b(P,s,a),l(s,Va,a),l(s,S,a),l(s,Ba,a),b(C,s,a),l(s,Wa,a),l(s,D,a),l(s,Ha,a),b(K,s,a),l(s,Ra,a),l(s,O,a),l(s,Xa,a),b(ss,s,a),l(s,Ya,a),l(s,as,a),l(s,Na,a),l(s,ns,a),l(s,qa,a),l(s,ls,a),l(s,za,a),b(es,s,a),l(s,Fa,a),l(s,ps,a),l(s,Qa,a),l(s,ts,a),l(s,La,a),b(rs,s,a),l(s,Ea,a),b(cs,s,a),l(s,Aa,a),l(s,ms,a),l(s,Pa,a),l(s,us,a),l(s,Sa,a),b(hs,s,a),l(s,Da,a),l(s,js,a),l(s,Ka,a),b(bs,s,a),l(s,Oa,a),l(s,is,a),l(s,sn,a),l(s,os,a),l(s,an,a),b(fs,s,a),l(s,nn,a),b(k,s,a),l(s,ln,a),b(ds,s,a),l(s,en,a),l(s,Ms,a),l(s,pn,a),l(s,gs,a),l(s,tn,a),b(Z,s,a),l(s,rn,a),b(Js,s,a),l(s,cn,a),l(s,Ts,a),l(s,mn,a),l(s,$s,a),l(s,un,a),b(ys,s,a),l(s,hn,a),l(s,ws,a),l(s,jn,a),b(_s,s,a),l(s,bn,a),l(s,Us,a),l(s,on,a),l(s,Is,a),l(s,fn,a),l(s,vs,a),l(s,dn,a),l(s,xs,a),l(s,Mn,a),b(Cs,s,a),l(s,gn,a),l(s,G,a),l(s,Jn,a),b(ks,s,a),l(s,Tn,a),l(s,Zs,a),l(s,$n,a),l(s,Gs,a),l(s,yn,a),b(Vs,s,a),l(s,wn,a),l(s,Bs,a),l(s,_n,a),b(Ws,s,a),l(s,Un,a),l(s,Hs,a),l(s,In,a),b(Rs,s,a),l(s,vn,a),l(s,Xs,a),l(s,xn,a),b(Ys,s,a),l(s,Cn,a),l(s,Ns,a),l(s,kn,a),b(qs,s,a),l(s,Zn,a),l(s,zs,a),l(s,Gn,a),b(Fs,s,a),l(s,Vn,a),b(Qs,s,a),l(s,Bn,a),l(s,Ls,a),l(s,Wn,a),b(V,s,a),l(s,Hn,a),l(s,Es,a),l(s,Rn,a),b(B,s,a),l(s,Xn,a),b(As,s,a),l(s,Yn,a),l(s,Ps,a),l(s,Nn,a),b(Ss,s,a),l(s,qn,a),l(s,W,a),l(s,zn,a),l(s,Ds,a),l(s,Fn,a),b(Ks,s,a),l(s,Qn,a),l(s,Os,a),l(s,Ln,a),l(s,sa,a),l(s,En,a),b(aa,s,a),l(s,An,a),l(s,H,a),l(s,Pn,a),b(na,s,a),l(s,Sn,a),b(R,s,a),l(s,Dn,a),l(s,X,a),l(s,Kn,a),b(la,s,a),l(s,On,a),l(s,Y,a),l(s,sl,a),b(ea,s,a),l(s,al,a),l(s,pa,a),l(s,nl,a),b(ta,s,a),l(s,ll,a),l(s,N,a),l(s,el,a),b(q,s,a),l(s,pl,a),b(ra,s,a),l(s,tl,a),l(s,ca,a),l(s,rl,a),b(ma,s,a),l(s,cl,a),b(ua,s,a),l(s,ml,a),l(s,ha,a),l(s,ul,a),l(s,ja,a),l(s,hl,a),b(ba,s,a),l(s,jl,a),l(s,ia,a),l(s,bl,a),b(oa,s,a),l(s,il,a),l(s,fa,a),l(s,ol,a),b(da,s,a),l(s,fl,a),l(s,Ma,a),l(s,dl,a),b(ga,s,a),l(s,Ml,a),l(s,Ja,a),l(s,gl,a),b(Ta,s,a),l(s,Jl,a),l(s,$a,a),l(s,Tl,a),b(ya,s,a),l(s,$l,a),l(s,z,a),l(s,yl,a),b(wa,s,a),l(s,wl,a),l(s,_a,a),l(s,_l,a),l(s,Ia,a),Ul=!0},p(s,[a]){const Ie={};a&2&&(Ie.$$scope={dirty:a,ctx:s}),x.$set(Ie);const ve={};a&2&&(ve.$$scope={dirty:a,ctx:s}),C.$set(ve);const xe={};a&2&&(xe.$$scope={dirty:a,ctx:s}),k.$set(xe);const Ce={};a&2&&(Ce.$$scope={dirty:a,ctx:s}),Z.$set(Ce);const ke={};a&2&&(ke.$$scope={dirty:a,ctx:s}),V.$set(ke);const Ze={};a&2&&(Ze.$$scope={dirty:a,ctx:s}),B.$set(Ze);const Ge={};a&2&&(Ge.$$scope={dirty:a,ctx:s}),R.$set(Ge);const Ve={};a&2&&(Ve.$$scope={dirty:a,ctx:s}),q.$set(Ve)},i(s){Ul||(i($.$$.fragment,s),i(w.$$.fragment,s),i(x.$$.fragment,s),i(E.$$.fragment,s),i(A.$$.fragment,s),i(P.$$.fragment,s),i(C.$$.fragment,s),i(K.$$.fragment,s),i(ss.$$.fragment,s),i(es.$$.fragment,s),i(rs.$$.fragment,s),i(cs.$$.fragment,s),i(hs.$$.fragment,s),i(bs.$$.fragment,s),i(fs.$$.fragment,s),i(k.$$.fragment,s),i(ds.$$.fragment,s),i(Z.$$.fragment,s),i(Js.$$.fragment,s),i(ys.$$.fragment,s),i(_s.$$.fragment,s),i(Cs.$$.fragment,s),i(ks.$$.fragment,s),i(Vs.$$.fragment,s),i(Ws.$$.fragment,s),i(Rs.$$.fragment,s),i(Ys.$$.fragment,s),i(qs.$$.fragment,s),i(Fs.$$.fragment,s),i(Qs.$$.fragment,s),i(V.$$.fragment,s),i(B.$$.fragment,s),i(As.$$.fragment,s),i(Ss.$$.fragment,s),i(Ks.$$.fragment,s),i(aa.$$.fragment,s),i(na.$$.fragment,s),i(R.$$.fragment,s),i(la.$$.fragment,s),i(ea.$$.fragment,s),i(ta.$$.fragment,s),i(q.$$.fragment,s),i(ra.$$.fragment,s),i(ma.$$.fragment,s),i(ua.$$.fragment,s),i(ba.$$.fragment,s),i(oa.$$.fragment,s),i(da.$$.fragment,s),i(ga.$$.fragment,s),i(Ta.$$.fragment,s),i(ya.$$.fragment,s),i(wa.$$.fragment,s),Ul=!0)},o(s){o($.$$.fragment,s),o(w.$$.fragment,s),o(x.$$.fragment,s),o(E.$$.fragment,s),o(A.$$.fragment,s),o(P.$$.fragment,s),o(C.$$.fragment,s),o(K.$$.fragment,s),o(ss.$$.fragment,s),o(es.$$.fragment,s),o(rs.$$.fragment,s),o(cs.$$.fragment,s),o(hs.$$.fragment,s),o(bs.$$.fragment,s),o(fs.$$.fragment,s),o(k.$$.fragment,s),o(ds.$$.fragment,s),o(Z.$$.fragment,s),o(Js.$$.fragment,s),o(ys.$$.fragment,s),o(_s.$$.fragment,s),o(Cs.$$.fragment,s),o(ks.$$.fragment,s),o(Vs.$$.fragment,s),o(Ws.$$.fragment,s),o(Rs.$$.fragment,s),o(Ys.$$.fragment,s),o(qs.$$.fragment,s),o(Fs.$$.fragment,s),o(Qs.$$.fragment,s),o(V.$$.fragment,s),o(B.$$.fragment,s),o(As.$$.fragment,s),o(Ss.$$.fragment,s),o(Ks.$$.fragment,s),o(aa.$$.fragment,s),o(na.$$.fragment,s),o(R.$$.fragment,s),o(la.$$.fragment,s),o(ea.$$.fragment,s),o(ta.$$.fragment,s),o(q.$$.fragment,s),o(ra.$$.fragment,s),o(ma.$$.fragment,s),o(ua.$$.fragment,s),o(ba.$$.fragment,s),o(oa.$$.fragment,s),o(da.$$.fragment,s),o(ga.$$.fragment,s),o(Ta.$$.fragment,s),o(ya.$$.fragment,s),o(wa.$$.fragment,s),Ul=!1},d(s){s&&(n(d),n(r),n(M),n(y),n(F),n(T),n(va),n(Q),n(xa),n(Ca),n(L),n(ka),n(Za),n(Ga),n(Va),n(S),n(Ba),n(Wa),n(D),n(Ha),n(Ra),n(O),n(Xa),n(Ya),n(as),n(Na),n(ns),n(qa),n(ls),n(za),n(Fa),n(ps),n(Qa),n(ts),n(La),n(Ea),n(Aa),n(ms),n(Pa),n(us),n(Sa),n(Da),n(js),n(Ka),n(Oa),n(is),n(sn),n(os),n(an),n(nn),n(ln),n(en),n(Ms),n(pn),n(gs),n(tn),n(rn),n(cn),n(Ts),n(mn),n($s),n(un),n(hn),n(ws),n(jn),n(bn),n(Us),n(on),n(Is),n(fn),n(vs),n(dn),n(xs),n(Mn),n(gn),n(G),n(Jn),n(Tn),n(Zs),n($n),n(Gs),n(yn),n(wn),n(Bs),n(_n),n(Un),n(Hs),n(In),n(vn),n(Xs),n(xn),n(Cn),n(Ns),n(kn),n(Zn),n(zs),n(Gn),n(Vn),n(Bn),n(Ls),n(Wn),n(Hn),n(Es),n(Rn),n(Xn),n(Yn),n(Ps),n(Nn),n(qn),n(W),n(zn),n(Ds),n(Fn),n(Qn),n(Os),n(Ln),n(sa),n(En),n(An),n(H),n(Pn),n(Sn),n(Dn),n(X),n(Kn),n(On),n(Y),n(sl),n(al),n(pa),n(nl),n(ll),n(N),n(el),n(pl),n(tl),n(ca),n(rl),n(cl),n(ml),n(ha),n(ul),n(ja),n(hl),n(jl),n(ia),n(bl),n(il),n(fa),n(ol),n(fl),n(Ma),n(dl),n(Ml),n(Ja),n(gl),n(Jl),n($a),n(Tl),n($l),n(z),n(yl),n(wl),n(_a),n(_l),n(Ia)),n(t),f($,s),f(w,s),f(x,s),f(E,s),f(A,s),f(P,s),f(C,s),f(K,s),f(ss,s),f(es,s),f(rs,s),f(cs,s),f(hs,s),f(bs,s),f(fs,s),f(k,s),f(ds,s),f(Z,s),f(Js,s),f(ys,s),f(_s,s),f(Cs,s),f(ks,s),f(Vs,s),f(Ws,s),f(Rs,s),f(Ys,s),f(qs,s),f(Fs,s),f(Qs,s),f(V,s),f(B,s),f(As,s),f(Ss,s),f(Ks,s),f(aa,s),f(na,s),f(R,s),f(la,s),f(ea,s),f(ta,s),f(q,s),f(ra,s),f(ma,s),f(ua,s),f(ba,s),f(oa,s),f(da,s),f(ga,s),f(Ta,s),f(ya,s),f(wa,s)}}}const ep='{"title":"전처리","local":"preprocess","sections":[{"title":"자연어처리","local":"natural-language-processing","sections":[{"title":"패딩","local":"pad","sections":[],"depth":3},{"title":"잘라내기","local":"truncation","sections":[],"depth":3},{"title":"텐서 만들기","local":"build-tensors","sections":[],"depth":3}],"depth":2},{"title":"오디오","local":"audio","sections":[],"depth":2},{"title":"컴퓨터 비전","local":"computer-vision","sections":[{"title":"패딩","local":"pad","sections":[],"depth":3}],"depth":2},{"title":"멀티모달","local":"multimodal","sections":[],"depth":2}],"depth":1}';function pp(J){return Re(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ip extends Xe{constructor(t){super(),Ye(this,t,pp,lp,He,{})}}export{ip as component};
