import{s as k,o as z,n as R}from"../chunks/scheduler.56730f09.js";import{S as D,i as F,g as _,s as c,r as C,A as I,h as d,f as a,c as u,j,u as G,x as y,k as q,y as J,a as r,v as H,d as M,t as b,w as L}from"../chunks/index.1f144517.js";import{T as K}from"../chunks/Tip.41e845e5.js";import{H as A}from"../chunks/Heading.57d46534.js";function N(g){let n,i='참고: 다중 GPU 설정은 <a href="./perf_infer_gpu_one">단일 GPU 섹션</a>에서 설명된 대부분의 전략을 사용할 수 있습니다. 그러나 더 나은 활용을 위해 간단한 기법들을 알아야 합니다.';return{c(){n=_("p"),n.innerHTML=i},l(s){n=d(s,"P",{"data-svelte-h":!0}),y(n)!=="svelte-1os2uvu"&&(n.innerHTML=i)},m(s,$){r(s,n,$)},p:R,d(s){s&&a(n)}}}function O(g){let n,i,s,$,f,P,l,E="이 문서에는 다중 GPU에서 효율적으로 추론하는 방법에 대한 정보가 포함되어 있습니다.",v,o,T,m,w,p,B='우리는 최근 텍스트, 이미지 및 오디오 모델에 대한 다중 GPU에서 더 빠른 추론을 위해 <code>BetterTransformer</code>를 통합했습니다. 자세한 내용은 이 통합에 대한 <a href="https://huggingface.co/docs/optimum/bettertransformer/overview" rel="nofollow">문서</a>를 확인하십시오.',x,h,U;return f=new A({props:{title:"다중 GPU에서 효율적인 추론",local:"efficient-inference-on-a-multiple-gpus",headingTag:"h1"}}),o=new K({props:{$$slots:{default:[N]},$$scope:{ctx:g}}}),m=new A({props:{title:"더 빠른 추론을 위한 BetterTransformer",local:"bettertransformer-for-faster-inference",headingTag:"h2"}}),{c(){n=_("meta"),i=c(),s=_("p"),$=c(),C(f.$$.fragment),P=c(),l=_("p"),l.textContent=E,v=c(),C(o.$$.fragment),T=c(),C(m.$$.fragment),w=c(),p=_("p"),p.innerHTML=B,x=c(),h=_("p"),this.h()},l(e){const t=I("svelte-u9bgzb",document.head);n=d(t,"META",{name:!0,content:!0}),t.forEach(a),i=u(e),s=d(e,"P",{}),j(s).forEach(a),$=u(e),G(f.$$.fragment,e),P=u(e),l=d(e,"P",{"data-svelte-h":!0}),y(l)!=="svelte-95d646"&&(l.textContent=E),v=u(e),G(o.$$.fragment,e),T=u(e),G(m.$$.fragment,e),w=u(e),p=d(e,"P",{"data-svelte-h":!0}),y(p)!=="svelte-1yqiwj9"&&(p.innerHTML=B),x=u(e),h=d(e,"P",{}),j(h).forEach(a),this.h()},h(){q(n,"name","hf:doc:metadata"),q(n,"content",Q)},m(e,t){J(document.head,n),r(e,i,t),r(e,s,t),r(e,$,t),H(f,e,t),r(e,P,t),r(e,l,t),r(e,v,t),H(o,e,t),r(e,T,t),H(m,e,t),r(e,w,t),r(e,p,t),r(e,x,t),r(e,h,t),U=!0},p(e,[t]){const S={};t&2&&(S.$$scope={dirty:t,ctx:e}),o.$set(S)},i(e){U||(M(f.$$.fragment,e),M(o.$$.fragment,e),M(m.$$.fragment,e),U=!0)},o(e){b(f.$$.fragment,e),b(o.$$.fragment,e),b(m.$$.fragment,e),U=!1},d(e){e&&(a(i),a(s),a($),a(P),a(l),a(v),a(T),a(w),a(p),a(x),a(h)),a(n),L(f,e),L(o,e),L(m,e)}}}const Q='{"title":"다중 GPU에서 효율적인 추론","local":"efficient-inference-on-a-multiple-gpus","sections":[{"title":"더 빠른 추론을 위한 BetterTransformer","local":"bettertransformer-for-faster-inference","sections":[],"depth":2}],"depth":1}';function V(g){return z(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ee extends D{constructor(n){super(),F(this,n,V,O,k,{})}}export{ee as component};
