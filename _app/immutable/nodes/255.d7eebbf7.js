import{s as nr,o as sr,n as z}from"../chunks/scheduler.9bc65507.js";import{S as or,i as ar,g as p,s as r,r as _,A as rr,h as m,f as i,c as l,j as v,u as M,x as g,k as U,y as o,a as u,v as b,d as y,t as T,w}from"../chunks/index.707bf1b6.js";import{T as Jn}from"../chunks/Tip.c2ecdbf4.js";import{D as R}from"../chunks/Docstring.17db21ae.js";import{C as x}from"../chunks/CodeBlock.54a9f38d.js";import{E as S}from"../chunks/ExampleCodeBlock.4f515aa9.js";import{H as P}from"../chunks/Heading.342b1fa6.js";function lr(k){let n,f="Examples:",a,s,c;return s=new x({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFNxdWVlemVCZXJ0Q29uZmlnJTJDJTIwU3F1ZWV6ZUJlcnRNb2RlbCUwQSUwQSUyMyUyMEluaXRpYWxpemluZyUyMGElMjBTcXVlZXplQkVSVCUyMGNvbmZpZ3VyYXRpb24lMEFjb25maWd1cmF0aW9uJTIwJTNEJTIwU3F1ZWV6ZUJlcnRDb25maWcoKSUwQSUwQSUyMyUyMEluaXRpYWxpemluZyUyMGElMjBtb2RlbCUyMCh3aXRoJTIwcmFuZG9tJTIwd2VpZ2h0cyklMjBmcm9tJTIwdGhlJTIwY29uZmlndXJhdGlvbiUyMGFib3ZlJTBBbW9kZWwlMjAlM0QlMjBTcXVlZXplQmVydE1vZGVsKGNvbmZpZ3VyYXRpb24pJTBBJTBBJTIzJTIwQWNjZXNzaW5nJTIwdGhlJTIwbW9kZWwlMjBjb25maWd1cmF0aW9uJTBBY29uZmlndXJhdGlvbiUyMCUzRCUyMG1vZGVsLmNvbmZpZw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SqueezeBertConfig, SqueezeBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a SqueezeBERT configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = SqueezeBertConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model (with random weights) from the configuration above</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SqueezeBertModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-kvfsh7"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function ir(k){let n,f="pair mask has the following format:",a,s,c;return s=new x({props:{code:"MCUyMDAlMjAwJTIwMCUyMDAlMjAwJTIwMCUyMDAlMjAwJTIwMCUyMDAlMjAxJTIwMSUyMDElMjAxJTIwMSUyMDElMjAxJTIwMSUyMDElMEElN0MlMjBmaXJzdCUyMHNlcXVlbmNlJTIwJTIwJTIwJTIwJTdDJTIwc2Vjb25kJTIwc2VxdWVuY2UlMjAlN0M=",highlighted:`0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1 1
| first sequence    | second sequence |`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-qjgeij"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function dr(k){let n,f="pair mask has the following format:",a,s,c;return s=new x({props:{code:"MCUyMDAlMjAwJTIwMCUyMDAlMjAwJTIwMCUyMDAlMjAwJTIwMCUyMDAlMjAxJTIwMSUyMDElMjAxJTIwMSUyMDElMjAxJTIwMSUyMDElMEElN0MlMjBmaXJzdCUyMHNlcXVlbmNlJTIwJTIwJTIwJTIwJTdDJTIwc2Vjb25kJTIwc2VxdWVuY2UlMjAlN0M=",highlighted:`0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1 1
| first sequence    | second sequence |`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-qjgeij"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function cr(k){let n,f="Hierarchy:",a,s,c;return s=new x({props:{code:"SW50ZXJuYWwlMjBjbGFzcyUyMGhpZXJhcmNoeSUzQSUwQVNxdWVlemVCZXJ0TW9kZWwlMEElMjAlMjAlMjAlMjBTcXVlZXplQmVydEVuY29kZXIlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBTcXVlZXplQmVydE1vZHVsZSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMFNxdWVlemVCZXJ0U2VsZkF0dGVudGlvbiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMENvbnZBY3RpdmF0aW9uJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwQ29udkRyb3BvdXRMYXllck5vcm0=",highlighted:`Internal <span class="hljs-keyword">class</span> <span class="hljs-symbol">hierarchy:
<span class="hljs-symbol">SqueezeBertModel</span></span>
    <span class="hljs-symbol">SqueezeBertEncoder</span>
        <span class="hljs-symbol">SqueezeBertModule</span>
        <span class="hljs-symbol">SqueezeBertSelfAttention</span>
            <span class="hljs-symbol">ConvActivation</span>
            <span class="hljs-symbol">ConvDropoutLayerNorm</span>`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-ddpap"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function pr(k){let n,f="Data layouts:",a,s,c;return s=new x({props:{code:"SW5wdXQlMjBkYXRhJTIwaXMlMjBpbiUyMCU1QmJhdGNoJTJDJTIwc2VxdWVuY2VfbGVuZ3RoJTJDJTIwaGlkZGVuX3NpemUlNUQlMjBmb3JtYXQuJTBBJTBBRGF0YSUyMGluc2lkZSUyMHRoZSUyMGVuY29kZXIlMjBpcyUyMGluJTIwJTVCYmF0Y2glMkMlMjBoaWRkZW5fc2l6ZSUyQyUyMHNlcXVlbmNlX2xlbmd0aCU1RCUyMGZvcm1hdC4lMjBCdXQlMkMlMjBpZiUyMCU2MG91dHB1dF9oaWRkZW5fc3RhdGVzJTIwJTNEJTNEJTIwVHJ1ZSU2MCUyQyUyMHRoZSUyMGRhdGElMjBmcm9tJTIwaW5zaWRlJTIwdGhlJTIwZW5jb2RlciUyMGlzJTIwcmV0dXJuZWQlMjBpbiUyMCU1QmJhdGNoJTJDJTIwc2VxdWVuY2VfbGVuZ3RoJTJDJTIwaGlkZGVuX3NpemUlNUQlMjBmb3JtYXQuJTBBJTBBVGhlJTIwZmluYWwlMjBvdXRwdXQlMjBvZiUyMHRoZSUyMGVuY29kZXIlMjBpcyUyMGluJTIwJTVCYmF0Y2glMkMlMjBzZXF1ZW5jZV9sZW5ndGglMkMlMjBoaWRkZW5fc2l6ZSU1RCUyMGZvcm1hdC4=",highlighted:`<span class="hljs-keyword">Input</span> data <span class="hljs-keyword">is</span> <span class="hljs-keyword">in</span> [batch, sequence_length, hidden_size] <span class="hljs-keyword">format</span>.

Data inside the encoder <span class="hljs-keyword">is</span> <span class="hljs-keyword">in</span> [batch, hidden_size, sequence_length] <span class="hljs-keyword">format</span>. But, <span class="hljs-keyword">if</span> \`output_hidden_states == <span class="hljs-keyword">True</span>\`, the data <span class="hljs-keyword">from</span> inside the encoder <span class="hljs-keyword">is</span> returned <span class="hljs-keyword">in</span> [batch, sequence_length, hidden_size] <span class="hljs-keyword">format</span>.

The final output <span class="hljs-keyword">of</span> the encoder <span class="hljs-keyword">is</span> <span class="hljs-keyword">in</span> [batch, sequence_length, hidden_size] <span class="hljs-keyword">format</span>.`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-5h3nnb"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function mr(k){let n,f=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){n=p("p"),n.innerHTML=f},l(a){n=m(a,"P",{"data-svelte-h":!0}),g(n)!=="svelte-fincs2"&&(n.innerHTML=f)},m(a,s){u(a,n,s)},p:z,d(a){a&&i(n)}}}function ur(k){let n,f="Example:",a,s,c;return s=new x({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMkMlMjBTcXVlZXplQmVydE1vZGVsJTBBaW1wb3J0JTIwdG9yY2glMEElMEF0b2tlbml6ZXIlMjAlM0QlMjBBdXRvVG9rZW5pemVyLmZyb21fcHJldHJhaW5lZCglMjJzcXVlZXplYmVydCUyRnNxdWVlemViZXJ0LXVuY2FzZWQlMjIpJTBBbW9kZWwlMjAlM0QlMjBTcXVlZXplQmVydE1vZGVsLmZyb21fcHJldHJhaW5lZCglMjJzcXVlZXplYmVydCUyRnNxdWVlemViZXJ0LXVuY2FzZWQlMjIpJTBBJTBBaW5wdXRzJTIwJTNEJTIwdG9rZW5pemVyKCUyMkhlbGxvJTJDJTIwbXklMjBkb2clMjBpcyUyMGN1dGUlMjIlMkMlMjByZXR1cm5fdGVuc29ycyUzRCUyMnB0JTIyKSUwQW91dHB1dHMlMjAlM0QlMjBtb2RlbCgqKmlucHV0cyklMEElMEFsYXN0X2hpZGRlbl9zdGF0ZXMlMjAlM0QlMjBvdXRwdXRzLmxhc3RfaGlkZGVuX3N0YXRl",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, SqueezeBertModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;squeezebert/squeezebert-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SqueezeBertModel.from_pretrained(<span class="hljs-string">&quot;squeezebert/squeezebert-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-11lpom8"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function hr(k){let n,f="Hierarchy:",a,s,c;return s=new x({props:{code:"SW50ZXJuYWwlMjBjbGFzcyUyMGhpZXJhcmNoeSUzQSUwQVNxdWVlemVCZXJ0TW9kZWwlMEElMjAlMjAlMjAlMjBTcXVlZXplQmVydEVuY29kZXIlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBTcXVlZXplQmVydE1vZHVsZSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMFNxdWVlemVCZXJ0U2VsZkF0dGVudGlvbiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMENvbnZBY3RpdmF0aW9uJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwQ29udkRyb3BvdXRMYXllck5vcm0=",highlighted:`Internal <span class="hljs-keyword">class</span> <span class="hljs-symbol">hierarchy:
<span class="hljs-symbol">SqueezeBertModel</span></span>
    <span class="hljs-symbol">SqueezeBertEncoder</span>
        <span class="hljs-symbol">SqueezeBertModule</span>
        <span class="hljs-symbol">SqueezeBertSelfAttention</span>
            <span class="hljs-symbol">ConvActivation</span>
            <span class="hljs-symbol">ConvDropoutLayerNorm</span>`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-ddpap"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function fr(k){let n,f="Data layouts:",a,s,c;return s=new x({props:{code:"SW5wdXQlMjBkYXRhJTIwaXMlMjBpbiUyMCU1QmJhdGNoJTJDJTIwc2VxdWVuY2VfbGVuZ3RoJTJDJTIwaGlkZGVuX3NpemUlNUQlMjBmb3JtYXQuJTBBJTBBRGF0YSUyMGluc2lkZSUyMHRoZSUyMGVuY29kZXIlMjBpcyUyMGluJTIwJTVCYmF0Y2glMkMlMjBoaWRkZW5fc2l6ZSUyQyUyMHNlcXVlbmNlX2xlbmd0aCU1RCUyMGZvcm1hdC4lMjBCdXQlMkMlMjBpZiUyMCU2MG91dHB1dF9oaWRkZW5fc3RhdGVzJTIwJTNEJTNEJTIwVHJ1ZSU2MCUyQyUyMHRoZSUyMGRhdGElMjBmcm9tJTIwaW5zaWRlJTIwdGhlJTIwZW5jb2RlciUyMGlzJTIwcmV0dXJuZWQlMjBpbiUyMCU1QmJhdGNoJTJDJTIwc2VxdWVuY2VfbGVuZ3RoJTJDJTIwaGlkZGVuX3NpemUlNUQlMjBmb3JtYXQuJTBBJTBBVGhlJTIwZmluYWwlMjBvdXRwdXQlMjBvZiUyMHRoZSUyMGVuY29kZXIlMjBpcyUyMGluJTIwJTVCYmF0Y2glMkMlMjBzZXF1ZW5jZV9sZW5ndGglMkMlMjBoaWRkZW5fc2l6ZSU1RCUyMGZvcm1hdC4=",highlighted:`<span class="hljs-keyword">Input</span> data <span class="hljs-keyword">is</span> <span class="hljs-keyword">in</span> [batch, sequence_length, hidden_size] <span class="hljs-keyword">format</span>.

Data inside the encoder <span class="hljs-keyword">is</span> <span class="hljs-keyword">in</span> [batch, hidden_size, sequence_length] <span class="hljs-keyword">format</span>. But, <span class="hljs-keyword">if</span> \`output_hidden_states == <span class="hljs-keyword">True</span>\`, the data <span class="hljs-keyword">from</span> inside the encoder <span class="hljs-keyword">is</span> returned <span class="hljs-keyword">in</span> [batch, sequence_length, hidden_size] <span class="hljs-keyword">format</span>.

The final output <span class="hljs-keyword">of</span> the encoder <span class="hljs-keyword">is</span> <span class="hljs-keyword">in</span> [batch, sequence_length, hidden_size] <span class="hljs-keyword">format</span>.`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-5h3nnb"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function gr(k){let n,f=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){n=p("p"),n.innerHTML=f},l(a){n=m(a,"P",{"data-svelte-h":!0}),g(n)!=="svelte-fincs2"&&(n.innerHTML=f)},m(a,s){u(a,n,s)},p:z,d(a){a&&i(n)}}}function _r(k){let n,f="Example:",a,s,c;return s=new x({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMkMlMjBTcXVlZXplQmVydEZvck1hc2tlZExNJTBBaW1wb3J0JTIwdG9yY2glMEElMEF0b2tlbml6ZXIlMjAlM0QlMjBBdXRvVG9rZW5pemVyLmZyb21fcHJldHJhaW5lZCglMjJzcXVlZXplYmVydCUyRnNxdWVlemViZXJ0LXVuY2FzZWQlMjIpJTBBbW9kZWwlMjAlM0QlMjBTcXVlZXplQmVydEZvck1hc2tlZExNLmZyb21fcHJldHJhaW5lZCglMjJzcXVlZXplYmVydCUyRnNxdWVlemViZXJ0LXVuY2FzZWQlMjIpJTBBJTBBaW5wdXRzJTIwJTNEJTIwdG9rZW5pemVyKCUyMlRoZSUyMGNhcGl0YWwlMjBvZiUyMEZyYW5jZSUyMGlzJTIwJTVCTUFTSyU1RC4lMjIlMkMlMjByZXR1cm5fdGVuc29ycyUzRCUyMnB0JTIyKSUwQSUwQXdpdGglMjB0b3JjaC5ub19ncmFkKCklM0ElMEElMjAlMjAlMjAlMjBsb2dpdHMlMjAlM0QlMjBtb2RlbCgqKmlucHV0cykubG9naXRzJTBBJTBBJTIzJTIwcmV0cmlldmUlMjBpbmRleCUyMG9mJTIwJTVCTUFTSyU1RCUwQW1hc2tfdG9rZW5faW5kZXglMjAlM0QlMjAoaW5wdXRzLmlucHV0X2lkcyUyMCUzRCUzRCUyMHRva2VuaXplci5tYXNrX3Rva2VuX2lkKSU1QjAlNUQubm9uemVybyhhc190dXBsZSUzRFRydWUpJTVCMCU1RCUwQSUwQXByZWRpY3RlZF90b2tlbl9pZCUyMCUzRCUyMGxvZ2l0cyU1QjAlMkMlMjBtYXNrX3Rva2VuX2luZGV4JTVELmFyZ21heChheGlzJTNELTEpJTBBJTBBbGFiZWxzJTIwJTNEJTIwdG9rZW5pemVyKCUyMlRoZSUyMGNhcGl0YWwlMjBvZiUyMEZyYW5jZSUyMGlzJTIwUGFyaXMuJTIyJTJDJTIwcmV0dXJuX3RlbnNvcnMlM0QlMjJwdCUyMiklNUIlMjJpbnB1dF9pZHMlMjIlNUQlMEElMjMlMjBtYXNrJTIwbGFiZWxzJTIwb2YlMjBub24tJTVCTUFTSyU1RCUyMHRva2VucyUwQWxhYmVscyUyMCUzRCUyMHRvcmNoLndoZXJlKGlucHV0cy5pbnB1dF9pZHMlMjAlM0QlM0QlMjB0b2tlbml6ZXIubWFza190b2tlbl9pZCUyQyUyMGxhYmVscyUyQyUyMC0xMDApJTBBJTBBb3V0cHV0cyUyMCUzRCUyMG1vZGVsKCoqaW5wdXRzJTJDJTIwbGFiZWxzJTNEbGFiZWxzKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, SqueezeBertForMaskedLM
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;squeezebert/squeezebert-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SqueezeBertForMaskedLM.from_pretrained(<span class="hljs-string">&quot;squeezebert/squeezebert-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;The capital of France is [MASK].&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># retrieve index of [MASK]</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>mask_token_index = (inputs.input_ids == tokenizer.mask_token_id)[<span class="hljs-number">0</span>].nonzero(as_tuple=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_token_id = logits[<span class="hljs-number">0</span>, mask_token_index].argmax(axis=-<span class="hljs-number">1</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>labels = tokenizer(<span class="hljs-string">&quot;The capital of France is Paris.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)[<span class="hljs-string">&quot;input_ids&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># mask labels of non-[MASK] tokens</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>labels = torch.where(inputs.input_ids == tokenizer.mask_token_id, labels, -<span class="hljs-number">100</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, labels=labels)`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-11lpom8"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function Mr(k){let n,f="Hierarchy:",a,s,c;return s=new x({props:{code:"SW50ZXJuYWwlMjBjbGFzcyUyMGhpZXJhcmNoeSUzQSUwQVNxdWVlemVCZXJ0TW9kZWwlMEElMjAlMjAlMjAlMjBTcXVlZXplQmVydEVuY29kZXIlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBTcXVlZXplQmVydE1vZHVsZSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMFNxdWVlemVCZXJ0U2VsZkF0dGVudGlvbiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMENvbnZBY3RpdmF0aW9uJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwQ29udkRyb3BvdXRMYXllck5vcm0=",highlighted:`Internal <span class="hljs-keyword">class</span> <span class="hljs-symbol">hierarchy:
<span class="hljs-symbol">SqueezeBertModel</span></span>
    <span class="hljs-symbol">SqueezeBertEncoder</span>
        <span class="hljs-symbol">SqueezeBertModule</span>
        <span class="hljs-symbol">SqueezeBertSelfAttention</span>
            <span class="hljs-symbol">ConvActivation</span>
            <span class="hljs-symbol">ConvDropoutLayerNorm</span>`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-ddpap"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function br(k){let n,f="Data layouts:",a,s,c;return s=new x({props:{code:"SW5wdXQlMjBkYXRhJTIwaXMlMjBpbiUyMCU1QmJhdGNoJTJDJTIwc2VxdWVuY2VfbGVuZ3RoJTJDJTIwaGlkZGVuX3NpemUlNUQlMjBmb3JtYXQuJTBBJTBBRGF0YSUyMGluc2lkZSUyMHRoZSUyMGVuY29kZXIlMjBpcyUyMGluJTIwJTVCYmF0Y2glMkMlMjBoaWRkZW5fc2l6ZSUyQyUyMHNlcXVlbmNlX2xlbmd0aCU1RCUyMGZvcm1hdC4lMjBCdXQlMkMlMjBpZiUyMCU2MG91dHB1dF9oaWRkZW5fc3RhdGVzJTIwJTNEJTNEJTIwVHJ1ZSU2MCUyQyUyMHRoZSUyMGRhdGElMjBmcm9tJTIwaW5zaWRlJTIwdGhlJTIwZW5jb2RlciUyMGlzJTIwcmV0dXJuZWQlMjBpbiUyMCU1QmJhdGNoJTJDJTIwc2VxdWVuY2VfbGVuZ3RoJTJDJTIwaGlkZGVuX3NpemUlNUQlMjBmb3JtYXQuJTBBJTBBVGhlJTIwZmluYWwlMjBvdXRwdXQlMjBvZiUyMHRoZSUyMGVuY29kZXIlMjBpcyUyMGluJTIwJTVCYmF0Y2glMkMlMjBzZXF1ZW5jZV9sZW5ndGglMkMlMjBoaWRkZW5fc2l6ZSU1RCUyMGZvcm1hdC4=",highlighted:`<span class="hljs-keyword">Input</span> data <span class="hljs-keyword">is</span> <span class="hljs-keyword">in</span> [batch, sequence_length, hidden_size] <span class="hljs-keyword">format</span>.

Data inside the encoder <span class="hljs-keyword">is</span> <span class="hljs-keyword">in</span> [batch, hidden_size, sequence_length] <span class="hljs-keyword">format</span>. But, <span class="hljs-keyword">if</span> \`output_hidden_states == <span class="hljs-keyword">True</span>\`, the data <span class="hljs-keyword">from</span> inside the encoder <span class="hljs-keyword">is</span> returned <span class="hljs-keyword">in</span> [batch, sequence_length, hidden_size] <span class="hljs-keyword">format</span>.

The final output <span class="hljs-keyword">of</span> the encoder <span class="hljs-keyword">is</span> <span class="hljs-keyword">in</span> [batch, sequence_length, hidden_size] <span class="hljs-keyword">format</span>.`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-5h3nnb"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function yr(k){let n,f=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){n=p("p"),n.innerHTML=f},l(a){n=m(a,"P",{"data-svelte-h":!0}),g(n)!=="svelte-fincs2"&&(n.innerHTML=f)},m(a,s){u(a,n,s)},p:z,d(a){a&&i(n)}}}function Tr(k){let n,f="Example of single-label classification:",a,s,c;return s=new x({props:{code:"aW1wb3J0JTIwdG9yY2glMEFmcm9tJTIwdHJhbnNmb3JtZXJzJTIwaW1wb3J0JTIwQXV0b1Rva2VuaXplciUyQyUyMFNxdWVlemVCZXJ0Rm9yU2VxdWVuY2VDbGFzc2lmaWNhdGlvbiUwQSUwQXRva2VuaXplciUyMCUzRCUyMEF1dG9Ub2tlbml6ZXIuZnJvbV9wcmV0cmFpbmVkKCUyMnNxdWVlemViZXJ0JTJGc3F1ZWV6ZWJlcnQtdW5jYXNlZCUyMiklMEFtb2RlbCUyMCUzRCUyMFNxdWVlemVCZXJ0Rm9yU2VxdWVuY2VDbGFzc2lmaWNhdGlvbi5mcm9tX3ByZXRyYWluZWQoJTIyc3F1ZWV6ZWJlcnQlMkZzcXVlZXplYmVydC11bmNhc2VkJTIyKSUwQSUwQWlucHV0cyUyMCUzRCUyMHRva2VuaXplciglMjJIZWxsbyUyQyUyMG15JTIwZG9nJTIwaXMlMjBjdXRlJTIyJTJDJTIwcmV0dXJuX3RlbnNvcnMlM0QlMjJwdCUyMiklMEElMEF3aXRoJTIwdG9yY2gubm9fZ3JhZCgpJTNBJTBBJTIwJTIwJTIwJTIwbG9naXRzJTIwJTNEJTIwbW9kZWwoKippbnB1dHMpLmxvZ2l0cyUwQSUwQXByZWRpY3RlZF9jbGFzc19pZCUyMCUzRCUyMGxvZ2l0cy5hcmdtYXgoKS5pdGVtKCklMEElMEElMjMlMjBUbyUyMHRyYWluJTIwYSUyMG1vZGVsJTIwb24lMjAlNjBudW1fbGFiZWxzJTYwJTIwY2xhc3NlcyUyQyUyMHlvdSUyMGNhbiUyMHBhc3MlMjAlNjBudW1fbGFiZWxzJTNEbnVtX2xhYmVscyU2MCUyMHRvJTIwJTYwLmZyb21fcHJldHJhaW5lZCguLi4pJTYwJTBBbnVtX2xhYmVscyUyMCUzRCUyMGxlbihtb2RlbC5jb25maWcuaWQybGFiZWwpJTBBbW9kZWwlMjAlM0QlMjBTcXVlZXplQmVydEZvclNlcXVlbmNlQ2xhc3NpZmljYXRpb24uZnJvbV9wcmV0cmFpbmVkKCUyMnNxdWVlemViZXJ0JTJGc3F1ZWV6ZWJlcnQtdW5jYXNlZCUyMiUyQyUyMG51bV9sYWJlbHMlM0RudW1fbGFiZWxzKSUwQSUwQWxhYmVscyUyMCUzRCUyMHRvcmNoLnRlbnNvciglNUIxJTVEKSUwQWxvc3MlMjAlM0QlMjBtb2RlbCgqKmlucHV0cyUyQyUyMGxhYmVscyUzRGxhYmVscykubG9zcw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, SqueezeBertForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;squeezebert/squeezebert-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SqueezeBertForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;squeezebert/squeezebert-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_class_id = logits.argmax().item()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># To train a model on \`num_labels\` classes, you can pass \`num_labels=num_labels\` to \`.from_pretrained(...)\`</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>num_labels = <span class="hljs-built_in">len</span>(model.config.id2label)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SqueezeBertForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;squeezebert/squeezebert-uncased&quot;</span>, num_labels=num_labels)

<span class="hljs-meta">&gt;&gt;&gt; </span>labels = torch.tensor([<span class="hljs-number">1</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = model(**inputs, labels=labels).loss`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-ykxpe4"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function wr(k){let n,f="Example of multi-label classification:",a,s,c;return s=new x({props:{code:"aW1wb3J0JTIwdG9yY2glMEFmcm9tJTIwdHJhbnNmb3JtZXJzJTIwaW1wb3J0JTIwQXV0b1Rva2VuaXplciUyQyUyMFNxdWVlemVCZXJ0Rm9yU2VxdWVuY2VDbGFzc2lmaWNhdGlvbiUwQSUwQXRva2VuaXplciUyMCUzRCUyMEF1dG9Ub2tlbml6ZXIuZnJvbV9wcmV0cmFpbmVkKCUyMnNxdWVlemViZXJ0JTJGc3F1ZWV6ZWJlcnQtdW5jYXNlZCUyMiklMEFtb2RlbCUyMCUzRCUyMFNxdWVlemVCZXJ0Rm9yU2VxdWVuY2VDbGFzc2lmaWNhdGlvbi5mcm9tX3ByZXRyYWluZWQoJTIyc3F1ZWV6ZWJlcnQlMkZzcXVlZXplYmVydC11bmNhc2VkJTIyJTJDJTIwcHJvYmxlbV90eXBlJTNEJTIybXVsdGlfbGFiZWxfY2xhc3NpZmljYXRpb24lMjIpJTBBJTBBaW5wdXRzJTIwJTNEJTIwdG9rZW5pemVyKCUyMkhlbGxvJTJDJTIwbXklMjBkb2clMjBpcyUyMGN1dGUlMjIlMkMlMjByZXR1cm5fdGVuc29ycyUzRCUyMnB0JTIyKSUwQSUwQXdpdGglMjB0b3JjaC5ub19ncmFkKCklM0ElMEElMjAlMjAlMjAlMjBsb2dpdHMlMjAlM0QlMjBtb2RlbCgqKmlucHV0cykubG9naXRzJTBBJTBBcHJlZGljdGVkX2NsYXNzX2lkcyUyMCUzRCUyMHRvcmNoLmFyYW5nZSgwJTJDJTIwbG9naXRzLnNoYXBlJTVCLTElNUQpJTVCdG9yY2guc2lnbW9pZChsb2dpdHMpLnNxdWVlemUoZGltJTNEMCklMjAlM0UlMjAwLjUlNUQlMEElMEElMjMlMjBUbyUyMHRyYWluJTIwYSUyMG1vZGVsJTIwb24lMjAlNjBudW1fbGFiZWxzJTYwJTIwY2xhc3NlcyUyQyUyMHlvdSUyMGNhbiUyMHBhc3MlMjAlNjBudW1fbGFiZWxzJTNEbnVtX2xhYmVscyU2MCUyMHRvJTIwJTYwLmZyb21fcHJldHJhaW5lZCguLi4pJTYwJTBBbnVtX2xhYmVscyUyMCUzRCUyMGxlbihtb2RlbC5jb25maWcuaWQybGFiZWwpJTBBbW9kZWwlMjAlM0QlMjBTcXVlZXplQmVydEZvclNlcXVlbmNlQ2xhc3NpZmljYXRpb24uZnJvbV9wcmV0cmFpbmVkKCUwQSUyMCUyMCUyMCUyMCUyMnNxdWVlemViZXJ0JTJGc3F1ZWV6ZWJlcnQtdW5jYXNlZCUyMiUyQyUyMG51bV9sYWJlbHMlM0RudW1fbGFiZWxzJTJDJTIwcHJvYmxlbV90eXBlJTNEJTIybXVsdGlfbGFiZWxfY2xhc3NpZmljYXRpb24lMjIlMEEpJTBBJTBBbGFiZWxzJTIwJTNEJTIwdG9yY2guc3VtKCUwQSUyMCUyMCUyMCUyMHRvcmNoLm5uLmZ1bmN0aW9uYWwub25lX2hvdChwcmVkaWN0ZWRfY2xhc3NfaWRzJTVCTm9uZSUyQyUyMCUzQSU1RC5jbG9uZSgpJTJDJTIwbnVtX2NsYXNzZXMlM0RudW1fbGFiZWxzKSUyQyUyMGRpbSUzRDElMEEpLnRvKHRvcmNoLmZsb2F0KSUwQWxvc3MlMjAlM0QlMjBtb2RlbCgqKmlucHV0cyUyQyUyMGxhYmVscyUzRGxhYmVscykubG9zcw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, SqueezeBertForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;squeezebert/squeezebert-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SqueezeBertForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;squeezebert/squeezebert-uncased&quot;</span>, problem_type=<span class="hljs-string">&quot;multi_label_classification&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_class_ids = torch.arange(<span class="hljs-number">0</span>, logits.shape[-<span class="hljs-number">1</span>])[torch.sigmoid(logits).squeeze(dim=<span class="hljs-number">0</span>) &gt; <span class="hljs-number">0.5</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># To train a model on \`num_labels\` classes, you can pass \`num_labels=num_labels\` to \`.from_pretrained(...)\`</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>num_labels = <span class="hljs-built_in">len</span>(model.config.id2label)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SqueezeBertForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;squeezebert/squeezebert-uncased&quot;</span>, num_labels=num_labels, problem_type=<span class="hljs-string">&quot;multi_label_classification&quot;</span>
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>labels = torch.<span class="hljs-built_in">sum</span>(
<span class="hljs-meta">... </span>    torch.nn.functional.one_hot(predicted_class_ids[<span class="hljs-literal">None</span>, :].clone(), num_classes=num_labels), dim=<span class="hljs-number">1</span>
<span class="hljs-meta">... </span>).to(torch.<span class="hljs-built_in">float</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = model(**inputs, labels=labels).loss`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-1l8e32d"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function kr(k){let n,f="Hierarchy:",a,s,c;return s=new x({props:{code:"SW50ZXJuYWwlMjBjbGFzcyUyMGhpZXJhcmNoeSUzQSUwQVNxdWVlemVCZXJ0TW9kZWwlMEElMjAlMjAlMjAlMjBTcXVlZXplQmVydEVuY29kZXIlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBTcXVlZXplQmVydE1vZHVsZSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMFNxdWVlemVCZXJ0U2VsZkF0dGVudGlvbiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMENvbnZBY3RpdmF0aW9uJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwQ29udkRyb3BvdXRMYXllck5vcm0=",highlighted:`Internal <span class="hljs-keyword">class</span> <span class="hljs-symbol">hierarchy:
<span class="hljs-symbol">SqueezeBertModel</span></span>
    <span class="hljs-symbol">SqueezeBertEncoder</span>
        <span class="hljs-symbol">SqueezeBertModule</span>
        <span class="hljs-symbol">SqueezeBertSelfAttention</span>
            <span class="hljs-symbol">ConvActivation</span>
            <span class="hljs-symbol">ConvDropoutLayerNorm</span>`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-ddpap"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function zr(k){let n,f="Data layouts:",a,s,c;return s=new x({props:{code:"SW5wdXQlMjBkYXRhJTIwaXMlMjBpbiUyMCU1QmJhdGNoJTJDJTIwc2VxdWVuY2VfbGVuZ3RoJTJDJTIwaGlkZGVuX3NpemUlNUQlMjBmb3JtYXQuJTBBJTBBRGF0YSUyMGluc2lkZSUyMHRoZSUyMGVuY29kZXIlMjBpcyUyMGluJTIwJTVCYmF0Y2glMkMlMjBoaWRkZW5fc2l6ZSUyQyUyMHNlcXVlbmNlX2xlbmd0aCU1RCUyMGZvcm1hdC4lMjBCdXQlMkMlMjBpZiUyMCU2MG91dHB1dF9oaWRkZW5fc3RhdGVzJTIwJTNEJTNEJTIwVHJ1ZSU2MCUyQyUyMHRoZSUyMGRhdGElMjBmcm9tJTIwaW5zaWRlJTIwdGhlJTIwZW5jb2RlciUyMGlzJTIwcmV0dXJuZWQlMjBpbiUyMCU1QmJhdGNoJTJDJTIwc2VxdWVuY2VfbGVuZ3RoJTJDJTIwaGlkZGVuX3NpemUlNUQlMjBmb3JtYXQuJTBBJTBBVGhlJTIwZmluYWwlMjBvdXRwdXQlMjBvZiUyMHRoZSUyMGVuY29kZXIlMjBpcyUyMGluJTIwJTVCYmF0Y2glMkMlMjBzZXF1ZW5jZV9sZW5ndGglMkMlMjBoaWRkZW5fc2l6ZSU1RCUyMGZvcm1hdC4=",highlighted:`<span class="hljs-keyword">Input</span> data <span class="hljs-keyword">is</span> <span class="hljs-keyword">in</span> [batch, sequence_length, hidden_size] <span class="hljs-keyword">format</span>.

Data inside the encoder <span class="hljs-keyword">is</span> <span class="hljs-keyword">in</span> [batch, hidden_size, sequence_length] <span class="hljs-keyword">format</span>. But, <span class="hljs-keyword">if</span> \`output_hidden_states == <span class="hljs-keyword">True</span>\`, the data <span class="hljs-keyword">from</span> inside the encoder <span class="hljs-keyword">is</span> returned <span class="hljs-keyword">in</span> [batch, sequence_length, hidden_size] <span class="hljs-keyword">format</span>.

The final output <span class="hljs-keyword">of</span> the encoder <span class="hljs-keyword">is</span> <span class="hljs-keyword">in</span> [batch, sequence_length, hidden_size] <span class="hljs-keyword">format</span>.`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-5h3nnb"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function $r(k){let n,f=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){n=p("p"),n.innerHTML=f},l(a){n=m(a,"P",{"data-svelte-h":!0}),g(n)!=="svelte-fincs2"&&(n.innerHTML=f)},m(a,s){u(a,n,s)},p:z,d(a){a&&i(n)}}}function jr(k){let n,f="Example:",a,s,c;return s=new x({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMkMlMjBTcXVlZXplQmVydEZvck11bHRpcGxlQ2hvaWNlJTBBaW1wb3J0JTIwdG9yY2glMEElMEF0b2tlbml6ZXIlMjAlM0QlMjBBdXRvVG9rZW5pemVyLmZyb21fcHJldHJhaW5lZCglMjJzcXVlZXplYmVydCUyRnNxdWVlemViZXJ0LXVuY2FzZWQlMjIpJTBBbW9kZWwlMjAlM0QlMjBTcXVlZXplQmVydEZvck11bHRpcGxlQ2hvaWNlLmZyb21fcHJldHJhaW5lZCglMjJzcXVlZXplYmVydCUyRnNxdWVlemViZXJ0LXVuY2FzZWQlMjIpJTBBJTBBcHJvbXB0JTIwJTNEJTIwJTIySW4lMjBJdGFseSUyQyUyMHBpenphJTIwc2VydmVkJTIwaW4lMjBmb3JtYWwlMjBzZXR0aW5ncyUyQyUyMHN1Y2glMjBhcyUyMGF0JTIwYSUyMHJlc3RhdXJhbnQlMkMlMjBpcyUyMHByZXNlbnRlZCUyMHVuc2xpY2VkLiUyMiUwQWNob2ljZTAlMjAlM0QlMjAlMjJJdCUyMGlzJTIwZWF0ZW4lMjB3aXRoJTIwYSUyMGZvcmslMjBhbmQlMjBhJTIwa25pZmUuJTIyJTBBY2hvaWNlMSUyMCUzRCUyMCUyMkl0JTIwaXMlMjBlYXRlbiUyMHdoaWxlJTIwaGVsZCUyMGluJTIwdGhlJTIwaGFuZC4lMjIlMEFsYWJlbHMlMjAlM0QlMjB0b3JjaC50ZW5zb3IoMCkudW5zcXVlZXplKDApJTIwJTIwJTIzJTIwY2hvaWNlMCUyMGlzJTIwY29ycmVjdCUyMChhY2NvcmRpbmclMjB0byUyMFdpa2lwZWRpYSUyMCUzQikpJTJDJTIwYmF0Y2glMjBzaXplJTIwMSUwQSUwQWVuY29kaW5nJTIwJTNEJTIwdG9rZW5pemVyKCU1QnByb21wdCUyQyUyMHByb21wdCU1RCUyQyUyMCU1QmNob2ljZTAlMkMlMjBjaG9pY2UxJTVEJTJDJTIwcmV0dXJuX3RlbnNvcnMlM0QlMjJwdCUyMiUyQyUyMHBhZGRpbmclM0RUcnVlKSUwQW91dHB1dHMlMjAlM0QlMjBtb2RlbCgqKiU3QmslM0ElMjB2LnVuc3F1ZWV6ZSgwKSUyMGZvciUyMGslMkMlMjB2JTIwaW4lMjBlbmNvZGluZy5pdGVtcygpJTdEJTJDJTIwbGFiZWxzJTNEbGFiZWxzKSUyMCUyMCUyMyUyMGJhdGNoJTIwc2l6ZSUyMGlzJTIwMSUwQSUwQSUyMyUyMHRoZSUyMGxpbmVhciUyMGNsYXNzaWZpZXIlMjBzdGlsbCUyMG5lZWRzJTIwdG8lMjBiZSUyMHRyYWluZWQlMEFsb3NzJTIwJTNEJTIwb3V0cHV0cy5sb3NzJTBBbG9naXRzJTIwJTNEJTIwb3V0cHV0cy5sb2dpdHM=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, SqueezeBertForMultipleChoice
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;squeezebert/squeezebert-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SqueezeBertForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;squeezebert/squeezebert-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>prompt = <span class="hljs-string">&quot;In Italy, pizza served in formal settings, such as at a restaurant, is presented unsliced.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>choice0 = <span class="hljs-string">&quot;It is eaten with a fork and a knife.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>choice1 = <span class="hljs-string">&quot;It is eaten while held in the hand.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>labels = torch.tensor(<span class="hljs-number">0</span>).unsqueeze(<span class="hljs-number">0</span>)  <span class="hljs-comment"># choice0 is correct (according to Wikipedia ;)), batch size 1</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>encoding = tokenizer([prompt, prompt], [choice0, choice1], return_tensors=<span class="hljs-string">&quot;pt&quot;</span>, padding=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**{k: v.unsqueeze(<span class="hljs-number">0</span>) <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> encoding.items()}, labels=labels)  <span class="hljs-comment"># batch size is 1</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># the linear classifier still needs to be trained</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-11lpom8"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function Br(k){let n,f="Hierarchy:",a,s,c;return s=new x({props:{code:"SW50ZXJuYWwlMjBjbGFzcyUyMGhpZXJhcmNoeSUzQSUwQVNxdWVlemVCZXJ0TW9kZWwlMEElMjAlMjAlMjAlMjBTcXVlZXplQmVydEVuY29kZXIlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBTcXVlZXplQmVydE1vZHVsZSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMFNxdWVlemVCZXJ0U2VsZkF0dGVudGlvbiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMENvbnZBY3RpdmF0aW9uJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwQ29udkRyb3BvdXRMYXllck5vcm0=",highlighted:`Internal <span class="hljs-keyword">class</span> <span class="hljs-symbol">hierarchy:
<span class="hljs-symbol">SqueezeBertModel</span></span>
    <span class="hljs-symbol">SqueezeBertEncoder</span>
        <span class="hljs-symbol">SqueezeBertModule</span>
        <span class="hljs-symbol">SqueezeBertSelfAttention</span>
            <span class="hljs-symbol">ConvActivation</span>
            <span class="hljs-symbol">ConvDropoutLayerNorm</span>`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-ddpap"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function qr(k){let n,f="Data layouts:",a,s,c;return s=new x({props:{code:"SW5wdXQlMjBkYXRhJTIwaXMlMjBpbiUyMCU1QmJhdGNoJTJDJTIwc2VxdWVuY2VfbGVuZ3RoJTJDJTIwaGlkZGVuX3NpemUlNUQlMjBmb3JtYXQuJTBBJTBBRGF0YSUyMGluc2lkZSUyMHRoZSUyMGVuY29kZXIlMjBpcyUyMGluJTIwJTVCYmF0Y2glMkMlMjBoaWRkZW5fc2l6ZSUyQyUyMHNlcXVlbmNlX2xlbmd0aCU1RCUyMGZvcm1hdC4lMjBCdXQlMkMlMjBpZiUyMCU2MG91dHB1dF9oaWRkZW5fc3RhdGVzJTIwJTNEJTNEJTIwVHJ1ZSU2MCUyQyUyMHRoZSUyMGRhdGElMjBmcm9tJTIwaW5zaWRlJTIwdGhlJTIwZW5jb2RlciUyMGlzJTIwcmV0dXJuZWQlMjBpbiUyMCU1QmJhdGNoJTJDJTIwc2VxdWVuY2VfbGVuZ3RoJTJDJTIwaGlkZGVuX3NpemUlNUQlMjBmb3JtYXQuJTBBJTBBVGhlJTIwZmluYWwlMjBvdXRwdXQlMjBvZiUyMHRoZSUyMGVuY29kZXIlMjBpcyUyMGluJTIwJTVCYmF0Y2glMkMlMjBzZXF1ZW5jZV9sZW5ndGglMkMlMjBoaWRkZW5fc2l6ZSU1RCUyMGZvcm1hdC4=",highlighted:`<span class="hljs-keyword">Input</span> data <span class="hljs-keyword">is</span> <span class="hljs-keyword">in</span> [batch, sequence_length, hidden_size] <span class="hljs-keyword">format</span>.

Data inside the encoder <span class="hljs-keyword">is</span> <span class="hljs-keyword">in</span> [batch, hidden_size, sequence_length] <span class="hljs-keyword">format</span>. But, <span class="hljs-keyword">if</span> \`output_hidden_states == <span class="hljs-keyword">True</span>\`, the data <span class="hljs-keyword">from</span> inside the encoder <span class="hljs-keyword">is</span> returned <span class="hljs-keyword">in</span> [batch, sequence_length, hidden_size] <span class="hljs-keyword">format</span>.

The final output <span class="hljs-keyword">of</span> the encoder <span class="hljs-keyword">is</span> <span class="hljs-keyword">in</span> [batch, sequence_length, hidden_size] <span class="hljs-keyword">format</span>.`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-5h3nnb"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function Jr(k){let n,f=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){n=p("p"),n.innerHTML=f},l(a){n=m(a,"P",{"data-svelte-h":!0}),g(n)!=="svelte-fincs2"&&(n.innerHTML=f)},m(a,s){u(a,n,s)},p:z,d(a){a&&i(n)}}}function Cr(k){let n,f="Example:",a,s,c;return s=new x({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMkMlMjBTcXVlZXplQmVydEZvclRva2VuQ2xhc3NpZmljYXRpb24lMEFpbXBvcnQlMjB0b3JjaCUwQSUwQXRva2VuaXplciUyMCUzRCUyMEF1dG9Ub2tlbml6ZXIuZnJvbV9wcmV0cmFpbmVkKCUyMnNxdWVlemViZXJ0JTJGc3F1ZWV6ZWJlcnQtdW5jYXNlZCUyMiklMEFtb2RlbCUyMCUzRCUyMFNxdWVlemVCZXJ0Rm9yVG9rZW5DbGFzc2lmaWNhdGlvbi5mcm9tX3ByZXRyYWluZWQoJTIyc3F1ZWV6ZWJlcnQlMkZzcXVlZXplYmVydC11bmNhc2VkJTIyKSUwQSUwQWlucHV0cyUyMCUzRCUyMHRva2VuaXplciglMEElMjAlMjAlMjAlMjAlMjJIdWdnaW5nRmFjZSUyMGlzJTIwYSUyMGNvbXBhbnklMjBiYXNlZCUyMGluJTIwUGFyaXMlMjBhbmQlMjBOZXclMjBZb3JrJTIyJTJDJTIwYWRkX3NwZWNpYWxfdG9rZW5zJTNERmFsc2UlMkMlMjByZXR1cm5fdGVuc29ycyUzRCUyMnB0JTIyJTBBKSUwQSUwQXdpdGglMjB0b3JjaC5ub19ncmFkKCklM0ElMEElMjAlMjAlMjAlMjBsb2dpdHMlMjAlM0QlMjBtb2RlbCgqKmlucHV0cykubG9naXRzJTBBJTBBcHJlZGljdGVkX3Rva2VuX2NsYXNzX2lkcyUyMCUzRCUyMGxvZ2l0cy5hcmdtYXgoLTEpJTBBJTBBJTIzJTIwTm90ZSUyMHRoYXQlMjB0b2tlbnMlMjBhcmUlMjBjbGFzc2lmaWVkJTIwcmF0aGVyJTIwdGhlbiUyMGlucHV0JTIwd29yZHMlMjB3aGljaCUyMG1lYW5zJTIwdGhhdCUwQSUyMyUyMHRoZXJlJTIwbWlnaHQlMjBiZSUyMG1vcmUlMjBwcmVkaWN0ZWQlMjB0b2tlbiUyMGNsYXNzZXMlMjB0aGFuJTIwd29yZHMuJTBBJTIzJTIwTXVsdGlwbGUlMjB0b2tlbiUyMGNsYXNzZXMlMjBtaWdodCUyMGFjY291bnQlMjBmb3IlMjB0aGUlMjBzYW1lJTIwd29yZCUwQXByZWRpY3RlZF90b2tlbnNfY2xhc3NlcyUyMCUzRCUyMCU1Qm1vZGVsLmNvbmZpZy5pZDJsYWJlbCU1QnQuaXRlbSgpJTVEJTIwZm9yJTIwdCUyMGluJTIwcHJlZGljdGVkX3Rva2VuX2NsYXNzX2lkcyU1QjAlNUQlNUQlMEElMEFsYWJlbHMlMjAlM0QlMjBwcmVkaWN0ZWRfdG9rZW5fY2xhc3NfaWRzJTBBbG9zcyUyMCUzRCUyMG1vZGVsKCoqaW5wdXRzJTJDJTIwbGFiZWxzJTNEbGFiZWxzKS5sb3Nz",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, SqueezeBertForTokenClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;squeezebert/squeezebert-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SqueezeBertForTokenClassification.from_pretrained(<span class="hljs-string">&quot;squeezebert/squeezebert-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;HuggingFace is a company based in Paris and New York&quot;</span>, add_special_tokens=<span class="hljs-literal">False</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_token_class_ids = logits.argmax(-<span class="hljs-number">1</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Note that tokens are classified rather then input words which means that</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># there might be more predicted token classes than words.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Multiple token classes might account for the same word</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_tokens_classes = [model.config.id2label[t.item()] <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> predicted_token_class_ids[<span class="hljs-number">0</span>]]

<span class="hljs-meta">&gt;&gt;&gt; </span>labels = predicted_token_class_ids
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = model(**inputs, labels=labels).loss`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-11lpom8"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function vr(k){let n,f="Hierarchy:",a,s,c;return s=new x({props:{code:"SW50ZXJuYWwlMjBjbGFzcyUyMGhpZXJhcmNoeSUzQSUwQVNxdWVlemVCZXJ0TW9kZWwlMEElMjAlMjAlMjAlMjBTcXVlZXplQmVydEVuY29kZXIlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBTcXVlZXplQmVydE1vZHVsZSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMFNxdWVlemVCZXJ0U2VsZkF0dGVudGlvbiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMENvbnZBY3RpdmF0aW9uJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwQ29udkRyb3BvdXRMYXllck5vcm0=",highlighted:`Internal <span class="hljs-keyword">class</span> <span class="hljs-symbol">hierarchy:
<span class="hljs-symbol">SqueezeBertModel</span></span>
    <span class="hljs-symbol">SqueezeBertEncoder</span>
        <span class="hljs-symbol">SqueezeBertModule</span>
        <span class="hljs-symbol">SqueezeBertSelfAttention</span>
            <span class="hljs-symbol">ConvActivation</span>
            <span class="hljs-symbol">ConvDropoutLayerNorm</span>`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-ddpap"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function Ur(k){let n,f="Data layouts:",a,s,c;return s=new x({props:{code:"SW5wdXQlMjBkYXRhJTIwaXMlMjBpbiUyMCU1QmJhdGNoJTJDJTIwc2VxdWVuY2VfbGVuZ3RoJTJDJTIwaGlkZGVuX3NpemUlNUQlMjBmb3JtYXQuJTBBJTBBRGF0YSUyMGluc2lkZSUyMHRoZSUyMGVuY29kZXIlMjBpcyUyMGluJTIwJTVCYmF0Y2glMkMlMjBoaWRkZW5fc2l6ZSUyQyUyMHNlcXVlbmNlX2xlbmd0aCU1RCUyMGZvcm1hdC4lMjBCdXQlMkMlMjBpZiUyMCU2MG91dHB1dF9oaWRkZW5fc3RhdGVzJTIwJTNEJTNEJTIwVHJ1ZSU2MCUyQyUyMHRoZSUyMGRhdGElMjBmcm9tJTIwaW5zaWRlJTIwdGhlJTIwZW5jb2RlciUyMGlzJTIwcmV0dXJuZWQlMjBpbiUyMCU1QmJhdGNoJTJDJTIwc2VxdWVuY2VfbGVuZ3RoJTJDJTIwaGlkZGVuX3NpemUlNUQlMjBmb3JtYXQuJTBBJTBBVGhlJTIwZmluYWwlMjBvdXRwdXQlMjBvZiUyMHRoZSUyMGVuY29kZXIlMjBpcyUyMGluJTIwJTVCYmF0Y2glMkMlMjBzZXF1ZW5jZV9sZW5ndGglMkMlMjBoaWRkZW5fc2l6ZSU1RCUyMGZvcm1hdC4=",highlighted:`<span class="hljs-keyword">Input</span> data <span class="hljs-keyword">is</span> <span class="hljs-keyword">in</span> [batch, sequence_length, hidden_size] <span class="hljs-keyword">format</span>.

Data inside the encoder <span class="hljs-keyword">is</span> <span class="hljs-keyword">in</span> [batch, hidden_size, sequence_length] <span class="hljs-keyword">format</span>. But, <span class="hljs-keyword">if</span> \`output_hidden_states == <span class="hljs-keyword">True</span>\`, the data <span class="hljs-keyword">from</span> inside the encoder <span class="hljs-keyword">is</span> returned <span class="hljs-keyword">in</span> [batch, sequence_length, hidden_size] <span class="hljs-keyword">format</span>.

The final output <span class="hljs-keyword">of</span> the encoder <span class="hljs-keyword">is</span> <span class="hljs-keyword">in</span> [batch, sequence_length, hidden_size] <span class="hljs-keyword">format</span>.`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-5h3nnb"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function Sr(k){let n,f=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){n=p("p"),n.innerHTML=f},l(a){n=m(a,"P",{"data-svelte-h":!0}),g(n)!=="svelte-fincs2"&&(n.innerHTML=f)},m(a,s){u(a,n,s)},p:z,d(a){a&&i(n)}}}function xr(k){let n,f="Example:",a,s,c;return s=new x({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMkMlMjBTcXVlZXplQmVydEZvclF1ZXN0aW9uQW5zd2VyaW5nJTBBaW1wb3J0JTIwdG9yY2glMEElMEF0b2tlbml6ZXIlMjAlM0QlMjBBdXRvVG9rZW5pemVyLmZyb21fcHJldHJhaW5lZCglMjJzcXVlZXplYmVydCUyRnNxdWVlemViZXJ0LXVuY2FzZWQlMjIpJTBBbW9kZWwlMjAlM0QlMjBTcXVlZXplQmVydEZvclF1ZXN0aW9uQW5zd2VyaW5nLmZyb21fcHJldHJhaW5lZCglMjJzcXVlZXplYmVydCUyRnNxdWVlemViZXJ0LXVuY2FzZWQlMjIpJTBBJTBBcXVlc3Rpb24lMkMlMjB0ZXh0JTIwJTNEJTIwJTIyV2hvJTIwd2FzJTIwSmltJTIwSGVuc29uJTNGJTIyJTJDJTIwJTIySmltJTIwSGVuc29uJTIwd2FzJTIwYSUyMG5pY2UlMjBwdXBwZXQlMjIlMEElMEFpbnB1dHMlMjAlM0QlMjB0b2tlbml6ZXIocXVlc3Rpb24lMkMlMjB0ZXh0JTJDJTIwcmV0dXJuX3RlbnNvcnMlM0QlMjJwdCUyMiklMEF3aXRoJTIwdG9yY2gubm9fZ3JhZCgpJTNBJTBBJTIwJTIwJTIwJTIwb3V0cHV0cyUyMCUzRCUyMG1vZGVsKCoqaW5wdXRzKSUwQSUwQWFuc3dlcl9zdGFydF9pbmRleCUyMCUzRCUyMG91dHB1dHMuc3RhcnRfbG9naXRzLmFyZ21heCgpJTBBYW5zd2VyX2VuZF9pbmRleCUyMCUzRCUyMG91dHB1dHMuZW5kX2xvZ2l0cy5hcmdtYXgoKSUwQSUwQXByZWRpY3RfYW5zd2VyX3Rva2VucyUyMCUzRCUyMGlucHV0cy5pbnB1dF9pZHMlNUIwJTJDJTIwYW5zd2VyX3N0YXJ0X2luZGV4JTIwJTNBJTIwYW5zd2VyX2VuZF9pbmRleCUyMCUyQiUyMDElNUQlMEElMEElMjMlMjB0YXJnZXQlMjBpcyUyMCUyMm5pY2UlMjBwdXBwZXQlMjIlMEF0YXJnZXRfc3RhcnRfaW5kZXglMjAlM0QlMjB0b3JjaC50ZW5zb3IoJTVCMTQlNUQpJTBBdGFyZ2V0X2VuZF9pbmRleCUyMCUzRCUyMHRvcmNoLnRlbnNvciglNUIxNSU1RCklMEElMEFvdXRwdXRzJTIwJTNEJTIwbW9kZWwoKippbnB1dHMlMkMlMjBzdGFydF9wb3NpdGlvbnMlM0R0YXJnZXRfc3RhcnRfaW5kZXglMkMlMjBlbmRfcG9zaXRpb25zJTNEdGFyZ2V0X2VuZF9pbmRleCklMEFsb3NzJTIwJTNEJTIwb3V0cHV0cy5sb3Nz",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, SqueezeBertForQuestionAnswering
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;squeezebert/squeezebert-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SqueezeBertForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;squeezebert/squeezebert-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>question, text = <span class="hljs-string">&quot;Who was Jim Henson?&quot;</span>, <span class="hljs-string">&quot;Jim Henson was a nice puppet&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(question, text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>answer_start_index = outputs.start_logits.argmax()
<span class="hljs-meta">&gt;&gt;&gt; </span>answer_end_index = outputs.end_logits.argmax()

<span class="hljs-meta">&gt;&gt;&gt; </span>predict_answer_tokens = inputs.input_ids[<span class="hljs-number">0</span>, answer_start_index : answer_end_index + <span class="hljs-number">1</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># target is &quot;nice puppet&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>target_start_index = torch.tensor([<span class="hljs-number">14</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>target_end_index = torch.tensor([<span class="hljs-number">15</span>])

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, start_positions=target_start_index, end_positions=target_end_index)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss`,wrap:!1}}),{c(){n=p("p"),n.textContent=f,a=r(),_(s.$$.fragment)},l(e){n=m(e,"P",{"data-svelte-h":!0}),g(n)!=="svelte-11lpom8"&&(n.textContent=f),a=l(e),M(s.$$.fragment,e)},m(e,h){u(e,n,h),u(e,a,h),b(s,e,h),c=!0},p:z,i(e){c||(y(s.$$.fragment,e),c=!0)},o(e){T(s.$$.fragment,e),c=!1},d(e){e&&(i(n),i(a)),w(s,e)}}}function Zr(k){let n,f,a,s,c,e,h,Un,Qe,Eo=`The SqueezeBERT model was proposed in <a href="https://arxiv.org/abs/2006.11316" rel="nofollow">SqueezeBERT: What can computer vision teach NLP about efficient neural networks?</a> by Forrest N. Iandola, Albert E. Shaw, Ravi Krishna, Kurt W. Keutzer. It’s a
bidirectional transformer similar to the BERT model. The key difference between the BERT architecture and the
SqueezeBERT architecture is that SqueezeBERT uses <a href="https://blog.yani.io/filter-group-tutorial" rel="nofollow">grouped convolutions</a>
instead of fully-connected layers for the Q, K, V and FFN layers.`,Sn,Ee,Lo="The abstract from the paper is the following:",xn,Le,Ho=`<em>Humans read and write hundreds of billions of messages every day. Further, due to the availability of large datasets,
large computing systems, and better neural network models, natural language processing (NLP) technology has made
significant strides in understanding, proofreading, and organizing these messages. Thus, there is a significant
opportunity to deploy NLP in myriad applications to help web users, social networks, and businesses. In particular, we
consider smartphones and other mobile devices as crucial platforms for deploying NLP models at scale. However, today’s
highly-accurate NLP neural network models such as BERT and RoBERTa are extremely computationally expensive, with
BERT-base taking 1.7 seconds to classify a text snippet on a Pixel 3 smartphone. In this work, we observe that methods
such as grouped convolutions have yielded significant speedups for computer vision networks, but many of these
techniques have not been adopted by NLP neural network designers. We demonstrate how to replace several operations in
self-attention layers with grouped convolutions, and we use this technique in a novel network architecture called
SqueezeBERT, which runs 4.3x faster than BERT-base on the Pixel 3 while achieving competitive accuracy on the GLUE test
set. The SqueezeBERT code will be released.</em>`,Zn,He,Ao='This model was contributed by <a href="https://huggingface.co/forresti" rel="nofollow">forresti</a>.',In,Ae,Vn,Ye,Yo=`<li>SqueezeBERT is a model with absolute position embeddings so it’s usually advised to pad the inputs on the right
rather than the left.</li> <li>SqueezeBERT is similar to BERT and therefore relies on the masked language modeling (MLM) objective. It is therefore
efficient at predicting masked tokens and at NLU in general, but is not optimal for text generation. Models trained
with a causal language modeling (CLM) objective are better in that regard.</li> <li>For best results when finetuning on sequence classification tasks, it is recommended to start with the
<em>squeezebert/squeezebert-mnli-headless</em> checkpoint.</li>`,Wn,Pe,Fn,De,Po='<li><a href="../tasks/sequence_classification">Text classification task guide</a></li> <li><a href="../tasks/token_classification">Token classification task guide</a></li> <li><a href="../tasks/question_answering">Question answering task guide</a></li> <li><a href="../tasks/masked_language_modeling">Masked language modeling task guide</a></li> <li><a href="../tasks/multiple_choice">Multiple choice task guide</a></li>',Xn,Oe,Rn,Q,Ke,rs,Jt,Do=`This is the configuration class to store the configuration of a <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a>. It is used to instantiate a
SqueezeBERT model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the SqueezeBERT
<a href="https://huggingface.co/squeezebert/squeezebert-uncased" rel="nofollow">squeezebert/squeezebert-uncased</a> architecture.`,ls,Ct,Oo=`Configuration objects inherit from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> and can be used to control the model outputs. Read the
documentation from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> for more information.`,is,fe,ds,vt,Ko=`Attributes: pretrained_config_archive_map (Dict[str, str]): A dictionary containing all the available pre-trained
checkpoints.`,Gn,et,Nn,G,tt,cs,Ut,ea="Construct a SqueezeBERT tokenizer. Based on WordPiece.",ps,St,ta=`This tokenizer inherits from <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a> which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`,ms,pe,nt,us,xt,na=`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A SqueezeBERT sequence has the following format:`,hs,Zt,sa="<li>single sequence: <code>[CLS] X [SEP]</code></li> <li>pair of sequences: <code>[CLS] A [SEP] B [SEP]</code></li>",fs,ge,st,gs,It,oa=`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer <code>prepare_for_model</code> method.`,_s,D,ot,Ms,Vt,aa="Create a mask from the two sequences passed to be used in a sequence-pair classification task. A SqueezeBERT sequence",bs,_e,ys,Wt,ra="If <code>token_ids_1</code> is <code>None</code>, this method only returns the first portion of the mask (0s).",Ts,Ft,at,Qn,rt,En,E,lt,ws,Xt,la="Construct a “fast” SqueezeBERT tokenizer (backed by HuggingFace’s <em>tokenizers</em> library). Based on WordPiece.",ks,Rt,ia=`This tokenizer inherits from <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast">PreTrainedTokenizerFast</a> which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`,zs,me,it,$s,Gt,da=`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A SqueezeBERT sequence has the following format:`,js,Nt,ca="<li>single sequence: <code>[CLS] X [SEP]</code></li> <li>pair of sequences: <code>[CLS] A [SEP] B [SEP]</code></li>",Bs,O,dt,qs,Qt,pa="Create a mask from the two sequences passed to be used in a sequence-pair classification task. A SqueezeBERT sequence",Js,Me,Cs,Et,ma="If <code>token_ids_1</code> is <code>None</code>, this method only returns the first portion of the mask (0s).",Ln,ct,Hn,$,pt,vs,Lt,ua="The bare SqueezeBERT Model transformer outputting raw hidden-states without any specific head on top.",Us,Ht,ha=`The SqueezeBERT model was proposed in <a href="https://arxiv.org/abs/2006.11316" rel="nofollow">SqueezeBERT: What can computer vision teach NLP about efficient neural
networks?</a> by Forrest N. Iandola, Albert E. Shaw, Ravi Krishna, and Kurt W.
Keutzer`,Ss,At,fa=`This model inherits from <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a>. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`,xs,Yt,ga=`This model is also a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`,Zs,Pt,_a=`For best results finetuning SqueezeBERT on text classification tasks, it is recommended to use the
<em>squeezebert/squeezebert-mnli-headless</em> checkpoint as a starting point.`,Is,be,Vs,ye,Ws,K,mt,Fs,Dt,Ma='The <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> forward method, overrides the <code>__call__</code> special method.',Xs,Te,Rs,we,An,ut,Yn,j,ht,Gs,Ot,ba="SqueezeBERT Model with a <code>language modeling</code> head on top.",Ns,Kt,ya=`The SqueezeBERT model was proposed in <a href="https://arxiv.org/abs/2006.11316" rel="nofollow">SqueezeBERT: What can computer vision teach NLP about efficient neural
networks?</a> by Forrest N. Iandola, Albert E. Shaw, Ravi Krishna, and Kurt W.
Keutzer`,Qs,en,Ta=`This model inherits from <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a>. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`,Es,tn,wa=`This model is also a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`,Ls,nn,ka=`For best results finetuning SqueezeBERT on text classification tasks, it is recommended to use the
<em>squeezebert/squeezebert-mnli-headless</em> checkpoint as a starting point.`,Hs,ke,As,ze,Ys,ee,ft,Ps,sn,za='The <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> forward method, overrides the <code>__call__</code> special method.',Ds,$e,Os,je,Pn,gt,Dn,B,_t,Ks,on,$a=`SqueezeBERT Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`,eo,an,ja=`The SqueezeBERT model was proposed in <a href="https://arxiv.org/abs/2006.11316" rel="nofollow">SqueezeBERT: What can computer vision teach NLP about efficient neural
networks?</a> by Forrest N. Iandola, Albert E. Shaw, Ravi Krishna, and Kurt W.
Keutzer`,to,rn,Ba=`This model inherits from <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a>. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`,no,ln,qa=`This model is also a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`,so,dn,Ja=`For best results finetuning SqueezeBERT on text classification tasks, it is recommended to use the
<em>squeezebert/squeezebert-mnli-headless</em> checkpoint as a starting point.`,oo,Be,ao,qe,ro,L,Mt,lo,cn,Ca='The <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> forward method, overrides the <code>__call__</code> special method.',io,Je,co,Ce,po,ve,On,bt,Kn,q,yt,mo,pn,va=`SqueezeBERT Model with a multiple choice classification head on top (a linear layer on top of the pooled output and
a softmax) e.g. for RocStories/SWAG tasks.`,uo,mn,Ua=`The SqueezeBERT model was proposed in <a href="https://arxiv.org/abs/2006.11316" rel="nofollow">SqueezeBERT: What can computer vision teach NLP about efficient neural
networks?</a> by Forrest N. Iandola, Albert E. Shaw, Ravi Krishna, and Kurt W.
Keutzer`,ho,un,Sa=`This model inherits from <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a>. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`,fo,hn,xa=`This model is also a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`,go,fn,Za=`For best results finetuning SqueezeBERT on text classification tasks, it is recommended to use the
<em>squeezebert/squeezebert-mnli-headless</em> checkpoint as a starting point.`,_o,Ue,Mo,Se,bo,te,Tt,yo,gn,Ia='The <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> forward method, overrides the <code>__call__</code> special method.',To,xe,wo,Ze,es,wt,ts,J,kt,ko,_n,Va=`SqueezeBERT Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`,zo,Mn,Wa=`The SqueezeBERT model was proposed in <a href="https://arxiv.org/abs/2006.11316" rel="nofollow">SqueezeBERT: What can computer vision teach NLP about efficient neural
networks?</a> by Forrest N. Iandola, Albert E. Shaw, Ravi Krishna, and Kurt W.
Keutzer`,$o,bn,Fa=`This model inherits from <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a>. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`,jo,yn,Xa=`This model is also a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`,Bo,Tn,Ra=`For best results finetuning SqueezeBERT on text classification tasks, it is recommended to use the
<em>squeezebert/squeezebert-mnli-headless</em> checkpoint as a starting point.`,qo,Ie,Jo,Ve,Co,ne,zt,vo,wn,Ga='The <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> forward method, overrides the <code>__call__</code> special method.',Uo,We,So,Fe,ns,$t,ss,C,jt,xo,kn,Na=`SqueezeBERT Model with a span classification head on top for extractive question-answering tasks like SQuAD (a
linear layers on top of the hidden-states output to compute <code>span start logits</code> and <code>span end logits</code>).`,Zo,zn,Qa=`The SqueezeBERT model was proposed in <a href="https://arxiv.org/abs/2006.11316" rel="nofollow">SqueezeBERT: What can computer vision teach NLP about efficient neural
networks?</a> by Forrest N. Iandola, Albert E. Shaw, Ravi Krishna, and Kurt W.
Keutzer`,Io,$n,Ea=`This model inherits from <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a>. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`,Vo,jn,La=`This model is also a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`,Wo,Bn,Ha=`For best results finetuning SqueezeBERT on text classification tasks, it is recommended to use the
<em>squeezebert/squeezebert-mnli-headless</em> checkpoint as a starting point.`,Fo,Xe,Xo,Re,Ro,se,Bt,Go,qn,Aa='The <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> forward method, overrides the <code>__call__</code> special method.',No,Ge,Qo,Ne,os,Cn,as;return c=new P({props:{title:"SqueezeBERT",local:"squeezebert",headingTag:"h1"}}),h=new P({props:{title:"Overview",local:"overview",headingTag:"h2"}}),Ae=new P({props:{title:"Usage tips",local:"usage-tips",headingTag:"h2"}}),Pe=new P({props:{title:"Resources",local:"resources",headingTag:"h2"}}),Oe=new P({props:{title:"SqueezeBertConfig",local:"transformers.SqueezeBertConfig",headingTag:"h2"}}),Ke=new R({props:{name:"class transformers.SqueezeBertConfig",anchor:"transformers.SqueezeBertConfig",parameters:[{name:"vocab_size",val:" = 30522"},{name:"hidden_size",val:" = 768"},{name:"num_hidden_layers",val:" = 12"},{name:"num_attention_heads",val:" = 12"},{name:"intermediate_size",val:" = 3072"},{name:"hidden_act",val:" = 'gelu'"},{name:"hidden_dropout_prob",val:" = 0.1"},{name:"attention_probs_dropout_prob",val:" = 0.1"},{name:"max_position_embeddings",val:" = 512"},{name:"type_vocab_size",val:" = 2"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-12"},{name:"pad_token_id",val:" = 0"},{name:"embedding_size",val:" = 768"},{name:"q_groups",val:" = 4"},{name:"k_groups",val:" = 4"},{name:"v_groups",val:" = 4"},{name:"post_attention_groups",val:" = 1"},{name:"intermediate_groups",val:" = 4"},{name:"output_groups",val:" = 4"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SqueezeBertConfig.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 30522) &#x2014;
Vocabulary size of the SqueezeBERT model. Defines the number of different tokens that can be represented by
the <code>inputs_ids</code> passed when calling <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a>.`,name:"vocab_size"},{anchor:"transformers.SqueezeBertConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
Dimensionality of the encoder layers and the pooler layer.`,name:"hidden_size"},{anchor:"transformers.SqueezeBertConfig.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"num_hidden_layers"},{anchor:"transformers.SqueezeBertConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.SqueezeBertConfig.intermediate_size",description:`<strong>intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3072) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (often named feed-forward) layer in the Transformer encoder.`,name:"intermediate_size"},{anchor:"transformers.SqueezeBertConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>Callable</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;silu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.SqueezeBertConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.`,name:"hidden_dropout_prob"},{anchor:"transformers.SqueezeBertConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.SqueezeBertConfig.max_position_embeddings",description:`<strong>max_position_embeddings</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
The maximum sequence length that this model might ever be used with. Typically set this to something large
just in case (e.g., 512 or 1024 or 2048).`,name:"max_position_embeddings"},{anchor:"transformers.SqueezeBertConfig.type_vocab_size",description:`<strong>type_vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 2) &#x2014;
The vocabulary size of the <code>token_type_ids</code> passed when calling <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> or <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a>.`,name:"type_vocab_size"},{anchor:"transformers.SqueezeBertConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.SqueezeBertConfig.layer_norm_eps",description:"<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;",name:"layer_norm_eps"},{anchor:"transformers.SqueezeBertConfig.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The ID of the token in the word embedding to use as padding.`,name:"pad_token_id"},{anchor:"transformers.SqueezeBertConfig.embedding_size",description:`<strong>embedding_size</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
The dimension of the word embedding vectors.`,name:"embedding_size"},{anchor:"transformers.SqueezeBertConfig.q_groups",description:`<strong>q_groups</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
The number of groups in Q layer.`,name:"q_groups"},{anchor:"transformers.SqueezeBertConfig.k_groups",description:`<strong>k_groups</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
The number of groups in K layer.`,name:"k_groups"},{anchor:"transformers.SqueezeBertConfig.v_groups",description:`<strong>v_groups</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
The number of groups in V layer.`,name:"v_groups"},{anchor:"transformers.SqueezeBertConfig.post_attention_groups",description:`<strong>post_attention_groups</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of groups in the first feed forward network layer.`,name:"post_attention_groups"},{anchor:"transformers.SqueezeBertConfig.intermediate_groups",description:`<strong>intermediate_groups</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
The number of groups in the second feed forward network layer.`,name:"intermediate_groups"},{anchor:"transformers.SqueezeBertConfig.output_groups",description:`<strong>output_groups</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
The number of groups in the third feed forward network layer.`,name:"output_groups"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/squeezebert/configuration_squeezebert.py#L37"}}),fe=new S({props:{anchor:"transformers.SqueezeBertConfig.example",$$slots:{default:[lr]},$$scope:{ctx:k}}}),et=new P({props:{title:"SqueezeBertTokenizer",local:"transformers.SqueezeBertTokenizer",headingTag:"h2"}}),tt=new R({props:{name:"class transformers.SqueezeBertTokenizer",anchor:"transformers.SqueezeBertTokenizer",parameters:[{name:"vocab_file",val:""},{name:"do_lower_case",val:" = True"},{name:"do_basic_tokenize",val:" = True"},{name:"never_split",val:" = None"},{name:"unk_token",val:" = '[UNK]'"},{name:"sep_token",val:" = '[SEP]'"},{name:"pad_token",val:" = '[PAD]'"},{name:"cls_token",val:" = '[CLS]'"},{name:"mask_token",val:" = '[MASK]'"},{name:"tokenize_chinese_chars",val:" = True"},{name:"strip_accents",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SqueezeBertTokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
File containing the vocabulary.`,name:"vocab_file"},{anchor:"transformers.SqueezeBertTokenizer.do_lower_case",description:`<strong>do_lower_case</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to lowercase the input when tokenizing.`,name:"do_lower_case"},{anchor:"transformers.SqueezeBertTokenizer.do_basic_tokenize",description:`<strong>do_basic_tokenize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to do basic tokenization before WordPiece.`,name:"do_basic_tokenize"},{anchor:"transformers.SqueezeBertTokenizer.never_split",description:`<strong>never_split</strong> (<code>Iterable</code>, <em>optional</em>) &#x2014;
Collection of tokens which will never be split during tokenization. Only has an effect when
<code>do_basic_tokenize=True</code>`,name:"never_split"},{anchor:"transformers.SqueezeBertTokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[UNK]&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.SqueezeBertTokenizer.sep_token",description:`<strong>sep_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[SEP]&quot;</code>) &#x2014;
The separator token, which is used when building a sequence from multiple sequences, e.g. two sequences for
sequence classification or for a text and a question for question answering. It is also used as the last
token of a sequence built with special tokens.`,name:"sep_token"},{anchor:"transformers.SqueezeBertTokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[PAD]&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.SqueezeBertTokenizer.cls_token",description:`<strong>cls_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[CLS]&quot;</code>) &#x2014;
The classifier token which is used when doing sequence classification (classification of the whole sequence
instead of per-token classification). It is the first token of the sequence when built with special tokens.`,name:"cls_token"},{anchor:"transformers.SqueezeBertTokenizer.mask_token",description:`<strong>mask_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[MASK]&quot;</code>) &#x2014;
The token used for masking values. This is the token used when training this model with masked language
modeling. This is the token which the model will try to predict.`,name:"mask_token"},{anchor:"transformers.SqueezeBertTokenizer.tokenize_chinese_chars",description:`<strong>tokenize_chinese_chars</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to tokenize Chinese characters.</p>
<p>This should likely be deactivated for Japanese (see this
<a href="https://github.com/huggingface/transformers/issues/328" rel="nofollow">issue</a>).`,name:"tokenize_chinese_chars"},{anchor:"transformers.SqueezeBertTokenizer.strip_accents",description:`<strong>strip_accents</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to strip all accents. If this option is not specified, then it will be determined by the
value for <code>lowercase</code> (as in the original SqueezeBERT).`,name:"strip_accents"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/squeezebert/tokenization_squeezebert.py#L79"}}),nt=new R({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.SqueezeBertTokenizer.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": List"},{name:"token_ids_1",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.SqueezeBertTokenizer.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.SqueezeBertTokenizer.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/squeezebert/tokenization_squeezebert.py#L212",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>List[int]</code></p>
`}}),st=new R({props:{name:"get_special_tokens_mask",anchor:"transformers.SqueezeBertTokenizer.get_special_tokens_mask",parameters:[{name:"token_ids_0",val:": List"},{name:"token_ids_1",val:": Optional = None"},{name:"already_has_special_tokens",val:": bool = False"}],parametersDescription:[{anchor:"transformers.SqueezeBertTokenizer.get_special_tokens_mask.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.SqueezeBertTokenizer.get_special_tokens_mask.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"},{anchor:"transformers.SqueezeBertTokenizer.get_special_tokens_mask.already_has_special_tokens",description:`<strong>already_has_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the token list is already formatted with special tokens for the model.`,name:"already_has_special_tokens"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/squeezebert/tokenization_squeezebert.py#L237",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>List[int]</code></p>
`}}),ot=new R({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.SqueezeBertTokenizer.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": List"},{name:"token_ids_1",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.SqueezeBertTokenizer.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.SqueezeBertTokenizer.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/squeezebert/tokenization_squeezebert.py#L265",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>List of <a href="../glossary#token-type-ids">token type IDs</a> according to the given sequence(s).</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>List[int]</code></p>
`}}),_e=new S({props:{anchor:"transformers.SqueezeBertTokenizer.create_token_type_ids_from_sequences.example",$$slots:{default:[ir]},$$scope:{ctx:k}}}),at=new R({props:{name:"save_vocabulary",anchor:"transformers.SqueezeBertTokenizer.save_vocabulary",parameters:[{name:"save_directory",val:": str"},{name:"filename_prefix",val:": Optional = None"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/squeezebert/tokenization_squeezebert.py#L294"}}),rt=new P({props:{title:"SqueezeBertTokenizerFast",local:"transformers.SqueezeBertTokenizerFast",headingTag:"h2"}}),lt=new R({props:{name:"class transformers.SqueezeBertTokenizerFast",anchor:"transformers.SqueezeBertTokenizerFast",parameters:[{name:"vocab_file",val:" = None"},{name:"tokenizer_file",val:" = None"},{name:"do_lower_case",val:" = True"},{name:"unk_token",val:" = '[UNK]'"},{name:"sep_token",val:" = '[SEP]'"},{name:"pad_token",val:" = '[PAD]'"},{name:"cls_token",val:" = '[CLS]'"},{name:"mask_token",val:" = '[MASK]'"},{name:"tokenize_chinese_chars",val:" = True"},{name:"strip_accents",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SqueezeBertTokenizerFast.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
File containing the vocabulary.`,name:"vocab_file"},{anchor:"transformers.SqueezeBertTokenizerFast.do_lower_case",description:`<strong>do_lower_case</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to lowercase the input when tokenizing.`,name:"do_lower_case"},{anchor:"transformers.SqueezeBertTokenizerFast.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[UNK]&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.SqueezeBertTokenizerFast.sep_token",description:`<strong>sep_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[SEP]&quot;</code>) &#x2014;
The separator token, which is used when building a sequence from multiple sequences, e.g. two sequences for
sequence classification or for a text and a question for question answering. It is also used as the last
token of a sequence built with special tokens.`,name:"sep_token"},{anchor:"transformers.SqueezeBertTokenizerFast.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[PAD]&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.SqueezeBertTokenizerFast.cls_token",description:`<strong>cls_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[CLS]&quot;</code>) &#x2014;
The classifier token which is used when doing sequence classification (classification of the whole sequence
instead of per-token classification). It is the first token of the sequence when built with special tokens.`,name:"cls_token"},{anchor:"transformers.SqueezeBertTokenizerFast.mask_token",description:`<strong>mask_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[MASK]&quot;</code>) &#x2014;
The token used for masking values. This is the token used when training this model with masked language
modeling. This is the token which the model will try to predict.`,name:"mask_token"},{anchor:"transformers.SqueezeBertTokenizerFast.clean_text",description:`<strong>clean_text</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to clean the text before tokenization by removing any control characters and replacing all
whitespaces by the classic one.`,name:"clean_text"},{anchor:"transformers.SqueezeBertTokenizerFast.tokenize_chinese_chars",description:`<strong>tokenize_chinese_chars</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to tokenize Chinese characters. This should likely be deactivated for Japanese (see <a href="https://github.com/huggingface/transformers/issues/328" rel="nofollow">this
issue</a>).`,name:"tokenize_chinese_chars"},{anchor:"transformers.SqueezeBertTokenizerFast.strip_accents",description:`<strong>strip_accents</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to strip all accents. If this option is not specified, then it will be determined by the
value for <code>lowercase</code> (as in the original SqueezeBERT).`,name:"strip_accents"},{anchor:"transformers.SqueezeBertTokenizerFast.wordpieces_prefix",description:`<strong>wordpieces_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;##&quot;</code>) &#x2014;
The prefix for subwords.`,name:"wordpieces_prefix"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/squeezebert/tokenization_squeezebert_fast.py#L69"}}),it=new R({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.SqueezeBertTokenizerFast.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:""},{name:"token_ids_1",val:" = None"}],parametersDescription:[{anchor:"transformers.SqueezeBertTokenizerFast.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.SqueezeBertTokenizerFast.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/squeezebert/tokenization_squeezebert_fast.py#L157",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>List[int]</code></p>
`}}),dt=new R({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.SqueezeBertTokenizerFast.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": List"},{name:"token_ids_1",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.SqueezeBertTokenizerFast.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.SqueezeBertTokenizerFast.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/squeezebert/tokenization_squeezebert_fast.py#L181",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>List of <a href="../glossary#token-type-ids">token type IDs</a> according to the given sequence(s).</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>List[int]</code></p>
`}}),Me=new S({props:{anchor:"transformers.SqueezeBertTokenizerFast.create_token_type_ids_from_sequences.example",$$slots:{default:[dr]},$$scope:{ctx:k}}}),ct=new P({props:{title:"SqueezeBertModel",local:"transformers.SqueezeBertModel",headingTag:"h2"}}),pt=new R({props:{name:"class transformers.SqueezeBertModel",anchor:"transformers.SqueezeBertModel",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.SqueezeBertModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/squeezebert/modeling_squeezebert.py#L543"}}),be=new S({props:{anchor:"transformers.SqueezeBertModel.example",$$slots:{default:[cr]},$$scope:{ctx:k}}}),ye=new S({props:{anchor:"transformers.SqueezeBertModel.example-2",$$slots:{default:[pr]},$$scope:{ctx:k}}}),mt=new R({props:{name:"forward",anchor:"transformers.SqueezeBertModel.forward",parameters:[{name:"input_ids",val:": Optional = None"},{name:"attention_mask",val:": Optional = None"},{name:"token_type_ids",val:": Optional = None"},{name:"position_ids",val:": Optional = None"},{name:"head_mask",val:": Optional = None"},{name:"inputs_embeds",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.SqueezeBertModel.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer">AutoTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.SqueezeBertModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.SqueezeBertModel.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.SqueezeBertModel.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.SqueezeBertModel.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.SqueezeBertModel.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.SqueezeBertModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.SqueezeBertModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.SqueezeBertModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/squeezebert/modeling_squeezebert.py#L572",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling"
>transformers.modeling_outputs.BaseModelOutputWithPooling</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"
>SqueezeBertConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) — Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) — Last layer hidden-state of the first token of the sequence (classification token) after further processing
through the layers used for the auxiliary pretraining task. E.g. for BERT-family of models, this returns
the classification token after processing through a linear layer and a tanh activation function. The linear
layer weights are trained from the next sentence prediction (classification) objective during pretraining.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling"
>transformers.modeling_outputs.BaseModelOutputWithPooling</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Te=new Jn({props:{$$slots:{default:[mr]},$$scope:{ctx:k}}}),we=new S({props:{anchor:"transformers.SqueezeBertModel.forward.example",$$slots:{default:[ur]},$$scope:{ctx:k}}}),ut=new P({props:{title:"SqueezeBertForMaskedLM",local:"transformers.SqueezeBertForMaskedLM",headingTag:"h2"}}),ht=new R({props:{name:"class transformers.SqueezeBertForMaskedLM",anchor:"transformers.SqueezeBertForMaskedLM",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.SqueezeBertForMaskedLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/squeezebert/modeling_squeezebert.py#L646"}}),ke=new S({props:{anchor:"transformers.SqueezeBertForMaskedLM.example",$$slots:{default:[hr]},$$scope:{ctx:k}}}),ze=new S({props:{anchor:"transformers.SqueezeBertForMaskedLM.example-2",$$slots:{default:[fr]},$$scope:{ctx:k}}}),ft=new R({props:{name:"forward",anchor:"transformers.SqueezeBertForMaskedLM.forward",parameters:[{name:"input_ids",val:": Optional = None"},{name:"attention_mask",val:": Optional = None"},{name:"token_type_ids",val:": Optional = None"},{name:"position_ids",val:": Optional = None"},{name:"head_mask",val:": Optional = None"},{name:"inputs_embeds",val:": Optional = None"},{name:"labels",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.SqueezeBertForMaskedLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer">AutoTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.SqueezeBertForMaskedLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.SqueezeBertForMaskedLM.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.SqueezeBertForMaskedLM.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.SqueezeBertForMaskedLM.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.SqueezeBertForMaskedLM.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.SqueezeBertForMaskedLM.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.SqueezeBertForMaskedLM.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.SqueezeBertForMaskedLM.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.SqueezeBertForMaskedLM.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for computing the masked language modeling loss. Indices should be in <code>[-100, 0, ..., config.vocab_size]</code> (see <code>input_ids</code> docstring) Tokens with indices set to <code>-100</code> are ignored (masked), the
loss is only computed for the tokens with labels in <code>[0, ..., config.vocab_size]</code>`,name:"labels"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/squeezebert/modeling_squeezebert.py#L665",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.MaskedLMOutput"
>transformers.modeling_outputs.MaskedLMOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"
>SqueezeBertConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) — Masked language modeling (MLM) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) — Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.MaskedLMOutput"
>transformers.modeling_outputs.MaskedLMOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),$e=new Jn({props:{$$slots:{default:[gr]},$$scope:{ctx:k}}}),je=new S({props:{anchor:"transformers.SqueezeBertForMaskedLM.forward.example",$$slots:{default:[_r]},$$scope:{ctx:k}}}),gt=new P({props:{title:"SqueezeBertForSequenceClassification",local:"transformers.SqueezeBertForSequenceClassification",headingTag:"h2"}}),_t=new R({props:{name:"class transformers.SqueezeBertForSequenceClassification",anchor:"transformers.SqueezeBertForSequenceClassification",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.SqueezeBertForSequenceClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/squeezebert/modeling_squeezebert.py#L724"}}),Be=new S({props:{anchor:"transformers.SqueezeBertForSequenceClassification.example",$$slots:{default:[Mr]},$$scope:{ctx:k}}}),qe=new S({props:{anchor:"transformers.SqueezeBertForSequenceClassification.example-2",$$slots:{default:[br]},$$scope:{ctx:k}}}),Mt=new R({props:{name:"forward",anchor:"transformers.SqueezeBertForSequenceClassification.forward",parameters:[{name:"input_ids",val:": Optional = None"},{name:"attention_mask",val:": Optional = None"},{name:"token_type_ids",val:": Optional = None"},{name:"position_ids",val:": Optional = None"},{name:"head_mask",val:": Optional = None"},{name:"inputs_embeds",val:": Optional = None"},{name:"labels",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.SqueezeBertForSequenceClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer">AutoTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.SqueezeBertForSequenceClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.SqueezeBertForSequenceClassification.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.SqueezeBertForSequenceClassification.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.SqueezeBertForSequenceClassification.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.SqueezeBertForSequenceClassification.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.SqueezeBertForSequenceClassification.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.SqueezeBertForSequenceClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.SqueezeBertForSequenceClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.SqueezeBertForSequenceClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the sequence classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/squeezebert/modeling_squeezebert.py#L744",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.SequenceClassifierOutput"
>transformers.modeling_outputs.SequenceClassifierOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"
>SqueezeBertConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) — Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) — Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.SequenceClassifierOutput"
>transformers.modeling_outputs.SequenceClassifierOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Je=new Jn({props:{$$slots:{default:[yr]},$$scope:{ctx:k}}}),Ce=new S({props:{anchor:"transformers.SqueezeBertForSequenceClassification.forward.example",$$slots:{default:[Tr]},$$scope:{ctx:k}}}),ve=new S({props:{anchor:"transformers.SqueezeBertForSequenceClassification.forward.example-2",$$slots:{default:[wr]},$$scope:{ctx:k}}}),bt=new P({props:{title:"SqueezeBertForMultipleChoice",local:"transformers.SqueezeBertForMultipleChoice",headingTag:"h2"}}),yt=new R({props:{name:"class transformers.SqueezeBertForMultipleChoice",anchor:"transformers.SqueezeBertForMultipleChoice",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.SqueezeBertForMultipleChoice.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/squeezebert/modeling_squeezebert.py#L823"}}),Ue=new S({props:{anchor:"transformers.SqueezeBertForMultipleChoice.example",$$slots:{default:[kr]},$$scope:{ctx:k}}}),Se=new S({props:{anchor:"transformers.SqueezeBertForMultipleChoice.example-2",$$slots:{default:[zr]},$$scope:{ctx:k}}}),Tt=new R({props:{name:"forward",anchor:"transformers.SqueezeBertForMultipleChoice.forward",parameters:[{name:"input_ids",val:": Optional = None"},{name:"attention_mask",val:": Optional = None"},{name:"token_type_ids",val:": Optional = None"},{name:"position_ids",val:": Optional = None"},{name:"head_mask",val:": Optional = None"},{name:"inputs_embeds",val:": Optional = None"},{name:"labels",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.SqueezeBertForMultipleChoice.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, num_choices, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer">AutoTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.SqueezeBertForMultipleChoice.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_choices, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.SqueezeBertForMultipleChoice.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, num_choices, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.SqueezeBertForMultipleChoice.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, num_choices, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.SqueezeBertForMultipleChoice.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.SqueezeBertForMultipleChoice.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_choices, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.SqueezeBertForMultipleChoice.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.SqueezeBertForMultipleChoice.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.SqueezeBertForMultipleChoice.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.SqueezeBertForMultipleChoice.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the multiple choice classification loss. Indices should be in <code>[0, ..., num_choices-1]</code> where <em>num_choices</em> is the size of the second dimension of the input tensors. (see
<em>input_ids</em> above)`,name:"labels"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/squeezebert/modeling_squeezebert.py#L841",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.MultipleChoiceModelOutput"
>transformers.modeling_outputs.MultipleChoiceModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"
>SqueezeBertConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <em>(1,)</em>, <em>optional</em>, returned when <code>labels</code> is provided) — Classification loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_choices)</code>) — <em>num_choices</em> is the second dimension of the input tensors. (see <em>input_ids</em> above).</p>
<p>Classification scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.MultipleChoiceModelOutput"
>transformers.modeling_outputs.MultipleChoiceModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),xe=new Jn({props:{$$slots:{default:[$r]},$$scope:{ctx:k}}}),Ze=new S({props:{anchor:"transformers.SqueezeBertForMultipleChoice.forward.example",$$slots:{default:[jr]},$$scope:{ctx:k}}}),wt=new P({props:{title:"SqueezeBertForTokenClassification",local:"transformers.SqueezeBertForTokenClassification",headingTag:"h2"}}),kt=new R({props:{name:"class transformers.SqueezeBertForTokenClassification",anchor:"transformers.SqueezeBertForTokenClassification",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.SqueezeBertForTokenClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/squeezebert/modeling_squeezebert.py#L916"}}),Ie=new S({props:{anchor:"transformers.SqueezeBertForTokenClassification.example",$$slots:{default:[Br]},$$scope:{ctx:k}}}),Ve=new S({props:{anchor:"transformers.SqueezeBertForTokenClassification.example-2",$$slots:{default:[qr]},$$scope:{ctx:k}}}),zt=new R({props:{name:"forward",anchor:"transformers.SqueezeBertForTokenClassification.forward",parameters:[{name:"input_ids",val:": Optional = None"},{name:"attention_mask",val:": Optional = None"},{name:"token_type_ids",val:": Optional = None"},{name:"position_ids",val:": Optional = None"},{name:"head_mask",val:": Optional = None"},{name:"inputs_embeds",val:": Optional = None"},{name:"labels",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.SqueezeBertForTokenClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer">AutoTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.SqueezeBertForTokenClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.SqueezeBertForTokenClassification.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.SqueezeBertForTokenClassification.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.SqueezeBertForTokenClassification.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.SqueezeBertForTokenClassification.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.SqueezeBertForTokenClassification.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.SqueezeBertForTokenClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.SqueezeBertForTokenClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.SqueezeBertForTokenClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for computing the token classification loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>.`,name:"labels"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/squeezebert/modeling_squeezebert.py#L935",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.TokenClassifierOutput"
>transformers.modeling_outputs.TokenClassifierOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"
>SqueezeBertConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided)  — Classification loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.num_labels)</code>) — Classification scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.TokenClassifierOutput"
>transformers.modeling_outputs.TokenClassifierOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),We=new Jn({props:{$$slots:{default:[Jr]},$$scope:{ctx:k}}}),Fe=new S({props:{anchor:"transformers.SqueezeBertForTokenClassification.forward.example",$$slots:{default:[Cr]},$$scope:{ctx:k}}}),$t=new P({props:{title:"SqueezeBertForQuestionAnswering",local:"transformers.SqueezeBertForQuestionAnswering",headingTag:"h2"}}),jt=new R({props:{name:"class transformers.SqueezeBertForQuestionAnswering",anchor:"transformers.SqueezeBertForQuestionAnswering",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.SqueezeBertForQuestionAnswering.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/squeezebert/modeling_squeezebert.py#L994"}}),Xe=new S({props:{anchor:"transformers.SqueezeBertForQuestionAnswering.example",$$slots:{default:[vr]},$$scope:{ctx:k}}}),Re=new S({props:{anchor:"transformers.SqueezeBertForQuestionAnswering.example-2",$$slots:{default:[Ur]},$$scope:{ctx:k}}}),Bt=new R({props:{name:"forward",anchor:"transformers.SqueezeBertForQuestionAnswering.forward",parameters:[{name:"input_ids",val:": Optional = None"},{name:"attention_mask",val:": Optional = None"},{name:"token_type_ids",val:": Optional = None"},{name:"position_ids",val:": Optional = None"},{name:"head_mask",val:": Optional = None"},{name:"inputs_embeds",val:": Optional = None"},{name:"start_positions",val:": Optional = None"},{name:"end_positions",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.SqueezeBertForQuestionAnswering.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer">AutoTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.SqueezeBertForQuestionAnswering.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.SqueezeBertForQuestionAnswering.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.SqueezeBertForQuestionAnswering.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.SqueezeBertForQuestionAnswering.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.SqueezeBertForQuestionAnswering.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.SqueezeBertForQuestionAnswering.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.SqueezeBertForQuestionAnswering.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.SqueezeBertForQuestionAnswering.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.SqueezeBertForQuestionAnswering.forward.start_positions",description:`<strong>start_positions</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for position (index) of the start of the labelled span for computing the token classification loss.
Positions are clamped to the length of the sequence (<em>sequence_length</em>). Position outside of the sequence
are not taken into account for computing the loss.`,name:"start_positions"},{anchor:"transformers.SqueezeBertForQuestionAnswering.forward.end_positions",description:`<strong>end_positions</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for position (index) of the end of the labelled span for computing the token classification loss.
Positions are clamped to the length of the sequence (<em>sequence_length</em>). Position outside of the sequence
are not taken into account for computing the loss.`,name:"end_positions"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/squeezebert/modeling_squeezebert.py#L1012",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.QuestionAnsweringModelOutput"
>transformers.modeling_outputs.QuestionAnsweringModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"
>SqueezeBertConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) — Total span extraction loss is the sum of a Cross-Entropy for the start and end positions.</p>
</li>
<li>
<p><strong>start_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>) — Span-start scores (before SoftMax).</p>
</li>
<li>
<p><strong>end_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>) — Span-end scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.QuestionAnsweringModelOutput"
>transformers.modeling_outputs.QuestionAnsweringModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Ge=new Jn({props:{$$slots:{default:[Sr]},$$scope:{ctx:k}}}),Ne=new S({props:{anchor:"transformers.SqueezeBertForQuestionAnswering.forward.example",$$slots:{default:[xr]},$$scope:{ctx:k}}}),{c(){n=p("meta"),f=r(),a=p("p"),s=r(),_(c.$$.fragment),e=r(),_(h.$$.fragment),Un=r(),Qe=p("p"),Qe.innerHTML=Eo,Sn=r(),Ee=p("p"),Ee.textContent=Lo,xn=r(),Le=p("p"),Le.innerHTML=Ho,Zn=r(),He=p("p"),He.innerHTML=Ao,In=r(),_(Ae.$$.fragment),Vn=r(),Ye=p("ul"),Ye.innerHTML=Yo,Wn=r(),_(Pe.$$.fragment),Fn=r(),De=p("ul"),De.innerHTML=Po,Xn=r(),_(Oe.$$.fragment),Rn=r(),Q=p("div"),_(Ke.$$.fragment),rs=r(),Jt=p("p"),Jt.innerHTML=Do,ls=r(),Ct=p("p"),Ct.innerHTML=Oo,is=r(),_(fe.$$.fragment),ds=r(),vt=p("p"),vt.textContent=Ko,Gn=r(),_(et.$$.fragment),Nn=r(),G=p("div"),_(tt.$$.fragment),cs=r(),Ut=p("p"),Ut.textContent=ea,ps=r(),St=p("p"),St.innerHTML=ta,ms=r(),pe=p("div"),_(nt.$$.fragment),us=r(),xt=p("p"),xt.textContent=na,hs=r(),Zt=p("ul"),Zt.innerHTML=sa,fs=r(),ge=p("div"),_(st.$$.fragment),gs=r(),It=p("p"),It.innerHTML=oa,_s=r(),D=p("div"),_(ot.$$.fragment),Ms=r(),Vt=p("p"),Vt.textContent=aa,bs=r(),_(_e.$$.fragment),ys=r(),Wt=p("p"),Wt.innerHTML=ra,Ts=r(),Ft=p("div"),_(at.$$.fragment),Qn=r(),_(rt.$$.fragment),En=r(),E=p("div"),_(lt.$$.fragment),ws=r(),Xt=p("p"),Xt.innerHTML=la,ks=r(),Rt=p("p"),Rt.innerHTML=ia,zs=r(),me=p("div"),_(it.$$.fragment),$s=r(),Gt=p("p"),Gt.textContent=da,js=r(),Nt=p("ul"),Nt.innerHTML=ca,Bs=r(),O=p("div"),_(dt.$$.fragment),qs=r(),Qt=p("p"),Qt.textContent=pa,Js=r(),_(Me.$$.fragment),Cs=r(),Et=p("p"),Et.innerHTML=ma,Ln=r(),_(ct.$$.fragment),Hn=r(),$=p("div"),_(pt.$$.fragment),vs=r(),Lt=p("p"),Lt.textContent=ua,Us=r(),Ht=p("p"),Ht.innerHTML=ha,Ss=r(),At=p("p"),At.innerHTML=fa,xs=r(),Yt=p("p"),Yt.innerHTML=ga,Zs=r(),Pt=p("p"),Pt.innerHTML=_a,Is=r(),_(be.$$.fragment),Vs=r(),_(ye.$$.fragment),Ws=r(),K=p("div"),_(mt.$$.fragment),Fs=r(),Dt=p("p"),Dt.innerHTML=Ma,Xs=r(),_(Te.$$.fragment),Rs=r(),_(we.$$.fragment),An=r(),_(ut.$$.fragment),Yn=r(),j=p("div"),_(ht.$$.fragment),Gs=r(),Ot=p("p"),Ot.innerHTML=ba,Ns=r(),Kt=p("p"),Kt.innerHTML=ya,Qs=r(),en=p("p"),en.innerHTML=Ta,Es=r(),tn=p("p"),tn.innerHTML=wa,Ls=r(),nn=p("p"),nn.innerHTML=ka,Hs=r(),_(ke.$$.fragment),As=r(),_(ze.$$.fragment),Ys=r(),ee=p("div"),_(ft.$$.fragment),Ps=r(),sn=p("p"),sn.innerHTML=za,Ds=r(),_($e.$$.fragment),Os=r(),_(je.$$.fragment),Pn=r(),_(gt.$$.fragment),Dn=r(),B=p("div"),_(_t.$$.fragment),Ks=r(),on=p("p"),on.textContent=$a,eo=r(),an=p("p"),an.innerHTML=ja,to=r(),rn=p("p"),rn.innerHTML=Ba,no=r(),ln=p("p"),ln.innerHTML=qa,so=r(),dn=p("p"),dn.innerHTML=Ja,oo=r(),_(Be.$$.fragment),ao=r(),_(qe.$$.fragment),ro=r(),L=p("div"),_(Mt.$$.fragment),lo=r(),cn=p("p"),cn.innerHTML=Ca,io=r(),_(Je.$$.fragment),co=r(),_(Ce.$$.fragment),po=r(),_(ve.$$.fragment),On=r(),_(bt.$$.fragment),Kn=r(),q=p("div"),_(yt.$$.fragment),mo=r(),pn=p("p"),pn.textContent=va,uo=r(),mn=p("p"),mn.innerHTML=Ua,ho=r(),un=p("p"),un.innerHTML=Sa,fo=r(),hn=p("p"),hn.innerHTML=xa,go=r(),fn=p("p"),fn.innerHTML=Za,_o=r(),_(Ue.$$.fragment),Mo=r(),_(Se.$$.fragment),bo=r(),te=p("div"),_(Tt.$$.fragment),yo=r(),gn=p("p"),gn.innerHTML=Ia,To=r(),_(xe.$$.fragment),wo=r(),_(Ze.$$.fragment),es=r(),_(wt.$$.fragment),ts=r(),J=p("div"),_(kt.$$.fragment),ko=r(),_n=p("p"),_n.textContent=Va,zo=r(),Mn=p("p"),Mn.innerHTML=Wa,$o=r(),bn=p("p"),bn.innerHTML=Fa,jo=r(),yn=p("p"),yn.innerHTML=Xa,Bo=r(),Tn=p("p"),Tn.innerHTML=Ra,qo=r(),_(Ie.$$.fragment),Jo=r(),_(Ve.$$.fragment),Co=r(),ne=p("div"),_(zt.$$.fragment),vo=r(),wn=p("p"),wn.innerHTML=Ga,Uo=r(),_(We.$$.fragment),So=r(),_(Fe.$$.fragment),ns=r(),_($t.$$.fragment),ss=r(),C=p("div"),_(jt.$$.fragment),xo=r(),kn=p("p"),kn.innerHTML=Na,Zo=r(),zn=p("p"),zn.innerHTML=Qa,Io=r(),$n=p("p"),$n.innerHTML=Ea,Vo=r(),jn=p("p"),jn.innerHTML=La,Wo=r(),Bn=p("p"),Bn.innerHTML=Ha,Fo=r(),_(Xe.$$.fragment),Xo=r(),_(Re.$$.fragment),Ro=r(),se=p("div"),_(Bt.$$.fragment),Go=r(),qn=p("p"),qn.innerHTML=Aa,No=r(),_(Ge.$$.fragment),Qo=r(),_(Ne.$$.fragment),os=r(),Cn=p("p"),this.h()},l(t){const d=rr("svelte-u9bgzb",document.head);n=m(d,"META",{name:!0,content:!0}),d.forEach(i),f=l(t),a=m(t,"P",{}),v(a).forEach(i),s=l(t),M(c.$$.fragment,t),e=l(t),M(h.$$.fragment,t),Un=l(t),Qe=m(t,"P",{"data-svelte-h":!0}),g(Qe)!=="svelte-c24mw5"&&(Qe.innerHTML=Eo),Sn=l(t),Ee=m(t,"P",{"data-svelte-h":!0}),g(Ee)!=="svelte-vfdo9a"&&(Ee.textContent=Lo),xn=l(t),Le=m(t,"P",{"data-svelte-h":!0}),g(Le)!=="svelte-1emzktv"&&(Le.innerHTML=Ho),Zn=l(t),He=m(t,"P",{"data-svelte-h":!0}),g(He)!=="svelte-1e4x21"&&(He.innerHTML=Ao),In=l(t),M(Ae.$$.fragment,t),Vn=l(t),Ye=m(t,"UL",{"data-svelte-h":!0}),g(Ye)!=="svelte-6f7ytb"&&(Ye.innerHTML=Yo),Wn=l(t),M(Pe.$$.fragment,t),Fn=l(t),De=m(t,"UL",{"data-svelte-h":!0}),g(De)!=="svelte-mgusi3"&&(De.innerHTML=Po),Xn=l(t),M(Oe.$$.fragment,t),Rn=l(t),Q=m(t,"DIV",{class:!0});var H=v(Q);M(Ke.$$.fragment,H),rs=l(H),Jt=m(H,"P",{"data-svelte-h":!0}),g(Jt)!=="svelte-9y8kjg"&&(Jt.innerHTML=Do),ls=l(H),Ct=m(H,"P",{"data-svelte-h":!0}),g(Ct)!=="svelte-o55m63"&&(Ct.innerHTML=Oo),is=l(H),M(fe.$$.fragment,H),ds=l(H),vt=m(H,"P",{"data-svelte-h":!0}),g(vt)!=="svelte-d6jcef"&&(vt.textContent=Ko),H.forEach(i),Gn=l(t),M(et.$$.fragment,t),Nn=l(t),G=m(t,"DIV",{class:!0});var N=v(G);M(tt.$$.fragment,N),cs=l(N),Ut=m(N,"P",{"data-svelte-h":!0}),g(Ut)!=="svelte-1jixb9u"&&(Ut.textContent=ea),ps=l(N),St=m(N,"P",{"data-svelte-h":!0}),g(St)!=="svelte-1c3t5ty"&&(St.innerHTML=ta),ms=l(N),pe=m(N,"DIV",{class:!0});var ue=v(pe);M(nt.$$.fragment,ue),us=l(ue),xt=m(ue,"P",{"data-svelte-h":!0}),g(xt)!=="svelte-19k3keo"&&(xt.textContent=na),hs=l(ue),Zt=m(ue,"UL",{"data-svelte-h":!0}),g(Zt)!=="svelte-xi6653"&&(Zt.innerHTML=sa),ue.forEach(i),fs=l(N),ge=m(N,"DIV",{class:!0});var qt=v(ge);M(st.$$.fragment,qt),gs=l(qt),It=m(qt,"P",{"data-svelte-h":!0}),g(It)!=="svelte-1f4f5kp"&&(It.innerHTML=oa),qt.forEach(i),_s=l(N),D=m(N,"DIV",{class:!0});var oe=v(D);M(ot.$$.fragment,oe),Ms=l(oe),Vt=m(oe,"P",{"data-svelte-h":!0}),g(Vt)!=="svelte-lan6uf"&&(Vt.textContent=aa),bs=l(oe),M(_e.$$.fragment,oe),ys=l(oe),Wt=m(oe,"P",{"data-svelte-h":!0}),g(Wt)!=="svelte-owoxgn"&&(Wt.innerHTML=ra),oe.forEach(i),Ts=l(N),Ft=m(N,"DIV",{class:!0});var vn=v(Ft);M(at.$$.fragment,vn),vn.forEach(i),N.forEach(i),Qn=l(t),M(rt.$$.fragment,t),En=l(t),E=m(t,"DIV",{class:!0});var A=v(E);M(lt.$$.fragment,A),ws=l(A),Xt=m(A,"P",{"data-svelte-h":!0}),g(Xt)!=="svelte-56e233"&&(Xt.innerHTML=la),ks=l(A),Rt=m(A,"P",{"data-svelte-h":!0}),g(Rt)!=="svelte-fh0aq"&&(Rt.innerHTML=ia),zs=l(A),me=m(A,"DIV",{class:!0});var he=v(me);M(it.$$.fragment,he),$s=l(he),Gt=m(he,"P",{"data-svelte-h":!0}),g(Gt)!=="svelte-19k3keo"&&(Gt.textContent=da),js=l(he),Nt=m(he,"UL",{"data-svelte-h":!0}),g(Nt)!=="svelte-xi6653"&&(Nt.innerHTML=ca),he.forEach(i),Bs=l(A),O=m(A,"DIV",{class:!0});var ae=v(O);M(dt.$$.fragment,ae),qs=l(ae),Qt=m(ae,"P",{"data-svelte-h":!0}),g(Qt)!=="svelte-lan6uf"&&(Qt.textContent=pa),Js=l(ae),M(Me.$$.fragment,ae),Cs=l(ae),Et=m(ae,"P",{"data-svelte-h":!0}),g(Et)!=="svelte-owoxgn"&&(Et.innerHTML=ma),ae.forEach(i),A.forEach(i),Ln=l(t),M(ct.$$.fragment,t),Hn=l(t),$=m(t,"DIV",{class:!0});var Z=v($);M(pt.$$.fragment,Z),vs=l(Z),Lt=m(Z,"P",{"data-svelte-h":!0}),g(Lt)!=="svelte-16cmvyq"&&(Lt.textContent=ua),Us=l(Z),Ht=m(Z,"P",{"data-svelte-h":!0}),g(Ht)!=="svelte-1w0u28z"&&(Ht.innerHTML=ha),Ss=l(Z),At=m(Z,"P",{"data-svelte-h":!0}),g(At)!=="svelte-6pahdo"&&(At.innerHTML=fa),xs=l(Z),Yt=m(Z,"P",{"data-svelte-h":!0}),g(Yt)!=="svelte-hswkmf"&&(Yt.innerHTML=ga),Zs=l(Z),Pt=m(Z,"P",{"data-svelte-h":!0}),g(Pt)!=="svelte-7hyh0a"&&(Pt.innerHTML=_a),Is=l(Z),M(be.$$.fragment,Z),Vs=l(Z),M(ye.$$.fragment,Z),Ws=l(Z),K=m(Z,"DIV",{class:!0});var re=v(K);M(mt.$$.fragment,re),Fs=l(re),Dt=m(re,"P",{"data-svelte-h":!0}),g(Dt)!=="svelte-175c2mw"&&(Dt.innerHTML=Ma),Xs=l(re),M(Te.$$.fragment,re),Rs=l(re),M(we.$$.fragment,re),re.forEach(i),Z.forEach(i),An=l(t),M(ut.$$.fragment,t),Yn=l(t),j=m(t,"DIV",{class:!0});var I=v(j);M(ht.$$.fragment,I),Gs=l(I),Ot=m(I,"P",{"data-svelte-h":!0}),g(Ot)!=="svelte-1xelfoh"&&(Ot.innerHTML=ba),Ns=l(I),Kt=m(I,"P",{"data-svelte-h":!0}),g(Kt)!=="svelte-1w0u28z"&&(Kt.innerHTML=ya),Qs=l(I),en=m(I,"P",{"data-svelte-h":!0}),g(en)!=="svelte-6pahdo"&&(en.innerHTML=Ta),Es=l(I),tn=m(I,"P",{"data-svelte-h":!0}),g(tn)!=="svelte-hswkmf"&&(tn.innerHTML=wa),Ls=l(I),nn=m(I,"P",{"data-svelte-h":!0}),g(nn)!=="svelte-7hyh0a"&&(nn.innerHTML=ka),Hs=l(I),M(ke.$$.fragment,I),As=l(I),M(ze.$$.fragment,I),Ys=l(I),ee=m(I,"DIV",{class:!0});var le=v(ee);M(ft.$$.fragment,le),Ps=l(le),sn=m(le,"P",{"data-svelte-h":!0}),g(sn)!=="svelte-9jiou0"&&(sn.innerHTML=za),Ds=l(le),M($e.$$.fragment,le),Os=l(le),M(je.$$.fragment,le),le.forEach(i),I.forEach(i),Pn=l(t),M(gt.$$.fragment,t),Dn=l(t),B=m(t,"DIV",{class:!0});var V=v(B);M(_t.$$.fragment,V),Ks=l(V),on=m(V,"P",{"data-svelte-h":!0}),g(on)!=="svelte-13ur6tp"&&(on.textContent=$a),eo=l(V),an=m(V,"P",{"data-svelte-h":!0}),g(an)!=="svelte-1w0u28z"&&(an.innerHTML=ja),to=l(V),rn=m(V,"P",{"data-svelte-h":!0}),g(rn)!=="svelte-6pahdo"&&(rn.innerHTML=Ba),no=l(V),ln=m(V,"P",{"data-svelte-h":!0}),g(ln)!=="svelte-hswkmf"&&(ln.innerHTML=qa),so=l(V),dn=m(V,"P",{"data-svelte-h":!0}),g(dn)!=="svelte-7hyh0a"&&(dn.innerHTML=Ja),oo=l(V),M(Be.$$.fragment,V),ao=l(V),M(qe.$$.fragment,V),ro=l(V),L=m(V,"DIV",{class:!0});var Y=v(L);M(Mt.$$.fragment,Y),lo=l(Y),cn=m(Y,"P",{"data-svelte-h":!0}),g(cn)!=="svelte-289tza"&&(cn.innerHTML=Ca),io=l(Y),M(Je.$$.fragment,Y),co=l(Y),M(Ce.$$.fragment,Y),po=l(Y),M(ve.$$.fragment,Y),Y.forEach(i),V.forEach(i),On=l(t),M(bt.$$.fragment,t),Kn=l(t),q=m(t,"DIV",{class:!0});var W=v(q);M(yt.$$.fragment,W),mo=l(W),pn=m(W,"P",{"data-svelte-h":!0}),g(pn)!=="svelte-16ytd0h"&&(pn.textContent=va),uo=l(W),mn=m(W,"P",{"data-svelte-h":!0}),g(mn)!=="svelte-1w0u28z"&&(mn.innerHTML=Ua),ho=l(W),un=m(W,"P",{"data-svelte-h":!0}),g(un)!=="svelte-6pahdo"&&(un.innerHTML=Sa),fo=l(W),hn=m(W,"P",{"data-svelte-h":!0}),g(hn)!=="svelte-hswkmf"&&(hn.innerHTML=xa),go=l(W),fn=m(W,"P",{"data-svelte-h":!0}),g(fn)!=="svelte-7hyh0a"&&(fn.innerHTML=Za),_o=l(W),M(Ue.$$.fragment,W),Mo=l(W),M(Se.$$.fragment,W),bo=l(W),te=m(W,"DIV",{class:!0});var ie=v(te);M(Tt.$$.fragment,ie),yo=l(ie),gn=m(ie,"P",{"data-svelte-h":!0}),g(gn)!=="svelte-1n5vgue"&&(gn.innerHTML=Ia),To=l(ie),M(xe.$$.fragment,ie),wo=l(ie),M(Ze.$$.fragment,ie),ie.forEach(i),W.forEach(i),es=l(t),M(wt.$$.fragment,t),ts=l(t),J=m(t,"DIV",{class:!0});var F=v(J);M(kt.$$.fragment,F),ko=l(F),_n=m(F,"P",{"data-svelte-h":!0}),g(_n)!=="svelte-mxl4k"&&(_n.textContent=Va),zo=l(F),Mn=m(F,"P",{"data-svelte-h":!0}),g(Mn)!=="svelte-1w0u28z"&&(Mn.innerHTML=Wa),$o=l(F),bn=m(F,"P",{"data-svelte-h":!0}),g(bn)!=="svelte-6pahdo"&&(bn.innerHTML=Fa),jo=l(F),yn=m(F,"P",{"data-svelte-h":!0}),g(yn)!=="svelte-hswkmf"&&(yn.innerHTML=Xa),Bo=l(F),Tn=m(F,"P",{"data-svelte-h":!0}),g(Tn)!=="svelte-7hyh0a"&&(Tn.innerHTML=Ra),qo=l(F),M(Ie.$$.fragment,F),Jo=l(F),M(Ve.$$.fragment,F),Co=l(F),ne=m(F,"DIV",{class:!0});var de=v(ne);M(zt.$$.fragment,de),vo=l(de),wn=m(de,"P",{"data-svelte-h":!0}),g(wn)!=="svelte-t83vvo"&&(wn.innerHTML=Ga),Uo=l(de),M(We.$$.fragment,de),So=l(de),M(Fe.$$.fragment,de),de.forEach(i),F.forEach(i),ns=l(t),M($t.$$.fragment,t),ss=l(t),C=m(t,"DIV",{class:!0});var X=v(C);M(jt.$$.fragment,X),xo=l(X),kn=m(X,"P",{"data-svelte-h":!0}),g(kn)!=="svelte-23oevy"&&(kn.innerHTML=Na),Zo=l(X),zn=m(X,"P",{"data-svelte-h":!0}),g(zn)!=="svelte-1w0u28z"&&(zn.innerHTML=Qa),Io=l(X),$n=m(X,"P",{"data-svelte-h":!0}),g($n)!=="svelte-6pahdo"&&($n.innerHTML=Ea),Vo=l(X),jn=m(X,"P",{"data-svelte-h":!0}),g(jn)!=="svelte-hswkmf"&&(jn.innerHTML=La),Wo=l(X),Bn=m(X,"P",{"data-svelte-h":!0}),g(Bn)!=="svelte-7hyh0a"&&(Bn.innerHTML=Ha),Fo=l(X),M(Xe.$$.fragment,X),Xo=l(X),M(Re.$$.fragment,X),Ro=l(X),se=m(X,"DIV",{class:!0});var ce=v(se);M(Bt.$$.fragment,ce),Go=l(ce),qn=m(ce,"P",{"data-svelte-h":!0}),g(qn)!=="svelte-10xr68o"&&(qn.innerHTML=Aa),No=l(ce),M(Ge.$$.fragment,ce),Qo=l(ce),M(Ne.$$.fragment,ce),ce.forEach(i),X.forEach(i),os=l(t),Cn=m(t,"P",{}),v(Cn).forEach(i),this.h()},h(){U(n,"name","hf:doc:metadata"),U(n,"content",Ir),U(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,d){o(document.head,n),u(t,f,d),u(t,a,d),u(t,s,d),b(c,t,d),u(t,e,d),b(h,t,d),u(t,Un,d),u(t,Qe,d),u(t,Sn,d),u(t,Ee,d),u(t,xn,d),u(t,Le,d),u(t,Zn,d),u(t,He,d),u(t,In,d),b(Ae,t,d),u(t,Vn,d),u(t,Ye,d),u(t,Wn,d),b(Pe,t,d),u(t,Fn,d),u(t,De,d),u(t,Xn,d),b(Oe,t,d),u(t,Rn,d),u(t,Q,d),b(Ke,Q,null),o(Q,rs),o(Q,Jt),o(Q,ls),o(Q,Ct),o(Q,is),b(fe,Q,null),o(Q,ds),o(Q,vt),u(t,Gn,d),b(et,t,d),u(t,Nn,d),u(t,G,d),b(tt,G,null),o(G,cs),o(G,Ut),o(G,ps),o(G,St),o(G,ms),o(G,pe),b(nt,pe,null),o(pe,us),o(pe,xt),o(pe,hs),o(pe,Zt),o(G,fs),o(G,ge),b(st,ge,null),o(ge,gs),o(ge,It),o(G,_s),o(G,D),b(ot,D,null),o(D,Ms),o(D,Vt),o(D,bs),b(_e,D,null),o(D,ys),o(D,Wt),o(G,Ts),o(G,Ft),b(at,Ft,null),u(t,Qn,d),b(rt,t,d),u(t,En,d),u(t,E,d),b(lt,E,null),o(E,ws),o(E,Xt),o(E,ks),o(E,Rt),o(E,zs),o(E,me),b(it,me,null),o(me,$s),o(me,Gt),o(me,js),o(me,Nt),o(E,Bs),o(E,O),b(dt,O,null),o(O,qs),o(O,Qt),o(O,Js),b(Me,O,null),o(O,Cs),o(O,Et),u(t,Ln,d),b(ct,t,d),u(t,Hn,d),u(t,$,d),b(pt,$,null),o($,vs),o($,Lt),o($,Us),o($,Ht),o($,Ss),o($,At),o($,xs),o($,Yt),o($,Zs),o($,Pt),o($,Is),b(be,$,null),o($,Vs),b(ye,$,null),o($,Ws),o($,K),b(mt,K,null),o(K,Fs),o(K,Dt),o(K,Xs),b(Te,K,null),o(K,Rs),b(we,K,null),u(t,An,d),b(ut,t,d),u(t,Yn,d),u(t,j,d),b(ht,j,null),o(j,Gs),o(j,Ot),o(j,Ns),o(j,Kt),o(j,Qs),o(j,en),o(j,Es),o(j,tn),o(j,Ls),o(j,nn),o(j,Hs),b(ke,j,null),o(j,As),b(ze,j,null),o(j,Ys),o(j,ee),b(ft,ee,null),o(ee,Ps),o(ee,sn),o(ee,Ds),b($e,ee,null),o(ee,Os),b(je,ee,null),u(t,Pn,d),b(gt,t,d),u(t,Dn,d),u(t,B,d),b(_t,B,null),o(B,Ks),o(B,on),o(B,eo),o(B,an),o(B,to),o(B,rn),o(B,no),o(B,ln),o(B,so),o(B,dn),o(B,oo),b(Be,B,null),o(B,ao),b(qe,B,null),o(B,ro),o(B,L),b(Mt,L,null),o(L,lo),o(L,cn),o(L,io),b(Je,L,null),o(L,co),b(Ce,L,null),o(L,po),b(ve,L,null),u(t,On,d),b(bt,t,d),u(t,Kn,d),u(t,q,d),b(yt,q,null),o(q,mo),o(q,pn),o(q,uo),o(q,mn),o(q,ho),o(q,un),o(q,fo),o(q,hn),o(q,go),o(q,fn),o(q,_o),b(Ue,q,null),o(q,Mo),b(Se,q,null),o(q,bo),o(q,te),b(Tt,te,null),o(te,yo),o(te,gn),o(te,To),b(xe,te,null),o(te,wo),b(Ze,te,null),u(t,es,d),b(wt,t,d),u(t,ts,d),u(t,J,d),b(kt,J,null),o(J,ko),o(J,_n),o(J,zo),o(J,Mn),o(J,$o),o(J,bn),o(J,jo),o(J,yn),o(J,Bo),o(J,Tn),o(J,qo),b(Ie,J,null),o(J,Jo),b(Ve,J,null),o(J,Co),o(J,ne),b(zt,ne,null),o(ne,vo),o(ne,wn),o(ne,Uo),b(We,ne,null),o(ne,So),b(Fe,ne,null),u(t,ns,d),b($t,t,d),u(t,ss,d),u(t,C,d),b(jt,C,null),o(C,xo),o(C,kn),o(C,Zo),o(C,zn),o(C,Io),o(C,$n),o(C,Vo),o(C,jn),o(C,Wo),o(C,Bn),o(C,Fo),b(Xe,C,null),o(C,Xo),b(Re,C,null),o(C,Ro),o(C,se),b(Bt,se,null),o(se,Go),o(se,qn),o(se,No),b(Ge,se,null),o(se,Qo),b(Ne,se,null),u(t,os,d),u(t,Cn,d),as=!0},p(t,[d]){const H={};d&2&&(H.$$scope={dirty:d,ctx:t}),fe.$set(H);const N={};d&2&&(N.$$scope={dirty:d,ctx:t}),_e.$set(N);const ue={};d&2&&(ue.$$scope={dirty:d,ctx:t}),Me.$set(ue);const qt={};d&2&&(qt.$$scope={dirty:d,ctx:t}),be.$set(qt);const oe={};d&2&&(oe.$$scope={dirty:d,ctx:t}),ye.$set(oe);const vn={};d&2&&(vn.$$scope={dirty:d,ctx:t}),Te.$set(vn);const A={};d&2&&(A.$$scope={dirty:d,ctx:t}),we.$set(A);const he={};d&2&&(he.$$scope={dirty:d,ctx:t}),ke.$set(he);const ae={};d&2&&(ae.$$scope={dirty:d,ctx:t}),ze.$set(ae);const Z={};d&2&&(Z.$$scope={dirty:d,ctx:t}),$e.$set(Z);const re={};d&2&&(re.$$scope={dirty:d,ctx:t}),je.$set(re);const I={};d&2&&(I.$$scope={dirty:d,ctx:t}),Be.$set(I);const le={};d&2&&(le.$$scope={dirty:d,ctx:t}),qe.$set(le);const V={};d&2&&(V.$$scope={dirty:d,ctx:t}),Je.$set(V);const Y={};d&2&&(Y.$$scope={dirty:d,ctx:t}),Ce.$set(Y);const W={};d&2&&(W.$$scope={dirty:d,ctx:t}),ve.$set(W);const ie={};d&2&&(ie.$$scope={dirty:d,ctx:t}),Ue.$set(ie);const F={};d&2&&(F.$$scope={dirty:d,ctx:t}),Se.$set(F);const de={};d&2&&(de.$$scope={dirty:d,ctx:t}),xe.$set(de);const X={};d&2&&(X.$$scope={dirty:d,ctx:t}),Ze.$set(X);const ce={};d&2&&(ce.$$scope={dirty:d,ctx:t}),Ie.$set(ce);const Ya={};d&2&&(Ya.$$scope={dirty:d,ctx:t}),Ve.$set(Ya);const Pa={};d&2&&(Pa.$$scope={dirty:d,ctx:t}),We.$set(Pa);const Da={};d&2&&(Da.$$scope={dirty:d,ctx:t}),Fe.$set(Da);const Oa={};d&2&&(Oa.$$scope={dirty:d,ctx:t}),Xe.$set(Oa);const Ka={};d&2&&(Ka.$$scope={dirty:d,ctx:t}),Re.$set(Ka);const er={};d&2&&(er.$$scope={dirty:d,ctx:t}),Ge.$set(er);const tr={};d&2&&(tr.$$scope={dirty:d,ctx:t}),Ne.$set(tr)},i(t){as||(y(c.$$.fragment,t),y(h.$$.fragment,t),y(Ae.$$.fragment,t),y(Pe.$$.fragment,t),y(Oe.$$.fragment,t),y(Ke.$$.fragment,t),y(fe.$$.fragment,t),y(et.$$.fragment,t),y(tt.$$.fragment,t),y(nt.$$.fragment,t),y(st.$$.fragment,t),y(ot.$$.fragment,t),y(_e.$$.fragment,t),y(at.$$.fragment,t),y(rt.$$.fragment,t),y(lt.$$.fragment,t),y(it.$$.fragment,t),y(dt.$$.fragment,t),y(Me.$$.fragment,t),y(ct.$$.fragment,t),y(pt.$$.fragment,t),y(be.$$.fragment,t),y(ye.$$.fragment,t),y(mt.$$.fragment,t),y(Te.$$.fragment,t),y(we.$$.fragment,t),y(ut.$$.fragment,t),y(ht.$$.fragment,t),y(ke.$$.fragment,t),y(ze.$$.fragment,t),y(ft.$$.fragment,t),y($e.$$.fragment,t),y(je.$$.fragment,t),y(gt.$$.fragment,t),y(_t.$$.fragment,t),y(Be.$$.fragment,t),y(qe.$$.fragment,t),y(Mt.$$.fragment,t),y(Je.$$.fragment,t),y(Ce.$$.fragment,t),y(ve.$$.fragment,t),y(bt.$$.fragment,t),y(yt.$$.fragment,t),y(Ue.$$.fragment,t),y(Se.$$.fragment,t),y(Tt.$$.fragment,t),y(xe.$$.fragment,t),y(Ze.$$.fragment,t),y(wt.$$.fragment,t),y(kt.$$.fragment,t),y(Ie.$$.fragment,t),y(Ve.$$.fragment,t),y(zt.$$.fragment,t),y(We.$$.fragment,t),y(Fe.$$.fragment,t),y($t.$$.fragment,t),y(jt.$$.fragment,t),y(Xe.$$.fragment,t),y(Re.$$.fragment,t),y(Bt.$$.fragment,t),y(Ge.$$.fragment,t),y(Ne.$$.fragment,t),as=!0)},o(t){T(c.$$.fragment,t),T(h.$$.fragment,t),T(Ae.$$.fragment,t),T(Pe.$$.fragment,t),T(Oe.$$.fragment,t),T(Ke.$$.fragment,t),T(fe.$$.fragment,t),T(et.$$.fragment,t),T(tt.$$.fragment,t),T(nt.$$.fragment,t),T(st.$$.fragment,t),T(ot.$$.fragment,t),T(_e.$$.fragment,t),T(at.$$.fragment,t),T(rt.$$.fragment,t),T(lt.$$.fragment,t),T(it.$$.fragment,t),T(dt.$$.fragment,t),T(Me.$$.fragment,t),T(ct.$$.fragment,t),T(pt.$$.fragment,t),T(be.$$.fragment,t),T(ye.$$.fragment,t),T(mt.$$.fragment,t),T(Te.$$.fragment,t),T(we.$$.fragment,t),T(ut.$$.fragment,t),T(ht.$$.fragment,t),T(ke.$$.fragment,t),T(ze.$$.fragment,t),T(ft.$$.fragment,t),T($e.$$.fragment,t),T(je.$$.fragment,t),T(gt.$$.fragment,t),T(_t.$$.fragment,t),T(Be.$$.fragment,t),T(qe.$$.fragment,t),T(Mt.$$.fragment,t),T(Je.$$.fragment,t),T(Ce.$$.fragment,t),T(ve.$$.fragment,t),T(bt.$$.fragment,t),T(yt.$$.fragment,t),T(Ue.$$.fragment,t),T(Se.$$.fragment,t),T(Tt.$$.fragment,t),T(xe.$$.fragment,t),T(Ze.$$.fragment,t),T(wt.$$.fragment,t),T(kt.$$.fragment,t),T(Ie.$$.fragment,t),T(Ve.$$.fragment,t),T(zt.$$.fragment,t),T(We.$$.fragment,t),T(Fe.$$.fragment,t),T($t.$$.fragment,t),T(jt.$$.fragment,t),T(Xe.$$.fragment,t),T(Re.$$.fragment,t),T(Bt.$$.fragment,t),T(Ge.$$.fragment,t),T(Ne.$$.fragment,t),as=!1},d(t){t&&(i(f),i(a),i(s),i(e),i(Un),i(Qe),i(Sn),i(Ee),i(xn),i(Le),i(Zn),i(He),i(In),i(Vn),i(Ye),i(Wn),i(Fn),i(De),i(Xn),i(Rn),i(Q),i(Gn),i(Nn),i(G),i(Qn),i(En),i(E),i(Ln),i(Hn),i($),i(An),i(Yn),i(j),i(Pn),i(Dn),i(B),i(On),i(Kn),i(q),i(es),i(ts),i(J),i(ns),i(ss),i(C),i(os),i(Cn)),i(n),w(c,t),w(h,t),w(Ae,t),w(Pe,t),w(Oe,t),w(Ke),w(fe),w(et,t),w(tt),w(nt),w(st),w(ot),w(_e),w(at),w(rt,t),w(lt),w(it),w(dt),w(Me),w(ct,t),w(pt),w(be),w(ye),w(mt),w(Te),w(we),w(ut,t),w(ht),w(ke),w(ze),w(ft),w($e),w(je),w(gt,t),w(_t),w(Be),w(qe),w(Mt),w(Je),w(Ce),w(ve),w(bt,t),w(yt),w(Ue),w(Se),w(Tt),w(xe),w(Ze),w(wt,t),w(kt),w(Ie),w(Ve),w(zt),w(We),w(Fe),w($t,t),w(jt),w(Xe),w(Re),w(Bt),w(Ge),w(Ne)}}}const Ir='{"title":"SqueezeBERT","local":"squeezebert","sections":[{"title":"Overview","local":"overview","sections":[],"depth":2},{"title":"Usage tips","local":"usage-tips","sections":[],"depth":2},{"title":"Resources","local":"resources","sections":[],"depth":2},{"title":"SqueezeBertConfig","local":"transformers.SqueezeBertConfig","sections":[],"depth":2},{"title":"SqueezeBertTokenizer","local":"transformers.SqueezeBertTokenizer","sections":[],"depth":2},{"title":"SqueezeBertTokenizerFast","local":"transformers.SqueezeBertTokenizerFast","sections":[],"depth":2},{"title":"SqueezeBertModel","local":"transformers.SqueezeBertModel","sections":[],"depth":2},{"title":"SqueezeBertForMaskedLM","local":"transformers.SqueezeBertForMaskedLM","sections":[],"depth":2},{"title":"SqueezeBertForSequenceClassification","local":"transformers.SqueezeBertForSequenceClassification","sections":[],"depth":2},{"title":"SqueezeBertForMultipleChoice","local":"transformers.SqueezeBertForMultipleChoice","sections":[],"depth":2},{"title":"SqueezeBertForTokenClassification","local":"transformers.SqueezeBertForTokenClassification","sections":[],"depth":2},{"title":"SqueezeBertForQuestionAnswering","local":"transformers.SqueezeBertForQuestionAnswering","sections":[],"depth":2}],"depth":1}';function Vr(k){return sr(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Er extends or{constructor(n){super(),ar(this,n,Vr,Zr,nr,{})}}export{Er as component};
