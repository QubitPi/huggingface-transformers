import{s as gt,o as ht,n as Re}from"../chunks/scheduler.9bc65507.js";import{S as kt,i as $t,g as l,s as a,r as g,A as vt,h as p,f as n,c as o,j as z,u as h,x as f,k as I,y as t,a as m,v as k,d as $,t as v,w as b}from"../chunks/index.707bf1b6.js";import{T as bt}from"../chunks/Tip.c2ecdbf4.js";import{D as V}from"../chunks/Docstring.17db21ae.js";import{C as _t}from"../chunks/CodeBlock.54a9f38d.js";import{E as ut}from"../chunks/ExampleCodeBlock.4f515aa9.js";import{H as ze}from"../chunks/Heading.342b1fa6.js";function wt(q){let i,x=`CPMâ€™s architecture is the same as GPT-2, except for tokenization method. Refer to <a href="gpt2">GPT-2 documentation</a> for
API reference information.`;return{c(){i=l("p"),i.innerHTML=x},l(d){i=p(d,"P",{"data-svelte-h":!0}),f(i)!=="svelte-fdozrf"&&(i.innerHTML=x)},m(d,c){m(d,i,c)},p:Re,d(d){d&&n(i)}}}function Ct(q){let i,x="sequence pair mask has the following format:",d,c,u;return c=new _t({props:{code:"MCUyMDAlMjAwJTIwMCUyMDAlMjAwJTIwMCUyMDAlMjAwJTIwMCUyMDAlMjAxJTIwMSUyMDElMjAxJTIwMSUyMDElMjAxJTIwMSUyMDElMEElN0MlMjBmaXJzdCUyMHNlcXVlbmNlJTIwJTIwJTIwJTIwJTdDJTIwc2Vjb25kJTIwc2VxdWVuY2UlMjAlN0M=",highlighted:`0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1 1
| first sequence    | second sequence |`,wrap:!1}}),{c(){i=l("p"),i.textContent=x,d=a(),g(c.$$.fragment)},l(r){i=p(r,"P",{"data-svelte-h":!0}),f(i)!=="svelte-16klr56"&&(i.textContent=x),d=o(r),h(c.$$.fragment,r)},m(r,w){m(r,i,w),m(r,d,w),k(c,r,w),u=!0},p:Re,i(r){u||($(c.$$.fragment,r),u=!0)},o(r){v(c.$$.fragment,r),u=!1},d(r){r&&(n(i),n(d)),b(c,r)}}}function xt(q){let i,x="sequence pair mask has the following format:",d,c,u;return c=new _t({props:{code:"MCUyMDAlMjAwJTIwMCUyMDAlMjAwJTIwMCUyMDAlMjAwJTIwMCUyMDAlMjAxJTIwMSUyMDElMjAxJTIwMSUyMDElMjAxJTIwMSUyMDElMEElN0MlMjBmaXJzdCUyMHNlcXVlbmNlJTIwJTIwJTIwJTIwJTdDJTIwc2Vjb25kJTIwc2VxdWVuY2UlMjAlN0M=",highlighted:`0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1 1
| first sequence    | second sequence |`,wrap:!1}}),{c(){i=l("p"),i.textContent=x,d=a(),g(c.$$.fragment)},l(r){i=p(r,"P",{"data-svelte-h":!0}),f(i)!=="svelte-16klr56"&&(i.textContent=x),d=o(r),h(c.$$.fragment,r)},m(r,w){m(r,i,w),m(r,d,w),k(c,r,w),u=!0},p:Re,i(r){u||($(c.$$.fragment,r),u=!0)},o(r){v(c.$$.fragment,r),u=!1},d(r){r&&(n(i),n(d)),b(c,r)}}}function Tt(q){let i,x,d,c,u,r,w,ke,G,We=`The CPM model was proposed in <a href="https://arxiv.org/abs/2012.00413" rel="nofollow">CPM: A Large-scale Generative Chinese Pre-trained Language Model</a> by Zhengyan Zhang, Xu Han, Hao Zhou, Pei Ke, Yuxian Gu, Deming Ye, Yujia Qin,
Yusheng Su, Haozhe Ji, Jian Guan, Fanchao Qi, Xiaozhi Wang, Yanan Zheng, Guoyang Zeng, Huanqi Cao, Shengqi Chen,
Daixuan Li, Zhenbo Sun, Zhiyuan Liu, Minlie Huang, Wentao Han, Jie Tang, Juanzi Li, Xiaoyan Zhu, Maosong Sun.`,$e,O,Ke="The abstract from the paper is the following:",ve,S,et=`<em>Pre-trained Language Models (PLMs) have proven to be beneficial for various downstream NLP tasks. Recently, GPT-3,
with 175 billion parameters and 570GB training data, drew a lot of attention due to the capacity of few-shot (even
zero-shot) learning. However, applying GPT-3 to address Chinese NLP tasks is still challenging, as the training corpus
of GPT-3 is primarily English, and the parameters are not publicly available. In this technical report, we release the
Chinese Pre-trained Language Model (CPM) with generative pre-training on large-scale Chinese training data. To the best
of our knowledge, CPM, with 2.6 billion parameters and 100GB Chinese training data, is the largest Chinese pre-trained
language model, which could facilitate several downstream Chinese NLP tasks, such as conversation, essay generation,
cloze test, and language understanding. Extensive experiments demonstrate that CPM achieves strong performance on many
NLP tasks in the settings of few-shot (even zero-shot) learning.</em>`,be,X,tt=`This model was contributed by <a href="https://huggingface.co/canwenxu" rel="nofollow">canwenxu</a>. The original implementation can be found
here: <a href="https://github.com/TsinghuaAI/CPM-Generate" rel="nofollow">https://github.com/TsinghuaAI/CPM-Generate</a>`,we,j,Ce,B,xe,_,Q,Ie,ae,nt="Runs pre-tokenization with Jieba segmentation tool. It is used in CPM models.",De,L,Z,qe,oe,st=`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An XLNet sequence has the following format:`,je,re,at="<li>single sequence: <code>X &lt;sep&gt; &lt;cls&gt;</code></li> <li>pair of sequences: <code>A &lt;sep&gt; B &lt;sep&gt; &lt;cls&gt;</code></li>",Ae,A,Y,Je,ie,ot="Converts a sequence of tokens (strings for sub-words) in a single string.",He,M,R,Ee,le,rt="Create a mask from the two sequences passed to be used in a sequence-pair classification task. An XLNet",Ne,J,Ue,pe,it="If <code>token_ids_1</code> is <code>None</code>, this method only returns the first portion of the mask (0s).",Fe,H,W,Ve,me,lt=`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer <code>prepare_for_model</code> method.`,Te,K,Me,T,ee,Ge,ce,pt="Runs pre-tokenization with Jieba segmentation tool. It is used in CPM models.",Oe,P,te,Se,de,mt=`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An XLNet sequence has the following format:`,Xe,fe,ct="<li>single sequence: <code>X &lt;sep&gt; &lt;cls&gt;</code></li> <li>pair of sequences: <code>A &lt;sep&gt; B &lt;sep&gt; &lt;cls&gt;</code></li>",Be,y,ne,Qe,ue,dt="Create a mask from the two sequences passed to be used in a sequence-pair classification task. An XLNet",Ze,E,Ye,_e,ft="If <code>token_ids_1</code> is <code>None</code>, this method only returns the first portion of the mask (0s).",ye,he,Le;return u=new ze({props:{title:"CPM",local:"cpm",headingTag:"h1"}}),w=new ze({props:{title:"Overview",local:"overview",headingTag:"h2"}}),j=new bt({props:{$$slots:{default:[wt]},$$scope:{ctx:q}}}),B=new ze({props:{title:"CpmTokenizer",local:"transformers.CpmTokenizer",headingTag:"h2"}}),Q=new V({props:{name:"class transformers.CpmTokenizer",anchor:"transformers.CpmTokenizer",parameters:[{name:"vocab_file",val:""},{name:"do_lower_case",val:" = False"},{name:"remove_space",val:" = True"},{name:"keep_accents",val:" = False"},{name:"bos_token",val:" = '<s>'"},{name:"eos_token",val:" = '</s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"sep_token",val:" = '<sep>'"},{name:"pad_token",val:" = '<pad>'"},{name:"cls_token",val:" = '<cls>'"},{name:"mask_token",val:" = '<mask>'"},{name:"additional_special_tokens",val:" = ['<eop>', '<eod>']"},{name:"sp_model_kwargs",val:": Optional = None"},{name:"**kwargs",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/cpm/tokenization_cpm.py#L38"}}),Z=new V({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.CpmTokenizer.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": List"},{name:"token_ids_1",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.CpmTokenizer.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.CpmTokenizer.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/cpm/tokenization_cpm.py#L245",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>List[int]</code></p>
`}}),Y=new V({props:{name:"convert_tokens_to_string",anchor:"transformers.CpmTokenizer.convert_tokens_to_string",parameters:[{name:"tokens",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/cpm/tokenization_cpm.py#L239"}}),R=new V({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.CpmTokenizer.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": List"},{name:"token_ids_1",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.CpmTokenizer.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.CpmTokenizer.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/cpm/tokenization_cpm.py#L300",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>List of <a href="../glossary#token-type-ids">token type IDs</a> according to the given sequence(s).</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>List[int]</code></p>
`}}),J=new ut({props:{anchor:"transformers.CpmTokenizer.create_token_type_ids_from_sequences.example",$$slots:{default:[Ct]},$$scope:{ctx:q}}}),W=new V({props:{name:"get_special_tokens_mask",anchor:"transformers.CpmTokenizer.get_special_tokens_mask",parameters:[{name:"token_ids_0",val:": List"},{name:"token_ids_1",val:": Optional = None"},{name:"already_has_special_tokens",val:": bool = False"}],parametersDescription:[{anchor:"transformers.CpmTokenizer.get_special_tokens_mask.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.CpmTokenizer.get_special_tokens_mask.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"},{anchor:"transformers.CpmTokenizer.get_special_tokens_mask.already_has_special_tokens",description:`<strong>already_has_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the token list is already formatted with special tokens for the model.`,name:"already_has_special_tokens"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/cpm/tokenization_cpm.py#L271",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>List[int]</code></p>
`}}),K=new ze({props:{title:"CpmTokenizerFast",local:"transformers.CpmTokenizerFast",headingTag:"h2"}}),ee=new V({props:{name:"class transformers.CpmTokenizerFast",anchor:"transformers.CpmTokenizerFast",parameters:[{name:"vocab_file",val:" = None"},{name:"tokenizer_file",val:" = None"},{name:"do_lower_case",val:" = False"},{name:"remove_space",val:" = True"},{name:"keep_accents",val:" = False"},{name:"bos_token",val:" = '<s>'"},{name:"eos_token",val:" = '</s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"sep_token",val:" = '<sep>'"},{name:"pad_token",val:" = '<pad>'"},{name:"cls_token",val:" = '<cls>'"},{name:"mask_token",val:" = '<mask>'"},{name:"additional_special_tokens",val:" = ['<eop>', '<eod>']"},{name:"**kwargs",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/cpm/tokenization_cpm_fast.py#L38"}}),te=new V({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.CpmTokenizerFast.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": List"},{name:"token_ids_1",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.CpmTokenizerFast.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.CpmTokenizerFast.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/cpm/tokenization_cpm_fast.py#L160",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>List[int]</code></p>
`}}),ne=new V({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.CpmTokenizerFast.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": List"},{name:"token_ids_1",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.CpmTokenizerFast.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.CpmTokenizerFast.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/cpm/tokenization_cpm_fast.py#L186",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>List of <a href="../glossary#token-type-ids">token type IDs</a> according to the given sequence(s).</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>List[int]</code></p>
`}}),E=new ut({props:{anchor:"transformers.CpmTokenizerFast.create_token_type_ids_from_sequences.example",$$slots:{default:[xt]},$$scope:{ctx:q}}}),{c(){i=l("meta"),x=a(),d=l("p"),c=a(),g(u.$$.fragment),r=a(),g(w.$$.fragment),ke=a(),G=l("p"),G.innerHTML=We,$e=a(),O=l("p"),O.textContent=Ke,ve=a(),S=l("p"),S.innerHTML=et,be=a(),X=l("p"),X.innerHTML=tt,we=a(),g(j.$$.fragment),Ce=a(),g(B.$$.fragment),xe=a(),_=l("div"),g(Q.$$.fragment),Ie=a(),ae=l("p"),ae.textContent=nt,De=a(),L=l("div"),g(Z.$$.fragment),qe=a(),oe=l("p"),oe.textContent=st,je=a(),re=l("ul"),re.innerHTML=at,Ae=a(),A=l("div"),g(Y.$$.fragment),Je=a(),ie=l("p"),ie.textContent=ot,He=a(),M=l("div"),g(R.$$.fragment),Ee=a(),le=l("p"),le.textContent=rt,Ne=a(),g(J.$$.fragment),Ue=a(),pe=l("p"),pe.innerHTML=it,Fe=a(),H=l("div"),g(W.$$.fragment),Ve=a(),me=l("p"),me.innerHTML=lt,Te=a(),g(K.$$.fragment),Me=a(),T=l("div"),g(ee.$$.fragment),Ge=a(),ce=l("p"),ce.textContent=pt,Oe=a(),P=l("div"),g(te.$$.fragment),Se=a(),de=l("p"),de.textContent=mt,Xe=a(),fe=l("ul"),fe.innerHTML=ct,Be=a(),y=l("div"),g(ne.$$.fragment),Qe=a(),ue=l("p"),ue.textContent=dt,Ze=a(),g(E.$$.fragment),Ye=a(),_e=l("p"),_e.innerHTML=ft,ye=a(),he=l("p"),this.h()},l(e){const s=vt("svelte-u9bgzb",document.head);i=p(s,"META",{name:!0,content:!0}),s.forEach(n),x=o(e),d=p(e,"P",{}),z(d).forEach(n),c=o(e),h(u.$$.fragment,e),r=o(e),h(w.$$.fragment,e),ke=o(e),G=p(e,"P",{"data-svelte-h":!0}),f(G)!=="svelte-pb6aeb"&&(G.innerHTML=We),$e=o(e),O=p(e,"P",{"data-svelte-h":!0}),f(O)!=="svelte-vfdo9a"&&(O.textContent=Ke),ve=o(e),S=p(e,"P",{"data-svelte-h":!0}),f(S)!=="svelte-2grs0w"&&(S.innerHTML=et),be=o(e),X=p(e,"P",{"data-svelte-h":!0}),f(X)!=="svelte-deid5f"&&(X.innerHTML=tt),we=o(e),h(j.$$.fragment,e),Ce=o(e),h(B.$$.fragment,e),xe=o(e),_=p(e,"DIV",{class:!0});var C=z(_);h(Q.$$.fragment,C),Ie=o(C),ae=p(C,"P",{"data-svelte-h":!0}),f(ae)!=="svelte-ejpd0l"&&(ae.textContent=nt),De=o(C),L=p(C,"DIV",{class:!0});var D=z(L);h(Z.$$.fragment,D),qe=o(D),oe=p(D,"P",{"data-svelte-h":!0}),f(oe)!=="svelte-1dgk30w"&&(oe.textContent=st),je=o(D),re=p(D,"UL",{"data-svelte-h":!0}),f(re)!=="svelte-zi1mnq"&&(re.innerHTML=at),D.forEach(n),Ae=o(C),A=p(C,"DIV",{class:!0});var se=z(A);h(Y.$$.fragment,se),Je=o(se),ie=p(se,"P",{"data-svelte-h":!0}),f(ie)!=="svelte-1ne8awa"&&(ie.textContent=ot),se.forEach(n),He=o(C),M=p(C,"DIV",{class:!0});var N=z(M);h(R.$$.fragment,N),Ee=o(N),le=p(N,"P",{"data-svelte-h":!0}),f(le)!=="svelte-1nwvqaq"&&(le.textContent=rt),Ne=o(N),h(J.$$.fragment,N),Ue=o(N),pe=p(N,"P",{"data-svelte-h":!0}),f(pe)!=="svelte-owoxgn"&&(pe.innerHTML=it),N.forEach(n),Fe=o(C),H=p(C,"DIV",{class:!0});var Pe=z(H);h(W.$$.fragment,Pe),Ve=o(Pe),me=p(Pe,"P",{"data-svelte-h":!0}),f(me)!=="svelte-1f4f5kp"&&(me.innerHTML=lt),Pe.forEach(n),C.forEach(n),Te=o(e),h(K.$$.fragment,e),Me=o(e),T=p(e,"DIV",{class:!0});var U=z(T);h(ee.$$.fragment,U),Ge=o(U),ce=p(U,"P",{"data-svelte-h":!0}),f(ce)!=="svelte-ejpd0l"&&(ce.textContent=pt),Oe=o(U),P=p(U,"DIV",{class:!0});var ge=z(P);h(te.$$.fragment,ge),Se=o(ge),de=p(ge,"P",{"data-svelte-h":!0}),f(de)!=="svelte-1dgk30w"&&(de.textContent=mt),Xe=o(ge),fe=p(ge,"UL",{"data-svelte-h":!0}),f(fe)!=="svelte-zi1mnq"&&(fe.innerHTML=ct),ge.forEach(n),Be=o(U),y=p(U,"DIV",{class:!0});var F=z(y);h(ne.$$.fragment,F),Qe=o(F),ue=p(F,"P",{"data-svelte-h":!0}),f(ue)!=="svelte-1nwvqaq"&&(ue.textContent=dt),Ze=o(F),h(E.$$.fragment,F),Ye=o(F),_e=p(F,"P",{"data-svelte-h":!0}),f(_e)!=="svelte-owoxgn"&&(_e.innerHTML=ft),F.forEach(n),U.forEach(n),ye=o(e),he=p(e,"P",{}),z(he).forEach(n),this.h()},h(){I(i,"name","hf:doc:metadata"),I(i,"content",Mt),I(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),I(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),I(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),I(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),I(_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),I(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),I(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),I(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,s){t(document.head,i),m(e,x,s),m(e,d,s),m(e,c,s),k(u,e,s),m(e,r,s),k(w,e,s),m(e,ke,s),m(e,G,s),m(e,$e,s),m(e,O,s),m(e,ve,s),m(e,S,s),m(e,be,s),m(e,X,s),m(e,we,s),k(j,e,s),m(e,Ce,s),k(B,e,s),m(e,xe,s),m(e,_,s),k(Q,_,null),t(_,Ie),t(_,ae),t(_,De),t(_,L),k(Z,L,null),t(L,qe),t(L,oe),t(L,je),t(L,re),t(_,Ae),t(_,A),k(Y,A,null),t(A,Je),t(A,ie),t(_,He),t(_,M),k(R,M,null),t(M,Ee),t(M,le),t(M,Ne),k(J,M,null),t(M,Ue),t(M,pe),t(_,Fe),t(_,H),k(W,H,null),t(H,Ve),t(H,me),m(e,Te,s),k(K,e,s),m(e,Me,s),m(e,T,s),k(ee,T,null),t(T,Ge),t(T,ce),t(T,Oe),t(T,P),k(te,P,null),t(P,Se),t(P,de),t(P,Xe),t(P,fe),t(T,Be),t(T,y),k(ne,y,null),t(y,Qe),t(y,ue),t(y,Ze),k(E,y,null),t(y,Ye),t(y,_e),m(e,ye,s),m(e,he,s),Le=!0},p(e,[s]){const C={};s&2&&(C.$$scope={dirty:s,ctx:e}),j.$set(C);const D={};s&2&&(D.$$scope={dirty:s,ctx:e}),J.$set(D);const se={};s&2&&(se.$$scope={dirty:s,ctx:e}),E.$set(se)},i(e){Le||($(u.$$.fragment,e),$(w.$$.fragment,e),$(j.$$.fragment,e),$(B.$$.fragment,e),$(Q.$$.fragment,e),$(Z.$$.fragment,e),$(Y.$$.fragment,e),$(R.$$.fragment,e),$(J.$$.fragment,e),$(W.$$.fragment,e),$(K.$$.fragment,e),$(ee.$$.fragment,e),$(te.$$.fragment,e),$(ne.$$.fragment,e),$(E.$$.fragment,e),Le=!0)},o(e){v(u.$$.fragment,e),v(w.$$.fragment,e),v(j.$$.fragment,e),v(B.$$.fragment,e),v(Q.$$.fragment,e),v(Z.$$.fragment,e),v(Y.$$.fragment,e),v(R.$$.fragment,e),v(J.$$.fragment,e),v(W.$$.fragment,e),v(K.$$.fragment,e),v(ee.$$.fragment,e),v(te.$$.fragment,e),v(ne.$$.fragment,e),v(E.$$.fragment,e),Le=!1},d(e){e&&(n(x),n(d),n(c),n(r),n(ke),n(G),n($e),n(O),n(ve),n(S),n(be),n(X),n(we),n(Ce),n(xe),n(_),n(Te),n(Me),n(T),n(ye),n(he)),n(i),b(u,e),b(w,e),b(j,e),b(B,e),b(Q),b(Z),b(Y),b(R),b(J),b(W),b(K,e),b(ee),b(te),b(ne),b(E)}}}const Mt='{"title":"CPM","local":"cpm","sections":[{"title":"Overview","local":"overview","sections":[],"depth":2},{"title":"CpmTokenizer","local":"transformers.CpmTokenizer","sections":[],"depth":2},{"title":"CpmTokenizerFast","local":"transformers.CpmTokenizerFast","sections":[],"depth":2}],"depth":1}';function yt(q){return ht(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class At extends kt{constructor(i){super(),$t(this,i,yt,Tt,gt,{})}}export{At as component};
