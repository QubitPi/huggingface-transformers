import{s as jo,o as Io,n as We}from"../chunks/scheduler.9bc65507.js";import{S as Wo,i as Jo,g as d,s as a,r as f,A as Lo,h as c,f as o,c as r,j as $,u as h,x as T,k as M,y as i,a as l,v as u,d as g,t as _,w as v}from"../chunks/index.707bf1b6.js";import{T as so}from"../chunks/Tip.c2ecdbf4.js";import{D as j}from"../chunks/Docstring.17db21ae.js";import{C as Pt}from"../chunks/CodeBlock.54a9f38d.js";import{E as $t}from"../chunks/ExampleCodeBlock.4f515aa9.js";import{H as Z}from"../chunks/Heading.342b1fa6.js";function Uo(y){let n,x="Example:",m,p,b;return p=new Pt({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFR2bHRDb25maWclMkMlMjBUdmx0TW9kZWwlMEElMEElMjMlMjAlMjMlMjBJbml0aWFsaXppbmclMjBhJTIwVFZMVCUyMFppbmVuZ1RhbmclMkZ0dmx0LWJhc2UlMjBzdHlsZSUyMGNvbmZpZ3VyYXRpb24lMEFjb25maWd1cmF0aW9uJTIwJTNEJTIwVHZsdENvbmZpZygpJTBBJTBBJTIzJTIwJTIzJTIwSW5pdGlhbGl6aW5nJTIwYSUyMG1vZGVsJTIwKHdpdGglMjByYW5kb20lMjB3ZWlnaHRzKSUyMGZyb20lMjB0aGUlMjBaaW5lbmdUYW5nJTJGdHZsdC1iYXNlJTIwc3R5bGUlMjBjb25maWd1cmF0aW9uJTBBbW9kZWwlMjAlM0QlMjBUdmx0TW9kZWwoY29uZmlndXJhdGlvbiklMEElMEElMjMlMjBBY2Nlc3NpbmclMjB0aGUlMjBtb2RlbCUyMGNvbmZpZ3VyYXRpb24lMEFjb25maWd1cmF0aW9uJTIwJTNEJTIwbW9kZWwuY29uZmln",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TvltConfig, TvltModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># # Initializing a TVLT ZinengTang/tvlt-base style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = TvltConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># # Initializing a model (with random weights) from the ZinengTang/tvlt-base style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TvltModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`,wrap:!1}}),{c(){n=d("p"),n.textContent=x,m=a(),f(p.$$.fragment)},l(s){n=c(s,"P",{"data-svelte-h":!0}),T(n)!=="svelte-11lpom8"&&(n.textContent=x),m=r(s),h(p.$$.fragment,s)},m(s,w){l(s,n,w),l(s,m,w),u(p,s,w),b=!0},p:We,i(s){b||(g(p.$$.fragment,s),b=!0)},o(s){_(p.$$.fragment,s),b=!1},d(s){s&&(o(n),o(m)),v(p,s)}}}function Vo(y){let n,x=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){n=d("p"),n.innerHTML=x},l(m){n=c(m,"P",{"data-svelte-h":!0}),T(n)!=="svelte-fincs2"&&(n.innerHTML=x)},m(m,p){l(m,n,p)},p:We,d(m){m&&o(n)}}}function Ao(y){let n,x="Examples:",m,p,b;return p=new Pt({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFR2bHRQcm9jZXNzb3IlMkMlMjBUdmx0TW9kZWwlMEFpbXBvcnQlMjBudW1weSUyMGFzJTIwbnAlMEFpbXBvcnQlMjB0b3JjaCUwQSUwQW51bV9mcmFtZXMlMjAlM0QlMjA4JTBBaW1hZ2VzJTIwJTNEJTIwbGlzdChucC5yYW5kb20ucmFuZG4obnVtX2ZyYW1lcyUyQyUyMDMlMkMlMjAyMjQlMkMlMjAyMjQpKSUwQWF1ZGlvJTIwJTNEJTIwbGlzdChucC5yYW5kb20ucmFuZG4oMTAwMDApKSUwQSUwQXByb2Nlc3NvciUyMCUzRCUyMFR2bHRQcm9jZXNzb3IuZnJvbV9wcmV0cmFpbmVkKCUyMlppbmVuZ1RhbmclMkZ0dmx0LWJhc2UlMjIpJTBBbW9kZWwlMjAlM0QlMjBUdmx0TW9kZWwuZnJvbV9wcmV0cmFpbmVkKCUyMlppbmVuZ1RhbmclMkZ0dmx0LWJhc2UlMjIpJTBBJTBBaW5wdXRfZGljdCUyMCUzRCUyMHByb2Nlc3NvcihpbWFnZXMlMkMlMjBhdWRpbyUyQyUyMHNhbXBsaW5nX3JhdGUlM0Q0NDEwMCUyQyUyMHJldHVybl90ZW5zb3JzJTNEJTIycHQlMjIpJTBBJTBBb3V0cHV0cyUyMCUzRCUyMG1vZGVsKCoqaW5wdXRfZGljdCklMEFsb3NzJTIwJTNEJTIwb3V0cHV0cy5sb3Nz",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TvltProcessor, TvltModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>num_frames = <span class="hljs-number">8</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>images = <span class="hljs-built_in">list</span>(np.random.randn(num_frames, <span class="hljs-number">3</span>, <span class="hljs-number">224</span>, <span class="hljs-number">224</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>audio = <span class="hljs-built_in">list</span>(np.random.randn(<span class="hljs-number">10000</span>))

<span class="hljs-meta">&gt;&gt;&gt; </span>processor = TvltProcessor.from_pretrained(<span class="hljs-string">&quot;ZinengTang/tvlt-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TvltModel.from_pretrained(<span class="hljs-string">&quot;ZinengTang/tvlt-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>input_dict = processor(images, audio, sampling_rate=<span class="hljs-number">44100</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**input_dict)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss`,wrap:!1}}),{c(){n=d("p"),n.textContent=x,m=a(),f(p.$$.fragment)},l(s){n=c(s,"P",{"data-svelte-h":!0}),T(n)!=="svelte-kvfsh7"&&(n.textContent=x),m=r(s),h(p.$$.fragment,s)},m(s,w){l(s,n,w),l(s,m,w),u(p,s,w),b=!0},p:We,i(s){b||(g(p.$$.fragment,s),b=!0)},o(s){_(p.$$.fragment,s),b=!1},d(s){s&&(o(n),o(m)),v(p,s)}}}function Eo(y){let n,x=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){n=d("p"),n.innerHTML=x},l(m){n=c(m,"P",{"data-svelte-h":!0}),T(n)!=="svelte-fincs2"&&(n.innerHTML=x)},m(m,p){l(m,n,p)},p:We,d(m){m&&o(n)}}}function No(y){let n,x="Examples:",m,p,b;return p=new Pt({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFR2bHRQcm9jZXNzb3IlMkMlMjBUdmx0Rm9yUHJlVHJhaW5pbmclMEFpbXBvcnQlMjBudW1weSUyMGFzJTIwbnAlMEFpbXBvcnQlMjB0b3JjaCUwQSUwQW51bV9mcmFtZXMlMjAlM0QlMjA4JTBBaW1hZ2VzJTIwJTNEJTIwbGlzdChucC5yYW5kb20ucmFuZG4obnVtX2ZyYW1lcyUyQyUyMDMlMkMlMjAyMjQlMkMlMjAyMjQpKSUwQWltYWdlc19taXhlZCUyMCUzRCUyMGxpc3QobnAucmFuZG9tLnJhbmRuKG51bV9mcmFtZXMlMkMlMjAzJTJDJTIwMjI0JTJDJTIwMjI0KSklMEFhdWRpbyUyMCUzRCUyMGxpc3QobnAucmFuZG9tLnJhbmRuKDEwMDAwKSklMEFwcm9jZXNzb3IlMjAlM0QlMjBUdmx0UHJvY2Vzc29yLmZyb21fcHJldHJhaW5lZCglMjJaaW5lbmdUYW5nJTJGdHZsdC1iYXNlJTIyKSUwQW1vZGVsJTIwJTNEJTIwVHZsdEZvclByZVRyYWluaW5nLmZyb21fcHJldHJhaW5lZCglMjJaaW5lbmdUYW5nJTJGdHZsdC1iYXNlJTIyKSUwQWlucHV0X2RpY3QlMjAlM0QlMjBwcm9jZXNzb3IoJTBBJTIwJTIwJTIwJTIwaW1hZ2VzJTJDJTIwYXVkaW8lMkMlMjBpbWFnZXNfbWl4ZWQlMkMlMjBzYW1wbGluZ19yYXRlJTNENDQxMDAlMkMlMjBtYXNrX3BpeGVsJTNEVHJ1ZSUyQyUyMG1hc2tfYXVkaW8lM0RUcnVlJTJDJTIwcmV0dXJuX3RlbnNvcnMlM0QlMjJwdCUyMiUwQSklMEElMEFvdXRwdXRzJTIwJTNEJTIwbW9kZWwoKippbnB1dF9kaWN0KSUwQWxvc3MlMjAlM0QlMjBvdXRwdXRzLmxvc3M=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TvltProcessor, TvltForPreTraining
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>num_frames = <span class="hljs-number">8</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>images = <span class="hljs-built_in">list</span>(np.random.randn(num_frames, <span class="hljs-number">3</span>, <span class="hljs-number">224</span>, <span class="hljs-number">224</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>images_mixed = <span class="hljs-built_in">list</span>(np.random.randn(num_frames, <span class="hljs-number">3</span>, <span class="hljs-number">224</span>, <span class="hljs-number">224</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>audio = <span class="hljs-built_in">list</span>(np.random.randn(<span class="hljs-number">10000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = TvltProcessor.from_pretrained(<span class="hljs-string">&quot;ZinengTang/tvlt-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TvltForPreTraining.from_pretrained(<span class="hljs-string">&quot;ZinengTang/tvlt-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>input_dict = processor(
<span class="hljs-meta">... </span>    images, audio, images_mixed, sampling_rate=<span class="hljs-number">44100</span>, mask_pixel=<span class="hljs-literal">True</span>, mask_audio=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**input_dict)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss`,wrap:!1}}),{c(){n=d("p"),n.textContent=x,m=a(),f(p.$$.fragment)},l(s){n=c(s,"P",{"data-svelte-h":!0}),T(n)!=="svelte-kvfsh7"&&(n.textContent=x),m=r(s),h(p.$$.fragment,s)},m(s,w){l(s,n,w),l(s,m,w),u(p,s,w),b=!0},p:We,i(s){b||(g(p.$$.fragment,s),b=!0)},o(s){_(p.$$.fragment,s),b=!1},d(s){s&&(o(n),o(m)),v(p,s)}}}function Zo(y){let n,x=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){n=d("p"),n.innerHTML=x},l(m){n=c(m,"P",{"data-svelte-h":!0}),T(n)!=="svelte-fincs2"&&(n.innerHTML=x)},m(m,p){l(m,n,p)},p:We,d(m){m&&o(n)}}}function Bo(y){let n,x="Examples:",m,p,b;return p=new Pt({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFR2bHRQcm9jZXNzb3IlMkMlMjBUdmx0Rm9yQXVkaW9WaXN1YWxDbGFzc2lmaWNhdGlvbiUwQWltcG9ydCUyMG51bXB5JTIwYXMlMjBucCUwQWltcG9ydCUyMHRvcmNoJTBBJTBBbnVtX2ZyYW1lcyUyMCUzRCUyMDglMEFpbWFnZXMlMjAlM0QlMjBsaXN0KG5wLnJhbmRvbS5yYW5kbihudW1fZnJhbWVzJTJDJTIwMyUyQyUyMDIyNCUyQyUyMDIyNCkpJTBBYXVkaW8lMjAlM0QlMjBsaXN0KG5wLnJhbmRvbS5yYW5kbigxMDAwMCkpJTBBcHJvY2Vzc29yJTIwJTNEJTIwVHZsdFByb2Nlc3Nvci5mcm9tX3ByZXRyYWluZWQoJTIyWmluZW5nVGFuZyUyRnR2bHQtYmFzZSUyMiklMEFtb2RlbCUyMCUzRCUyMFR2bHRGb3JBdWRpb1Zpc3VhbENsYXNzaWZpY2F0aW9uLmZyb21fcHJldHJhaW5lZCglMjJaaW5lbmdUYW5nJTJGdHZsdC1iYXNlJTIyKSUwQWlucHV0X2RpY3QlMjAlM0QlMjBwcm9jZXNzb3IoaW1hZ2VzJTJDJTIwYXVkaW8lMkMlMjBzYW1wbGluZ19yYXRlJTNENDQxMDAlMkMlMjByZXR1cm5fdGVuc29ycyUzRCUyMnB0JTIyKSUwQSUwQW91dHB1dHMlMjAlM0QlMjBtb2RlbCgqKmlucHV0X2RpY3QpJTBBbG9zcyUyMCUzRCUyMG91dHB1dHMubG9zcw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TvltProcessor, TvltForAudioVisualClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>num_frames = <span class="hljs-number">8</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>images = <span class="hljs-built_in">list</span>(np.random.randn(num_frames, <span class="hljs-number">3</span>, <span class="hljs-number">224</span>, <span class="hljs-number">224</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>audio = <span class="hljs-built_in">list</span>(np.random.randn(<span class="hljs-number">10000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = TvltProcessor.from_pretrained(<span class="hljs-string">&quot;ZinengTang/tvlt-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TvltForAudioVisualClassification.from_pretrained(<span class="hljs-string">&quot;ZinengTang/tvlt-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>input_dict = processor(images, audio, sampling_rate=<span class="hljs-number">44100</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**input_dict)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss`,wrap:!1}}),{c(){n=d("p"),n.textContent=x,m=a(),f(p.$$.fragment)},l(s){n=c(s,"P",{"data-svelte-h":!0}),T(n)!=="svelte-kvfsh7"&&(n.textContent=x),m=r(s),h(p.$$.fragment,s)},m(s,w){l(s,n,w),l(s,m,w),u(p,s,w),b=!0},p:We,i(s){b||(g(p.$$.fragment,s),b=!0)},o(s){_(p.$$.fragment,s),b=!1},d(s){s&&(o(n),o(m)),v(p,s)}}}function qo(y){let n,x,m,p,b,s,w,tt,ne,ao=`The TVLT model was proposed in <a href="https://arxiv.org/abs/2209.14156" rel="nofollow">TVLT: Textless Vision-Language Transformer</a>
by Zineng Tang, Jaemin Cho, Yixin Nie, Mohit Bansal (the first three authors contributed equally). The Textless Vision-Language Transformer (TVLT) is a model that uses raw visual and audio inputs for vision-and-language representation learning, without using text-specific modules such as tokenization or automatic speech recognition (ASR). It can perform various audiovisual and vision-language tasks like retrieval, question answering, etc.`,ot,se,ro="The abstract from the paper is the following:",nt,ae,io="<em>In this work, we present the Textless Vision-Language Transformer (TVLT), where homogeneous transformer blocks take raw visual and audio inputs for vision-and-language representation learning with minimal modality-specific design, and do not use text-specific modules such as tokenization or automatic speech recognition (ASR). TVLT is trained by reconstructing masked patches of continuous video frames and audio spectrograms (masked autoencoding) and contrastive modeling to align video and audio. TVLT attains performance comparable to its text-based counterpart on various multimodal tasks, such as visual question answering, image retrieval, video retrieval, and multimodal sentiment analysis, with 28x faster inference speed and only 1/3 of the parameters. Our findings suggest the possibility of learning compact and efficient visual-linguistic representations from low-level visual and audio signals without assuming the prior existence of text.</em>",st,B,lo='<img src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/transformers/model_doc/tvlt_architecture.png" alt="drawing" width="600"/>',at,re,co='TVLT architecture. Taken from the <a href="[https://arxiv.org/abs/2102.03334](https://arxiv.org/abs/2209.14156)">original paper</a>.',rt,ie,mo='The original code can be found <a href="https://github.com/zinengtang/TVLT" rel="nofollow">here</a>. This model was contributed by <a href="https://huggingface.co/ZinengTang" rel="nofollow">Zineng Tang</a>.',it,le,lt,de,po=`<li>TVLT is a model that takes both <code>pixel_values</code> and <code>audio_values</code> as input. One can use <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a> to prepare data for the model.
This processor wraps an image processor (for the image/video modality) and an audio feature extractor (for the audio modality) into one.</li> <li>TVLT is trained with images/videos and audios of various sizes: the authors resize and crop the input images/videos to 224 and limit the length of audio spectrogram to 2048. To make batching of videos and audios possible, the authors use a <code>pixel_mask</code> that indicates which pixels are real/padding and <code>audio_mask</code> that indicates which audio values are real/padding.</li> <li>The design of TVLT is very similar to that of a standard Vision Transformer (ViT) and masked autoencoder (MAE) as in <a href="vitmae">ViTMAE</a>. The difference is that the model includes embedding layers for the audio modality.</li> <li>The PyTorch version of this model is only available in torch 1.10 and higher.</li>`,dt,ce,ct,P,me,kt,Je,fo=`This is the configuration class to store the configuration of a <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltModel">TvltModel</a>. It is used to instantiate a TVLT
model according to the specified arguments, defining the model architecture. Instantiating a configuration with the
defaults will yield a similar configuration to that of the TVLT
<a href="https://huggingface.co/ZinengTang/tvlt-base" rel="nofollow">ZinengTang/tvlt-base</a> architecture.`,Ct,Le,ho=`Configuration objects inherit from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> and can be used to control the model outputs. Read the
documentation from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> for more information.`,zt,q,mt,pe,pt,k,fe,Ft,Ue,uo="Constructs a TVLT processor which wraps a TVLT image processor and TVLT feature extractor into a single processor.",jt,Ve,go=`<a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a> offers all the functionalities of <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltImageProcessor">TvltImageProcessor</a> and <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltFeatureExtractor">TvltFeatureExtractor</a>. See the
docstring of <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor.__call__"><strong>call</strong>()</a> for more information.`,It,H,he,Wt,Ae,_o=`Forwards the <code>images</code> argument to TvltImageProcessor’s <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltImageProcessor.preprocess">preprocess()</a> and the <code>audio</code>
argument to TvltFeatureExtractor’s <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltFeatureExtractor.__call__"><strong>call</strong>()</a>. Please refer to the docstring of the
above two methods for more information.`,ft,ue,ht,C,ge,Jt,Ee,vo="Constructs a TVLT image processor.",Lt,Ne,To="This processor can be used to prepare either videos or images for the model by converting images to 1-frame videos.",Ut,R,_e,Vt,Ze,bo="Preprocess an videos or image or batch of videos or images.",ut,ve,gt,z,Te,At,Be,xo="Constructs a TVLT audio feature extractor. This feature extractor can be used to prepare audios for the model.",Et,qe,wo=`This feature extractor inherits from <a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin">FeatureExtractionMixin</a> which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`,Nt,S,be,Zt,He,yo="Main method to prepare one or several audio(s) for the model.",_t,xe,vt,L,we,Bt,Re,Mo=`The bare TVLT Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`,qt,I,ye,Ht,Se,$o='The <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltModel">TvltModel</a> forward method, overrides the <code>__call__</code> special method.',Rt,D,St,Q,Tt,Me,bt,U,$e,Dt,De,Po=`The TVLT Model transformer with the decoder on top for self-supervised pre-training.
This model is a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`,Qt,W,Pe,Gt,Qe,ko='The <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltForPreTraining">TvltForPreTraining</a> forward method, overrides the <code>__call__</code> special method.',Xt,G,Yt,X,xt,ke,wt,F,Ce,Ot,Ge,Co=`Tvlt Model transformer with a classifier head on top (an MLP on top of the final hidden state of the [CLS] token)
for audiovisual classification tasks, e.g. CMU-MOSEI Sentiment Analysis and Audio to Video Retrieval.`,Kt,Xe,zo=`This model is a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`,eo,J,ze,to,Ye,Fo='The <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltForAudioVisualClassification">TvltForAudioVisualClassification</a> forward method, overrides the <code>__call__</code> special method.',oo,Y,no,O,yt,et,Mt;return b=new Z({props:{title:"TVLT",local:"tvlt",headingTag:"h1"}}),w=new Z({props:{title:"Overview",local:"overview",headingTag:"h2"}}),le=new Z({props:{title:"Usage tips",local:"usage-tips",headingTag:"h2"}}),ce=new Z({props:{title:"TvltConfig",local:"transformers.TvltConfig",headingTag:"h2"}}),me=new j({props:{name:"class transformers.TvltConfig",anchor:"transformers.TvltConfig",parameters:[{name:"image_size",val:" = 224"},{name:"spectrogram_length",val:" = 2048"},{name:"frequency_length",val:" = 128"},{name:"image_patch_size",val:" = [16, 16]"},{name:"audio_patch_size",val:" = [16, 16]"},{name:"num_image_channels",val:" = 3"},{name:"num_audio_channels",val:" = 1"},{name:"num_frames",val:" = 8"},{name:"hidden_size",val:" = 768"},{name:"num_hidden_layers",val:" = 12"},{name:"num_attention_heads",val:" = 12"},{name:"intermediate_size",val:" = 3072"},{name:"hidden_act",val:" = 'gelu'"},{name:"hidden_dropout_prob",val:" = 0.0"},{name:"attention_probs_dropout_prob",val:" = 0.0"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-06"},{name:"qkv_bias",val:" = True"},{name:"use_mean_pooling",val:" = False"},{name:"decoder_num_attention_heads",val:" = 16"},{name:"decoder_hidden_size",val:" = 512"},{name:"decoder_num_hidden_layers",val:" = 8"},{name:"decoder_intermediate_size",val:" = 2048"},{name:"pixel_mask_ratio",val:" = 0.75"},{name:"audio_mask_ratio",val:" = 0.15"},{name:"audio_mask_type",val:" = 'frame-level'"},{name:"task_matching",val:" = True"},{name:"task_mae",val:" = True"},{name:"loss_type",val:" = 'classification'"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TvltConfig.image_size",description:`<strong>image_size</strong> (<code>int</code>, <em>optional</em>, defaults to 224) &#x2014;
The size (resolution) of each image.`,name:"image_size"},{anchor:"transformers.TvltConfig.spectrogram_length",description:`<strong>spectrogram_length</strong> (<code>int</code>, <em>optional</em>, defaults to 2048) &#x2014;
The time length of each audio spectrogram.`,name:"spectrogram_length"},{anchor:"transformers.TvltConfig.frequency_length",description:`<strong>frequency_length</strong> (<code>int</code>, <em>optional</em>, defaults to 128) &#x2014;
The frequency length of audio spectrogram.`,name:"frequency_length"},{anchor:"transformers.TvltConfig.image_patch_size",description:`<strong>image_patch_size</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[16, 16]</code>) &#x2014;
The size (resolution) of each image patch.`,name:"image_patch_size"},{anchor:"transformers.TvltConfig.audio_patch_size",description:`<strong>audio_patch_size</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[16, 16]</code>) &#x2014;
The size (resolution) of each audio patch.`,name:"audio_patch_size"},{anchor:"transformers.TvltConfig.num_image_channels",description:`<strong>num_image_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input image channels.`,name:"num_image_channels"},{anchor:"transformers.TvltConfig.num_audio_channels",description:`<strong>num_audio_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of input audio channels.`,name:"num_audio_channels"},{anchor:"transformers.TvltConfig.num_frames",description:`<strong>num_frames</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The maximum number of frames for an input video.`,name:"num_frames"},{anchor:"transformers.TvltConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
Dimensionality of the encoder layers and the pooler layer.`,name:"hidden_size"},{anchor:"transformers.TvltConfig.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"num_hidden_layers"},{anchor:"transformers.TvltConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.TvltConfig.intermediate_size",description:`<strong>intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3072) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (i.e., feed-forward) layer in the Transformer encoder.`,name:"intermediate_size"},{anchor:"transformers.TvltConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.TvltConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.`,name:"hidden_dropout_prob"},{anchor:"transformers.TvltConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.TvltConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.TvltConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-06) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.TvltConfig.qkv_bias",description:`<strong>qkv_bias</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to add a bias to the queries, keys and values.`,name:"qkv_bias"},{anchor:"transformers.TvltConfig.use_mean_pooling",description:`<strong>use_mean_pooling</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to mean pool the final hidden states instead of using the final hidden state of the [CLS] token.`,name:"use_mean_pooling"},{anchor:"transformers.TvltConfig.decoder_num_attention_heads",description:`<strong>decoder_num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
Number of attention heads for each attention layer in the decoder.`,name:"decoder_num_attention_heads"},{anchor:"transformers.TvltConfig.decoder_hidden_size",description:`<strong>decoder_hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
Dimensionality of the decoder.`,name:"decoder_hidden_size"},{anchor:"transformers.TvltConfig.decoder_num_hidden_layers",description:`<strong>decoder_num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
Number of hidden layers in the decoder.`,name:"decoder_num_hidden_layers"},{anchor:"transformers.TvltConfig.decoder_intermediate_size",description:`<strong>decoder_intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 2048) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (i.e., feed-forward) layer in the decoder.`,name:"decoder_intermediate_size"},{anchor:"transformers.TvltConfig.pixel_mask_ratio",description:`<strong>pixel_mask_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 0.75) &#x2014;
Image patch masking ratio.`,name:"pixel_mask_ratio"},{anchor:"transformers.TvltConfig.audio_mask_ratio",description:`<strong>audio_mask_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 0.15) &#x2014;
Audio patch masking ratio.`,name:"audio_mask_ratio"},{anchor:"transformers.TvltConfig.audio_mask_type",description:`<strong>audio_mask_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;frame-level&quot;</code>) &#x2014;
Audio patch masking type, choose between &#x201C;frame-level&#x201D; and &#x201C;patch-level&#x201D;.`,name:"audio_mask_type"},{anchor:"transformers.TvltConfig.task_matching",description:`<strong>task_matching</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to use vision audio matching task in pretraining.`,name:"task_matching"},{anchor:"transformers.TvltConfig.task_mae",description:`<strong>task_mae</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to use the masked auto-encoder (MAE) in pretraining.`,name:"task_mae"},{anchor:"transformers.TvltConfig.loss_type",description:`<strong>loss_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;classification&quot;</code>) &#x2014;
Loss types including regression and classification.`,name:"loss_type"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/tvlt/configuration_tvlt.py#L28"}}),q=new $t({props:{anchor:"transformers.TvltConfig.example",$$slots:{default:[Uo]},$$scope:{ctx:y}}}),pe=new Z({props:{title:"TvltProcessor",local:"transformers.TvltProcessor",headingTag:"h2"}}),fe=new j({props:{name:"class transformers.TvltProcessor",anchor:"transformers.TvltProcessor",parameters:[{name:"image_processor",val:""},{name:"feature_extractor",val:""}],parametersDescription:[{anchor:"transformers.TvltProcessor.image_processor",description:`<strong>image_processor</strong> (<code>TvltImageProcessor</code>) &#x2014;
An instance of <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltImageProcessor">TvltImageProcessor</a>. The image processor is a required input.`,name:"image_processor"},{anchor:"transformers.TvltProcessor.feature_extractor",description:`<strong>feature_extractor</strong> (<code>TvltFeatureExtractor</code>) &#x2014;
An instance of <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltFeatureExtractor">TvltFeatureExtractor</a>. The feature extractor is a required input.`,name:"feature_extractor"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/tvlt/processing_tvlt.py#L22"}}),he=new j({props:{name:"__call__",anchor:"transformers.TvltProcessor.__call__",parameters:[{name:"images",val:" = None"},{name:"audio",val:" = None"},{name:"images_mixed",val:" = None"},{name:"sampling_rate",val:" = None"},{name:"mask_audio",val:" = False"},{name:"mask_pixel",val:" = False"},{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/tvlt/processing_tvlt.py#L46"}}),ue=new Z({props:{title:"TvltImageProcessor",local:"transformers.TvltImageProcessor",headingTag:"h2"}}),ge=new j({props:{name:"class transformers.TvltImageProcessor",anchor:"transformers.TvltImageProcessor",parameters:[{name:"do_resize",val:": bool = True"},{name:"size",val:": Dict = None"},{name:"patch_size",val:": List = [16, 16]"},{name:"num_frames",val:": int = 8"},{name:"resample",val:": Resampling = <Resampling.BILINEAR: 2>"},{name:"do_center_crop",val:": bool = True"},{name:"crop_size",val:": Dict = None"},{name:"do_rescale",val:": bool = True"},{name:"rescale_factor",val:": Union = 0.00392156862745098"},{name:"do_normalize",val:": bool = True"},{name:"image_mean",val:": Union = [0.5, 0.5, 0.5]"},{name:"image_std",val:": Union = [0.5, 0.5, 0.5]"},{name:"init_mask_generator",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TvltImageProcessor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the image&#x2019;s (height, width) dimensions to the specified <code>size</code>. Can be overridden by the
<code>do_resize</code> parameter in the <code>preprocess</code> method.`,name:"do_resize"},{anchor:"transformers.TvltImageProcessor.size",description:`<strong>size</strong> (<code>Dict[str, int]</code> <em>optional</em>, defaults to <code>{&quot;shortest_edge&quot; -- 224}</code>):
Size of the output image after resizing. The shortest edge of the image will be resized to
<code>size[&quot;shortest_edge&quot;]</code> while maintaining the aspect ratio of the original image. Can be overriden by
<code>size</code> in the <code>preprocess</code> method.`,name:"size"},{anchor:"transformers.TvltImageProcessor.patch_size",description:`<strong>patch_size</strong> (<code>List[int]</code> <em>optional</em>, defaults to [16,16]) &#x2014;
The patch size of image patch embedding.`,name:"patch_size"},{anchor:"transformers.TvltImageProcessor.num_frames",description:`<strong>num_frames</strong> (<code>int</code> <em>optional</em>, defaults to 8) &#x2014;
The maximum number of video frames.`,name:"num_frames"},{anchor:"transformers.TvltImageProcessor.resample",description:`<strong>resample</strong> (<code>PILImageResampling</code>, <em>optional</em>, defaults to <code>PILImageResampling.BILINEAR</code>) &#x2014;
Resampling filter to use if resizing the image. Can be overridden by the <code>resample</code> parameter in the
<code>preprocess</code> method.`,name:"resample"},{anchor:"transformers.TvltImageProcessor.do_center_crop",description:`<strong>do_center_crop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to center crop the image to the specified <code>crop_size</code>. Can be overridden by the <code>do_center_crop</code>
parameter in the <code>preprocess</code> method.`,name:"do_center_crop"},{anchor:"transformers.TvltImageProcessor.crop_size",description:`<strong>crop_size</strong> (<code>Dict[str, int]</code>, <em>optional</em>, defaults to <code>{&quot;height&quot; -- 224, &quot;width&quot;: 224}</code>):
Size of the image after applying the center crop. Can be overridden by the <code>crop_size</code> parameter in the
<code>preprocess</code> method.`,name:"crop_size"},{anchor:"transformers.TvltImageProcessor.do_rescale",description:`<strong>do_rescale</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to rescale the image by the specified scale <code>rescale_factor</code>. Can be overridden by the <code>do_rescale</code>
parameter in the <code>preprocess</code> method.`,name:"do_rescale"},{anchor:"transformers.TvltImageProcessor.rescale_factor",description:`<strong>rescale_factor</strong> (<code>int</code> or <code>float</code>, <em>optional</em>, defaults to 1/255) &#x2014;
Defines the scale factor to use if rescaling the image. Can be overridden by the <code>rescale_factor</code> parameter
in the <code>preprocess</code> method.`,name:"rescale_factor"},{anchor:"transformers.TvltImageProcessor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to normalize the image. Can be overridden by the <code>do_normalize</code> parameter in the <code>preprocess</code>
method.`,name:"do_normalize"},{anchor:"transformers.TvltImageProcessor.image_mean",description:`<strong>image_mean</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>IMAGENET_STANDARD_MEAN</code>) &#x2014;
Mean to use if normalizing the image. This is a float or list of floats the length of the number of
channels in the image. Can be overridden by the <code>image_mean</code> parameter in the <code>preprocess</code> method.`,name:"image_mean"},{anchor:"transformers.TvltImageProcessor.image_std",description:`<strong>image_std</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>IMAGENET_STANDARD_STD</code>) &#x2014;
Standard deviation to use if normalizing the image. This is a float or list of floats the length of the
number of channels in the image. Can be overridden by the <code>image_std</code> parameter in the <code>preprocess</code> method.`,name:"image_std"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/tvlt/image_processing_tvlt.py#L67"}}),_e=new j({props:{name:"preprocess",anchor:"transformers.TvltImageProcessor.preprocess",parameters:[{name:"videos",val:": Union"},{name:"do_resize",val:": bool = None"},{name:"size",val:": Dict = None"},{name:"patch_size",val:": List = None"},{name:"num_frames",val:": int = None"},{name:"resample",val:": Resampling = None"},{name:"do_center_crop",val:": bool = None"},{name:"crop_size",val:": Dict = None"},{name:"do_rescale",val:": bool = None"},{name:"rescale_factor",val:": float = None"},{name:"do_normalize",val:": bool = None"},{name:"image_mean",val:": Union = None"},{name:"image_std",val:": Union = None"},{name:"is_mixed",val:": bool = False"},{name:"return_tensors",val:": Union = None"},{name:"data_format",val:": ChannelDimension = <ChannelDimension.FIRST: 'channels_first'>"},{name:"input_data_format",val:": Union = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TvltImageProcessor.preprocess.videos",description:`<strong>videos</strong> (<code>ImageInput</code>) &#x2014;
Images or videos to preprocess. Expects a single or batch of frames with pixel values ranging from 0 to
255. If passing in frames with pixel values between 0 and 1, set <code>do_rescale=False</code>.`,name:"videos"},{anchor:"transformers.TvltImageProcessor.preprocess.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_resize</code>) &#x2014;
Whether to resize the image.`,name:"do_resize"},{anchor:"transformers.TvltImageProcessor.preprocess.size",description:`<strong>size</strong> (<code>Dict[str, int]</code>, <em>optional</em>, defaults to <code>self.size</code>) &#x2014;
Size of the image after applying resize.`,name:"size"},{anchor:"transformers.TvltImageProcessor.preprocess.patch_size",description:`<strong>patch_size</strong> (<code>List[int]</code> <em>optional</em>, defaults to self.patch_size) &#x2014;
The patch size of image patch embedding.`,name:"patch_size"},{anchor:"transformers.TvltImageProcessor.preprocess.num_frames",description:`<strong>num_frames</strong> (<code>int</code> <em>optional</em>, defaults to self.num_frames) &#x2014;
The maximum number of video frames.`,name:"num_frames"},{anchor:"transformers.TvltImageProcessor.preprocess.resample",description:`<strong>resample</strong> (<code>PILImageResampling</code>, <em>optional</em>, defaults to <code>self.resample</code>) &#x2014;
Resampling filter to use if resizing the image. This can be one of the enum <code>PILImageResampling</code>, Only
has an effect if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.TvltImageProcessor.preprocess.do_center_crop",description:`<strong>do_center_crop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_centre_crop</code>) &#x2014;
Whether to centre crop the image.`,name:"do_center_crop"},{anchor:"transformers.TvltImageProcessor.preprocess.crop_size",description:`<strong>crop_size</strong> (<code>Dict[str, int]</code>, <em>optional</em>, defaults to <code>self.crop_size</code>) &#x2014;
Size of the image after applying the centre crop.`,name:"crop_size"},{anchor:"transformers.TvltImageProcessor.preprocess.do_rescale",description:`<strong>do_rescale</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_rescale</code>) &#x2014;
Whether to rescale the image values between [0 - 1].`,name:"do_rescale"},{anchor:"transformers.TvltImageProcessor.preprocess.rescale_factor",description:`<strong>rescale_factor</strong> (<code>float</code>, <em>optional</em>, defaults to <code>self.rescale_factor</code>) &#x2014;
Rescale factor to rescale the image by if <code>do_rescale</code> is set to <code>True</code>.`,name:"rescale_factor"},{anchor:"transformers.TvltImageProcessor.preprocess.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_normalize</code>) &#x2014;
Whether to normalize the image.`,name:"do_normalize"},{anchor:"transformers.TvltImageProcessor.preprocess.image_mean",description:`<strong>image_mean</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>self.image_mean</code>) &#x2014;
Image mean.`,name:"image_mean"},{anchor:"transformers.TvltImageProcessor.preprocess.image_std",description:`<strong>image_std</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>self.image_std</code>) &#x2014;
Image standard deviation.`,name:"image_std"},{anchor:"transformers.TvltImageProcessor.preprocess.is_mixed",description:`<strong>is_mixed</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If the input video has negative samples.`,name:"is_mixed"},{anchor:"transformers.TvltImageProcessor.preprocess.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <code>TensorType</code>, <em>optional</em>) &#x2014;
The type of tensors to return. Can be one of:<ul>
<li>Unset: Return a list of <code>np.ndarray</code>.</li>
<li><code>TensorType.TENSORFLOW</code> or <code>&apos;tf&apos;</code>: Return a batch of type <code>tf.Tensor</code>.</li>
<li><code>TensorType.PYTORCH</code> or <code>&apos;pt&apos;</code>: Return a batch of type <code>torch.Tensor</code>.</li>
<li><code>TensorType.NUMPY</code> or <code>&apos;np&apos;</code>: Return a batch of type <code>np.ndarray</code>.</li>
<li><code>TensorType.JAX</code> or <code>&apos;jax&apos;</code>: Return a batch of type <code>jax.numpy.ndarray</code>.</li>
</ul>`,name:"return_tensors"},{anchor:"transformers.TvltImageProcessor.preprocess.data_format",description:`<strong>data_format</strong> (<code>ChannelDimension</code> or <code>str</code>, <em>optional</em>, defaults to <code>ChannelDimension.FIRST</code>) &#x2014;
The channel dimension format for the output image. Can be one of:<ul>
<li><code>ChannelDimension.FIRST</code>: image in (num_channels, height, width) format.</li>
<li><code>ChannelDimension.LAST</code>: image in (height, width, num_channels) format.</li>
<li>Unset: Use the inferred channel dimension format of the input image.</li>
</ul>`,name:"data_format"},{anchor:"transformers.TvltImageProcessor.preprocess.input_data_format",description:`<strong>input_data_format</strong> (<code>ChannelDimension</code> or <code>str</code>, <em>optional</em>) &#x2014;
The channel dimension format for the input image. If unset, the channel dimension format is inferred
from the input image. Can be one of:<ul>
<li><code>&quot;channels_first&quot;</code> or <code>ChannelDimension.FIRST</code>: image in (num_channels, height, width) format.</li>
<li><code>&quot;channels_last&quot;</code> or <code>ChannelDimension.LAST</code>: image in (height, width, num_channels) format.</li>
<li><code>&quot;none&quot;</code> or <code>ChannelDimension.NONE</code>: image in (height, width) format.</li>
</ul>`,name:"input_data_format"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/tvlt/image_processing_tvlt.py#L253",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <a
  href="/docs/transformers/main/en/main_classes/image_processor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li>
<p><strong>pixel_values</strong> — Pixel values to be fed to a model, of shape (batch_size, num_channels, height,
width).</p>
</li>
<li>
<p><strong>pixel_mask</strong> — Pixel masks to be fed to a model, of shape (batch_size, num_pixel_patches).</p>
</li>
<li>
<p><strong>pixel_values_mixed</strong> — Pixel values with both postive or negative to be fed to a model, of shape
(batch_size, num_channels, height, width).</p>
</li>
<li>
<p><strong>pixel_mask_mixed</strong> — Pixel masks with both postive or negative to be fed to a model, of shape
(batch_size, num_pixel_patches).</p>
</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/transformers/main/en/main_classes/image_processor#transformers.BatchFeature"
>BatchFeature</a></p>
`}}),ve=new Z({props:{title:"TvltFeatureExtractor",local:"transformers.TvltFeatureExtractor",headingTag:"h2"}}),Te=new j({props:{name:"class transformers.TvltFeatureExtractor",anchor:"transformers.TvltFeatureExtractor",parameters:[{name:"spectrogram_length",val:" = 2048"},{name:"num_channels",val:" = 1"},{name:"patch_size",val:" = [16, 16]"},{name:"feature_size",val:" = 128"},{name:"sampling_rate",val:" = 44100"},{name:"hop_length_to_sampling_rate",val:" = 86"},{name:"n_fft",val:" = 2048"},{name:"padding_value",val:" = 0.0"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TvltFeatureExtractor.spectrogram_length",description:`<strong>spectrogram_length</strong> (<code>Dict[str, int]</code> <em>optional</em>, defaults to 2048) &#x2014;
The time length of each audio spectrogram.`,name:"spectrogram_length"},{anchor:"transformers.TvltFeatureExtractor.num_channels",description:`<strong>num_channels</strong> (<code>int</code> <em>optional</em>, defaults to 1) &#x2014;
Number of audio channels.`,name:"num_channels"},{anchor:"transformers.TvltFeatureExtractor.patch_size",description:`<strong>patch_size</strong> (<code>List[int]</code> <em>optional</em>, defaults to <code>[16, 16]</code>) &#x2014;
The patch size of audio patch embedding.`,name:"patch_size"},{anchor:"transformers.TvltFeatureExtractor.feature_size",description:`<strong>feature_size</strong> (<code>int</code>, <em>optional</em>, defaults to 128) &#x2014;
The frequency length of audio spectrogram.`,name:"feature_size"},{anchor:"transformers.TvltFeatureExtractor.sampling_rate",description:`<strong>sampling_rate</strong> (<code>int</code>, <em>optional</em>, defaults to 44100) &#x2014;
The sampling rate at which the audio files should be digitalized expressed in Hertz (Hz).`,name:"sampling_rate"},{anchor:"transformers.TvltFeatureExtractor.hop_length_to_sampling_rate",description:`<strong>hop_length_to_sampling_rate</strong> (<code>int</code>, <em>optional</em>, defaults to 86) &#x2014;
Hop length is length of the overlaping windows for the STFT used to obtain the Mel Frequency coefficients.
For example, with sampling rate 44100, the hop length is 512, with 44100 / 512 = 86`,name:"hop_length_to_sampling_rate"},{anchor:"transformers.TvltFeatureExtractor.n_fft",description:`<strong>n_fft</strong> (<code>int</code>, <em>optional</em>, defaults to 2048) &#x2014;
Size of the Fourier transform.`,name:"n_fft"},{anchor:"transformers.TvltFeatureExtractor.padding_value",description:`<strong>padding_value</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
Padding value used to pad the audio. Should correspond to silences.`,name:"padding_value"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/tvlt/feature_extraction_tvlt.py#L30"}}),be=new j({props:{name:"__call__",anchor:"transformers.TvltFeatureExtractor.__call__",parameters:[{name:"raw_speech",val:": Union"},{name:"return_tensors",val:": Union = None"},{name:"return_attention_mask",val:": Optional = True"},{name:"sampling_rate",val:": Optional = None"},{name:"resample",val:": bool = False"},{name:"mask_audio",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TvltFeatureExtractor.__call__.raw_speech",description:`<strong>raw_speech</strong> (<code>np.ndarray</code>, <code>List[float]</code>, <code>List[np.ndarray]</code>, <code>List[List[float]]</code>) &#x2014;
The sequence or batch of sequences to be padded. Each sequence can be a numpy array, a list of float
values, a list of numpy arrays or a list of list of float values. Must be mono channel audio, not
stereo, i.e. single float per timestep.`,name:"raw_speech"},{anchor:"transformers.TvltFeatureExtractor.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/main/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>) &#x2014;
If set, will return tensors instead of list of python integers. Acceptable values are:</p>
<ul>
<li><code>&apos;pt&apos;</code>: Return PyTorch <code>torch.Tensor</code> objects.</li>
<li><code>&apos;np&apos;</code>: Return Numpy <code>np.ndarray</code> objects.</li>
</ul>`,name:"return_tensors"},{anchor:"transformers.TvltFeatureExtractor.__call__.return_attention_mask",description:`<strong>return_attention_mask</strong> (<code>bool</code>, <em>optional</em>, default to <code>True</code>) &#x2014;
Whether to return the attention mask. If left to the default, will return the attention mask according
to the specific feature_extractor&#x2019;s default. <a href="../glossary#attention-mask">What are attention masks?</a></p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>For TvltTransformer models, <code>attention_mask</code> should alwys be passed for batched inference, to avoid
subtle bugs.</p>

					</div>`,name:"return_attention_mask"},{anchor:"transformers.TvltFeatureExtractor.__call__.sampling_rate",description:`<strong>sampling_rate</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The sampling rate at which the <code>raw_speech</code> input was sampled. It is strongly recommended to pass
<code>sampling_rate</code> at the forward call to prevent silent errors and allow automatic speech recognition
pipeline. Current model supports sampling rate 16000 and 44100.`,name:"sampling_rate"},{anchor:"transformers.TvltFeatureExtractor.__call__.resample",description:`<strong>resample</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If the sampling rate is not matched, resample the input audio to match.`,name:"resample"},{anchor:"transformers.TvltFeatureExtractor.__call__.mask_audio",description:`<strong>mask_audio</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to mask input audio for MAE task.`,name:"mask_audio"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/tvlt/feature_extraction_tvlt.py#L116",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <a
  href="/docs/transformers/main/en/main_classes/image_processor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li>
<p><strong>audio_values</strong> — Audio values to be fed to a model, of shape (batch_size, num_channels, height,
width).</p>
</li>
<li>
<p><strong>audio_mask</strong> — Audio masks to be fed to a model, of shape (batch_size, num_audio_patches).</p>
</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/transformers/main/en/main_classes/image_processor#transformers.BatchFeature"
>BatchFeature</a></p>
`}}),xe=new Z({props:{title:"TvltModel",local:"transformers.TvltModel",headingTag:"h2"}}),we=new j({props:{name:"class transformers.TvltModel",anchor:"transformers.TvltModel",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.TvltModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltConfig">TvltConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/tvlt/modeling_tvlt.py#L670"}}),ye=new j({props:{name:"forward",anchor:"transformers.TvltModel.forward",parameters:[{name:"pixel_values",val:": FloatTensor"},{name:"audio_values",val:": FloatTensor"},{name:"pixel_mask",val:": Optional = None"},{name:"audio_mask",val:": Optional = None"},{name:"mask_pixel",val:": bool = False"},{name:"mask_audio",val:": bool = False"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.TvltModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_frames, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor.__call__">TvltProcessor.<strong>call</strong>()</a> for
details.`,name:"pixel_values"},{anchor:"transformers.TvltModel.forward.audio_values",description:`<strong>audio_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Audio values. Audio values can be obtained using <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor.__call__">TvltProcessor.<strong>call</strong>()</a> for
details.`,name:"audio_values"},{anchor:"transformers.TvltModel.forward.pixel_mask",description:`<strong>pixel_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_pixel_patches)</code>) &#x2014;
Pixel masks. Pixel masks can be obtained using <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor.__call__">TvltProcessor.<strong>call</strong>()</a> for
details.`,name:"pixel_mask"},{anchor:"transformers.TvltModel.forward.audio_mask",description:`<strong>audio_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_audio_patches)</code>) &#x2014;
Audio masks. Audio masks can be obtained using <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor.__call__">TvltProcessor.<strong>call</strong>()</a> for
details.`,name:"audio_mask"},{anchor:"transformers.TvltModel.forward.pixel_values_mixed",description:`<strong>pixel_values_mixed</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_frames, num_channels, height, width)</code>) &#x2014;
Pixel values that mix positive and negative samples in Tvlt vision-audio matching. Pixel values mixed can
be obtained using <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor.__call__">TvltProcessor.<strong>call</strong>()</a> for details.`,name:"pixel_values_mixed"},{anchor:"transformers.TvltModel.forward.pixel_mask_mixed",description:`<strong>pixel_mask_mixed</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel masks of pixel_values_mixed. Pixel masks mixed can be obtained using <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a>. See
<a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor.__call__">TvltProcessor.<strong>call</strong>()</a> for details.`,name:"pixel_mask_mixed"},{anchor:"transformers.TvltModel.forward.mask_pixel",description:`<strong>mask_pixel</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to mask pixel for MAE tasks. Only set to True in TvltForPreTraining.`,name:"mask_pixel"},{anchor:"transformers.TvltModel.forward.mask_audio",description:`<strong>mask_audio</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to mask audio for MAE tasks. Only set to True in TvltForPreTraining.`,name:"mask_audio"},{anchor:"transformers.TvltModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.TvltModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.TvltModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/tvlt/modeling_tvlt.py#L704",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <code>transformers.models.tvlt.modeling_tvlt.TvltModelOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltConfig"
>TvltConfig</a>) and inputs.</p>
<ul>
<li><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) — Sequence of hidden-states at the output of the last layer of the model.</li>
<li><strong>last_pixel_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, pixel_sequence_length, hidden_size)</code>) — Pixel sequence of hidden-states at the output of the last layer of the model.</li>
<li><strong>last_audio_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, audio_sequence_length, hidden_size)</code>) — Audio sequence of hidden-states at the output of the last layer of the model.</li>
<li><strong>pixel_label_masks</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, pixel_patch_length)</code>) — Tensor indicating which pixel patches are masked (1) and which are not (0).</li>
<li><strong>audio_label_masks</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, audio_patch_length)</code>) — Tensor indicating which audio patches are masked (1) and which are not (0).</li>
<li><strong>pixel_ids_restore</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, pixel_patch_length)</code>) — Tensor containing the ids permutation of pixel masking.</li>
<li><strong>audio_ids_restore</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, audio_patch_length)</code>) — Tensor containing the ids permutation of audio masking.</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings and one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.</li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>transformers.models.tvlt.modeling_tvlt.TvltModelOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),D=new so({props:{$$slots:{default:[Vo]},$$scope:{ctx:y}}}),Q=new $t({props:{anchor:"transformers.TvltModel.forward.example",$$slots:{default:[Ao]},$$scope:{ctx:y}}}),Me=new Z({props:{title:"TvltForPreTraining",local:"transformers.TvltForPreTraining",headingTag:"h2"}}),$e=new j({props:{name:"class transformers.TvltForPreTraining",anchor:"transformers.TvltForPreTraining",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.TvltForPreTraining.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltConfig">TvltConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/tvlt/modeling_tvlt.py#L895"}}),Pe=new j({props:{name:"forward",anchor:"transformers.TvltForPreTraining.forward",parameters:[{name:"pixel_values",val:": FloatTensor"},{name:"audio_values",val:": FloatTensor"},{name:"pixel_mask",val:": Optional = None"},{name:"audio_mask",val:": Optional = None"},{name:"labels",val:": Optional = None"},{name:"pixel_values_mixed",val:": Optional = None"},{name:"pixel_mask_mixed",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.TvltForPreTraining.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_frames, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor.__call__">TvltProcessor.<strong>call</strong>()</a> for
details.`,name:"pixel_values"},{anchor:"transformers.TvltForPreTraining.forward.audio_values",description:`<strong>audio_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Audio values. Audio values can be obtained using <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor.__call__">TvltProcessor.<strong>call</strong>()</a> for
details.`,name:"audio_values"},{anchor:"transformers.TvltForPreTraining.forward.pixel_mask",description:`<strong>pixel_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_pixel_patches)</code>) &#x2014;
Pixel masks. Pixel masks can be obtained using <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor.__call__">TvltProcessor.<strong>call</strong>()</a> for
details.`,name:"pixel_mask"},{anchor:"transformers.TvltForPreTraining.forward.audio_mask",description:`<strong>audio_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_audio_patches)</code>) &#x2014;
Audio masks. Audio masks can be obtained using <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor.__call__">TvltProcessor.<strong>call</strong>()</a> for
details.`,name:"audio_mask"},{anchor:"transformers.TvltForPreTraining.forward.pixel_values_mixed",description:`<strong>pixel_values_mixed</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_frames, num_channels, height, width)</code>) &#x2014;
Pixel values that mix positive and negative samples in Tvlt vision-audio matching. Pixel values mixed can
be obtained using <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor.__call__">TvltProcessor.<strong>call</strong>()</a> for details.`,name:"pixel_values_mixed"},{anchor:"transformers.TvltForPreTraining.forward.pixel_mask_mixed",description:`<strong>pixel_mask_mixed</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel masks of pixel_values_mixed. Pixel masks mixed can be obtained using <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a>. See
<a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor.__call__">TvltProcessor.<strong>call</strong>()</a> for details.`,name:"pixel_mask_mixed"},{anchor:"transformers.TvltForPreTraining.forward.mask_pixel",description:`<strong>mask_pixel</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to mask pixel for MAE tasks. Only set to True in TvltForPreTraining.`,name:"mask_pixel"},{anchor:"transformers.TvltForPreTraining.forward.mask_audio",description:`<strong>mask_audio</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to mask audio for MAE tasks. Only set to True in TvltForPreTraining.`,name:"mask_audio"},{anchor:"transformers.TvltForPreTraining.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.TvltForPreTraining.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.TvltForPreTraining.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.TvltForPreTraining.forward.pixel_values_mixed",description:`<strong>pixel_values_mixed</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_frames, num_channels, height, width)</code>) &#x2014;
Pixel values that mix positive and negative samples in Tvlt vision-audio matching. Audio values can be
obtained using <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor.__call__">TvltProcessor.<strong>call</strong>()</a> for details.`,name:"pixel_values_mixed"},{anchor:"transformers.TvltForPreTraining.forward.pixel_mask_mixed",description:`<strong>pixel_mask_mixed</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel masks of pixel_values_mixed. Pixel values mixed can be obtained using <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a>. See
<a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor.__call__">TvltProcessor.<strong>call</strong>()</a> for details.`,name:"pixel_mask_mixed"},{anchor:"transformers.TvltForPreTraining.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, num_labels)</code>, <em>optional</em>) &#x2014;
Labels for computing the vision audio matching loss. Indices should be in <code>[0, 1]</code>. num_labels has to be 1.`,name:"labels"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/tvlt/modeling_tvlt.py#L1032",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <code>transformers.models.tvlt.modeling_tvlt.TvltForPreTrainingOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltConfig"
>TvltConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>) — Pixel reconstruction loss.</li>
<li><strong>matching_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 1)</code>) — Matching objective logits.</li>
<li><strong>pixel_logits</strong> (<code>torch.FloatTensor</code> of shape
<code>(batch_size, pixel_patch_length, image_patch_size ** 3 * pixel_num_channels)</code>): Pixel reconstruction
logits.</li>
<li><strong>audio_logits</strong> (<code>torch.FloatTensor</code> of shape
<code>(batch_size, audio_patch_length, image_patch_size[0] * image_patch_size[1])</code>): Audio reconstruction
logits.</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings and one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.</li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>transformers.models.tvlt.modeling_tvlt.TvltForPreTrainingOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),G=new so({props:{$$slots:{default:[Eo]},$$scope:{ctx:y}}}),X=new $t({props:{anchor:"transformers.TvltForPreTraining.forward.example",$$slots:{default:[No]},$$scope:{ctx:y}}}),ke=new Z({props:{title:"TvltForAudioVisualClassification",local:"transformers.TvltForAudioVisualClassification",headingTag:"h2"}}),Ce=new j({props:{name:"class transformers.TvltForAudioVisualClassification",anchor:"transformers.TvltForAudioVisualClassification",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.TvltForAudioVisualClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltConfig">TvltConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/tvlt/modeling_tvlt.py#L1208"}}),ze=new j({props:{name:"forward",anchor:"transformers.TvltForAudioVisualClassification.forward",parameters:[{name:"pixel_values",val:": FloatTensor"},{name:"audio_values",val:": FloatTensor"},{name:"pixel_mask",val:": Optional = None"},{name:"audio_mask",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"},{name:"labels",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.TvltForAudioVisualClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_frames, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor.__call__">TvltProcessor.<strong>call</strong>()</a> for
details.`,name:"pixel_values"},{anchor:"transformers.TvltForAudioVisualClassification.forward.audio_values",description:`<strong>audio_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Audio values. Audio values can be obtained using <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor.__call__">TvltProcessor.<strong>call</strong>()</a> for
details.`,name:"audio_values"},{anchor:"transformers.TvltForAudioVisualClassification.forward.pixel_mask",description:`<strong>pixel_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_pixel_patches)</code>) &#x2014;
Pixel masks. Pixel masks can be obtained using <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor.__call__">TvltProcessor.<strong>call</strong>()</a> for
details.`,name:"pixel_mask"},{anchor:"transformers.TvltForAudioVisualClassification.forward.audio_mask",description:`<strong>audio_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_audio_patches)</code>) &#x2014;
Audio masks. Audio masks can be obtained using <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor.__call__">TvltProcessor.<strong>call</strong>()</a> for
details.`,name:"audio_mask"},{anchor:"transformers.TvltForAudioVisualClassification.forward.pixel_values_mixed",description:`<strong>pixel_values_mixed</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_frames, num_channels, height, width)</code>) &#x2014;
Pixel values that mix positive and negative samples in Tvlt vision-audio matching. Pixel values mixed can
be obtained using <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor.__call__">TvltProcessor.<strong>call</strong>()</a> for details.`,name:"pixel_values_mixed"},{anchor:"transformers.TvltForAudioVisualClassification.forward.pixel_mask_mixed",description:`<strong>pixel_mask_mixed</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel masks of pixel_values_mixed. Pixel masks mixed can be obtained using <a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor">TvltProcessor</a>. See
<a href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltProcessor.__call__">TvltProcessor.<strong>call</strong>()</a> for details.`,name:"pixel_mask_mixed"},{anchor:"transformers.TvltForAudioVisualClassification.forward.mask_pixel",description:`<strong>mask_pixel</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to mask pixel for MAE tasks. Only set to True in TvltForPreTraining.`,name:"mask_pixel"},{anchor:"transformers.TvltForAudioVisualClassification.forward.mask_audio",description:`<strong>mask_audio</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to mask audio for MAE tasks. Only set to True in TvltForPreTraining.`,name:"mask_audio"},{anchor:"transformers.TvltForAudioVisualClassification.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.TvltForAudioVisualClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.TvltForAudioVisualClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.TvltForAudioVisualClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, num_labels)</code>, <em>optional</em>) &#x2014;
Labels for computing the audiovisual loss. Indices should be in <code>[0, ..., num_classes-1]</code> where num_classes
refers to the number of classes in audiovisual tasks.`,name:"labels"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/tvlt/modeling_tvlt.py#L1233",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.SequenceClassifierOutput"
>transformers.modeling_outputs.SequenceClassifierOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/tvlt#transformers.TvltConfig"
>TvltConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) — Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) — Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.SequenceClassifierOutput"
>transformers.modeling_outputs.SequenceClassifierOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Y=new so({props:{$$slots:{default:[Zo]},$$scope:{ctx:y}}}),O=new $t({props:{anchor:"transformers.TvltForAudioVisualClassification.forward.example",$$slots:{default:[Bo]},$$scope:{ctx:y}}}),{c(){n=d("meta"),x=a(),m=d("p"),p=a(),f(b.$$.fragment),s=a(),f(w.$$.fragment),tt=a(),ne=d("p"),ne.innerHTML=ao,ot=a(),se=d("p"),se.textContent=ro,nt=a(),ae=d("p"),ae.innerHTML=io,st=a(),B=d("p"),B.innerHTML=lo,at=a(),re=d("small"),re.innerHTML=co,rt=a(),ie=d("p"),ie.innerHTML=mo,it=a(),f(le.$$.fragment),lt=a(),de=d("ul"),de.innerHTML=po,dt=a(),f(ce.$$.fragment),ct=a(),P=d("div"),f(me.$$.fragment),kt=a(),Je=d("p"),Je.innerHTML=fo,Ct=a(),Le=d("p"),Le.innerHTML=ho,zt=a(),f(q.$$.fragment),mt=a(),f(pe.$$.fragment),pt=a(),k=d("div"),f(fe.$$.fragment),Ft=a(),Ue=d("p"),Ue.textContent=uo,jt=a(),Ve=d("p"),Ve.innerHTML=go,It=a(),H=d("div"),f(he.$$.fragment),Wt=a(),Ae=d("p"),Ae.innerHTML=_o,ft=a(),f(ue.$$.fragment),ht=a(),C=d("div"),f(ge.$$.fragment),Jt=a(),Ee=d("p"),Ee.textContent=vo,Lt=a(),Ne=d("p"),Ne.textContent=To,Ut=a(),R=d("div"),f(_e.$$.fragment),Vt=a(),Ze=d("p"),Ze.textContent=bo,ut=a(),f(ve.$$.fragment),gt=a(),z=d("div"),f(Te.$$.fragment),At=a(),Be=d("p"),Be.textContent=xo,Et=a(),qe=d("p"),qe.innerHTML=wo,Nt=a(),S=d("div"),f(be.$$.fragment),Zt=a(),He=d("p"),He.textContent=yo,_t=a(),f(xe.$$.fragment),vt=a(),L=d("div"),f(we.$$.fragment),Bt=a(),Re=d("p"),Re.innerHTML=Mo,qt=a(),I=d("div"),f(ye.$$.fragment),Ht=a(),Se=d("p"),Se.innerHTML=$o,Rt=a(),f(D.$$.fragment),St=a(),f(Q.$$.fragment),Tt=a(),f(Me.$$.fragment),bt=a(),U=d("div"),f($e.$$.fragment),Dt=a(),De=d("p"),De.innerHTML=Po,Qt=a(),W=d("div"),f(Pe.$$.fragment),Gt=a(),Qe=d("p"),Qe.innerHTML=ko,Xt=a(),f(G.$$.fragment),Yt=a(),f(X.$$.fragment),xt=a(),f(ke.$$.fragment),wt=a(),F=d("div"),f(Ce.$$.fragment),Ot=a(),Ge=d("p"),Ge.textContent=Co,Kt=a(),Xe=d("p"),Xe.innerHTML=zo,eo=a(),J=d("div"),f(ze.$$.fragment),to=a(),Ye=d("p"),Ye.innerHTML=Fo,oo=a(),f(Y.$$.fragment),no=a(),f(O.$$.fragment),yt=a(),et=d("p"),this.h()},l(e){const t=Lo("svelte-u9bgzb",document.head);n=c(t,"META",{name:!0,content:!0}),t.forEach(o),x=r(e),m=c(e,"P",{}),$(m).forEach(o),p=r(e),h(b.$$.fragment,e),s=r(e),h(w.$$.fragment,e),tt=r(e),ne=c(e,"P",{"data-svelte-h":!0}),T(ne)!=="svelte-1j6pnqq"&&(ne.innerHTML=ao),ot=r(e),se=c(e,"P",{"data-svelte-h":!0}),T(se)!=="svelte-vfdo9a"&&(se.textContent=ro),nt=r(e),ae=c(e,"P",{"data-svelte-h":!0}),T(ae)!=="svelte-ljwzyy"&&(ae.innerHTML=io),st=r(e),B=c(e,"P",{align:!0,"data-svelte-h":!0}),T(B)!=="svelte-ed08bp"&&(B.innerHTML=lo),at=r(e),re=c(e,"SMALL",{"data-svelte-h":!0}),T(re)!=="svelte-wspkwq"&&(re.innerHTML=co),rt=r(e),ie=c(e,"P",{"data-svelte-h":!0}),T(ie)!=="svelte-1l9k3o8"&&(ie.innerHTML=mo),it=r(e),h(le.$$.fragment,e),lt=r(e),de=c(e,"UL",{"data-svelte-h":!0}),T(de)!=="svelte-1ojgblj"&&(de.innerHTML=po),dt=r(e),h(ce.$$.fragment,e),ct=r(e),P=c(e,"DIV",{class:!0});var V=$(P);h(me.$$.fragment,V),kt=r(V),Je=c(V,"P",{"data-svelte-h":!0}),T(Je)!=="svelte-74c9vv"&&(Je.innerHTML=fo),Ct=r(V),Le=c(V,"P",{"data-svelte-h":!0}),T(Le)!=="svelte-o55m63"&&(Le.innerHTML=ho),zt=r(V),h(q.$$.fragment,V),V.forEach(o),mt=r(e),h(pe.$$.fragment,e),pt=r(e),k=c(e,"DIV",{class:!0});var A=$(k);h(fe.$$.fragment,A),Ft=r(A),Ue=c(A,"P",{"data-svelte-h":!0}),T(Ue)!=="svelte-8bsxll"&&(Ue.textContent=uo),jt=r(A),Ve=c(A,"P",{"data-svelte-h":!0}),T(Ve)!=="svelte-aclwgk"&&(Ve.innerHTML=go),It=r(A),H=c(A,"DIV",{class:!0});var Fe=$(H);h(he.$$.fragment,Fe),Wt=r(Fe),Ae=c(Fe,"P",{"data-svelte-h":!0}),T(Ae)!=="svelte-10w1q9k"&&(Ae.innerHTML=_o),Fe.forEach(o),A.forEach(o),ft=r(e),h(ue.$$.fragment,e),ht=r(e),C=c(e,"DIV",{class:!0});var E=$(C);h(ge.$$.fragment,E),Jt=r(E),Ee=c(E,"P",{"data-svelte-h":!0}),T(Ee)!=="svelte-65bl5u"&&(Ee.textContent=vo),Lt=r(E),Ne=c(E,"P",{"data-svelte-h":!0}),T(Ne)!=="svelte-ei0q9"&&(Ne.textContent=To),Ut=r(E),R=c(E,"DIV",{class:!0});var je=$(R);h(_e.$$.fragment,je),Vt=r(je),Ze=c(je,"P",{"data-svelte-h":!0}),T(Ze)!=="svelte-13oa8s2"&&(Ze.textContent=bo),je.forEach(o),E.forEach(o),ut=r(e),h(ve.$$.fragment,e),gt=r(e),z=c(e,"DIV",{class:!0});var N=$(z);h(Te.$$.fragment,N),At=r(N),Be=c(N,"P",{"data-svelte-h":!0}),T(Be)!=="svelte-qe6aof"&&(Be.textContent=xo),Et=r(N),qe=c(N,"P",{"data-svelte-h":!0}),T(qe)!=="svelte-5lm38z"&&(qe.innerHTML=wo),Nt=r(N),S=c(N,"DIV",{class:!0});var Ie=$(S);h(be.$$.fragment,Ie),Zt=r(Ie),He=c(Ie,"P",{"data-svelte-h":!0}),T(He)!=="svelte-17x37gq"&&(He.textContent=yo),Ie.forEach(o),N.forEach(o),_t=r(e),h(xe.$$.fragment,e),vt=r(e),L=c(e,"DIV",{class:!0});var Oe=$(L);h(we.$$.fragment,Oe),Bt=r(Oe),Re=c(Oe,"P",{"data-svelte-h":!0}),T(Re)!=="svelte-1ikd8n"&&(Re.innerHTML=Mo),qt=r(Oe),I=c(Oe,"DIV",{class:!0});var K=$(I);h(ye.$$.fragment,K),Ht=r(K),Se=c(K,"P",{"data-svelte-h":!0}),T(Se)!=="svelte-1ix5xd5"&&(Se.innerHTML=$o),Rt=r(K),h(D.$$.fragment,K),St=r(K),h(Q.$$.fragment,K),K.forEach(o),Oe.forEach(o),Tt=r(e),h(Me.$$.fragment,e),bt=r(e),U=c(e,"DIV",{class:!0});var Ke=$(U);h($e.$$.fragment,Ke),Dt=r(Ke),De=c(Ke,"P",{"data-svelte-h":!0}),T(De)!=="svelte-vodnrg"&&(De.innerHTML=Po),Qt=r(Ke),W=c(Ke,"DIV",{class:!0});var ee=$(W);h(Pe.$$.fragment,ee),Gt=r(ee),Qe=c(ee,"P",{"data-svelte-h":!0}),T(Qe)!=="svelte-eksqup"&&(Qe.innerHTML=ko),Xt=r(ee),h(G.$$.fragment,ee),Yt=r(ee),h(X.$$.fragment,ee),ee.forEach(o),Ke.forEach(o),xt=r(e),h(ke.$$.fragment,e),wt=r(e),F=c(e,"DIV",{class:!0});var te=$(F);h(Ce.$$.fragment,te),Ot=r(te),Ge=c(te,"P",{"data-svelte-h":!0}),T(Ge)!=="svelte-7shntb"&&(Ge.textContent=Co),Kt=r(te),Xe=c(te,"P",{"data-svelte-h":!0}),T(Xe)!=="svelte-1gjh92c"&&(Xe.innerHTML=zo),eo=r(te),J=c(te,"DIV",{class:!0});var oe=$(J);h(ze.$$.fragment,oe),to=r(oe),Ye=c(oe,"P",{"data-svelte-h":!0}),T(Ye)!=="svelte-1c2els7"&&(Ye.innerHTML=Fo),oo=r(oe),h(Y.$$.fragment,oe),no=r(oe),h(O.$$.fragment,oe),oe.forEach(o),te.forEach(o),yt=r(e),et=c(e,"P",{}),$(et).forEach(o),this.h()},h(){M(n,"name","hf:doc:metadata"),M(n,"content",Ho),M(B,"align","center"),M(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,t){i(document.head,n),l(e,x,t),l(e,m,t),l(e,p,t),u(b,e,t),l(e,s,t),u(w,e,t),l(e,tt,t),l(e,ne,t),l(e,ot,t),l(e,se,t),l(e,nt,t),l(e,ae,t),l(e,st,t),l(e,B,t),l(e,at,t),l(e,re,t),l(e,rt,t),l(e,ie,t),l(e,it,t),u(le,e,t),l(e,lt,t),l(e,de,t),l(e,dt,t),u(ce,e,t),l(e,ct,t),l(e,P,t),u(me,P,null),i(P,kt),i(P,Je),i(P,Ct),i(P,Le),i(P,zt),u(q,P,null),l(e,mt,t),u(pe,e,t),l(e,pt,t),l(e,k,t),u(fe,k,null),i(k,Ft),i(k,Ue),i(k,jt),i(k,Ve),i(k,It),i(k,H),u(he,H,null),i(H,Wt),i(H,Ae),l(e,ft,t),u(ue,e,t),l(e,ht,t),l(e,C,t),u(ge,C,null),i(C,Jt),i(C,Ee),i(C,Lt),i(C,Ne),i(C,Ut),i(C,R),u(_e,R,null),i(R,Vt),i(R,Ze),l(e,ut,t),u(ve,e,t),l(e,gt,t),l(e,z,t),u(Te,z,null),i(z,At),i(z,Be),i(z,Et),i(z,qe),i(z,Nt),i(z,S),u(be,S,null),i(S,Zt),i(S,He),l(e,_t,t),u(xe,e,t),l(e,vt,t),l(e,L,t),u(we,L,null),i(L,Bt),i(L,Re),i(L,qt),i(L,I),u(ye,I,null),i(I,Ht),i(I,Se),i(I,Rt),u(D,I,null),i(I,St),u(Q,I,null),l(e,Tt,t),u(Me,e,t),l(e,bt,t),l(e,U,t),u($e,U,null),i(U,Dt),i(U,De),i(U,Qt),i(U,W),u(Pe,W,null),i(W,Gt),i(W,Qe),i(W,Xt),u(G,W,null),i(W,Yt),u(X,W,null),l(e,xt,t),u(ke,e,t),l(e,wt,t),l(e,F,t),u(Ce,F,null),i(F,Ot),i(F,Ge),i(F,Kt),i(F,Xe),i(F,eo),i(F,J),u(ze,J,null),i(J,to),i(J,Ye),i(J,oo),u(Y,J,null),i(J,no),u(O,J,null),l(e,yt,t),l(e,et,t),Mt=!0},p(e,[t]){const V={};t&2&&(V.$$scope={dirty:t,ctx:e}),q.$set(V);const A={};t&2&&(A.$$scope={dirty:t,ctx:e}),D.$set(A);const Fe={};t&2&&(Fe.$$scope={dirty:t,ctx:e}),Q.$set(Fe);const E={};t&2&&(E.$$scope={dirty:t,ctx:e}),G.$set(E);const je={};t&2&&(je.$$scope={dirty:t,ctx:e}),X.$set(je);const N={};t&2&&(N.$$scope={dirty:t,ctx:e}),Y.$set(N);const Ie={};t&2&&(Ie.$$scope={dirty:t,ctx:e}),O.$set(Ie)},i(e){Mt||(g(b.$$.fragment,e),g(w.$$.fragment,e),g(le.$$.fragment,e),g(ce.$$.fragment,e),g(me.$$.fragment,e),g(q.$$.fragment,e),g(pe.$$.fragment,e),g(fe.$$.fragment,e),g(he.$$.fragment,e),g(ue.$$.fragment,e),g(ge.$$.fragment,e),g(_e.$$.fragment,e),g(ve.$$.fragment,e),g(Te.$$.fragment,e),g(be.$$.fragment,e),g(xe.$$.fragment,e),g(we.$$.fragment,e),g(ye.$$.fragment,e),g(D.$$.fragment,e),g(Q.$$.fragment,e),g(Me.$$.fragment,e),g($e.$$.fragment,e),g(Pe.$$.fragment,e),g(G.$$.fragment,e),g(X.$$.fragment,e),g(ke.$$.fragment,e),g(Ce.$$.fragment,e),g(ze.$$.fragment,e),g(Y.$$.fragment,e),g(O.$$.fragment,e),Mt=!0)},o(e){_(b.$$.fragment,e),_(w.$$.fragment,e),_(le.$$.fragment,e),_(ce.$$.fragment,e),_(me.$$.fragment,e),_(q.$$.fragment,e),_(pe.$$.fragment,e),_(fe.$$.fragment,e),_(he.$$.fragment,e),_(ue.$$.fragment,e),_(ge.$$.fragment,e),_(_e.$$.fragment,e),_(ve.$$.fragment,e),_(Te.$$.fragment,e),_(be.$$.fragment,e),_(xe.$$.fragment,e),_(we.$$.fragment,e),_(ye.$$.fragment,e),_(D.$$.fragment,e),_(Q.$$.fragment,e),_(Me.$$.fragment,e),_($e.$$.fragment,e),_(Pe.$$.fragment,e),_(G.$$.fragment,e),_(X.$$.fragment,e),_(ke.$$.fragment,e),_(Ce.$$.fragment,e),_(ze.$$.fragment,e),_(Y.$$.fragment,e),_(O.$$.fragment,e),Mt=!1},d(e){e&&(o(x),o(m),o(p),o(s),o(tt),o(ne),o(ot),o(se),o(nt),o(ae),o(st),o(B),o(at),o(re),o(rt),o(ie),o(it),o(lt),o(de),o(dt),o(ct),o(P),o(mt),o(pt),o(k),o(ft),o(ht),o(C),o(ut),o(gt),o(z),o(_t),o(vt),o(L),o(Tt),o(bt),o(U),o(xt),o(wt),o(F),o(yt),o(et)),o(n),v(b,e),v(w,e),v(le,e),v(ce,e),v(me),v(q),v(pe,e),v(fe),v(he),v(ue,e),v(ge),v(_e),v(ve,e),v(Te),v(be),v(xe,e),v(we),v(ye),v(D),v(Q),v(Me,e),v($e),v(Pe),v(G),v(X),v(ke,e),v(Ce),v(ze),v(Y),v(O)}}}const Ho='{"title":"TVLT","local":"tvlt","sections":[{"title":"Overview","local":"overview","sections":[],"depth":2},{"title":"Usage tips","local":"usage-tips","sections":[],"depth":2},{"title":"TvltConfig","local":"transformers.TvltConfig","sections":[],"depth":2},{"title":"TvltProcessor","local":"transformers.TvltProcessor","sections":[],"depth":2},{"title":"TvltImageProcessor","local":"transformers.TvltImageProcessor","sections":[],"depth":2},{"title":"TvltFeatureExtractor","local":"transformers.TvltFeatureExtractor","sections":[],"depth":2},{"title":"TvltModel","local":"transformers.TvltModel","sections":[],"depth":2},{"title":"TvltForPreTraining","local":"transformers.TvltForPreTraining","sections":[],"depth":2},{"title":"TvltForAudioVisualClassification","local":"transformers.TvltForAudioVisualClassification","sections":[],"depth":2}],"depth":1}';function Ro(y){return Io(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ko extends Wo{constructor(n){super(),Jo(this,n,Ro,qo,jo,{})}}export{Ko as component};
