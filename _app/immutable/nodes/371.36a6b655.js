import{s as ww,o as hw,n as Nm}from"../chunks/scheduler.9bc65507.js";import{S as yw,i as Mw,g as a,s as n,r,A as Tw,h as p,f as s,c as i,j as uw,u as d,x as o,k as cw,y as $w,a as l,v as m,d as f,t as u,w as c}from"../chunks/index.707bf1b6.js";import{T as Rm}from"../chunks/Tip.c2ecdbf4.js";import{C as w}from"../chunks/CodeBlock.54a9f38d.js";import{H as h}from"../chunks/Heading.342b1fa6.js";function bw(b){let y,T="This plugin doesnâ€™t work with <code>-n</code> flag from <code>pytest-xdist</code>.";return{c(){y=a("p"),y.innerHTML=T},l(M){y=p(M,"P",{"data-svelte-h":!0}),o(y)!=="svelte-1p59ipz"&&(y.innerHTML=T)},m(M,$){l(M,y,$)},p:Nm,d(M){M&&s(y)}}}function Jw(b){let y,T="There is another plugin <code>pytest-repeat</code>, but it doesnâ€™t work with <code>unittest</code>.";return{c(){y=a("p"),y.innerHTML=T},l(M){y=p(M,"P",{"data-svelte-h":!0}),o(y)!=="svelte-huhi42"&&(y.innerHTML=T)},m(M,$){l(M,y,$)},p:Nm,d(M){M&&s(y)}}}function gw(b){let y,T=`In order to run the equivalent of <code>rm -r</code> safely, only subdirs of the project repository checkout are allowed if
an explicit <code>tmp_dir</code> is used, so that by mistake no <code>/tmp</code> or similar important part of the filesystem will
get nuked. i.e. please always pass paths that start with <code>./</code>.`;return{c(){y=a("p"),y.innerHTML=T},l(M){y=p(M,"P",{"data-svelte-h":!0}),o(y)!=="svelte-1fj8gae"&&(y.innerHTML=T)},m(M,$){l(M,y,$)},p:Nm,d(M){M&&s(y)}}}function jw(b){let y,T=`Each test can register multiple temporary directories and they all will get auto-removed, unless requested
otherwise.`;return{c(){y=a("p"),y.textContent=T},l(M){y=p(M,"P",{"data-svelte-h":!0}),o(y)!=="svelte-1r50p82"&&(y.textContent=T)},m(M,$){l(M,y,$)},p:Nm,d(M){M&&s(y)}}}function Cw(b){let y,T,M,$,U,xi,v,zm="Letâ€™s take a look at how ðŸ¤— Transformers models are tested and how you can write new tests and improve the existing ones.",ki,_,Wm="There are 2 test suites in the repository:",Zi,I,Lm="<li><code>tests</code> â€” tests for the general API</li> <li><code>examples</code> â€” tests primarily for various applications that arenâ€™t part of the API</li>",Hi,x,Gi,k,Sm=`<li><p>Once a PR is submitted it gets tested with 9 CircleCi jobs. Every new commit to that PR gets retested. These jobs
are defined in this <a href="https://github.com/huggingface/transformers/tree/main/.circleci/config.yml" rel="nofollow">config file</a>, so that if needed you can reproduce the same
environment on your machine.</p> <p>These CI jobs donâ€™t run <code>@slow</code> tests.</p></li> <li><p>There are 3 jobs run by <a href="https://github.com/huggingface/transformers/actions" rel="nofollow">github actions</a>:</p> <ul><li><p><a href="https://github.com/huggingface/transformers/tree/main/.github/workflows/github-torch-hub.yml" rel="nofollow">torch hub integration</a>: checks whether torch hub
integration works.</p></li> <li><p><a href="https://github.com/huggingface/transformers/tree/main/.github/workflows/self-push.yml" rel="nofollow">self-hosted (push)</a>: runs fast tests on GPU only on commits on
<code>main</code>. It only runs if a commit on <code>main</code> has updated the code in one of the following folders: <code>src</code>,
<code>tests</code>, <code>.github</code> (to prevent running on added model cards, notebooks, etc.)</p></li> <li><p><a href="https://github.com/huggingface/transformers/tree/main/.github/workflows/self-scheduled.yml" rel="nofollow">self-hosted runner</a>: runs normal and slow tests on GPU in
<code>tests</code> and <code>examples</code>:</p></li></ul></li>`,Xi,Z,Bi,H,Qm='The results can be observed <a href="https://github.com/huggingface/transformers/actions" rel="nofollow">here</a>.',Vi,G,Ri,X,Ni,B,Fm=`This document goes into many details of how tests can be run. If after reading everything, you need even more details
you will find them <a href="https://docs.pytest.org/en/latest/usage.html" rel="nofollow">here</a>.`,zi,V,Em="Here are some most useful ways of running tests.",Wi,R,Am="Run all:",Li,N,Si,z,Pm="or:",Qi,W,Fi,L,Ym="Note that the latter is defined as:",Ei,S,Ai,Q,qm="which tells pytest to:",Pi,F,Km="<li>run as many test processes as they are CPU cores (which could be too many if you donâ€™t have a ton of RAM!)</li> <li>ensure that all tests from the same file will be run by the same test process</li> <li>do not capture output</li> <li>run in verbose mode</li>",Yi,E,qi,A,Dm="All tests of the test suite:",Ki,P,Di,Y,Om="All tests of a given test file:",Oi,q,ea,K,ta,D,ef="To run an individual test module:",sa,O,la,ee,na,te,tf=`Since unittest is used inside most of the tests, to run specific subtests you need to know the name of the unittest
class containing those tests. For example, it could be:`,ia,se,aa,le,sf="Here:",pa,ne,lf="<li><code>tests/test_optimization.py</code> - the file with tests</li> <li><code>OptimizationTest</code> - the name of the class</li> <li><code>test_adam_w</code> - the name of the specific test function</li>",oa,ie,nf="If the file contains multiple classes, you can choose to run only tests of a given class. For example:",ra,ae,da,pe,af="will run all the tests inside that class.",ma,oe,pf="As mentioned earlier you can see what tests are contained inside the <code>OptimizationTest</code> class by running:",fa,re,ua,de,of="You can run tests by keyword expressions.",ca,me,rf="To run only tests whose name contains <code>adam</code>:",wa,fe,ha,ue,df=`Logical <code>and</code> and <code>or</code> can be used to indicate whether all keywords should match or either. <code>not</code> can be used to
negate.`,ya,ce,mf="To run all tests except those whose name contains <code>adam</code>:",Ma,we,Ta,he,ff="And you can combine the two patterns in one:",$a,ye,ba,Me,uf="For example to run both <code>test_adafactor</code> and <code>test_adam_w</code> you can use:",Ja,Te,ga,$e,cf="Note that we use <code>or</code> here, since we want either of the keywords to match to include both.",ja,be,wf="If you want to include only tests that include both patterns, <code>and</code> is to be used:",Ca,Je,Ua,ge,va,je,hf="Sometimes you need to run <code>accelerate</code> tests on your models. For that you can just add <code>-m accelerate_tests</code> to your command, if letâ€™s say you want to run these tests on <code>OPT</code> run:",_a,Ce,Ia,Ue,xa,ve,yf=`In order to test whether the documentation examples are correct, you should check that the <code>doctests</code> are passing.
As an example, letâ€™s use <a href="https://github.com/huggingface/transformers/blob/main/src/transformers/models/whisper/modeling_whisper.py#L1017-L1035" rel="nofollow"><code>WhisperModel.forward</code>â€™s docstring</a>:`,ka,_e,Za,Ie,Mf="Just run the following line to automatically test every docstring example in the desired file:",Ha,xe,Ga,ke,Tf="If the file has a markdown extention, you should add the <code>--doctest-glob=&quot;*.md&quot;</code> argument.",Xa,Ze,Ba,He,$f=`You can run the tests related to the unstaged files or the current branch (according to Git) by using <a href="https://github.com/anapaulagomes/pytest-picked" rel="nofollow">pytest-picked</a>. This is a great way of quickly testing your changes didnâ€™t break
anything, since it wonâ€™t run the tests related to files you didnâ€™t touch.`,Va,Ge,Ra,Xe,Na,Be,bf="All tests will be run from files and folders which are modified, but not yet committed.",za,Ve,Wa,Re,Jf=`<a href="https://github.com/pytest-dev/pytest-xdist" rel="nofollow">pytest-xdist</a> provides a very useful feature of detecting all failed
tests, and then waiting for you to modify files and continuously re-rerun those failing tests until they pass while you
fix them. So that you donâ€™t need to re start pytest after you made the fix. This is repeated until all tests pass after
which again a full run is performed.`,La,Ne,Sa,ze,gf="To enter the mode: <code>pytest -f</code> or <code>pytest --looponfail</code>",Qa,We,jf=`File changes are detected by looking at <code>looponfailroots</code> root directories and all of their contents (recursively).
If the default for this value does not work for you, you can change it in your project by setting a configuration
option in <code>setup.cfg</code>:`,Fa,Le,Ea,Se,Cf="or <code>pytest.ini</code>/<code>tox.ini</code> files:",Aa,Qe,Pa,Fe,Uf=`This would lead to only looking for file changes in the respective directories, specified relatively to the ini-fileâ€™s
directory.`,Ya,Ee,vf='<a href="https://github.com/joeyespo/pytest-watch" rel="nofollow">pytest-watch</a> is an alternative implementation of this functionality.',qa,Ae,Ka,Pe,_f=`If you want to run all test modules, except a few you can exclude them by giving an explicit list of tests to run. For
example, to run all except <code>test_modeling_*.py</code> tests:`,Da,Ye,Oa,qe,ep,Ke,If="CI builds and when isolation is important (against speed), cache should be cleared:",tp,De,sp,Oe,lp,et,xf=`As mentioned earlier <code>make test</code> runs tests in parallel via <code>pytest-xdist</code> plugin (<code>-n X</code> argument, e.g. <code>-n 2</code>
to run 2 parallel jobs).`,np,tt,kf=`<code>pytest-xdist</code>â€™s <code>--dist=</code> option allows one to control how the tests are grouped. <code>--dist=loadfile</code> puts the
tests located in one file onto the same process.`,ip,st,Zf=`Since the order of executed tests is different and unpredictable, if running the test suite with <code>pytest-xdist</code>
produces failures (meaning we have some undetected coupled tests), use <a href="https://github.com/ESSS/pytest-replay" rel="nofollow">pytest-replay</a> to replay the tests in the same order, which should help with then somehow
reducing that failing sequence to a minimum.`,ap,lt,pp,nt,Hf=`Itâ€™s good to repeat the tests several times, in sequence, randomly, or in sets, to detect any potential
inter-dependency and state-related bugs (tear down). And the straightforward multiple repetition is just good to detect
some problems that get uncovered by randomness of DL.`,op,it,rp,at,Gf='<li><a href="https://github.com/dropbox/pytest-flakefinder" rel="nofollow">pytest-flakefinder</a>:</li>',dp,pt,mp,ot,Xf="And then run every test multiple times (50 by default):",fp,rt,up,J,cp,g,wp,dt,hp,mt,yp,ft,Bf=`Important: the presence of <code>pytest-random-order</code> will automatically randomize tests, no configuration change or
command line options is required.`,Mp,ut,Vf=`As explained earlier this allows detection of coupled tests - where one testâ€™s state affects the state of another. When
<code>pytest-random-order</code> is installed it will print the random seed it used for that session, e.g:`,Tp,ct,$p,wt,Rf="So that if the given particular sequence fails, you can reproduce it by adding that exact seed, e.g.:",bp,ht,Jp,yt,Nf=`It will only reproduce the exact order if you use the exact same list of tests (or no list at all). Once you start to
manually narrowing down the list you can no longer rely on the seed, but have to list them manually in the exact order
they failed and tell pytest to not randomize them instead using <code>--random-order-bucket=none</code>, e.g.:`,gp,Mt,jp,Tt,zf="To disable the shuffling for all tests:",Cp,$t,Up,bt,Wf=`By default <code>--random-order-bucket=module</code> is implied, which will shuffle the files on the module levels. It can also
shuffle on <code>class</code>, <code>package</code>, <code>global</code> and <code>none</code> levels. For the complete details please see its
<a href="https://github.com/jbasko/pytest-random-order" rel="nofollow">documentation</a>.`,vp,Jt,Lf=`Another randomization alternative is: <a href="https://github.com/pytest-dev/pytest-randomly" rel="nofollow"><code>pytest-randomly</code></a>. This
module has a very similar functionality/interface, but it doesnâ€™t have the bucket modes available in
<code>pytest-random-order</code>. It has the same problem of imposing itself once installed.`,_p,gt,Ip,jt,xp,Ct,Sf=`<a href="https://github.com/Frozenball/pytest-sugar" rel="nofollow">pytest-sugar</a> is a plugin that improves the look-n-feel, adds a
progressbar, and show tests that fail and the assert instantly. It gets activated automatically upon installation.`,kp,Ut,Zp,vt,Qf="To run tests without it, run:",Hp,_t,Gp,It,Ff="or uninstall it.",Xp,xt,Bp,kt,Ef="For a single or a group of tests via <code>pytest</code> (after <code>pip install pytest-pspec</code>):",Vp,Zt,Rp,Ht,Np,Gt,Af=`<a href="https://github.com/pytest-dev/pytest-instafail" rel="nofollow">pytest-instafail</a> shows failures and errors instantly instead of
waiting until the end of test session.`,zp,Xt,Wp,Bt,Lp,Vt,Sp,Rt,Pf="On a GPU-enabled setup, to test in CPU-only mode add <code>CUDA_VISIBLE_DEVICES=&quot;&quot;</code>:",Qp,Nt,Fp,zt,Yf=`or if you have multiple gpus, you can specify which one is to be used by <code>pytest</code>. For example, to use only the
second gpu if you have gpus <code>0</code> and <code>1</code>, you can run:`,Ep,Wt,Ap,Lt,qf="This is handy when you want to run different tasks on different GPUs.",Pp,St,Kf=`Some tests must be run on CPU-only, others on either CPU or GPU or TPU, yet others on multiple-GPUs. The following skip
decorators are used to set the requirements of tests CPU/GPU/TPU-wise:`,Yp,Qt,Df="<li><code>require_torch</code> - this test will run only under torch</li> <li><code>require_torch_gpu</code> - as <code>require_torch</code> plus requires at least 1 GPU</li> <li><code>require_torch_multi_gpu</code> - as <code>require_torch</code> plus requires at least 2 GPUs</li> <li><code>require_torch_non_multi_gpu</code> - as <code>require_torch</code> plus requires 0 or 1 GPUs</li> <li><code>require_torch_up_to_2_gpus</code> - as <code>require_torch</code> plus requires 0 or 1 or 2 GPUs</li> <li><code>require_torch_tpu</code> - as <code>require_torch</code> plus requires at least 1 TPU</li>",qp,Ft,Of="Letâ€™s depict the GPU requirements in the following table:",Kp,Et,eu=`| n gpus | decorator                      |
|--------+--------------------------------|
| <code>&gt;= 0</code> | <code>@require_torch</code>               |
| <code>&gt;= 1</code> | <code>@require_torch_gpu</code>           |
| <code>&gt;= 2</code> | <code>@require_torch_multi_gpu</code>     |
| <code>&lt; 2</code>  | <code>@require_torch_non_multi_gpu</code> |
| <code>&lt; 3</code>  | <code>@require_torch_up_to_2_gpus</code>  |`,Dp,At,tu="For example, here is a test that must be run only when there are 2 or more GPUs available and pytorch is installed:",Op,Pt,eo,Yt,su="If a test requires <code>tensorflow</code> use the <code>require_tf</code> decorator. For example:",to,qt,so,Kt,lu=`These decorators can be stacked. For example, if a test is slow and requires at least one GPU under pytorch, here is
how to set it up:`,lo,Dt,no,Ot,nu=`Some decorators like <code>@parametrized</code> rewrite test names, therefore <code>@require_*</code> skip decorators have to be listed
last for them to work correctly. Here is an example of the correct usage:`,io,es,ao,ts,iu=`This order problem doesnâ€™t exist with <code>@pytest.mark.parametrize</code>, you can put it first or last and it will still
work. But it only works with non-unittests.`,po,ss,au="Inside tests:",oo,ls,pu="<li>How many GPUs are available:</li>",ro,ns,mo,is,fo,as,ou="To run the test suite on a specific torch device add <code>TRANSFORMERS_TEST_DEVICE=&quot;$device&quot;</code> where <code>$device</code> is the target backend. For example, to test on CPU only:",uo,ps,co,os,ru="This variable is useful for testing custom or less common PyTorch backends such as <code>mps</code>. It can also be used to achieve the same effect as <code>CUDA_VISIBLE_DEVICES</code> by targeting specific GPUs or testing in CPU-only mode.",wo,rs,du="Certain devices will require an additional import after importing <code>torch</code> for the first time. This can be specified using the environment variable <code>TRANSFORMERS_TEST_BACKEND</code>:",ho,ds,yo,ms,mu="Alternative backends may also require the replacement of device-specific functions. For example <code>torch.cuda.manual_seed</code> may need to be replaced with a device-specific seed setter like <code>torch.npu.manual_seed</code> to correctly set a random seed on the device. To specify a new backend with backend-specific device functions when running the test suite, create a Python device specification file in the format:",Mo,fs,To,us,fu="This format also allows for specification of any additional imports required. To use this file to replace equivalent methods in the test suite, set the environment variable <code>TRANSFORMERS_TEST_DEVICE_SPEC</code> to the path of the spec file.",$o,cs,uu="Currently, only <code>MANUAL_SEED_FN</code>, <code>EMPTY_CACHE_FN</code> and <code>DEVICE_COUNT_FN</code> are supported for device-specific dispatch.",bo,ws,Jo,hs,cu=`<code>pytest</code> canâ€™t deal with distributed training directly. If this is attempted - the sub-processes donâ€™t do the right
thing and end up thinking they are <code>pytest</code> and start running the test suite in loops. It works, however, if one
spawns a normal process that then spawns off multiple workers and manages the IO pipes.`,go,ys,wu="Here are some tests that use it:",jo,Ms,hu='<li><a href="https://github.com/huggingface/transformers/tree/main/tests/trainer/test_trainer_distributed.py" rel="nofollow">test_trainer_distributed.py</a></li> <li><a href="https://github.com/huggingface/transformers/tree/main/tests/deepspeed/test_deepspeed.py" rel="nofollow">test_deepspeed.py</a></li>',Co,Ts,yu="To jump right into the execution point, search for the <code>execute_subprocess_async</code> call in those tests.",Uo,$s,Mu="You will need at least 2 GPUs to see these tests in action:",vo,bs,_o,Js,Io,gs,Tu=`During test execution any output sent to <code>stdout</code> and <code>stderr</code> is captured. If a test or a setup method fails, its
according captured output will usually be shown along with the failure traceback.`,xo,js,$u="To disable output capturing and to get the <code>stdout</code> and <code>stderr</code> normally, use <code>-s</code> or <code>--capture=no</code>:",ko,Cs,Zo,Us,bu="To send test results to JUnit format output:",Ho,vs,Go,_s,Xo,Is,Ju="To have no color (e.g., yellow on white background is not readable):",Bo,xs,Vo,ks,Ro,Zs,gu="Creating a URL for each test failure:",No,Hs,zo,Gs,ju=`This will submit test run information to a remote Paste service and provide a URL for each failure. You may select
tests as usual or add for example -x if you only want to send one particular failure.`,Wo,Xs,Cu="Creating a URL for a whole test session log:",Lo,Bs,So,Vs,Qo,Rs,Uu=`ðŸ¤— transformers tests are based on <code>unittest</code>, but run by <code>pytest</code>, so most of the time features from both systems
can be used.`,Fo,Ns,vu=`You can read <a href="https://docs.pytest.org/en/stable/unittest.html" rel="nofollow">here</a> which features are supported, but the important
thing to remember is that most <code>pytest</code> fixtures donâ€™t work. Neither parametrization, but we use the module
<code>parameterized</code> that works in a similar way.`,Eo,zs,Ao,Ws,_u=`Often, there is a need to run the same test multiple times, but with different arguments. It could be done from within
the test, but then there is no way of running that test for just one set of arguments.`,Po,Ls,Yo,Ss,Iu=`Now, by default this test will be run 3 times, each time with the last 3 arguments of <code>test_floor</code> being assigned the
corresponding arguments in the parameter list.`,qo,Qs,xu="and you could run just the <code>negative</code> and <code>integer</code> sets of params with:",Ko,Fs,Do,Es,ku="or all but <code>negative</code> sub-tests, with:",Oo,As,er,Ps,Zu=`Besides using the <code>-k</code> filter that was just mentioned, you can find out the exact name of each sub-test and run any
or all of them using their exact names.`,tr,Ys,sr,qs,Hu="and it will list:",lr,Ks,nr,Ds,Gu="So now you can run just 2 specific sub-tests:",ir,Os,ar,el,Xu=`The module <a href="https://pypi.org/project/parameterized/" rel="nofollow">parameterized</a> which is already in the developer dependencies
of <code>transformers</code> works for both: <code>unittests</code> and <code>pytest</code> tests.`,pr,tl,Bu=`If, however, the test is not a <code>unittest</code>, you may use <code>pytest.mark.parametrize</code> (or you may see it being used in
some existing tests, mostly under <code>examples</code>).`,or,sl,Vu="Here is the same example, this time using <code>pytest</code>â€™s <code>parametrize</code> marker:",rr,ll,dr,nl,Ru=`Same as with <code>parameterized</code>, with <code>pytest.mark.parametrize</code> you can have a fine control over which sub-tests are
run, if the <code>-k</code> filter doesnâ€™t do the job. Except, this parametrization function creates a slightly different set of
names for the sub-tests. Here is what they look like:`,mr,il,fr,al,Nu="and it will list:",ur,pl,cr,ol,zu="So now you can run just the specific test:",wr,rl,hr,dl,Wu="as in the previous example.",yr,ml,Mr,fl,Lu=`In tests often we need to know where things are relative to the current test file, and itâ€™s not trivial since the test
could be invoked from more than one directory or could reside in sub-directories with different depths. A helper class
<code>transformers.test_utils.TestCasePlus</code> solves this problem by sorting out all the basic paths and provides easy
accessors to them:`,Tr,ul,Su="<li><p><code>pathlib</code> objects (all fully resolved):</p> <ul><li><code>test_file_path</code> - the current test file path, i.e. <code>__file__</code></li> <li><code>test_file_dir</code> - the directory containing the current test file</li> <li><code>tests_dir</code> - the directory of the <code>tests</code> test suite</li> <li><code>examples_dir</code> - the directory of the <code>examples</code> test suite</li> <li><code>repo_root_dir</code> - the directory of the repository</li> <li><code>src_dir</code> - the directory of <code>src</code> (i.e. where the <code>transformers</code> sub-dir resides)</li></ul></li> <li><p>stringified paths---same as above but these return paths as strings, rather than <code>pathlib</code> objects:</p> <ul><li><code>test_file_path_str</code></li> <li><code>test_file_dir_str</code></li> <li><code>tests_dir_str</code></li> <li><code>examples_dir_str</code></li> <li><code>repo_root_dir_str</code></li> <li><code>src_dir_str</code></li></ul></li>",$r,cl,Qu=`To start using those all you need is to make sure that the test resides in a subclass of
<code>transformers.test_utils.TestCasePlus</code>. For example:`,br,wl,Jr,hl,Fu=`If you donâ€™t need to manipulate paths via <code>pathlib</code> or you just need a path as a string, you can always invoked
<code>str()</code> on the <code>pathlib</code> object or use the accessors ending with <code>_str</code>. For example:`,gr,yl,jr,Ml,Cr,Tl,Eu=`Using unique temporary files and directories are essential for parallel test running, so that the tests wonâ€™t overwrite
each otherâ€™s data. Also we want to get the temporary files and directories removed at the end of each test that created
them. Therefore, using packages like <code>tempfile</code>, which address these needs is essential.`,Ur,$l,Au=`However, when debugging tests, you need to be able to see what goes into the temporary file or directory and you want
to know itâ€™s exact path and not having it randomized on every test re-run.`,vr,bl,Pu=`A helper class <code>transformers.test_utils.TestCasePlus</code> is best used for such purposes. Itâ€™s a sub-class of
<code>unittest.TestCase</code>, so we can easily inherit from it in the test modules.`,_r,Jl,Yu="Here is an example of its usage:",Ir,gl,xr,jl,qu="This code creates a unique temporary directory, and sets <code>tmp_dir</code> to its location.",kr,Cl,Ku="<li>Create a unique temporary dir:</li>",Zr,Ul,Hr,vl,Du=`<code>tmp_dir</code> will contain the path to the created temporary dir. It will be automatically removed at the end of the
test.`,Gr,_l,Ou="<li>Create a temporary dir of my choice, ensure itâ€™s empty before the test starts and donâ€™t empty it after the test.</li>",Xr,Il,Br,xl,ec=`This is useful for debug when you want to monitor a specific directory and want to make sure the previous tests didnâ€™t
leave any data in there.`,Vr,kl,tc=`<li><p>You can override the default behavior by directly overriding the <code>before</code> and <code>after</code> args, leading to one of the
following behaviors:</p> <ul><li><code>before=True</code>: the temporary dir will always be cleared at the beginning of the test.</li> <li><code>before=False</code>: if the temporary dir already existed, any existing files will remain there.</li> <li><code>after=True</code>: the temporary dir will always be deleted at the end of the test.</li> <li><code>after=False</code>: the temporary dir will always be left intact at the end of the test.</li></ul></li>`,Rr,j,Nr,C,zr,Zl,Wr,Hl,sc=`If you need to temporary override <code>sys.path</code> to import from another test for example, you can use the
<code>ExtendSysPath</code> context manager. Example:`,Lr,Gl,Sr,Xl,Qr,Bl,lc=`This is useful when a bug is found and a new test is written, yet the bug is not fixed yet. In order to be able to
commit it to the main repository we need make sure itâ€™s skipped during <code>make test</code>.`,Fr,Vl,nc="Methods:",Er,Rl,ic=`<li><p>A <strong>skip</strong> means that you expect your test to pass only if some conditions are met, otherwise pytest should skip
running the test altogether. Common examples are skipping windows-only tests on non-windows platforms, or skipping
tests that depend on an external resource which is not available at the moment (for example a database).</p></li> <li><p>A <strong>xfail</strong> means that you expect a test to fail for some reason. A common example is a test for a feature not yet
implemented, or a bug not yet fixed. When a test passes despite being expected to fail (marked with
pytest.mark.xfail), itâ€™s an xpass and will be reported in the test summary.</p></li>`,Ar,Nl,ac=`One of the important differences between the two is that <code>skip</code> doesnâ€™t run the test, and <code>xfail</code> does. So if the
code thatâ€™s buggy causes some bad state that will affect other tests, do not use <code>xfail</code>.`,Pr,zl,Yr,Wl,pc="<li>Here is how to skip whole test unconditionally:</li>",qr,Ll,Kr,Sl,oc="or via pytest:",Dr,Ql,Or,Fl,rc="or the <code>xfail</code> way:",ed,El,td,Al,dc="Hereâ€™s how to skip a test based on internal checks within the test:",sd,Pl,ld,Yl,mc="or the whole module:",nd,ql,id,Kl,fc="or the <code>xfail</code> way:",ad,Dl,pd,Ol,uc="<li>Here is how to skip all tests in a module if some import is missing:</li>",od,en,rd,tn,cc="<li>Skip a test based on a condition:</li>",dd,sn,md,ln,wc="or:",fd,nn,ud,an,hc="or skip the whole module:",cd,pn,wd,on,yc='More details, example and ways are <a href="https://docs.pytest.org/en/latest/skipping.html" rel="nofollow">here</a>.',hd,rn,yd,dn,Mc=`The library of tests is ever-growing, and some of the tests take minutes to run, therefore we canâ€™t afford waiting for
an hour for the test suite to complete on CI. Therefore, with some exceptions for essential tests, slow tests should be
marked as in the example below:`,Md,mn,Td,fn,Tc="Once a test is marked as <code>@slow</code>, to run such tests set <code>RUN_SLOW=1</code> env var, e.g.:",$d,un,bd,cn,$c=`Some decorators like <code>@parameterized</code> rewrite test names, therefore <code>@slow</code> and the rest of the skip decorators
<code>@require_*</code> have to be listed last for them to work correctly. Here is an example of the correct usage:`,Jd,wn,gd,hn,bc=`As explained at the beginning of this document, slow tests get to run on a scheduled basis, rather than in PRs CI
checks. So itâ€™s possible that some problems will be missed during a PR submission and get merged. Such problems will
get caught during the next scheduled CI job. But it also means that itâ€™s important to run the slow tests on your
machine before submitting the PR.`,jd,yn,Jc="Here is a rough decision making mechanism for choosing which tests should be marked as slow:",Cd,Mn,gc=`If the test is focused on one of the libraryâ€™s internal components (e.g., modeling files, tokenization files,
pipelines), then we should run that test in the non-slow test suite. If itâ€™s focused on an other aspect of the library,
such as the documentation or the examples, then we should run these tests in the slow test suite. And then, to refine
this approach we should have exceptions:`,Ud,Tn,jc=`<li>All tests that need to download a heavy set of weights or a dataset that is larger than ~50MB (e.g., model or
tokenizer integration tests, pipeline integration tests) should be set to slow. If youâ€™re adding a new model, you
should create and upload to the hub a tiny version of it (with random weights) for integration tests. This is
discussed in the following paragraphs.</li> <li>All tests that need to do a training not specifically optimized to be fast should be set to slow.</li> <li>We can introduce exceptions if some of these should-be-non-slow tests are excruciatingly slow, and set them to
<code>@slow</code>. Auto-modeling tests, which save and load large files to disk, are a good example of tests that are marked
as <code>@slow</code>.</li> <li>If a test completes under 1 second on CI (including downloads if any) then it should be a normal test regardless.</li>`,vd,$n,Cc=`Collectively, all the non-slow tests need to cover entirely the different internals, while remaining fast. For example,
a significant coverage can be achieved by testing with specially created tiny models with random weights. Such models
have the very minimal number of layers (e.g., 2), vocab size (e.g., 1000), etc. Then the <code>@slow</code> tests can use large
slow models to do qualitative testing. To see the use of these simply look for <em>tiny</em> models with:`,_d,bn,Id,Jn,Uc=`Here is a an example of a <a href="https://github.com/huggingface/transformers/tree/main/scripts/fsmt/fsmt-make-tiny-model.py" rel="nofollow">script</a> that created the tiny model
<a href="https://huggingface.co/stas/tiny-wmt19-en-de" rel="nofollow">stas/tiny-wmt19-en-de</a>. You can easily adjust it to your specific
modelâ€™s architecture.`,xd,gn,vc=`Itâ€™s easy to measure the run-time incorrectly if for example there is an overheard of downloading a huge model, but if
you test it locally the downloaded files would be cached and thus the download time not measured. Hence check the
execution speed report in CI logs instead (the output of <code>pytest --durations=0 tests</code>).`,kd,jn,_c=`That report is also useful to find slow outliers that arenâ€™t marked as such, or which need to be re-written to be fast.
If you notice that the test suite starts getting slow on CI, the top listing of this report will show the slowest
tests.`,Zd,Cn,Hd,Un,Ic=`In order to test functions that write to <code>stdout</code> and/or <code>stderr</code>, the test can access those streams using the
<code>pytest</code>â€™s <a href="https://docs.pytest.org/en/latest/capture.html" rel="nofollow">capsys system</a>. Here is how this is accomplished:`,Gd,vn,Xd,_n,xc=`And, of course, most of the time, <code>stderr</code> will come as a part of an exception, so try/except has to be used in such
a case:`,Bd,In,Vd,xn,kc="Another approach to capturing stdout is via <code>contextlib.redirect_stdout</code>:",Rd,kn,Nd,Zn,Zc=`An important potential issue with capturing stdout is that it may contain <code>\\r</code> characters that in normal <code>print</code>
reset everything that has been printed so far. There is no problem with <code>pytest</code>, but with <code>pytest -s</code> these
characters get included in the buffer, so to be able to have the test run with and without <code>-s</code>, you have to make an
extra cleanup to the captured output, using <code>re.sub(r&#39;~.*\\r&#39;, &#39;&#39;, buf, 0, re.M)</code>.`,zd,Hn,Hc=`But, then we have a helper context manager wrapper to automatically take care of it all, regardless of whether it has
some <code>\\r</code>â€™s in it or not, so itâ€™s a simple:`,Wd,Gn,Ld,Xn,Gc="Here is a full test example:",Sd,Bn,Qd,Vn,Xc="If youâ€™d like to capture <code>stderr</code> use the <code>CaptureStderr</code> class instead:",Fd,Rn,Ed,Nn,Bc="If you need to capture both streams at once, use the parent <code>CaptureStd</code> class:",Ad,zn,Pd,Wn,Vc=`Also, to aid debugging test issues, by default these context managers automatically replay the captured streams on exit
from the context.`,Yd,Ln,qd,Sn,Rc="If you need to validate the output of a logger, you can use <code>CaptureLogger</code>:",Kd,Qn,Dd,Fn,Od,En,Nc=`If you want to test the impact of environment variables for a specific test you can use a helper decorator
<code>transformers.testing_utils.mockenv</code>`,em,An,tm,Pn,zc=`At times an external program needs to be called, which requires setting <code>PYTHONPATH</code> in <code>os.environ</code> to include
multiple local paths. A helper class <code>transformers.test_utils.TestCasePlus</code> comes to help:`,sm,Yn,lm,qn,Wc=`Depending on whether the test file was under the <code>tests</code> test suite or <code>examples</code> itâ€™ll correctly set up
<code>env[PYTHONPATH]</code> to include one of these two directories, and also the <code>src</code> directory to ensure the testing is
done against the current repo, and finally with whatever <code>env[PYTHONPATH]</code> was already set to before the test was
called if anything.`,nm,Kn,Lc="This helper method creates a copy of the <code>os.environ</code> object, so the original remains intact.",im,Dn,am,On,Sc=`In some situations you may want to remove randomness for your tests. To get identical reproducible results set, you
will need to fix the seed:`,pm,ei,om,ti,rm,si,Qc="To start a debugger at the point of the warning, do this:",dm,li,mm,ni,fm,ii,Fc="To trigger a self-push workflow CI job, you must:",um,ai,Ec=`<li>Create a new branch on <code>transformers</code> origin (not a fork!).</li> <li>The branch name has to start with either <code>ci_</code> or <code>ci-</code> (<code>main</code> triggers it too, but we canâ€™t do PRs on
<code>main</code>). It also gets triggered only for specific paths - you can find the up-to-date definition in case it
changed since this document has been written <a href="https://github.com/huggingface/transformers/blob/main/.github/workflows/self-push.yml" rel="nofollow">here</a> under <em>push:</em></li> <li>Create a PR from this branch.</li> <li>Then you can see the job appear <a href="https://github.com/huggingface/transformers/actions/workflows/self-push.yml" rel="nofollow">here</a>. It may not run right away if there
is a backlog.</li>`,cm,pi,wm,oi,Ac=`Testing CI features can be potentially problematic as it can interfere with the normal CI functioning. Therefore if a
new CI feature is to be added, it should be done as following.`,hm,ri,Pc=`<li>Create a new dedicated job that tests what needs to be tested</li> <li>The new job must always succeed so that it gives us a green âœ“ (details below).</li> <li>Let it run for some days to see that a variety of different PR types get to run on it (user fork branches,
non-forked branches, branches originating from github.com UI direct file edit, various forced pushes, etc. - there
are so many) while monitoring the experimental jobâ€™s logs (not the overall job green as itâ€™s purposefully always
green)</li> <li>When itâ€™s clear that everything is solid, then merge the new changes into existing jobs.</li>`,ym,di,Yc="That way experiments on CI functionality itself wonâ€™t interfere with the normal workflow.",Mm,mi,qc="Now how can we make the job always succeed while the new CI feature is being developed?",Tm,fi,Kc=`Some CIs, like TravisCI support ignore-step-failure and will report the overall job as successful, but CircleCI and
Github Actions as of this writing donâ€™t support that.`,$m,ui,Dc="So the following workaround can be used:",bm,ci,Oc="<li><code>set +euo pipefail</code> at the beginning of the run command to suppress most potential failures in the bash script.</li> <li>the last command must be a success: <code>echo &quot;done&quot;</code> or just <code>true</code> will do</li>",Jm,wi,ew="Here is an example:",gm,hi,jm,yi,tw="For simple commands you could also do:",Cm,Mi,Um,Ti,sw=`Of course, once satisfied with the results, integrate the experimental step or job with the rest of the normal jobs,
while removing <code>set +euo pipefail</code> or any other things you may have added to ensure that the experimental job doesnâ€™t
interfere with the normal CI functioning.`,vm,$i,lw=`This whole process would have been much easier if we only could set something like <code>allow-failure</code> for the
experimental step, and let it fail without impacting the overall status of PRs. But as mentioned earlier CircleCI and
Github Actions donâ€™t support it at the moment.`,_m,bi,nw="You can vote for this feature and see where it is at these CI-specific threads:",Im,Ji,iw='<li><a href="https://github.com/actions/toolkit/issues/399" rel="nofollow">Github Actions:</a></li> <li><a href="https://ideas.circleci.com/ideas/CCI-I-344" rel="nofollow">CircleCI:</a></li>',xm,gi,km,ji,aw="For a PR that involves the DeepSpeed integration, keep in mind our CircleCI PR CI setup doesnâ€™t have GPUs. Tests requiring GPUs are run on a different CI nightly. This means if you get a passing CI report in your PR, it doesnâ€™t mean the DeepSpeed tests pass.",Zm,Ci,pw="To run DeepSpeed tests:",Hm,Ui,Gm,vi,ow="Any changes to the modeling or PyTorch examples code requires running the model zoo tests as well.",Xm,_i,Bm,Ii,Vm;return U=new h({props:{title:"Testing",local:"testing",headingTag:"h1"}}),x=new h({props:{title:"How transformers are tested",local:"how-transformers-are-tested",headingTag:"h2"}}),Z=new w({props:{code:"UlVOX1NMT1clM0QxJTIwcHl0ZXN0JTIwdGVzdHMlMkYlMEFSVU5fU0xPVyUzRDElMjBweXRlc3QlMjBleGFtcGxlcyUyRg==",highlighted:`RUN_SLOW=1 pytest tests/
RUN_SLOW=1 pytest examples/`,wrap:!1}}),G=new h({props:{title:"Running tests",local:"running-tests",headingTag:"h2"}}),X=new h({props:{title:"Choosing which tests to run",local:"choosing-which-tests-to-run",headingTag:"h3"}}),N=new w({props:{code:"cHl0ZXN0",highlighted:"pytest",wrap:!1}}),W=new w({props:{code:"bWFrZSUyMHRlc3Q=",highlighted:'make <span class="hljs-built_in">test</span>',wrap:!1}}),S=new w({props:{code:"cHl0aG9uJTIwLW0lMjBweXRlc3QlMjAtbiUyMGF1dG8lMjAtLWRpc3QlM0Rsb2FkZmlsZSUyMC1zJTIwLXYlMjAuJTJGdGVzdHMlMkY=",highlighted:"python -m pytest -n auto --dist=loadfile -s -v ./tests/",wrap:!1}}),E=new h({props:{title:"Getting the list of all tests",local:"getting-the-list-of-all-tests",headingTag:"h3"}}),P=new w({props:{code:"cHl0ZXN0JTIwLS1jb2xsZWN0LW9ubHklMjAtcQ==",highlighted:"pytest --collect-only -q",wrap:!1}}),q=new w({props:{code:"cHl0ZXN0JTIwdGVzdHMlMkZ0ZXN0X29wdGltaXphdGlvbi5weSUyMC0tY29sbGVjdC1vbmx5JTIwLXE=",highlighted:"pytest tests/test_optimization.py --collect-only -q",wrap:!1}}),K=new h({props:{title:"Run a specific test module",local:"run-a-specific-test-module",headingTag:"h3"}}),O=new w({props:{code:"cHl0ZXN0JTIwdGVzdHMlMkZ1dGlscyUyRnRlc3RfbG9nZ2luZy5weQ==",highlighted:"pytest tests/utils/test_logging.py",wrap:!1}}),ee=new h({props:{title:"Run specific tests",local:"run-specific-tests",headingTag:"h3"}}),se=new w({props:{code:"cHl0ZXN0JTIwdGVzdHMlMkZ0ZXN0X29wdGltaXphdGlvbi5weSUzQSUzQU9wdGltaXphdGlvblRlc3QlM0ElM0F0ZXN0X2FkYW1fdw==",highlighted:"pytest tests/test_optimization.py::OptimizationTest::test_adam_w",wrap:!1}}),ae=new w({props:{code:"cHl0ZXN0JTIwdGVzdHMlMkZ0ZXN0X29wdGltaXphdGlvbi5weSUzQSUzQU9wdGltaXphdGlvblRlc3Q=",highlighted:"pytest tests/test_optimization.py::OptimizationTest",wrap:!1}}),re=new w({props:{code:"cHl0ZXN0JTIwdGVzdHMlMkZ0ZXN0X29wdGltaXphdGlvbi5weSUzQSUzQU9wdGltaXphdGlvblRlc3QlMjAtLWNvbGxlY3Qtb25seSUyMC1x",highlighted:"pytest tests/test_optimization.py::OptimizationTest --collect-only -q",wrap:!1}}),fe=new w({props:{code:"cHl0ZXN0JTIwLWslMjBhZGFtJTIwdGVzdHMlMkZ0ZXN0X29wdGltaXphdGlvbi5weQ==",highlighted:"pytest -k adam tests/test_optimization.py",wrap:!1}}),we=new w({props:{code:"cHl0ZXN0JTIwLWslMjAlMjJub3QlMjBhZGFtJTIyJTIwdGVzdHMlMkZ0ZXN0X29wdGltaXphdGlvbi5weQ==",highlighted:'pytest -k <span class="hljs-string">&quot;not adam&quot;</span> tests/test_optimization.py',wrap:!1}}),ye=new w({props:{code:"cHl0ZXN0JTIwLWslMjAlMjJhZGElMjBhbmQlMjBub3QlMjBhZGFtJTIyJTIwdGVzdHMlMkZ0ZXN0X29wdGltaXphdGlvbi5weQ==",highlighted:'pytest -k <span class="hljs-string">&quot;ada and not adam&quot;</span> tests/test_optimization.py',wrap:!1}}),Te=new w({props:{code:"cHl0ZXN0JTIwLWslMjAlMjJ0ZXN0X2FkYW1fdyUyMG9yJTIwdGVzdF9hZGFtX3clMjIlMjB0ZXN0cyUyRnRlc3Rfb3B0aW1pemF0aW9uLnB5",highlighted:'pytest -k <span class="hljs-string">&quot;test_adam_w or test_adam_w&quot;</span> tests/test_optimization.py',wrap:!1}}),Je=new w({props:{code:"cHl0ZXN0JTIwLWslMjAlMjJ0ZXN0JTIwYW5kJTIwYWRhJTIyJTIwdGVzdHMlMkZ0ZXN0X29wdGltaXphdGlvbi5weQ==",highlighted:'pytest -k <span class="hljs-string">&quot;test and ada&quot;</span> tests/test_optimization.py',wrap:!1}}),ge=new h({props:{title:"Run accelerate tests",local:"run-accelerate-tests",headingTag:"h3"}}),Ce=new w({props:{code:"UlVOX1NMT1clM0QxJTIwcHl0ZXN0JTIwLW0lMjBhY2NlbGVyYXRlX3Rlc3RzJTIwdGVzdHMlMkZtb2RlbHMlMkZvcHQlMkZ0ZXN0X21vZGVsaW5nX29wdC5weSUyMA==",highlighted:"RUN_SLOW=1 pytest -m accelerate_tests tests/models/opt/test_modeling_opt.py ",wrap:!1}}),Ue=new h({props:{title:"Run documentation tests",local:"run-documentation-tests",headingTag:"h3"}}),_e=new w({props:{code:"ciUyMiUyMiUyMiUwQVJldHVybnMlM0ElMEElMEFFeGFtcGxlJTNBJTBBJTIwJTIwJTIwJTIwJTYwJTYwJTYwcHl0aG9uJTBBJTIwJTIwJTIwJTIwJTNFJTNFJTNFJTIwaW1wb3J0JTIwdG9yY2glMEElMjAlMjAlMjAlMjAlM0UlM0UlM0UlMjBmcm9tJTIwdHJhbnNmb3JtZXJzJTIwaW1wb3J0JTIwV2hpc3Blck1vZGVsJTJDJTIwV2hpc3BlckZlYXR1cmVFeHRyYWN0b3IlMEElMjAlMjAlMjAlMjAlM0UlM0UlM0UlMjBmcm9tJTIwZGF0YXNldHMlMjBpbXBvcnQlMjBsb2FkX2RhdGFzZXQlMEElMEElMjAlMjAlMjAlMjAlM0UlM0UlM0UlMjBtb2RlbCUyMCUzRCUyMFdoaXNwZXJNb2RlbC5mcm9tX3ByZXRyYWluZWQoJTIyb3BlbmFpJTJGd2hpc3Blci1iYXNlJTIyKSUwQSUyMCUyMCUyMCUyMCUzRSUzRSUzRSUyMGZlYXR1cmVfZXh0cmFjdG9yJTIwJTNEJTIwV2hpc3BlckZlYXR1cmVFeHRyYWN0b3IuZnJvbV9wcmV0cmFpbmVkKCUyMm9wZW5haSUyRndoaXNwZXItYmFzZSUyMiklMEElMjAlMjAlMjAlMjAlM0UlM0UlM0UlMjBkcyUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJoZi1pbnRlcm5hbC10ZXN0aW5nJTJGbGlicmlzcGVlY2hfYXNyX2R1bW15JTIyJTJDJTIwJTIyY2xlYW4lMjIlMkMlMjBzcGxpdCUzRCUyMnZhbGlkYXRpb24lMjIpJTBBJTIwJTIwJTIwJTIwJTNFJTNFJTNFJTIwaW5wdXRzJTIwJTNEJTIwZmVhdHVyZV9leHRyYWN0b3IoZHMlNUIwJTVEJTVCJTIyYXVkaW8lMjIlNUQlNUIlMjJhcnJheSUyMiU1RCUyQyUyMHJldHVybl90ZW5zb3JzJTNEJTIycHQlMjIpJTBBJTIwJTIwJTIwJTIwJTNFJTNFJTNFJTIwaW5wdXRfZmVhdHVyZXMlMjAlM0QlMjBpbnB1dHMuaW5wdXRfZmVhdHVyZXMlMEElMjAlMjAlMjAlMjAlM0UlM0UlM0UlMjBkZWNvZGVyX2lucHV0X2lkcyUyMCUzRCUyMHRvcmNoLnRlbnNvciglNUIlNUIxJTJDJTIwMSU1RCU1RCklMjAqJTIwbW9kZWwuY29uZmlnLmRlY29kZXJfc3RhcnRfdG9rZW5faWQlMEElMjAlMjAlMjAlMjAlM0UlM0UlM0UlMjBsYXN0X2hpZGRlbl9zdGF0ZSUyMCUzRCUyMG1vZGVsKGlucHV0X2ZlYXR1cmVzJTJDJTIwZGVjb2Rlcl9pbnB1dF9pZHMlM0RkZWNvZGVyX2lucHV0X2lkcykubGFzdF9oaWRkZW5fc3RhdGUlMEElMjAlMjAlMjAlMjAlM0UlM0UlM0UlMjBsaXN0KGxhc3RfaGlkZGVuX3N0YXRlLnNoYXBlKSUwQSUyMCUyMCUyMCUyMCU1QjElMkMlMjAyJTJDJTIwNTEyJTVEJTBBJTIwJTIwJTIwJTIwJTYwJTYwJTYwJTIyJTIyJTIyJTBB",highlighted:`<span class="hljs-string">r&quot;&quot;&quot;
Returns:

Example:
    \`\`\`python
    &gt;&gt;&gt; import torch
    &gt;&gt;&gt; from transformers import WhisperModel, WhisperFeatureExtractor
    &gt;&gt;&gt; from datasets import load_dataset

    &gt;&gt;&gt; model = WhisperModel.from_pretrained(&quot;openai/whisper-base&quot;)
    &gt;&gt;&gt; feature_extractor = WhisperFeatureExtractor.from_pretrained(&quot;openai/whisper-base&quot;)
    &gt;&gt;&gt; ds = load_dataset(&quot;hf-internal-testing/librispeech_asr_dummy&quot;, &quot;clean&quot;, split=&quot;validation&quot;)
    &gt;&gt;&gt; inputs = feature_extractor(ds[0][&quot;audio&quot;][&quot;array&quot;], return_tensors=&quot;pt&quot;)
    &gt;&gt;&gt; input_features = inputs.input_features
    &gt;&gt;&gt; decoder_input_ids = torch.tensor([[1, 1]]) * model.config.decoder_start_token_id
    &gt;&gt;&gt; last_hidden_state = model(input_features, decoder_input_ids=decoder_input_ids).last_hidden_state
    &gt;&gt;&gt; list(last_hidden_state.shape)
    [1, 2, 512]
    \`\`\`&quot;&quot;&quot;</span>
`,wrap:!1}}),xe=new w({props:{code:"cHl0ZXN0JTIwLS1kb2N0ZXN0LW1vZHVsZXMlMjAlM0NwYXRoX3RvX2ZpbGVfb3JfZGlyJTNF",highlighted:"pytest --doctest-modules &lt;path_to_file_or_dir&gt;",wrap:!1}}),Ze=new h({props:{title:"Run only modified tests",local:"run-only-modified-tests",headingTag:"h3"}}),Ge=new w({props:{code:"cGlwJTIwaW5zdGFsbCUyMHB5dGVzdC1waWNrZWQ=",highlighted:"pip install pytest-picked",wrap:!1}}),Xe=new w({props:{code:"cHl0ZXN0JTIwLS1waWNrZWQ=",highlighted:"pytest --picked",wrap:!1}}),Ve=new h({props:{title:"Automatically rerun failed tests on source modification",local:"automatically-rerun-failed-tests-on-source-modification",headingTag:"h3"}}),Ne=new w({props:{code:"cGlwJTIwaW5zdGFsbCUyMHB5dGVzdC14ZGlzdA==",highlighted:"pip install pytest-xdist",wrap:!1}}),Le=new w({props:{code:"JTVCdG9vbCUzQXB5dGVzdCU1RCUwQWxvb3BvbmZhaWxyb290cyUyMCUzRCUyMHRyYW5zZm9ybWVycyUyMHRlc3Rz",highlighted:`<span class="hljs-section">[tool:pytest]</span>
<span class="hljs-attr">looponfailroots</span> = transformers tests`,wrap:!1}}),Qe=new w({props:{code:"JTVCcHl0ZXN0JTVEJTBBbG9vcG9uZmFpbHJvb3RzJTIwJTNEJTIwdHJhbnNmb3JtZXJzJTIwdGVzdHM=",highlighted:`<span class="hljs-section">[pytest]</span>
<span class="hljs-attr">looponfailroots</span> = transformers tests`,wrap:!1}}),Ae=new h({props:{title:"Skip a test module",local:"skip-a-test-module",headingTag:"h3"}}),Ye=new w({props:{code:"cHl0ZXN0JTIwKmxzJTIwLTElMjB0ZXN0cyUyRipweSUyMCU3QyUyMGdyZXAlMjAtdiUyMHRlc3RfbW9kZWxpbmcq",highlighted:'pytest *<span class="hljs-built_in">ls</span> -1 tests/*py | grep -v test_modeling*',wrap:!1}}),qe=new h({props:{title:"Clearing state",local:"clearing-state",headingTag:"h3"}}),De=new w({props:{code:"cHl0ZXN0JTIwLS1jYWNoZS1jbGVhciUyMHRlc3Rz",highlighted:"pytest --cache-clear tests",wrap:!1}}),Oe=new h({props:{title:"Running tests in parallel",local:"running-tests-in-parallel",headingTag:"h3"}}),lt=new h({props:{title:"Test order and repetition",local:"test-order-and-repetition",headingTag:"h3"}}),it=new h({props:{title:"Repeat tests",local:"repeat-tests",headingTag:"h4"}}),pt=new w({props:{code:"cGlwJTIwaW5zdGFsbCUyMHB5dGVzdC1mbGFrZWZpbmRlcg==",highlighted:"pip install pytest-flakefinder",wrap:!1}}),rt=new w({props:{code:"cHl0ZXN0JTIwLS1mbGFrZS1maW5kZXIlMjAtLWZsYWtlLXJ1bnMlM0Q1JTIwdGVzdHMlMkZ0ZXN0X2ZhaWxpbmdfdGVzdC5weQ==",highlighted:"pytest --flake-finder --flake-runs=5 tests/test_failing_test.py",wrap:!1}}),J=new Rm({props:{$$slots:{default:[bw]},$$scope:{ctx:b}}}),g=new Rm({props:{$$slots:{default:[Jw]},$$scope:{ctx:b}}}),dt=new h({props:{title:"Run tests in a random order",local:"run-tests-in-a-random-order",headingTag:"h4"}}),mt=new w({props:{code:"cGlwJTIwaW5zdGFsbCUyMHB5dGVzdC1yYW5kb20tb3JkZXI=",highlighted:"pip install pytest-random-order",wrap:!1}}),ct=new w({props:{code:"cHl0ZXN0JTIwdGVzdHMlMEElNUIuLi4lNUQlMEFVc2luZyUyMC0tcmFuZG9tLW9yZGVyLWJ1Y2tldCUzRG1vZHVsZSUwQVVzaW5nJTIwLS1yYW5kb20tb3JkZXItc2VlZCUzRDU3MzY2Mw==",highlighted:`pytest tests
[...]
Using --random-order-bucket=module
Using --random-order-seed=573663`,wrap:!1}}),ht=new w({props:{code:"cHl0ZXN0JTIwLS1yYW5kb20tb3JkZXItc2VlZCUzRDU3MzY2MyUwQSU1Qi4uLiU1RCUwQVVzaW5nJTIwLS1yYW5kb20tb3JkZXItYnVja2V0JTNEbW9kdWxlJTBBVXNpbmclMjAtLXJhbmRvbS1vcmRlci1zZWVkJTNENTczNjYz",highlighted:`pytest --random-order-seed=573663
[...]
Using --random-order-bucket=module
Using --random-order-seed=573663`,wrap:!1}}),Mt=new w({props:{code:"cHl0ZXN0JTIwLS1yYW5kb20tb3JkZXItYnVja2V0JTNEbm9uZSUyMHRlc3RzJTJGdGVzdF9hLnB5JTIwdGVzdHMlMkZ0ZXN0X2MucHklMjB0ZXN0cyUyRnRlc3RfYi5weQ==",highlighted:"pytest --random-order-bucket=none tests/test_a.py tests/test_c.py tests/test_b.py",wrap:!1}}),$t=new w({props:{code:"cHl0ZXN0JTIwLS1yYW5kb20tb3JkZXItYnVja2V0JTNEbm9uZQ==",highlighted:"pytest --random-order-bucket=none",wrap:!1}}),gt=new h({props:{title:"Look and feel variations",local:"look-and-feel-variations",headingTag:"h3"}}),jt=new h({props:{title:"pytest-sugar",local:"pytest-sugar",headingTag:"h4"}}),Ut=new w({props:{code:"cGlwJTIwaW5zdGFsbCUyMHB5dGVzdC1zdWdhcg==",highlighted:"pip install pytest-sugar",wrap:!1}}),_t=new w({props:{code:"cHl0ZXN0JTIwLXAlMjBubyUzQXN1Z2Fy",highlighted:"pytest -p no:sugar",wrap:!1}}),xt=new h({props:{title:"Report each sub-test name and its progress",local:"report-each-sub-test-name-and-its-progress",headingTag:"h4"}}),Zt=new w({props:{code:"cHl0ZXN0JTIwLS1wc3BlYyUyMHRlc3RzJTJGdGVzdF9vcHRpbWl6YXRpb24ucHk=",highlighted:"pytest --pspec tests/test_optimization.py",wrap:!1}}),Ht=new h({props:{title:"Instantly shows failed tests",local:"instantly-shows-failed-tests",headingTag:"h4"}}),Xt=new w({props:{code:"cGlwJTIwaW5zdGFsbCUyMHB5dGVzdC1pbnN0YWZhaWw=",highlighted:"pip install pytest-instafail",wrap:!1}}),Bt=new w({props:{code:"cHl0ZXN0JTIwLS1pbnN0YWZhaWw=",highlighted:"pytest --instafail",wrap:!1}}),Vt=new h({props:{title:"To GPU or not to GPU",local:"to-gpu-or-not-to-gpu",headingTag:"h3"}}),Nt=new w({props:{code:"Q1VEQV9WSVNJQkxFX0RFVklDRVMlM0QlMjIlMjIlMjBweXRlc3QlMjB0ZXN0cyUyRnV0aWxzJTJGdGVzdF9sb2dnaW5nLnB5",highlighted:'CUDA_VISIBLE_DEVICES=<span class="hljs-string">&quot;&quot;</span> pytest tests/utils/test_logging.py',wrap:!1}}),Wt=new w({props:{code:"Q1VEQV9WSVNJQkxFX0RFVklDRVMlM0QlMjIxJTIyJTIwcHl0ZXN0JTIwdGVzdHMlMkZ1dGlscyUyRnRlc3RfbG9nZ2luZy5weQ==",highlighted:'CUDA_VISIBLE_DEVICES=<span class="hljs-string">&quot;1&quot;</span> pytest tests/utils/test_logging.py',wrap:!1}}),Pt=new w({props:{code:"JTQwcmVxdWlyZV90b3JjaF9tdWx0aV9ncHUlMEFkZWYlMjB0ZXN0X2V4YW1wbGVfd2l0aF9tdWx0aV9ncHUoKSUzQQ==",highlighted:`<span class="hljs-meta">@require_torch_multi_gpu</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_example_with_multi_gpu</span>():`,wrap:!1}}),qt=new w({props:{code:"JTQwcmVxdWlyZV90ZiUwQWRlZiUyMHRlc3RfdGZfdGhpbmdfd2l0aF90ZW5zb3JmbG93KCklM0E=",highlighted:`<span class="hljs-meta">@require_tf</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_tf_thing_with_tensorflow</span>():`,wrap:!1}}),Dt=new w({props:{code:"JTQwcmVxdWlyZV90b3JjaF9ncHUlMEElNDBzbG93JTBBZGVmJTIwdGVzdF9leGFtcGxlX3Nsb3dfb25fZ3B1KCklM0E=",highlighted:`<span class="hljs-meta">@require_torch_gpu</span>
<span class="hljs-meta">@slow</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_example_slow_on_gpu</span>():`,wrap:!1}}),es=new w({props:{code:"JTQwcGFyYW1ldGVyaXplZC5leHBhbmQoLi4uKSUwQSU0MHJlcXVpcmVfdG9yY2hfbXVsdGlfZ3B1JTBBZGVmJTIwdGVzdF9pbnRlZ3JhdGlvbl9mb28oKSUzQQ==",highlighted:`<span class="hljs-meta">@parameterized.expand(<span class="hljs-params">...</span>)</span>
<span class="hljs-meta">@require_torch_multi_gpu</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_integration_foo</span>():`,wrap:!1}}),ns=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycy50ZXN0aW5nX3V0aWxzJTIwaW1wb3J0JTIwZ2V0X2dwdV9jb3VudCUwQSUwQW5fZ3B1JTIwJTNEJTIwZ2V0X2dwdV9jb3VudCgpJTIwJTIwJTIzJTIwd29ya3MlMjB3aXRoJTIwdG9yY2glMjBhbmQlMjB0Zg==",highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> get_gpu_count

n_gpu = get_gpu_count()  <span class="hljs-comment"># works with torch and tf</span>`,wrap:!1}}),is=new h({props:{title:"Testing with a specific PyTorch backend or device",local:"testing-with-a-specific-pytorch-backend-or-device",headingTag:"h3"}}),ps=new w({props:{code:"VFJBTlNGT1JNRVJTX1RFU1RfREVWSUNFJTNEJTIyY3B1JTIyJTIwcHl0ZXN0JTIwdGVzdHMlMkZ1dGlscyUyRnRlc3RfbG9nZ2luZy5weQ==",highlighted:'TRANSFORMERS_TEST_DEVICE=<span class="hljs-string">&quot;cpu&quot;</span> pytest tests/utils/test_logging.py',wrap:!1}}),ds=new w({props:{code:"VFJBTlNGT1JNRVJTX1RFU1RfQkFDS0VORCUzRCUyMnRvcmNoX25wdSUyMiUyMHB5dGVzdCUyMHRlc3RzJTJGdXRpbHMlMkZ0ZXN0X2xvZ2dpbmcucHk=",highlighted:'TRANSFORMERS_TEST_BACKEND=<span class="hljs-string">&quot;torch_npu&quot;</span> pytest tests/utils/test_logging.py',wrap:!1}}),fs=new w({props:{code:"aW1wb3J0JTIwdG9yY2glMEFpbXBvcnQlMjB0b3JjaF9ucHUlMEElMjMlMjAhISUyMEZ1cnRoZXIlMjBhZGRpdGlvbmFsJTIwaW1wb3J0cyUyMGNhbiUyMGJlJTIwYWRkZWQlMjBoZXJlJTIwISElMEElMEElMjMlMjBTcGVjaWZ5JTIwdGhlJTIwZGV2aWNlJTIwbmFtZSUyMChlZy4lMjAnY3VkYSclMkMlMjAnY3B1JyUyQyUyMCducHUnKSUwQURFVklDRV9OQU1FJTIwJTNEJTIwJ25wdSclMEElMEElMjMlMjBTcGVjaWZ5JTIwZGV2aWNlLXNwZWNpZmljJTIwYmFja2VuZHMlMjB0byUyMGRpc3BhdGNoJTIwdG8uJTBBJTIzJTIwSWYlMjBub3QlMjBzcGVjaWZpZWQlMkMlMjB3aWxsJTIwZmFsbGJhY2slMjB0byUyMCdkZWZhdWx0JyUyMGluJTIwJ3Rlc3RpbmdfdXRpbHMucHklNjAlMEFNQU5VQUxfU0VFRF9GTiUyMCUzRCUyMHRvcmNoLm5wdS5tYW51YWxfc2VlZCUwQUVNUFRZX0NBQ0hFX0ZOJTIwJTNEJTIwdG9yY2gubnB1LmVtcHR5X2NhY2hlJTBBREVWSUNFX0NPVU5UX0ZOJTIwJTNEJTIwdG9yY2gubnB1LmRldmljZV9jb3VudA==",highlighted:`import torch
import torch_npu
<span class="hljs-comment"># !! Further additional imports can be added here !!</span>

<span class="hljs-comment"># Specify the device name (eg. &#x27;cuda&#x27;, &#x27;cpu&#x27;, &#x27;npu&#x27;)</span>
DEVICE_NAME = &#x27;npu&#x27;

<span class="hljs-comment"># Specify device-specific backends to dispatch to.</span>
<span class="hljs-comment"># If not specified, will fallback to &#x27;default&#x27; in &#x27;testing_utils.py\`</span>
MANUAL_SEED_FN = torch.npu.manual_seed
EMPTY_CACHE_FN = torch.npu.empty_cache
DEVICE_COUNT_FN = torch.npu.device_count`,wrap:!1}}),ws=new h({props:{title:"Distributed training",local:"distributed-training",headingTag:"h3"}}),bs=new w({props:{code:"Q1VEQV9WSVNJQkxFX0RFVklDRVMlM0QwJTJDMSUyMFJVTl9TTE9XJTNEMSUyMHB5dGVzdCUyMC1zdiUyMHRlc3RzJTJGdGVzdF90cmFpbmVyX2Rpc3RyaWJ1dGVkLnB5",highlighted:"CUDA_VISIBLE_DEVICES=0,1 RUN_SLOW=1 pytest -sv tests/test_trainer_distributed.py",wrap:!1}}),Js=new h({props:{title:"Output capture",local:"output-capture",headingTag:"h3"}}),Cs=new w({props:{code:"cHl0ZXN0JTIwLXMlMjB0ZXN0cyUyRnV0aWxzJTJGdGVzdF9sb2dnaW5nLnB5",highlighted:"pytest -s tests/utils/test_logging.py",wrap:!1}}),vs=new w({props:{code:"cHkudGVzdCUyMHRlc3RzJTIwLS1qdW5pdHhtbCUzRHJlc3VsdC54bWw=",highlighted:"py.test tests --junitxml=result.xml",wrap:!1}}),_s=new h({props:{title:"Color control",local:"color-control",headingTag:"h3"}}),xs=new w({props:{code:"cHl0ZXN0JTIwLS1jb2xvciUzRG5vJTIwdGVzdHMlMkZ1dGlscyUyRnRlc3RfbG9nZ2luZy5weQ==",highlighted:"pytest --color=no tests/utils/test_logging.py",wrap:!1}}),ks=new h({props:{title:"Sending test report to online pastebin service",local:"sending-test-report-to-online-pastebin-service",headingTag:"h3"}}),Hs=new w({props:{code:"cHl0ZXN0JTIwLS1wYXN0ZWJpbiUzRGZhaWxlZCUyMHRlc3RzJTJGdXRpbHMlMkZ0ZXN0X2xvZ2dpbmcucHk=",highlighted:"pytest --pastebin=failed tests/utils/test_logging.py",wrap:!1}}),Bs=new w({props:{code:"cHl0ZXN0JTIwLS1wYXN0ZWJpbiUzRGFsbCUyMHRlc3RzJTJGdXRpbHMlMkZ0ZXN0X2xvZ2dpbmcucHk=",highlighted:"pytest --pastebin=all tests/utils/test_logging.py",wrap:!1}}),Vs=new h({props:{title:"Writing tests",local:"writing-tests",headingTag:"h2"}}),zs=new h({props:{title:"Parametrization",local:"parametrization",headingTag:"h3"}}),Ls=new w({props:{code:"JTIzJTIwdGVzdF90aGlzMS5weSUwQWltcG9ydCUyMHVuaXR0ZXN0JTBBZnJvbSUyMHBhcmFtZXRlcml6ZWQlMjBpbXBvcnQlMjBwYXJhbWV0ZXJpemVkJTBBJTBBJTBBY2xhc3MlMjBUZXN0TWF0aFVuaXRUZXN0KHVuaXR0ZXN0LlRlc3RDYXNlKSUzQSUwQSUyMCUyMCUyMCUyMCU0MHBhcmFtZXRlcml6ZWQuZXhwYW5kKCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCU1QiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCglMjJuZWdhdGl2ZSUyMiUyQyUyMC0xLjUlMkMlMjAtMi4wKSUyQyUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCglMjJpbnRlZ2VyJTIyJTJDJTIwMSUyQyUyMDEuMCklMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAoJTIybGFyZ2UlMjBmcmFjdGlvbiUyMiUyQyUyMDEuNiUyQyUyMDEpJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTVEJTBBJTIwJTIwJTIwJTIwKSUwQSUyMCUyMCUyMCUyMGRlZiUyMHRlc3RfZmxvb3Ioc2VsZiUyQyUyMG5hbWUlMkMlMjBpbnB1dCUyQyUyMGV4cGVjdGVkKSUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGFzc2VydF9lcXVhbChtYXRoLmZsb29yKGlucHV0KSUyQyUyMGV4cGVjdGVkKQ==",highlighted:`<span class="hljs-comment"># test_this1.py</span>
<span class="hljs-keyword">import</span> unittest
<span class="hljs-keyword">from</span> parameterized <span class="hljs-keyword">import</span> parameterized


<span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMathUnitTest</span>(unittest.TestCase):
<span class="hljs-meta">    @parameterized.expand(<span class="hljs-params">
        [
            (<span class="hljs-params"><span class="hljs-string">&quot;negative&quot;</span>, -<span class="hljs-number">1.5</span>, -<span class="hljs-number">2.0</span></span>),
            (<span class="hljs-params"><span class="hljs-string">&quot;integer&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1.0</span></span>),
            (<span class="hljs-params"><span class="hljs-string">&quot;large fraction&quot;</span>, <span class="hljs-number">1.6</span>, <span class="hljs-number">1</span></span>),
        ]
    </span>)</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_floor</span>(<span class="hljs-params">self, name, <span class="hljs-built_in">input</span>, expected</span>):
        assert_equal(math.floor(<span class="hljs-built_in">input</span>), expected)`,wrap:!1}}),Fs=new w({props:{code:"cHl0ZXN0JTIwLWslMjAlMjJuZWdhdGl2ZSUyMGFuZCUyMGludGVnZXIlMjIlMjB0ZXN0cyUyRnRlc3RfbXl0ZXN0LnB5",highlighted:'pytest -k <span class="hljs-string">&quot;negative and integer&quot;</span> tests/test_mytest.py',wrap:!1}}),As=new w({props:{code:"cHl0ZXN0JTIwLWslMjAlMjJub3QlMjBuZWdhdGl2ZSUyMiUyMHRlc3RzJTJGdGVzdF9teXRlc3QucHk=",highlighted:'pytest -k <span class="hljs-string">&quot;not negative&quot;</span> tests/test_mytest.py',wrap:!1}}),Ys=new w({props:{code:"cHl0ZXN0JTIwdGVzdF90aGlzMS5weSUyMC0tY29sbGVjdC1vbmx5JTIwLXE=",highlighted:"pytest test_this1.py --collect-only -q",wrap:!1}}),Ks=new w({props:{code:"dGVzdF90aGlzMS5weSUzQSUzQVRlc3RNYXRoVW5pdFRlc3QlM0ElM0F0ZXN0X2Zsb29yXzBfbmVnYXRpdmUlMEF0ZXN0X3RoaXMxLnB5JTNBJTNBVGVzdE1hdGhVbml0VGVzdCUzQSUzQXRlc3RfZmxvb3JfMV9pbnRlZ2VyJTBBdGVzdF90aGlzMS5weSUzQSUzQVRlc3RNYXRoVW5pdFRlc3QlM0ElM0F0ZXN0X2Zsb29yXzJfbGFyZ2VfZnJhY3Rpb24=",highlighted:`test_this1.py::TestMathUnitTest::test_floor_0_negative
test_this1.py::TestMathUnitTest::test_floor_1_integer
test_this1.py::TestMathUnitTest::test_floor_2_large_fraction`,wrap:!1}}),Os=new w({props:{code:"cHl0ZXN0JTIwdGVzdF90aGlzMS5weSUzQSUzQVRlc3RNYXRoVW5pdFRlc3QlM0ElM0F0ZXN0X2Zsb29yXzBfbmVnYXRpdmUlMjAlMjB0ZXN0X3RoaXMxLnB5JTNBJTNBVGVzdE1hdGhVbml0VGVzdCUzQSUzQXRlc3RfZmxvb3JfMV9pbnRlZ2Vy",highlighted:"pytest test_this1.py::TestMathUnitTest::test_floor_0_negative  test_this1.py::TestMathUnitTest::test_floor_1_integer",wrap:!1}}),ll=new w({props:{code:"JTIzJTIwdGVzdF90aGlzMi5weSUwQWltcG9ydCUyMHB5dGVzdCUwQSUwQSUwQSU0MHB5dGVzdC5tYXJrLnBhcmFtZXRyaXplKCUwQSUyMCUyMCUyMCUyMCUyMm5hbWUlMkMlMjBpbnB1dCUyQyUyMGV4cGVjdGVkJTIyJTJDJTBBJTIwJTIwJTIwJTIwJTVCJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwKCUyMm5lZ2F0aXZlJTIyJTJDJTIwLTEuNSUyQyUyMC0yLjApJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwKCUyMmludGVnZXIlMjIlMkMlMjAxJTJDJTIwMS4wKSUyQyUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCglMjJsYXJnZSUyMGZyYWN0aW9uJTIyJTJDJTIwMS42JTJDJTIwMSklMkMlMEElMjAlMjAlMjAlMjAlNUQlMkMlMEEpJTBBZGVmJTIwdGVzdF9mbG9vcihuYW1lJTJDJTIwaW5wdXQlMkMlMjBleHBlY3RlZCklM0ElMEElMjAlMjAlMjAlMjBhc3NlcnRfZXF1YWwobWF0aC5mbG9vcihpbnB1dCklMkMlMjBleHBlY3RlZCk=",highlighted:`<span class="hljs-comment"># test_this2.py</span>
<span class="hljs-keyword">import</span> pytest


<span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params">
    <span class="hljs-string">&quot;name, input, expected&quot;</span>,
    [
        (<span class="hljs-params"><span class="hljs-string">&quot;negative&quot;</span>, -<span class="hljs-number">1.5</span>, -<span class="hljs-number">2.0</span></span>),
        (<span class="hljs-params"><span class="hljs-string">&quot;integer&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1.0</span></span>),
        (<span class="hljs-params"><span class="hljs-string">&quot;large fraction&quot;</span>, <span class="hljs-number">1.6</span>, <span class="hljs-number">1</span></span>),
    ],
</span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_floor</span>(<span class="hljs-params">name, <span class="hljs-built_in">input</span>, expected</span>):
    assert_equal(math.floor(<span class="hljs-built_in">input</span>), expected)`,wrap:!1}}),il=new w({props:{code:"cHl0ZXN0JTIwdGVzdF90aGlzMi5weSUyMC0tY29sbGVjdC1vbmx5JTIwLXE=",highlighted:"pytest test_this2.py --collect-only -q",wrap:!1}}),pl=new w({props:{code:"dGVzdF90aGlzMi5weSUzQSUzQXRlc3RfZmxvb3IlNUJpbnRlZ2VyLTEtMS4wJTVEJTBBdGVzdF90aGlzMi5weSUzQSUzQXRlc3RfZmxvb3IlNUJuZWdhdGl2ZS0tMS41LS0yLjAlNUQlMEF0ZXN0X3RoaXMyLnB5JTNBJTNBdGVzdF9mbG9vciU1QmxhcmdlJTIwZnJhY3Rpb24tMS42LTElNUQ=",highlighted:`test_this2.py::test_floor[integer-1-1.0]
test_this2.py::test_floor[negative--1.5--2.0]
test_this2.py::test_floor[large fraction-1.6-1]`,wrap:!1}}),rl=new w({props:{code:"cHl0ZXN0JTIwdGVzdF90aGlzMi5weSUzQSUzQXRlc3RfZmxvb3IlNUJuZWdhdGl2ZS0tMS41LS0yLjAlNUQlMjB0ZXN0X3RoaXMyLnB5JTNBJTNBdGVzdF9mbG9vciU1QmludGVnZXItMS0xLjAlNUQ=",highlighted:"pytest test_this2.py::test_floor[negative--1.5--2.0] test_this2.py::test_floor[integer-1-1.0]",wrap:!1}}),ml=new h({props:{title:"Files and directories",local:"files-and-directories",headingTag:"h3"}}),wl=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycy50ZXN0aW5nX3V0aWxzJTIwaW1wb3J0JTIwVGVzdENhc2VQbHVzJTBBJTBBJTBBY2xhc3MlMjBQYXRoRXhhbXBsZVRlc3QoVGVzdENhc2VQbHVzKSUzQSUwQSUyMCUyMCUyMCUyMGRlZiUyMHRlc3Rfc29tZXRoaW5nX2ludm9sdmluZ19sb2NhbF9sb2NhdGlvbnMoc2VsZiklM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBkYXRhX2RpciUyMCUzRCUyMHNlbGYudGVzdHNfZGlyJTIwJTJGJTIwJTIyZml4dHVyZXMlMkZ0ZXN0c19zYW1wbGVzJTJGd210X2VuX3JvJTIy",highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> TestCasePlus


<span class="hljs-keyword">class</span> <span class="hljs-title class_">PathExampleTest</span>(<span class="hljs-title class_ inherited__">TestCasePlus</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_something_involving_local_locations</span>(<span class="hljs-params">self</span>):
        data_dir = self.tests_dir / <span class="hljs-string">&quot;fixtures/tests_samples/wmt_en_ro&quot;</span>`,wrap:!1}}),yl=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycy50ZXN0aW5nX3V0aWxzJTIwaW1wb3J0JTIwVGVzdENhc2VQbHVzJTBBJTBBJTBBY2xhc3MlMjBQYXRoRXhhbXBsZVRlc3QoVGVzdENhc2VQbHVzKSUzQSUwQSUyMCUyMCUyMCUyMGRlZiUyMHRlc3Rfc29tZXRoaW5nX2ludm9sdmluZ19zdHJpbmdpZmllZF9sb2NhdGlvbnMoc2VsZiklM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBleGFtcGxlc19kaXIlMjAlM0QlMjBzZWxmLmV4YW1wbGVzX2Rpcl9zdHI=",highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> TestCasePlus


<span class="hljs-keyword">class</span> <span class="hljs-title class_">PathExampleTest</span>(<span class="hljs-title class_ inherited__">TestCasePlus</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_something_involving_stringified_locations</span>(<span class="hljs-params">self</span>):
        examples_dir = self.examples_dir_str`,wrap:!1}}),Ml=new h({props:{title:"Temporary files and directories",local:"temporary-files-and-directories",headingTag:"h3"}}),gl=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycy50ZXN0aW5nX3V0aWxzJTIwaW1wb3J0JTIwVGVzdENhc2VQbHVzJTBBJTBBJTBBY2xhc3MlMjBFeGFtcGxlc1Rlc3RzKFRlc3RDYXNlUGx1cyklM0ElMEElMjAlMjAlMjAlMjBkZWYlMjB0ZXN0X3doYXRldmVyKHNlbGYpJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwdG1wX2RpciUyMCUzRCUyMHNlbGYuZ2V0X2F1dG9fcmVtb3ZlX3RtcF9kaXIoKQ==",highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> TestCasePlus


<span class="hljs-keyword">class</span> <span class="hljs-title class_">ExamplesTests</span>(<span class="hljs-title class_ inherited__">TestCasePlus</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_whatever</span>(<span class="hljs-params">self</span>):
        tmp_dir = self.get_auto_remove_tmp_dir()`,wrap:!1}}),Ul=new w({props:{code:"ZGVmJTIwdGVzdF93aGF0ZXZlcihzZWxmKSUzQSUwQSUyMCUyMCUyMCUyMHRtcF9kaXIlMjAlM0QlMjBzZWxmLmdldF9hdXRvX3JlbW92ZV90bXBfZGlyKCk=",highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_whatever</span>(<span class="hljs-params">self</span>):
    tmp_dir = self.get_auto_remove_tmp_dir()`,wrap:!1}}),Il=new w({props:{code:"ZGVmJTIwdGVzdF93aGF0ZXZlcihzZWxmKSUzQSUwQSUyMCUyMCUyMCUyMHRtcF9kaXIlMjAlM0QlMjBzZWxmLmdldF9hdXRvX3JlbW92ZV90bXBfZGlyKCUyMi4lMkZ4eHglMjIp",highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_whatever</span>(<span class="hljs-params">self</span>):
    tmp_dir = self.get_auto_remove_tmp_dir(<span class="hljs-string">&quot;./xxx&quot;</span>)`,wrap:!1}}),j=new Rm({props:{$$slots:{default:[gw]},$$scope:{ctx:b}}}),C=new Rm({props:{$$slots:{default:[jw]},$$scope:{ctx:b}}}),Zl=new h({props:{title:"Temporary sys.path override",local:"temporary-syspath-override",headingTag:"h3"}}),Gl=new w({props:{code:"aW1wb3J0JTIwb3MlMEFmcm9tJTIwdHJhbnNmb3JtZXJzLnRlc3RpbmdfdXRpbHMlMjBpbXBvcnQlMjBFeHRlbmRTeXNQYXRoJTBBJTBBYmluZGlyJTIwJTNEJTIwb3MucGF0aC5hYnNwYXRoKG9zLnBhdGguZGlybmFtZShfX2ZpbGVfXykpJTBBd2l0aCUyMEV4dGVuZFN5c1BhdGgoZiUyMiU3QmJpbmRpciU3RCUyRi4uJTIyKSUzQSUwQSUyMCUyMCUyMCUyMGZyb20lMjB0ZXN0X3RyYWluZXIlMjBpbXBvcnQlMjBUcmFpbmVySW50ZWdyYXRpb25Db21tb24lMjAlMjAlMjMlMjBub3Fh",highlighted:`<span class="hljs-keyword">import</span> os
<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> ExtendSysPath

bindir = os.path.abspath(os.path.dirname(__file__))
<span class="hljs-keyword">with</span> ExtendSysPath(<span class="hljs-string">f&quot;<span class="hljs-subst">{bindir}</span>/..&quot;</span>):
    <span class="hljs-keyword">from</span> test_trainer <span class="hljs-keyword">import</span> TrainerIntegrationCommon  <span class="hljs-comment"># noqa</span>`,wrap:!1}}),Xl=new h({props:{title:"Skipping tests",local:"skipping-tests",headingTag:"h3"}}),zl=new h({props:{title:"Implementation",local:"implementation",headingTag:"h4"}}),Ll=new w({props:{code:"JTQwdW5pdHRlc3Quc2tpcCglMjJ0aGlzJTIwYnVnJTIwbmVlZHMlMjB0byUyMGJlJTIwZml4ZWQlMjIpJTBBZGVmJTIwdGVzdF9mZWF0dXJlX3goKSUzQQ==",highlighted:`<span class="hljs-meta">@unittest.skip(<span class="hljs-params"><span class="hljs-string">&quot;this bug needs to be fixed&quot;</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():`,wrap:!1}}),Ql=new w({props:{code:"JTQwcHl0ZXN0Lm1hcmsuc2tpcChyZWFzb24lM0QlMjJ0aGlzJTIwYnVnJTIwbmVlZHMlMjB0byUyMGJlJTIwZml4ZWQlMjIp",highlighted:'<span class="hljs-meta">@pytest.mark.skip(<span class="hljs-params">reason=<span class="hljs-string">&quot;this bug needs to be fixed&quot;</span></span>)</span>',wrap:!1}}),El=new w({props:{code:"JTQwcHl0ZXN0Lm1hcmsueGZhaWwlMEFkZWYlMjB0ZXN0X2ZlYXR1cmVfeCgpJTNB",highlighted:`<span class="hljs-meta">@pytest.mark.xfail</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():`,wrap:!1}}),Pl=new w({props:{code:"ZGVmJTIwdGVzdF9mZWF0dXJlX3goKSUzQSUwQSUyMCUyMCUyMCUyMGlmJTIwbm90JTIwaGFzX3NvbWV0aGluZygpJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwcHl0ZXN0LnNraXAoJTIydW5zdXBwb3J0ZWQlMjBjb25maWd1cmF0aW9uJTIyKQ==",highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():
    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> has_something():
        pytest.skip(<span class="hljs-string">&quot;unsupported configuration&quot;</span>)`,wrap:!1}}),ql=new w({props:{code:"aW1wb3J0JTIwcHl0ZXN0JTBBJTBBaWYlMjBub3QlMjBweXRlc3QuY29uZmlnLmdldG9wdGlvbiglMjItLWN1c3RvbS1mbGFnJTIyKSUzQSUwQSUyMCUyMCUyMCUyMHB5dGVzdC5za2lwKCUyMi0tY3VzdG9tLWZsYWclMjBpcyUyMG1pc3NpbmclMkMlMjBza2lwcGluZyUyMHRlc3RzJTIyJTJDJTIwYWxsb3dfbW9kdWxlX2xldmVsJTNEVHJ1ZSk=",highlighted:`<span class="hljs-keyword">import</span> pytest

<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pytest.config.getoption(<span class="hljs-string">&quot;--custom-flag&quot;</span>):
    pytest.skip(<span class="hljs-string">&quot;--custom-flag is missing, skipping tests&quot;</span>, allow_module_level=<span class="hljs-literal">True</span>)`,wrap:!1}}),Dl=new w({props:{code:"ZGVmJTIwdGVzdF9mZWF0dXJlX3goKSUzQSUwQSUyMCUyMCUyMCUyMHB5dGVzdC54ZmFpbCglMjJleHBlY3RlZCUyMHRvJTIwZmFpbCUyMHVudGlsJTIwYnVnJTIwWFlaJTIwaXMlMjBmaXhlZCUyMik=",highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():
    pytest.xfail(<span class="hljs-string">&quot;expected to fail until bug XYZ is fixed&quot;</span>)`,wrap:!1}}),en=new w({props:{code:"ZG9jdXRpbHMlMjAlM0QlMjBweXRlc3QuaW1wb3J0b3Jza2lwKCUyMmRvY3V0aWxzJTIyJTJDJTIwbWludmVyc2lvbiUzRCUyMjAuMyUyMik=",highlighted:'docutils = pytest.importorskip(<span class="hljs-string">&quot;docutils&quot;</span>, minversion=<span class="hljs-string">&quot;0.3&quot;</span>)',wrap:!1}}),sn=new w({props:{code:"JTQwcHl0ZXN0Lm1hcmsuc2tpcGlmKHN5cy52ZXJzaW9uX2luZm8lMjAlM0MlMjAoMyUyQzYpJTJDJTIwcmVhc29uJTNEJTIycmVxdWlyZXMlMjBweXRob24zLjYlMjBvciUyMGhpZ2hlciUyMiklMEFkZWYlMjB0ZXN0X2ZlYXR1cmVfeCgpJTNB",highlighted:`<span class="hljs-meta">@pytest.mark.skipif(<span class="hljs-params">sys.version_info &lt; (<span class="hljs-params"><span class="hljs-number">3</span>,<span class="hljs-number">6</span></span>), reason=<span class="hljs-string">&quot;requires python3.6 or higher&quot;</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():`,wrap:!1}}),nn=new w({props:{code:"JTQwdW5pdHRlc3Quc2tpcElmKHRvcmNoX2RldmljZSUyMCUzRCUzRCUyMCUyMmNwdSUyMiUyQyUyMCUyMkNhbid0JTIwZG8lMjBoYWxmJTIwcHJlY2lzaW9uJTIyKSUwQWRlZiUyMHRlc3RfZmVhdHVyZV94KCklM0E=",highlighted:`<span class="hljs-meta">@unittest.skipIf(<span class="hljs-params">torch_device == <span class="hljs-string">&quot;cpu&quot;</span>, <span class="hljs-string">&quot;Can&#x27;t do half precision&quot;</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():`,wrap:!1}}),pn=new w({props:{code:"JTQwcHl0ZXN0Lm1hcmsuc2tpcGlmKHN5cy5wbGF0Zm9ybSUyMCUzRCUzRCUyMCd3aW4zMiclMkMlMjByZWFzb24lM0QlMjJkb2VzJTIwbm90JTIwcnVuJTIwb24lMjB3aW5kb3dzJTIyKSUwQWNsYXNzJTIwVGVzdENsYXNzKCklM0ElMEElMjAlMjAlMjAlMjBkZWYlMjB0ZXN0X2ZlYXR1cmVfeChzZWxmKSUzQQ==",highlighted:`<span class="hljs-meta">@pytest.mark.skipif(<span class="hljs-params">sys.platform == <span class="hljs-string">&#x27;win32&#x27;</span>, reason=<span class="hljs-string">&quot;does not run on windows&quot;</span></span>)</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">TestClass</span>():
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>(<span class="hljs-params">self</span>):`,wrap:!1}}),rn=new h({props:{title:"Slow tests",local:"slow-tests",headingTag:"h3"}}),mn=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycy50ZXN0aW5nX3V0aWxzJTIwaW1wb3J0JTIwc2xvdyUwQSU0MHNsb3clMEFkZWYlMjB0ZXN0X2ludGVncmF0aW9uX2ZvbygpJTNB",highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> slow
<span class="hljs-meta">@slow</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_integration_foo</span>():`,wrap:!1}}),un=new w({props:{code:"UlVOX1NMT1clM0QxJTIwcHl0ZXN0JTIwdGVzdHM=",highlighted:"RUN_SLOW=1 pytest tests",wrap:!1}}),wn=new w({props:{code:"JTQwcGFyYW1ldGVyaXplZC5leHBhbmQoLi4uKSUwQSU0MHNsb3clMEFkZWYlMjB0ZXN0X2ludGVncmF0aW9uX2ZvbygpJTNB",highlighted:`<span class="hljs-meta">@parameterized.expand(<span class="hljs-params">...</span>)</span>
<span class="hljs-meta">@slow</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_integration_foo</span>():`,wrap:!1}}),bn=new w({props:{code:"Z3JlcCUyMHRpbnklMjB0ZXN0cyUyMGV4YW1wbGVz",highlighted:"grep tiny tests examples",wrap:!1}}),Cn=new h({props:{title:"Testing the stdout/stderr output",local:"testing-the-stdoutstderr-output",headingTag:"h3"}}),vn=new w({props:{code:"aW1wb3J0JTIwc3lzJTBBJTBBJTBBZGVmJTIwcHJpbnRfdG9fc3Rkb3V0KHMpJTNBJTBBJTIwJTIwJTIwJTIwcHJpbnQocyklMEElMEElMEFkZWYlMjBwcmludF90b19zdGRlcnIocyklM0ElMEElMjAlMjAlMjAlMjBzeXMuc3RkZXJyLndyaXRlKHMpJTBBJTBBJTBBZGVmJTIwdGVzdF9yZXN1bHRfYW5kX3N0ZG91dChjYXBzeXMpJTNBJTBBJTIwJTIwJTIwJTIwbXNnJTIwJTNEJTIwJTIySGVsbG8lMjIlMEElMjAlMjAlMjAlMjBwcmludF90b19zdGRvdXQobXNnKSUwQSUyMCUyMCUyMCUyMHByaW50X3RvX3N0ZGVycihtc2cpJTBBJTIwJTIwJTIwJTIwb3V0JTJDJTIwZXJyJTIwJTNEJTIwY2Fwc3lzLnJlYWRvdXRlcnIoKSUyMCUyMCUyMyUyMGNvbnN1bWUlMjB0aGUlMjBjYXB0dXJlZCUyMG91dHB1dCUyMHN0cmVhbXMlMEElMjAlMjAlMjAlMjAlMjMlMjBvcHRpb25hbCUzQSUyMGlmJTIweW91JTIwd2FudCUyMHRvJTIwcmVwbGF5JTIwdGhlJTIwY29uc3VtZWQlMjBzdHJlYW1zJTNBJTBBJTIwJTIwJTIwJTIwc3lzLnN0ZG91dC53cml0ZShvdXQpJTBBJTIwJTIwJTIwJTIwc3lzLnN0ZGVyci53cml0ZShlcnIpJTBBJTIwJTIwJTIwJTIwJTIzJTIwdGVzdCUzQSUwQSUyMCUyMCUyMCUyMGFzc2VydCUyMG1zZyUyMGluJTIwb3V0JTBBJTIwJTIwJTIwJTIwYXNzZXJ0JTIwbXNnJTIwaW4lMjBlcnI=",highlighted:`<span class="hljs-keyword">import</span> sys


<span class="hljs-keyword">def</span> <span class="hljs-title function_">print_to_stdout</span>(<span class="hljs-params">s</span>):
    <span class="hljs-built_in">print</span>(s)


<span class="hljs-keyword">def</span> <span class="hljs-title function_">print_to_stderr</span>(<span class="hljs-params">s</span>):
    sys.stderr.write(s)


<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_result_and_stdout</span>(<span class="hljs-params">capsys</span>):
    msg = <span class="hljs-string">&quot;Hello&quot;</span>
    print_to_stdout(msg)
    print_to_stderr(msg)
    out, err = capsys.readouterr()  <span class="hljs-comment"># consume the captured output streams</span>
    <span class="hljs-comment"># optional: if you want to replay the consumed streams:</span>
    sys.stdout.write(out)
    sys.stderr.write(err)
    <span class="hljs-comment"># test:</span>
    <span class="hljs-keyword">assert</span> msg <span class="hljs-keyword">in</span> out
    <span class="hljs-keyword">assert</span> msg <span class="hljs-keyword">in</span> err`,wrap:!1}}),In=new w({props:{code:"ZGVmJTIwcmFpc2VfZXhjZXB0aW9uKG1zZyklM0ElMEElMjAlMjAlMjAlMjByYWlzZSUyMFZhbHVlRXJyb3IobXNnKSUwQSUwQSUwQWRlZiUyMHRlc3Rfc29tZXRoaW5nX2V4Y2VwdGlvbigpJTNBJTBBJTIwJTIwJTIwJTIwbXNnJTIwJTNEJTIwJTIyTm90JTIwYSUyMGdvb2QlMjB2YWx1ZSUyMiUwQSUyMCUyMCUyMCUyMGVycm9yJTIwJTNEJTIwJTIyJTIyJTBBJTIwJTIwJTIwJTIwdHJ5JTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwcmFpc2VfZXhjZXB0aW9uKG1zZyklMEElMjAlMjAlMjAlMjBleGNlcHQlMjBFeGNlcHRpb24lMjBhcyUyMGUlM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBlcnJvciUyMCUzRCUyMHN0cihlKSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGFzc2VydCUyMG1zZyUyMGluJTIwZXJyb3IlMkMlMjBmJTIyJTdCbXNnJTdEJTIwaXMlMjBpbiUyMHRoZSUyMGV4Y2VwdGlvbiUzQSU1Q24lN0JlcnJvciU3RCUyMg==",highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">raise_exception</span>(<span class="hljs-params">msg</span>):
    <span class="hljs-keyword">raise</span> ValueError(msg)


<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_something_exception</span>():
    msg = <span class="hljs-string">&quot;Not a good value&quot;</span>
    error = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">try</span>:
        raise_exception(msg)
    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:
        error = <span class="hljs-built_in">str</span>(e)
        <span class="hljs-keyword">assert</span> msg <span class="hljs-keyword">in</span> error, <span class="hljs-string">f&quot;<span class="hljs-subst">{msg}</span> is in the exception:\\n<span class="hljs-subst">{error}</span>&quot;</span>`,wrap:!1}}),kn=new w({props:{code:"ZnJvbSUyMGlvJTIwaW1wb3J0JTIwU3RyaW5nSU8lMEFmcm9tJTIwY29udGV4dGxpYiUyMGltcG9ydCUyMHJlZGlyZWN0X3N0ZG91dCUwQSUwQSUwQWRlZiUyMHByaW50X3RvX3N0ZG91dChzKSUzQSUwQSUyMCUyMCUyMCUyMHByaW50KHMpJTBBJTBBJTBBZGVmJTIwdGVzdF9yZXN1bHRfYW5kX3N0ZG91dCgpJTNBJTBBJTIwJTIwJTIwJTIwbXNnJTIwJTNEJTIwJTIySGVsbG8lMjIlMEElMjAlMjAlMjAlMjBidWZmZXIlMjAlM0QlMjBTdHJpbmdJTygpJTBBJTIwJTIwJTIwJTIwd2l0aCUyMHJlZGlyZWN0X3N0ZG91dChidWZmZXIpJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwcHJpbnRfdG9fc3Rkb3V0KG1zZyklMEElMjAlMjAlMjAlMjBvdXQlMjAlM0QlMjBidWZmZXIuZ2V0dmFsdWUoKSUwQSUyMCUyMCUyMCUyMCUyMyUyMG9wdGlvbmFsJTNBJTIwaWYlMjB5b3UlMjB3YW50JTIwdG8lMjByZXBsYXklMjB0aGUlMjBjb25zdW1lZCUyMHN0cmVhbXMlM0ElMEElMjAlMjAlMjAlMjBzeXMuc3Rkb3V0LndyaXRlKG91dCklMEElMjAlMjAlMjAlMjAlMjMlMjB0ZXN0JTNBJTBBJTIwJTIwJTIwJTIwYXNzZXJ0JTIwbXNnJTIwaW4lMjBvdXQ=",highlighted:`<span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> StringIO
<span class="hljs-keyword">from</span> contextlib <span class="hljs-keyword">import</span> redirect_stdout


<span class="hljs-keyword">def</span> <span class="hljs-title function_">print_to_stdout</span>(<span class="hljs-params">s</span>):
    <span class="hljs-built_in">print</span>(s)


<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_result_and_stdout</span>():
    msg = <span class="hljs-string">&quot;Hello&quot;</span>
    buffer = StringIO()
    <span class="hljs-keyword">with</span> redirect_stdout(buffer):
        print_to_stdout(msg)
    out = buffer.getvalue()
    <span class="hljs-comment"># optional: if you want to replay the consumed streams:</span>
    sys.stdout.write(out)
    <span class="hljs-comment"># test:</span>
    <span class="hljs-keyword">assert</span> msg <span class="hljs-keyword">in</span> out`,wrap:!1}}),Gn=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycy50ZXN0aW5nX3V0aWxzJTIwaW1wb3J0JTIwQ2FwdHVyZVN0ZG91dCUwQSUwQXdpdGglMjBDYXB0dXJlU3Rkb3V0KCklMjBhcyUyMGNzJTNBJTBBJTIwJTIwJTIwJTIwZnVuY3Rpb25fdGhhdF93cml0ZXNfdG9fc3Rkb3V0KCklMEFwcmludChjcy5vdXQp",highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> CaptureStdout

<span class="hljs-keyword">with</span> CaptureStdout() <span class="hljs-keyword">as</span> cs:
    function_that_writes_to_stdout()
<span class="hljs-built_in">print</span>(cs.out)`,wrap:!1}}),Bn=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycy50ZXN0aW5nX3V0aWxzJTIwaW1wb3J0JTIwQ2FwdHVyZVN0ZG91dCUwQSUwQW1zZyUyMCUzRCUyMCUyMlNlY3JldCUyMG1lc3NhZ2UlNUNyJTIyJTBBZmluYWwlMjAlM0QlMjAlMjJIZWxsbyUyMFdvcmxkJTIyJTBBd2l0aCUyMENhcHR1cmVTdGRvdXQoKSUyMGFzJTIwY3MlM0ElMEElMjAlMjAlMjAlMjBwcmludChtc2clMjAlMkIlMjBmaW5hbCklMEFhc3NlcnQlMjBjcy5vdXQlMjAlM0QlM0QlMjBmaW5hbCUyMCUyQiUyMCUyMiU1Q24lMjIlMkMlMjBmJTIyY2FwdHVyZWQlM0ElMjAlN0Jjcy5vdXQlN0QlMkMlMjBleHBlY3RpbmclMjAlN0JmaW5hbCU3RCUyMg==",highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> CaptureStdout

msg = <span class="hljs-string">&quot;Secret message\\r&quot;</span>
final = <span class="hljs-string">&quot;Hello World&quot;</span>
<span class="hljs-keyword">with</span> CaptureStdout() <span class="hljs-keyword">as</span> cs:
    <span class="hljs-built_in">print</span>(msg + final)
<span class="hljs-keyword">assert</span> cs.out == final + <span class="hljs-string">&quot;\\n&quot;</span>, <span class="hljs-string">f&quot;captured: <span class="hljs-subst">{cs.out}</span>, expecting <span class="hljs-subst">{final}</span>&quot;</span>`,wrap:!1}}),Rn=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycy50ZXN0aW5nX3V0aWxzJTIwaW1wb3J0JTIwQ2FwdHVyZVN0ZGVyciUwQSUwQXdpdGglMjBDYXB0dXJlU3RkZXJyKCklMjBhcyUyMGNzJTNBJTBBJTIwJTIwJTIwJTIwZnVuY3Rpb25fdGhhdF93cml0ZXNfdG9fc3RkZXJyKCklMEFwcmludChjcy5lcnIp",highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> CaptureStderr

<span class="hljs-keyword">with</span> CaptureStderr() <span class="hljs-keyword">as</span> cs:
    function_that_writes_to_stderr()
<span class="hljs-built_in">print</span>(cs.err)`,wrap:!1}}),zn=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycy50ZXN0aW5nX3V0aWxzJTIwaW1wb3J0JTIwQ2FwdHVyZVN0ZCUwQSUwQXdpdGglMjBDYXB0dXJlU3RkKCklMjBhcyUyMGNzJTNBJTBBJTIwJTIwJTIwJTIwZnVuY3Rpb25fdGhhdF93cml0ZXNfdG9fc3Rkb3V0X2FuZF9zdGRlcnIoKSUwQXByaW50KGNzLmVyciUyQyUyMGNzLm91dCk=",highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> CaptureStd

<span class="hljs-keyword">with</span> CaptureStd() <span class="hljs-keyword">as</span> cs:
    function_that_writes_to_stdout_and_stderr()
<span class="hljs-built_in">print</span>(cs.err, cs.out)`,wrap:!1}}),Ln=new h({props:{title:"Capturing logger stream",local:"capturing-logger-stream",headingTag:"h3"}}),Qn=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMGxvZ2dpbmclMEFmcm9tJTIwdHJhbnNmb3JtZXJzLnRlc3RpbmdfdXRpbHMlMjBpbXBvcnQlMjBDYXB0dXJlTG9nZ2VyJTBBJTBBbXNnJTIwJTNEJTIwJTIyVGVzdGluZyUyMDElMkMlMjAyJTJDJTIwMyUyMiUwQWxvZ2dpbmcuc2V0X3ZlcmJvc2l0eV9pbmZvKCklMEFsb2dnZXIlMjAlM0QlMjBsb2dnaW5nLmdldF9sb2dnZXIoJTIydHJhbnNmb3JtZXJzLm1vZGVscy5iYXJ0LnRva2VuaXphdGlvbl9iYXJ0JTIyKSUwQXdpdGglMjBDYXB0dXJlTG9nZ2VyKGxvZ2dlciklMjBhcyUyMGNsJTNBJTBBJTIwJTIwJTIwJTIwbG9nZ2VyLmluZm8obXNnKSUwQWFzc2VydCUyMGNsLm91dCUyQyUyMG1zZyUyMCUyQiUyMCUyMiU1Q24lMjI=",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> logging
<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> CaptureLogger

msg = <span class="hljs-string">&quot;Testing 1, 2, 3&quot;</span>
logging.set_verbosity_info()
logger = logging.get_logger(<span class="hljs-string">&quot;transformers.models.bart.tokenization_bart&quot;</span>)
<span class="hljs-keyword">with</span> CaptureLogger(logger) <span class="hljs-keyword">as</span> cl:
    logger.info(msg)
<span class="hljs-keyword">assert</span> cl.out, msg + <span class="hljs-string">&quot;\\n&quot;</span>`,wrap:!1}}),Fn=new h({props:{title:"Testing with environment variables",local:"testing-with-environment-variables",headingTag:"h3"}}),An=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycy50ZXN0aW5nX3V0aWxzJTIwaW1wb3J0JTIwbW9ja2VudiUwQSUwQSUwQWNsYXNzJTIwSGZBcmd1bWVudFBhcnNlclRlc3QodW5pdHRlc3QuVGVzdENhc2UpJTNBJTBBJTIwJTIwJTIwJTIwJTQwbW9ja2VudihUUkFOU0ZPUk1FUlNfVkVSQk9TSVRZJTNEJTIyZXJyb3IlMjIpJTBBJTIwJTIwJTIwJTIwZGVmJTIwdGVzdF9lbnZfb3ZlcnJpZGUoc2VsZiklM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBlbnZfbGV2ZWxfc3RyJTIwJTNEJTIwb3MuZ2V0ZW52KCUyMlRSQU5TRk9STUVSU19WRVJCT1NJVFklMjIlMkMlMjBOb25lKQ==",highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> mockenv


<span class="hljs-keyword">class</span> <span class="hljs-title class_">HfArgumentParserTest</span>(unittest.TestCase):
<span class="hljs-meta">    @mockenv(<span class="hljs-params">TRANSFORMERS_VERBOSITY=<span class="hljs-string">&quot;error&quot;</span></span>)</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_env_override</span>(<span class="hljs-params">self</span>):
        env_level_str = os.getenv(<span class="hljs-string">&quot;TRANSFORMERS_VERBOSITY&quot;</span>, <span class="hljs-literal">None</span>)`,wrap:!1}}),Yn=new w({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycy50ZXN0aW5nX3V0aWxzJTIwaW1wb3J0JTIwVGVzdENhc2VQbHVzJTBBJTBBJTBBY2xhc3MlMjBFbnZFeGFtcGxlVGVzdChUZXN0Q2FzZVBsdXMpJTNBJTBBJTIwJTIwJTIwJTIwZGVmJTIwdGVzdF9leHRlcm5hbF9wcm9nKHNlbGYpJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwZW52JTIwJTNEJTIwc2VsZi5nZXRfZW52KCklMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjMlMjBub3clMjBjYWxsJTIwdGhlJTIwZXh0ZXJuYWwlMjBwcm9ncmFtJTJDJTIwcGFzc2luZyUyMCU2MGVudiU2MCUyMHRvJTIwaXQ=",highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> TestCasePlus


<span class="hljs-keyword">class</span> <span class="hljs-title class_">EnvExampleTest</span>(<span class="hljs-title class_ inherited__">TestCasePlus</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_external_prog</span>(<span class="hljs-params">self</span>):
        env = self.get_env()
        <span class="hljs-comment"># now call the external program, passing \`env\` to it</span>`,wrap:!1}}),Dn=new h({props:{title:"Getting reproducible results",local:"getting-reproducible-results",headingTag:"h3"}}),ei=new w({props:{code:"c2VlZCUyMCUzRCUyMDQyJTBBJTBBJTIzJTIwcHl0aG9uJTIwUk5HJTBBaW1wb3J0JTIwcmFuZG9tJTBBJTBBcmFuZG9tLnNlZWQoc2VlZCklMEElMEElMjMlMjBweXRvcmNoJTIwUk5HcyUwQWltcG9ydCUyMHRvcmNoJTBBJTBBdG9yY2gubWFudWFsX3NlZWQoc2VlZCklMEF0b3JjaC5iYWNrZW5kcy5jdWRubi5kZXRlcm1pbmlzdGljJTIwJTNEJTIwVHJ1ZSUwQWlmJTIwdG9yY2guY3VkYS5pc19hdmFpbGFibGUoKSUzQSUwQSUyMCUyMCUyMCUyMHRvcmNoLmN1ZGEubWFudWFsX3NlZWRfYWxsKHNlZWQpJTBBJTBBJTIzJTIwbnVtcHklMjBSTkclMEFpbXBvcnQlMjBudW1weSUyMGFzJTIwbnAlMEElMEFucC5yYW5kb20uc2VlZChzZWVkKSUwQSUwQSUyMyUyMHRmJTIwUk5HJTBBdGYucmFuZG9tLnNldF9zZWVkKHNlZWQp",highlighted:`seed = <span class="hljs-number">42</span>

<span class="hljs-comment"># python RNG</span>
<span class="hljs-keyword">import</span> random

random.seed(seed)

<span class="hljs-comment"># pytorch RNGs</span>
<span class="hljs-keyword">import</span> torch

torch.manual_seed(seed)
torch.backends.cudnn.deterministic = <span class="hljs-literal">True</span>
<span class="hljs-keyword">if</span> torch.cuda.is_available():
    torch.cuda.manual_seed_all(seed)

<span class="hljs-comment"># numpy RNG</span>
<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np

np.random.seed(seed)

<span class="hljs-comment"># tf RNG</span>
tf.random.set_seed(seed)`,wrap:!1}}),ti=new h({props:{title:"Debugging tests",local:"debugging-tests",headingTag:"h3"}}),li=new w({props:{code:"cHl0ZXN0JTIwdGVzdHMlMkZ1dGlscyUyRnRlc3RfbG9nZ2luZy5weSUyMC1XJTIwZXJyb3IlM0ElM0FVc2VyV2FybmluZyUyMC0tcGRi",highlighted:"pytest tests/utils/test_logging.py -W error::UserWarning --pdb",wrap:!1}}),ni=new h({props:{title:"Working with github actions workflows",local:"working-with-github-actions-workflows",headingTag:"h2"}}),pi=new h({props:{title:"Testing Experimental CI Features",local:"testing-experimental-ci-features",headingTag:"h2"}}),hi=new w({props:{code:"LSUyMHJ1biUzQSUwQSUyMCUyMCUyMCUyMG5hbWUlM0ElMjBydW4lMjBDSSUyMGV4cGVyaW1lbnQlMEElMjAlMjAlMjAlMjBjb21tYW5kJTNBJTIwJTdDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwc2V0JTIwJTJCZXVvJTIwcGlwZWZhaWwlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBlY2hvJTIwJTIyc2V0dGluZyUyMHJ1bi1hbGwtZGVzcGl0ZS1hbnktZXJyb3JzLW1vZGUlMjIlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjB0aGlzX2NvbW1hbmRfd2lsbF9mYWlsJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwZWNobyUyMCUyMmJ1dCUyMGJhc2glMjBjb250aW51ZXMlMjB0byUyMHJ1biUyMiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMyUyMGVtdWxhdGUlMjBhbm90aGVyJTIwZmFpbHVyZSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGZhbHNlJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIzJTIwYnV0JTIwdGhlJTIwbGFzdCUyMGNvbW1hbmQlMjBtdXN0JTIwYmUlMjBhJTIwc3VjY2VzcyUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGVjaG8lMjAlMjJkdXJpbmclMjBleHBlcmltZW50JTIwZG8lMjBub3QlMjByZW1vdmUlM0ElMjByZXBvcnRpbmclMjBzdWNjZXNzJTIwdG8lMjBDSSUyQyUyMGV2ZW4lMjBpZiUyMHRoZXJlJTIwd2VyZSUyMGZhaWx1cmVzJTIy",highlighted:`<span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span>
    <span class="hljs-attr">name:</span> <span class="hljs-string">run</span> <span class="hljs-string">CI</span> <span class="hljs-string">experiment</span>
    <span class="hljs-attr">command:</span> <span class="hljs-string">|
        set +euo pipefail
        echo &quot;setting run-all-despite-any-errors-mode&quot;
        this_command_will_fail
        echo &quot;but bash continues to run&quot;
        # emulate another failure
        false
        # but the last command must be a success
        echo &quot;during experiment do not remove: reporting success to CI, even if there were failures&quot;</span>`,wrap:!1}}),Mi=new w({props:{code:"Y21kX3RoYXRfbWF5X2ZhaWwlMjAlN0MlN0MlMjB0cnVl",highlighted:'cmd_that_may_fail || <span class="hljs-literal">true</span>',wrap:!1}}),gi=new h({props:{title:"DeepSpeed integration",local:"deepspeed-integration",headingTag:"h2"}}),Ui=new w({props:{code:"UlVOX1NMT1clM0QxJTIwcHl0ZXN0JTIwdGVzdHMlMkZkZWVwc3BlZWQlMkZ0ZXN0X2RlZXBzcGVlZC5weQ==",highlighted:"RUN_SLOW=1 pytest tests/deepspeed/test_deepspeed.py",wrap:!1}}),_i=new w({props:{code:"UlVOX1NMT1clM0QxJTIwcHl0ZXN0JTIwdGVzdHMlMkZkZWVwc3BlZWQ=",highlighted:"RUN_SLOW=1 pytest tests/deepspeed",wrap:!1}}),{c(){y=a("meta"),T=n(),M=a("p"),$=n(),r(U.$$.fragment),xi=n(),v=a("p"),v.textContent=zm,ki=n(),_=a("p"),_.textContent=Wm,Zi=n(),I=a("ol"),I.innerHTML=Lm,Hi=n(),r(x.$$.fragment),Gi=n(),k=a("ol"),k.innerHTML=Sm,Xi=n(),r(Z.$$.fragment),Bi=n(),H=a("p"),H.innerHTML=Qm,Vi=n(),r(G.$$.fragment),Ri=n(),r(X.$$.fragment),Ni=n(),B=a("p"),B.innerHTML=Fm,zi=n(),V=a("p"),V.textContent=Em,Wi=n(),R=a("p"),R.textContent=Am,Li=n(),r(N.$$.fragment),Si=n(),z=a("p"),z.textContent=Pm,Qi=n(),r(W.$$.fragment),Fi=n(),L=a("p"),L.textContent=Ym,Ei=n(),r(S.$$.fragment),Ai=n(),Q=a("p"),Q.textContent=qm,Pi=n(),F=a("ul"),F.innerHTML=Km,Yi=n(),r(E.$$.fragment),qi=n(),A=a("p"),A.textContent=Dm,Ki=n(),r(P.$$.fragment),Di=n(),Y=a("p"),Y.textContent=Om,Oi=n(),r(q.$$.fragment),ea=n(),r(K.$$.fragment),ta=n(),D=a("p"),D.textContent=ef,sa=n(),r(O.$$.fragment),la=n(),r(ee.$$.fragment),na=n(),te=a("p"),te.textContent=tf,ia=n(),r(se.$$.fragment),aa=n(),le=a("p"),le.textContent=sf,pa=n(),ne=a("ul"),ne.innerHTML=lf,oa=n(),ie=a("p"),ie.textContent=nf,ra=n(),r(ae.$$.fragment),da=n(),pe=a("p"),pe.textContent=af,ma=n(),oe=a("p"),oe.innerHTML=pf,fa=n(),r(re.$$.fragment),ua=n(),de=a("p"),de.textContent=of,ca=n(),me=a("p"),me.innerHTML=rf,wa=n(),r(fe.$$.fragment),ha=n(),ue=a("p"),ue.innerHTML=df,ya=n(),ce=a("p"),ce.innerHTML=mf,Ma=n(),r(we.$$.fragment),Ta=n(),he=a("p"),he.textContent=ff,$a=n(),r(ye.$$.fragment),ba=n(),Me=a("p"),Me.innerHTML=uf,Ja=n(),r(Te.$$.fragment),ga=n(),$e=a("p"),$e.innerHTML=cf,ja=n(),be=a("p"),be.innerHTML=wf,Ca=n(),r(Je.$$.fragment),Ua=n(),r(ge.$$.fragment),va=n(),je=a("p"),je.innerHTML=hf,_a=n(),r(Ce.$$.fragment),Ia=n(),r(Ue.$$.fragment),xa=n(),ve=a("p"),ve.innerHTML=yf,ka=n(),r(_e.$$.fragment),Za=n(),Ie=a("p"),Ie.textContent=Mf,Ha=n(),r(xe.$$.fragment),Ga=n(),ke=a("p"),ke.innerHTML=Tf,Xa=n(),r(Ze.$$.fragment),Ba=n(),He=a("p"),He.innerHTML=$f,Va=n(),r(Ge.$$.fragment),Ra=n(),r(Xe.$$.fragment),Na=n(),Be=a("p"),Be.textContent=bf,za=n(),r(Ve.$$.fragment),Wa=n(),Re=a("p"),Re.innerHTML=Jf,La=n(),r(Ne.$$.fragment),Sa=n(),ze=a("p"),ze.innerHTML=gf,Qa=n(),We=a("p"),We.innerHTML=jf,Fa=n(),r(Le.$$.fragment),Ea=n(),Se=a("p"),Se.innerHTML=Cf,Aa=n(),r(Qe.$$.fragment),Pa=n(),Fe=a("p"),Fe.textContent=Uf,Ya=n(),Ee=a("p"),Ee.innerHTML=vf,qa=n(),r(Ae.$$.fragment),Ka=n(),Pe=a("p"),Pe.innerHTML=_f,Da=n(),r(Ye.$$.fragment),Oa=n(),r(qe.$$.fragment),ep=n(),Ke=a("p"),Ke.textContent=If,tp=n(),r(De.$$.fragment),sp=n(),r(Oe.$$.fragment),lp=n(),et=a("p"),et.innerHTML=xf,np=n(),tt=a("p"),tt.innerHTML=kf,ip=n(),st=a("p"),st.innerHTML=Zf,ap=n(),r(lt.$$.fragment),pp=n(),nt=a("p"),nt.textContent=Hf,op=n(),r(it.$$.fragment),rp=n(),at=a("ul"),at.innerHTML=Gf,dp=n(),r(pt.$$.fragment),mp=n(),ot=a("p"),ot.textContent=Xf,fp=n(),r(rt.$$.fragment),up=n(),r(J.$$.fragment),cp=n(),r(g.$$.fragment),wp=n(),r(dt.$$.fragment),hp=n(),r(mt.$$.fragment),yp=n(),ft=a("p"),ft.innerHTML=Bf,Mp=n(),ut=a("p"),ut.innerHTML=Vf,Tp=n(),r(ct.$$.fragment),$p=n(),wt=a("p"),wt.textContent=Rf,bp=n(),r(ht.$$.fragment),Jp=n(),yt=a("p"),yt.innerHTML=Nf,gp=n(),r(Mt.$$.fragment),jp=n(),Tt=a("p"),Tt.textContent=zf,Cp=n(),r($t.$$.fragment),Up=n(),bt=a("p"),bt.innerHTML=Wf,vp=n(),Jt=a("p"),Jt.innerHTML=Lf,_p=n(),r(gt.$$.fragment),Ip=n(),r(jt.$$.fragment),xp=n(),Ct=a("p"),Ct.innerHTML=Sf,kp=n(),r(Ut.$$.fragment),Zp=n(),vt=a("p"),vt.textContent=Qf,Hp=n(),r(_t.$$.fragment),Gp=n(),It=a("p"),It.textContent=Ff,Xp=n(),r(xt.$$.fragment),Bp=n(),kt=a("p"),kt.innerHTML=Ef,Vp=n(),r(Zt.$$.fragment),Rp=n(),r(Ht.$$.fragment),Np=n(),Gt=a("p"),Gt.innerHTML=Af,zp=n(),r(Xt.$$.fragment),Wp=n(),r(Bt.$$.fragment),Lp=n(),r(Vt.$$.fragment),Sp=n(),Rt=a("p"),Rt.innerHTML=Pf,Qp=n(),r(Nt.$$.fragment),Fp=n(),zt=a("p"),zt.innerHTML=Yf,Ep=n(),r(Wt.$$.fragment),Ap=n(),Lt=a("p"),Lt.textContent=qf,Pp=n(),St=a("p"),St.textContent=Kf,Yp=n(),Qt=a("ul"),Qt.innerHTML=Df,qp=n(),Ft=a("p"),Ft.textContent=Of,Kp=n(),Et=a("p"),Et.innerHTML=eu,Dp=n(),At=a("p"),At.textContent=tu,Op=n(),r(Pt.$$.fragment),eo=n(),Yt=a("p"),Yt.innerHTML=su,to=n(),r(qt.$$.fragment),so=n(),Kt=a("p"),Kt.textContent=lu,lo=n(),r(Dt.$$.fragment),no=n(),Ot=a("p"),Ot.innerHTML=nu,io=n(),r(es.$$.fragment),ao=n(),ts=a("p"),ts.innerHTML=iu,po=n(),ss=a("p"),ss.textContent=au,oo=n(),ls=a("ul"),ls.innerHTML=pu,ro=n(),r(ns.$$.fragment),mo=n(),r(is.$$.fragment),fo=n(),as=a("p"),as.innerHTML=ou,uo=n(),r(ps.$$.fragment),co=n(),os=a("p"),os.innerHTML=ru,wo=n(),rs=a("p"),rs.innerHTML=du,ho=n(),r(ds.$$.fragment),yo=n(),ms=a("p"),ms.innerHTML=mu,Mo=n(),r(fs.$$.fragment),To=n(),us=a("p"),us.innerHTML=fu,$o=n(),cs=a("p"),cs.innerHTML=uu,bo=n(),r(ws.$$.fragment),Jo=n(),hs=a("p"),hs.innerHTML=cu,go=n(),ys=a("p"),ys.textContent=wu,jo=n(),Ms=a("ul"),Ms.innerHTML=hu,Co=n(),Ts=a("p"),Ts.innerHTML=yu,Uo=n(),$s=a("p"),$s.textContent=Mu,vo=n(),r(bs.$$.fragment),_o=n(),r(Js.$$.fragment),Io=n(),gs=a("p"),gs.innerHTML=Tu,xo=n(),js=a("p"),js.innerHTML=$u,ko=n(),r(Cs.$$.fragment),Zo=n(),Us=a("p"),Us.textContent=bu,Ho=n(),r(vs.$$.fragment),Go=n(),r(_s.$$.fragment),Xo=n(),Is=a("p"),Is.textContent=Ju,Bo=n(),r(xs.$$.fragment),Vo=n(),r(ks.$$.fragment),Ro=n(),Zs=a("p"),Zs.textContent=gu,No=n(),r(Hs.$$.fragment),zo=n(),Gs=a("p"),Gs.textContent=ju,Wo=n(),Xs=a("p"),Xs.textContent=Cu,Lo=n(),r(Bs.$$.fragment),So=n(),r(Vs.$$.fragment),Qo=n(),Rs=a("p"),Rs.innerHTML=Uu,Fo=n(),Ns=a("p"),Ns.innerHTML=vu,Eo=n(),r(zs.$$.fragment),Ao=n(),Ws=a("p"),Ws.textContent=_u,Po=n(),r(Ls.$$.fragment),Yo=n(),Ss=a("p"),Ss.innerHTML=Iu,qo=n(),Qs=a("p"),Qs.innerHTML=xu,Ko=n(),r(Fs.$$.fragment),Do=n(),Es=a("p"),Es.innerHTML=ku,Oo=n(),r(As.$$.fragment),er=n(),Ps=a("p"),Ps.innerHTML=Zu,tr=n(),r(Ys.$$.fragment),sr=n(),qs=a("p"),qs.textContent=Hu,lr=n(),r(Ks.$$.fragment),nr=n(),Ds=a("p"),Ds.textContent=Gu,ir=n(),r(Os.$$.fragment),ar=n(),el=a("p"),el.innerHTML=Xu,pr=n(),tl=a("p"),tl.innerHTML=Bu,or=n(),sl=a("p"),sl.innerHTML=Vu,rr=n(),r(ll.$$.fragment),dr=n(),nl=a("p"),nl.innerHTML=Ru,mr=n(),r(il.$$.fragment),fr=n(),al=a("p"),al.textContent=Nu,ur=n(),r(pl.$$.fragment),cr=n(),ol=a("p"),ol.textContent=zu,wr=n(),r(rl.$$.fragment),hr=n(),dl=a("p"),dl.textContent=Wu,yr=n(),r(ml.$$.fragment),Mr=n(),fl=a("p"),fl.innerHTML=Lu,Tr=n(),ul=a("ul"),ul.innerHTML=Su,$r=n(),cl=a("p"),cl.innerHTML=Qu,br=n(),r(wl.$$.fragment),Jr=n(),hl=a("p"),hl.innerHTML=Fu,gr=n(),r(yl.$$.fragment),jr=n(),r(Ml.$$.fragment),Cr=n(),Tl=a("p"),Tl.innerHTML=Eu,Ur=n(),$l=a("p"),$l.textContent=Au,vr=n(),bl=a("p"),bl.innerHTML=Pu,_r=n(),Jl=a("p"),Jl.textContent=Yu,Ir=n(),r(gl.$$.fragment),xr=n(),jl=a("p"),jl.innerHTML=qu,kr=n(),Cl=a("ul"),Cl.innerHTML=Ku,Zr=n(),r(Ul.$$.fragment),Hr=n(),vl=a("p"),vl.innerHTML=Du,Gr=n(),_l=a("ul"),_l.innerHTML=Ou,Xr=n(),r(Il.$$.fragment),Br=n(),xl=a("p"),xl.textContent=ec,Vr=n(),kl=a("ul"),kl.innerHTML=tc,Rr=n(),r(j.$$.fragment),Nr=n(),r(C.$$.fragment),zr=n(),r(Zl.$$.fragment),Wr=n(),Hl=a("p"),Hl.innerHTML=sc,Lr=n(),r(Gl.$$.fragment),Sr=n(),r(Xl.$$.fragment),Qr=n(),Bl=a("p"),Bl.innerHTML=lc,Fr=n(),Vl=a("p"),Vl.textContent=nc,Er=n(),Rl=a("ul"),Rl.innerHTML=ic,Ar=n(),Nl=a("p"),Nl.innerHTML=ac,Pr=n(),r(zl.$$.fragment),Yr=n(),Wl=a("ul"),Wl.innerHTML=pc,qr=n(),r(Ll.$$.fragment),Kr=n(),Sl=a("p"),Sl.textContent=oc,Dr=n(),r(Ql.$$.fragment),Or=n(),Fl=a("p"),Fl.innerHTML=rc,ed=n(),r(El.$$.fragment),td=n(),Al=a("p"),Al.textContent=dc,sd=n(),r(Pl.$$.fragment),ld=n(),Yl=a("p"),Yl.textContent=mc,nd=n(),r(ql.$$.fragment),id=n(),Kl=a("p"),Kl.innerHTML=fc,ad=n(),r(Dl.$$.fragment),pd=n(),Ol=a("ul"),Ol.innerHTML=uc,od=n(),r(en.$$.fragment),rd=n(),tn=a("ul"),tn.innerHTML=cc,dd=n(),r(sn.$$.fragment),md=n(),ln=a("p"),ln.textContent=wc,fd=n(),r(nn.$$.fragment),ud=n(),an=a("p"),an.textContent=hc,cd=n(),r(pn.$$.fragment),wd=n(),on=a("p"),on.innerHTML=yc,hd=n(),r(rn.$$.fragment),yd=n(),dn=a("p"),dn.textContent=Mc,Md=n(),r(mn.$$.fragment),Td=n(),fn=a("p"),fn.innerHTML=Tc,$d=n(),r(un.$$.fragment),bd=n(),cn=a("p"),cn.innerHTML=$c,Jd=n(),r(wn.$$.fragment),gd=n(),hn=a("p"),hn.textContent=bc,jd=n(),yn=a("p"),yn.textContent=Jc,Cd=n(),Mn=a("p"),Mn.textContent=gc,Ud=n(),Tn=a("ul"),Tn.innerHTML=jc,vd=n(),$n=a("p"),$n.innerHTML=Cc,_d=n(),r(bn.$$.fragment),Id=n(),Jn=a("p"),Jn.innerHTML=Uc,xd=n(),gn=a("p"),gn.innerHTML=vc,kd=n(),jn=a("p"),jn.textContent=_c,Zd=n(),r(Cn.$$.fragment),Hd=n(),Un=a("p"),Un.innerHTML=Ic,Gd=n(),r(vn.$$.fragment),Xd=n(),_n=a("p"),_n.innerHTML=xc,Bd=n(),r(In.$$.fragment),Vd=n(),xn=a("p"),xn.innerHTML=kc,Rd=n(),r(kn.$$.fragment),Nd=n(),Zn=a("p"),Zn.innerHTML=Zc,zd=n(),Hn=a("p"),Hn.innerHTML=Hc,Wd=n(),r(Gn.$$.fragment),Ld=n(),Xn=a("p"),Xn.textContent=Gc,Sd=n(),r(Bn.$$.fragment),Qd=n(),Vn=a("p"),Vn.innerHTML=Xc,Fd=n(),r(Rn.$$.fragment),Ed=n(),Nn=a("p"),Nn.innerHTML=Bc,Ad=n(),r(zn.$$.fragment),Pd=n(),Wn=a("p"),Wn.textContent=Vc,Yd=n(),r(Ln.$$.fragment),qd=n(),Sn=a("p"),Sn.innerHTML=Rc,Kd=n(),r(Qn.$$.fragment),Dd=n(),r(Fn.$$.fragment),Od=n(),En=a("p"),En.innerHTML=Nc,em=n(),r(An.$$.fragment),tm=n(),Pn=a("p"),Pn.innerHTML=zc,sm=n(),r(Yn.$$.fragment),lm=n(),qn=a("p"),qn.innerHTML=Wc,nm=n(),Kn=a("p"),Kn.innerHTML=Lc,im=n(),r(Dn.$$.fragment),am=n(),On=a("p"),On.textContent=Sc,pm=n(),r(ei.$$.fragment),om=n(),r(ti.$$.fragment),rm=n(),si=a("p"),si.textContent=Qc,dm=n(),r(li.$$.fragment),mm=n(),r(ni.$$.fragment),fm=n(),ii=a("p"),ii.textContent=Fc,um=n(),ai=a("ol"),ai.innerHTML=Ec,cm=n(),r(pi.$$.fragment),wm=n(),oi=a("p"),oi.textContent=Ac,hm=n(),ri=a("ol"),ri.innerHTML=Pc,ym=n(),di=a("p"),di.textContent=Yc,Mm=n(),mi=a("p"),mi.textContent=qc,Tm=n(),fi=a("p"),fi.textContent=Kc,$m=n(),ui=a("p"),ui.textContent=Dc,bm=n(),ci=a("ol"),ci.innerHTML=Oc,Jm=n(),wi=a("p"),wi.textContent=ew,gm=n(),r(hi.$$.fragment),jm=n(),yi=a("p"),yi.textContent=tw,Cm=n(),r(Mi.$$.fragment),Um=n(),Ti=a("p"),Ti.innerHTML=sw,vm=n(),$i=a("p"),$i.innerHTML=lw,_m=n(),bi=a("p"),bi.textContent=nw,Im=n(),Ji=a("ul"),Ji.innerHTML=iw,xm=n(),r(gi.$$.fragment),km=n(),ji=a("p"),ji.textContent=aw,Zm=n(),Ci=a("p"),Ci.textContent=pw,Hm=n(),r(Ui.$$.fragment),Gm=n(),vi=a("p"),vi.textContent=ow,Xm=n(),r(_i.$$.fragment),Bm=n(),Ii=a("p"),this.h()},l(e){const t=Tw("svelte-u9bgzb",document.head);y=p(t,"META",{name:!0,content:!0}),t.forEach(s),T=i(e),M=p(e,"P",{}),uw(M).forEach(s),$=i(e),d(U.$$.fragment,e),xi=i(e),v=p(e,"P",{"data-svelte-h":!0}),o(v)!=="svelte-1bfeznz"&&(v.textContent=zm),ki=i(e),_=p(e,"P",{"data-svelte-h":!0}),o(_)!=="svelte-1468g91"&&(_.textContent=Wm),Zi=i(e),I=p(e,"OL",{"data-svelte-h":!0}),o(I)!=="svelte-u97aul"&&(I.innerHTML=Lm),Hi=i(e),d(x.$$.fragment,e),Gi=i(e),k=p(e,"OL",{"data-svelte-h":!0}),o(k)!=="svelte-1xjbri2"&&(k.innerHTML=Sm),Xi=i(e),d(Z.$$.fragment,e),Bi=i(e),H=p(e,"P",{"data-svelte-h":!0}),o(H)!=="svelte-labrlq"&&(H.innerHTML=Qm),Vi=i(e),d(G.$$.fragment,e),Ri=i(e),d(X.$$.fragment,e),Ni=i(e),B=p(e,"P",{"data-svelte-h":!0}),o(B)!=="svelte-iw7kd9"&&(B.innerHTML=Fm),zi=i(e),V=p(e,"P",{"data-svelte-h":!0}),o(V)!=="svelte-19u85g2"&&(V.textContent=Em),Wi=i(e),R=p(e,"P",{"data-svelte-h":!0}),o(R)!=="svelte-1cr0co4"&&(R.textContent=Am),Li=i(e),d(N.$$.fragment,e),Si=i(e),z=p(e,"P",{"data-svelte-h":!0}),o(z)!=="svelte-ylttvt"&&(z.textContent=Pm),Qi=i(e),d(W.$$.fragment,e),Fi=i(e),L=p(e,"P",{"data-svelte-h":!0}),o(L)!=="svelte-1y7ruil"&&(L.textContent=Ym),Ei=i(e),d(S.$$.fragment,e),Ai=i(e),Q=p(e,"P",{"data-svelte-h":!0}),o(Q)!=="svelte-w4pavv"&&(Q.textContent=qm),Pi=i(e),F=p(e,"UL",{"data-svelte-h":!0}),o(F)!=="svelte-1if6plt"&&(F.innerHTML=Km),Yi=i(e),d(E.$$.fragment,e),qi=i(e),A=p(e,"P",{"data-svelte-h":!0}),o(A)!=="svelte-1lo9z46"&&(A.textContent=Dm),Ki=i(e),d(P.$$.fragment,e),Di=i(e),Y=p(e,"P",{"data-svelte-h":!0}),o(Y)!=="svelte-1d4pkjf"&&(Y.textContent=Om),Oi=i(e),d(q.$$.fragment,e),ea=i(e),d(K.$$.fragment,e),ta=i(e),D=p(e,"P",{"data-svelte-h":!0}),o(D)!=="svelte-5hfpb0"&&(D.textContent=ef),sa=i(e),d(O.$$.fragment,e),la=i(e),d(ee.$$.fragment,e),na=i(e),te=p(e,"P",{"data-svelte-h":!0}),o(te)!=="svelte-c0whf"&&(te.textContent=tf),ia=i(e),d(se.$$.fragment,e),aa=i(e),le=p(e,"P",{"data-svelte-h":!0}),o(le)!=="svelte-epkwoc"&&(le.textContent=sf),pa=i(e),ne=p(e,"UL",{"data-svelte-h":!0}),o(ne)!=="svelte-danjdv"&&(ne.innerHTML=lf),oa=i(e),ie=p(e,"P",{"data-svelte-h":!0}),o(ie)!=="svelte-1gfp00k"&&(ie.textContent=nf),ra=i(e),d(ae.$$.fragment,e),da=i(e),pe=p(e,"P",{"data-svelte-h":!0}),o(pe)!=="svelte-1sjtmkd"&&(pe.textContent=af),ma=i(e),oe=p(e,"P",{"data-svelte-h":!0}),o(oe)!=="svelte-191iwzc"&&(oe.innerHTML=pf),fa=i(e),d(re.$$.fragment,e),ua=i(e),de=p(e,"P",{"data-svelte-h":!0}),o(de)!=="svelte-1xohq9w"&&(de.textContent=of),ca=i(e),me=p(e,"P",{"data-svelte-h":!0}),o(me)!=="svelte-17y24cx"&&(me.innerHTML=rf),wa=i(e),d(fe.$$.fragment,e),ha=i(e),ue=p(e,"P",{"data-svelte-h":!0}),o(ue)!=="svelte-wm70a5"&&(ue.innerHTML=df),ya=i(e),ce=p(e,"P",{"data-svelte-h":!0}),o(ce)!=="svelte-1qcofvk"&&(ce.innerHTML=mf),Ma=i(e),d(we.$$.fragment,e),Ta=i(e),he=p(e,"P",{"data-svelte-h":!0}),o(he)!=="svelte-1v2kf44"&&(he.textContent=ff),$a=i(e),d(ye.$$.fragment,e),ba=i(e),Me=p(e,"P",{"data-svelte-h":!0}),o(Me)!=="svelte-xpmdqr"&&(Me.innerHTML=uf),Ja=i(e),d(Te.$$.fragment,e),ga=i(e),$e=p(e,"P",{"data-svelte-h":!0}),o($e)!=="svelte-ya3osx"&&($e.innerHTML=cf),ja=i(e),be=p(e,"P",{"data-svelte-h":!0}),o(be)!=="svelte-1t5el5c"&&(be.innerHTML=wf),Ca=i(e),d(Je.$$.fragment,e),Ua=i(e),d(ge.$$.fragment,e),va=i(e),je=p(e,"P",{"data-svelte-h":!0}),o(je)!=="svelte-1h9dnrx"&&(je.innerHTML=hf),_a=i(e),d(Ce.$$.fragment,e),Ia=i(e),d(Ue.$$.fragment,e),xa=i(e),ve=p(e,"P",{"data-svelte-h":!0}),o(ve)!=="svelte-1v7cinx"&&(ve.innerHTML=yf),ka=i(e),d(_e.$$.fragment,e),Za=i(e),Ie=p(e,"P",{"data-svelte-h":!0}),o(Ie)!=="svelte-2y6u4r"&&(Ie.textContent=Mf),Ha=i(e),d(xe.$$.fragment,e),Ga=i(e),ke=p(e,"P",{"data-svelte-h":!0}),o(ke)!=="svelte-179dx63"&&(ke.innerHTML=Tf),Xa=i(e),d(Ze.$$.fragment,e),Ba=i(e),He=p(e,"P",{"data-svelte-h":!0}),o(He)!=="svelte-unvzuu"&&(He.innerHTML=$f),Va=i(e),d(Ge.$$.fragment,e),Ra=i(e),d(Xe.$$.fragment,e),Na=i(e),Be=p(e,"P",{"data-svelte-h":!0}),o(Be)!=="svelte-15u7bp5"&&(Be.textContent=bf),za=i(e),d(Ve.$$.fragment,e),Wa=i(e),Re=p(e,"P",{"data-svelte-h":!0}),o(Re)!=="svelte-vt8irn"&&(Re.innerHTML=Jf),La=i(e),d(Ne.$$.fragment,e),Sa=i(e),ze=p(e,"P",{"data-svelte-h":!0}),o(ze)!=="svelte-6ajs78"&&(ze.innerHTML=gf),Qa=i(e),We=p(e,"P",{"data-svelte-h":!0}),o(We)!=="svelte-gj7k8m"&&(We.innerHTML=jf),Fa=i(e),d(Le.$$.fragment,e),Ea=i(e),Se=p(e,"P",{"data-svelte-h":!0}),o(Se)!=="svelte-159ynhd"&&(Se.innerHTML=Cf),Aa=i(e),d(Qe.$$.fragment,e),Pa=i(e),Fe=p(e,"P",{"data-svelte-h":!0}),o(Fe)!=="svelte-1ee4njf"&&(Fe.textContent=Uf),Ya=i(e),Ee=p(e,"P",{"data-svelte-h":!0}),o(Ee)!=="svelte-1ax2n5m"&&(Ee.innerHTML=vf),qa=i(e),d(Ae.$$.fragment,e),Ka=i(e),Pe=p(e,"P",{"data-svelte-h":!0}),o(Pe)!=="svelte-avos7q"&&(Pe.innerHTML=_f),Da=i(e),d(Ye.$$.fragment,e),Oa=i(e),d(qe.$$.fragment,e),ep=i(e),Ke=p(e,"P",{"data-svelte-h":!0}),o(Ke)!=="svelte-stzunx"&&(Ke.textContent=If),tp=i(e),d(De.$$.fragment,e),sp=i(e),d(Oe.$$.fragment,e),lp=i(e),et=p(e,"P",{"data-svelte-h":!0}),o(et)!=="svelte-1pmvtt0"&&(et.innerHTML=xf),np=i(e),tt=p(e,"P",{"data-svelte-h":!0}),o(tt)!=="svelte-1nsqbht"&&(tt.innerHTML=kf),ip=i(e),st=p(e,"P",{"data-svelte-h":!0}),o(st)!=="svelte-1m3hksa"&&(st.innerHTML=Zf),ap=i(e),d(lt.$$.fragment,e),pp=i(e),nt=p(e,"P",{"data-svelte-h":!0}),o(nt)!=="svelte-15ioki4"&&(nt.textContent=Hf),op=i(e),d(it.$$.fragment,e),rp=i(e),at=p(e,"UL",{"data-svelte-h":!0}),o(at)!=="svelte-1mmgi4h"&&(at.innerHTML=Gf),dp=i(e),d(pt.$$.fragment,e),mp=i(e),ot=p(e,"P",{"data-svelte-h":!0}),o(ot)!=="svelte-18b9tpg"&&(ot.textContent=Xf),fp=i(e),d(rt.$$.fragment,e),up=i(e),d(J.$$.fragment,e),cp=i(e),d(g.$$.fragment,e),wp=i(e),d(dt.$$.fragment,e),hp=i(e),d(mt.$$.fragment,e),yp=i(e),ft=p(e,"P",{"data-svelte-h":!0}),o(ft)!=="svelte-f8h5dv"&&(ft.innerHTML=Bf),Mp=i(e),ut=p(e,"P",{"data-svelte-h":!0}),o(ut)!=="svelte-7bnqvo"&&(ut.innerHTML=Vf),Tp=i(e),d(ct.$$.fragment,e),$p=i(e),wt=p(e,"P",{"data-svelte-h":!0}),o(wt)!=="svelte-fmmfnt"&&(wt.textContent=Rf),bp=i(e),d(ht.$$.fragment,e),Jp=i(e),yt=p(e,"P",{"data-svelte-h":!0}),o(yt)!=="svelte-13ddfrq"&&(yt.innerHTML=Nf),gp=i(e),d(Mt.$$.fragment,e),jp=i(e),Tt=p(e,"P",{"data-svelte-h":!0}),o(Tt)!=="svelte-1wfinax"&&(Tt.textContent=zf),Cp=i(e),d($t.$$.fragment,e),Up=i(e),bt=p(e,"P",{"data-svelte-h":!0}),o(bt)!=="svelte-1ur3h1j"&&(bt.innerHTML=Wf),vp=i(e),Jt=p(e,"P",{"data-svelte-h":!0}),o(Jt)!=="svelte-joumxu"&&(Jt.innerHTML=Lf),_p=i(e),d(gt.$$.fragment,e),Ip=i(e),d(jt.$$.fragment,e),xp=i(e),Ct=p(e,"P",{"data-svelte-h":!0}),o(Ct)!=="svelte-1l9hk1w"&&(Ct.innerHTML=Sf),kp=i(e),d(Ut.$$.fragment,e),Zp=i(e),vt=p(e,"P",{"data-svelte-h":!0}),o(vt)!=="svelte-imfw4r"&&(vt.textContent=Qf),Hp=i(e),d(_t.$$.fragment,e),Gp=i(e),It=p(e,"P",{"data-svelte-h":!0}),o(It)!=="svelte-14pjrdm"&&(It.textContent=Ff),Xp=i(e),d(xt.$$.fragment,e),Bp=i(e),kt=p(e,"P",{"data-svelte-h":!0}),o(kt)!=="svelte-umw6ao"&&(kt.innerHTML=Ef),Vp=i(e),d(Zt.$$.fragment,e),Rp=i(e),d(Ht.$$.fragment,e),Np=i(e),Gt=p(e,"P",{"data-svelte-h":!0}),o(Gt)!=="svelte-1yhn8j7"&&(Gt.innerHTML=Af),zp=i(e),d(Xt.$$.fragment,e),Wp=i(e),d(Bt.$$.fragment,e),Lp=i(e),d(Vt.$$.fragment,e),Sp=i(e),Rt=p(e,"P",{"data-svelte-h":!0}),o(Rt)!=="svelte-1rob2zs"&&(Rt.innerHTML=Pf),Qp=i(e),d(Nt.$$.fragment,e),Fp=i(e),zt=p(e,"P",{"data-svelte-h":!0}),o(zt)!=="svelte-1udju7w"&&(zt.innerHTML=Yf),Ep=i(e),d(Wt.$$.fragment,e),Ap=i(e),Lt=p(e,"P",{"data-svelte-h":!0}),o(Lt)!=="svelte-1ws7l6h"&&(Lt.textContent=qf),Pp=i(e),St=p(e,"P",{"data-svelte-h":!0}),o(St)!=="svelte-9ls328"&&(St.textContent=Kf),Yp=i(e),Qt=p(e,"UL",{"data-svelte-h":!0}),o(Qt)!=="svelte-15bvuyl"&&(Qt.innerHTML=Df),qp=i(e),Ft=p(e,"P",{"data-svelte-h":!0}),o(Ft)!=="svelte-utz14"&&(Ft.textContent=Of),Kp=i(e),Et=p(e,"P",{"data-svelte-h":!0}),o(Et)!=="svelte-5bpuka"&&(Et.innerHTML=eu),Dp=i(e),At=p(e,"P",{"data-svelte-h":!0}),o(At)!=="svelte-f7k590"&&(At.textContent=tu),Op=i(e),d(Pt.$$.fragment,e),eo=i(e),Yt=p(e,"P",{"data-svelte-h":!0}),o(Yt)!=="svelte-1h8vitx"&&(Yt.innerHTML=su),to=i(e),d(qt.$$.fragment,e),so=i(e),Kt=p(e,"P",{"data-svelte-h":!0}),o(Kt)!=="svelte-ffnm4q"&&(Kt.textContent=lu),lo=i(e),d(Dt.$$.fragment,e),no=i(e),Ot=p(e,"P",{"data-svelte-h":!0}),o(Ot)!=="svelte-353xix"&&(Ot.innerHTML=nu),io=i(e),d(es.$$.fragment,e),ao=i(e),ts=p(e,"P",{"data-svelte-h":!0}),o(ts)!=="svelte-v3nbmf"&&(ts.innerHTML=iu),po=i(e),ss=p(e,"P",{"data-svelte-h":!0}),o(ss)!=="svelte-u2pw3h"&&(ss.textContent=au),oo=i(e),ls=p(e,"UL",{"data-svelte-h":!0}),o(ls)!=="svelte-3jen5c"&&(ls.innerHTML=pu),ro=i(e),d(ns.$$.fragment,e),mo=i(e),d(is.$$.fragment,e),fo=i(e),as=p(e,"P",{"data-svelte-h":!0}),o(as)!=="svelte-db62h"&&(as.innerHTML=ou),uo=i(e),d(ps.$$.fragment,e),co=i(e),os=p(e,"P",{"data-svelte-h":!0}),o(os)!=="svelte-a4621l"&&(os.innerHTML=ru),wo=i(e),rs=p(e,"P",{"data-svelte-h":!0}),o(rs)!=="svelte-178tu9q"&&(rs.innerHTML=du),ho=i(e),d(ds.$$.fragment,e),yo=i(e),ms=p(e,"P",{"data-svelte-h":!0}),o(ms)!=="svelte-p4zktf"&&(ms.innerHTML=mu),Mo=i(e),d(fs.$$.fragment,e),To=i(e),us=p(e,"P",{"data-svelte-h":!0}),o(us)!=="svelte-1qfcypp"&&(us.innerHTML=fu),$o=i(e),cs=p(e,"P",{"data-svelte-h":!0}),o(cs)!=="svelte-l1wddx"&&(cs.innerHTML=uu),bo=i(e),d(ws.$$.fragment,e),Jo=i(e),hs=p(e,"P",{"data-svelte-h":!0}),o(hs)!=="svelte-12mggyp"&&(hs.innerHTML=cu),go=i(e),ys=p(e,"P",{"data-svelte-h":!0}),o(ys)!=="svelte-4caaxc"&&(ys.textContent=wu),jo=i(e),Ms=p(e,"UL",{"data-svelte-h":!0}),o(Ms)!=="svelte-m5pydi"&&(Ms.innerHTML=hu),Co=i(e),Ts=p(e,"P",{"data-svelte-h":!0}),o(Ts)!=="svelte-qqwmn6"&&(Ts.innerHTML=yu),Uo=i(e),$s=p(e,"P",{"data-svelte-h":!0}),o($s)!=="svelte-qc147d"&&($s.textContent=Mu),vo=i(e),d(bs.$$.fragment,e),_o=i(e),d(Js.$$.fragment,e),Io=i(e),gs=p(e,"P",{"data-svelte-h":!0}),o(gs)!=="svelte-1bsvp4y"&&(gs.innerHTML=Tu),xo=i(e),js=p(e,"P",{"data-svelte-h":!0}),o(js)!=="svelte-1gq9tao"&&(js.innerHTML=$u),ko=i(e),d(Cs.$$.fragment,e),Zo=i(e),Us=p(e,"P",{"data-svelte-h":!0}),o(Us)!=="svelte-euahrc"&&(Us.textContent=bu),Ho=i(e),d(vs.$$.fragment,e),Go=i(e),d(_s.$$.fragment,e),Xo=i(e),Is=p(e,"P",{"data-svelte-h":!0}),o(Is)!=="svelte-dng90j"&&(Is.textContent=Ju),Bo=i(e),d(xs.$$.fragment,e),Vo=i(e),d(ks.$$.fragment,e),Ro=i(e),Zs=p(e,"P",{"data-svelte-h":!0}),o(Zs)!=="svelte-1w4eg93"&&(Zs.textContent=gu),No=i(e),d(Hs.$$.fragment,e),zo=i(e),Gs=p(e,"P",{"data-svelte-h":!0}),o(Gs)!=="svelte-weqhq8"&&(Gs.textContent=ju),Wo=i(e),Xs=p(e,"P",{"data-svelte-h":!0}),o(Xs)!=="svelte-bpmeeu"&&(Xs.textContent=Cu),Lo=i(e),d(Bs.$$.fragment,e),So=i(e),d(Vs.$$.fragment,e),Qo=i(e),Rs=p(e,"P",{"data-svelte-h":!0}),o(Rs)!=="svelte-eorfz6"&&(Rs.innerHTML=Uu),Fo=i(e),Ns=p(e,"P",{"data-svelte-h":!0}),o(Ns)!=="svelte-1ygwz5h"&&(Ns.innerHTML=vu),Eo=i(e),d(zs.$$.fragment,e),Ao=i(e),Ws=p(e,"P",{"data-svelte-h":!0}),o(Ws)!=="svelte-snf8ke"&&(Ws.textContent=_u),Po=i(e),d(Ls.$$.fragment,e),Yo=i(e),Ss=p(e,"P",{"data-svelte-h":!0}),o(Ss)!=="svelte-1737hyy"&&(Ss.innerHTML=Iu),qo=i(e),Qs=p(e,"P",{"data-svelte-h":!0}),o(Qs)!=="svelte-1oufrw1"&&(Qs.innerHTML=xu),Ko=i(e),d(Fs.$$.fragment,e),Do=i(e),Es=p(e,"P",{"data-svelte-h":!0}),o(Es)!=="svelte-1tl0nx7"&&(Es.innerHTML=ku),Oo=i(e),d(As.$$.fragment,e),er=i(e),Ps=p(e,"P",{"data-svelte-h":!0}),o(Ps)!=="svelte-19gvkao"&&(Ps.innerHTML=Zu),tr=i(e),d(Ys.$$.fragment,e),sr=i(e),qs=p(e,"P",{"data-svelte-h":!0}),o(qs)!=="svelte-4rsktk"&&(qs.textContent=Hu),lr=i(e),d(Ks.$$.fragment,e),nr=i(e),Ds=p(e,"P",{"data-svelte-h":!0}),o(Ds)!=="svelte-6ynunq"&&(Ds.textContent=Gu),ir=i(e),d(Os.$$.fragment,e),ar=i(e),el=p(e,"P",{"data-svelte-h":!0}),o(el)!=="svelte-1pfiycl"&&(el.innerHTML=Xu),pr=i(e),tl=p(e,"P",{"data-svelte-h":!0}),o(tl)!=="svelte-1ygobi4"&&(tl.innerHTML=Bu),or=i(e),sl=p(e,"P",{"data-svelte-h":!0}),o(sl)!=="svelte-qhi9ux"&&(sl.innerHTML=Vu),rr=i(e),d(ll.$$.fragment,e),dr=i(e),nl=p(e,"P",{"data-svelte-h":!0}),o(nl)!=="svelte-e797ol"&&(nl.innerHTML=Ru),mr=i(e),d(il.$$.fragment,e),fr=i(e),al=p(e,"P",{"data-svelte-h":!0}),o(al)!=="svelte-4rsktk"&&(al.textContent=Nu),ur=i(e),d(pl.$$.fragment,e),cr=i(e),ol=p(e,"P",{"data-svelte-h":!0}),o(ol)!=="svelte-1pp8dat"&&(ol.textContent=zu),wr=i(e),d(rl.$$.fragment,e),hr=i(e),dl=p(e,"P",{"data-svelte-h":!0}),o(dl)!=="svelte-wcwikf"&&(dl.textContent=Wu),yr=i(e),d(ml.$$.fragment,e),Mr=i(e),fl=p(e,"P",{"data-svelte-h":!0}),o(fl)!=="svelte-ggv3l3"&&(fl.innerHTML=Lu),Tr=i(e),ul=p(e,"UL",{"data-svelte-h":!0}),o(ul)!=="svelte-jurlci"&&(ul.innerHTML=Su),$r=i(e),cl=p(e,"P",{"data-svelte-h":!0}),o(cl)!=="svelte-91az3w"&&(cl.innerHTML=Qu),br=i(e),d(wl.$$.fragment,e),Jr=i(e),hl=p(e,"P",{"data-svelte-h":!0}),o(hl)!=="svelte-rjyeyp"&&(hl.innerHTML=Fu),gr=i(e),d(yl.$$.fragment,e),jr=i(e),d(Ml.$$.fragment,e),Cr=i(e),Tl=p(e,"P",{"data-svelte-h":!0}),o(Tl)!=="svelte-1vmbsy3"&&(Tl.innerHTML=Eu),Ur=i(e),$l=p(e,"P",{"data-svelte-h":!0}),o($l)!=="svelte-1nqxzoj"&&($l.textContent=Au),vr=i(e),bl=p(e,"P",{"data-svelte-h":!0}),o(bl)!=="svelte-1lx14g9"&&(bl.innerHTML=Pu),_r=i(e),Jl=p(e,"P",{"data-svelte-h":!0}),o(Jl)!=="svelte-ga57nj"&&(Jl.textContent=Yu),Ir=i(e),d(gl.$$.fragment,e),xr=i(e),jl=p(e,"P",{"data-svelte-h":!0}),o(jl)!=="svelte-1flfm4w"&&(jl.innerHTML=qu),kr=i(e),Cl=p(e,"UL",{"data-svelte-h":!0}),o(Cl)!=="svelte-1rvelqv"&&(Cl.innerHTML=Ku),Zr=i(e),d(Ul.$$.fragment,e),Hr=i(e),vl=p(e,"P",{"data-svelte-h":!0}),o(vl)!=="svelte-1vcgtp4"&&(vl.innerHTML=Du),Gr=i(e),_l=p(e,"UL",{"data-svelte-h":!0}),o(_l)!=="svelte-1v175v7"&&(_l.innerHTML=Ou),Xr=i(e),d(Il.$$.fragment,e),Br=i(e),xl=p(e,"P",{"data-svelte-h":!0}),o(xl)!=="svelte-pk8usg"&&(xl.textContent=ec),Vr=i(e),kl=p(e,"UL",{"data-svelte-h":!0}),o(kl)!=="svelte-17enf76"&&(kl.innerHTML=tc),Rr=i(e),d(j.$$.fragment,e),Nr=i(e),d(C.$$.fragment,e),zr=i(e),d(Zl.$$.fragment,e),Wr=i(e),Hl=p(e,"P",{"data-svelte-h":!0}),o(Hl)!=="svelte-1blmp1h"&&(Hl.innerHTML=sc),Lr=i(e),d(Gl.$$.fragment,e),Sr=i(e),d(Xl.$$.fragment,e),Qr=i(e),Bl=p(e,"P",{"data-svelte-h":!0}),o(Bl)!=="svelte-dlsjg1"&&(Bl.innerHTML=lc),Fr=i(e),Vl=p(e,"P",{"data-svelte-h":!0}),o(Vl)!=="svelte-14pqgk8"&&(Vl.textContent=nc),Er=i(e),Rl=p(e,"UL",{"data-svelte-h":!0}),o(Rl)!=="svelte-y68pnm"&&(Rl.innerHTML=ic),Ar=i(e),Nl=p(e,"P",{"data-svelte-h":!0}),o(Nl)!=="svelte-1c4q1t0"&&(Nl.innerHTML=ac),Pr=i(e),d(zl.$$.fragment,e),Yr=i(e),Wl=p(e,"UL",{"data-svelte-h":!0}),o(Wl)!=="svelte-1hhtdwa"&&(Wl.innerHTML=pc),qr=i(e),d(Ll.$$.fragment,e),Kr=i(e),Sl=p(e,"P",{"data-svelte-h":!0}),o(Sl)!=="svelte-15p8ism"&&(Sl.textContent=oc),Dr=i(e),d(Ql.$$.fragment,e),Or=i(e),Fl=p(e,"P",{"data-svelte-h":!0}),o(Fl)!=="svelte-td5r6o"&&(Fl.innerHTML=rc),ed=i(e),d(El.$$.fragment,e),td=i(e),Al=p(e,"P",{"data-svelte-h":!0}),o(Al)!=="svelte-11quoxt"&&(Al.textContent=dc),sd=i(e),d(Pl.$$.fragment,e),ld=i(e),Yl=p(e,"P",{"data-svelte-h":!0}),o(Yl)!=="svelte-1hcnf1h"&&(Yl.textContent=mc),nd=i(e),d(ql.$$.fragment,e),id=i(e),Kl=p(e,"P",{"data-svelte-h":!0}),o(Kl)!=="svelte-td5r6o"&&(Kl.innerHTML=fc),ad=i(e),d(Dl.$$.fragment,e),pd=i(e),Ol=p(e,"UL",{"data-svelte-h":!0}),o(Ol)!=="svelte-15o6zb5"&&(Ol.innerHTML=uc),od=i(e),d(en.$$.fragment,e),rd=i(e),tn=p(e,"UL",{"data-svelte-h":!0}),o(tn)!=="svelte-e2w3rp"&&(tn.innerHTML=cc),dd=i(e),d(sn.$$.fragment,e),md=i(e),ln=p(e,"P",{"data-svelte-h":!0}),o(ln)!=="svelte-ylttvt"&&(ln.textContent=wc),fd=i(e),d(nn.$$.fragment,e),ud=i(e),an=p(e,"P",{"data-svelte-h":!0}),o(an)!=="svelte-1uqdrdi"&&(an.textContent=hc),cd=i(e),d(pn.$$.fragment,e),wd=i(e),on=p(e,"P",{"data-svelte-h":!0}),o(on)!=="svelte-mlyx41"&&(on.innerHTML=yc),hd=i(e),d(rn.$$.fragment,e),yd=i(e),dn=p(e,"P",{"data-svelte-h":!0}),o(dn)!=="svelte-1hy2jf0"&&(dn.textContent=Mc),Md=i(e),d(mn.$$.fragment,e),Td=i(e),fn=p(e,"P",{"data-svelte-h":!0}),o(fn)!=="svelte-1szno4g"&&(fn.innerHTML=Tc),$d=i(e),d(un.$$.fragment,e),bd=i(e),cn=p(e,"P",{"data-svelte-h":!0}),o(cn)!=="svelte-1apnezy"&&(cn.innerHTML=$c),Jd=i(e),d(wn.$$.fragment,e),gd=i(e),hn=p(e,"P",{"data-svelte-h":!0}),o(hn)!=="svelte-rf3maz"&&(hn.textContent=bc),jd=i(e),yn=p(e,"P",{"data-svelte-h":!0}),o(yn)!=="svelte-1tipejs"&&(yn.textContent=Jc),Cd=i(e),Mn=p(e,"P",{"data-svelte-h":!0}),o(Mn)!=="svelte-7rit7z"&&(Mn.textContent=gc),Ud=i(e),Tn=p(e,"UL",{"data-svelte-h":!0}),o(Tn)!=="svelte-1kul420"&&(Tn.innerHTML=jc),vd=i(e),$n=p(e,"P",{"data-svelte-h":!0}),o($n)!=="svelte-zoj47i"&&($n.innerHTML=Cc),_d=i(e),d(bn.$$.fragment,e),Id=i(e),Jn=p(e,"P",{"data-svelte-h":!0}),o(Jn)!=="svelte-ubpbuc"&&(Jn.innerHTML=Uc),xd=i(e),gn=p(e,"P",{"data-svelte-h":!0}),o(gn)!=="svelte-94izzk"&&(gn.innerHTML=vc),kd=i(e),jn=p(e,"P",{"data-svelte-h":!0}),o(jn)!=="svelte-14cphpq"&&(jn.textContent=_c),Zd=i(e),d(Cn.$$.fragment,e),Hd=i(e),Un=p(e,"P",{"data-svelte-h":!0}),o(Un)!=="svelte-lkbhi"&&(Un.innerHTML=Ic),Gd=i(e),d(vn.$$.fragment,e),Xd=i(e),_n=p(e,"P",{"data-svelte-h":!0}),o(_n)!=="svelte-y7erom"&&(_n.innerHTML=xc),Bd=i(e),d(In.$$.fragment,e),Vd=i(e),xn=p(e,"P",{"data-svelte-h":!0}),o(xn)!=="svelte-1hn7f4z"&&(xn.innerHTML=kc),Rd=i(e),d(kn.$$.fragment,e),Nd=i(e),Zn=p(e,"P",{"data-svelte-h":!0}),o(Zn)!=="svelte-1apzdyq"&&(Zn.innerHTML=Zc),zd=i(e),Hn=p(e,"P",{"data-svelte-h":!0}),o(Hn)!=="svelte-1uzq8t5"&&(Hn.innerHTML=Hc),Wd=i(e),d(Gn.$$.fragment,e),Ld=i(e),Xn=p(e,"P",{"data-svelte-h":!0}),o(Xn)!=="svelte-zun07a"&&(Xn.textContent=Gc),Sd=i(e),d(Bn.$$.fragment,e),Qd=i(e),Vn=p(e,"P",{"data-svelte-h":!0}),o(Vn)!=="svelte-ovlbpn"&&(Vn.innerHTML=Xc),Fd=i(e),d(Rn.$$.fragment,e),Ed=i(e),Nn=p(e,"P",{"data-svelte-h":!0}),o(Nn)!=="svelte-1tcp04v"&&(Nn.innerHTML=Bc),Ad=i(e),d(zn.$$.fragment,e),Pd=i(e),Wn=p(e,"P",{"data-svelte-h":!0}),o(Wn)!=="svelte-9q1cwt"&&(Wn.textContent=Vc),Yd=i(e),d(Ln.$$.fragment,e),qd=i(e),Sn=p(e,"P",{"data-svelte-h":!0}),o(Sn)!=="svelte-vnemvg"&&(Sn.innerHTML=Rc),Kd=i(e),d(Qn.$$.fragment,e),Dd=i(e),d(Fn.$$.fragment,e),Od=i(e),En=p(e,"P",{"data-svelte-h":!0}),o(En)!=="svelte-kw5cnh"&&(En.innerHTML=Nc),em=i(e),d(An.$$.fragment,e),tm=i(e),Pn=p(e,"P",{"data-svelte-h":!0}),o(Pn)!=="svelte-147mt1i"&&(Pn.innerHTML=zc),sm=i(e),d(Yn.$$.fragment,e),lm=i(e),qn=p(e,"P",{"data-svelte-h":!0}),o(qn)!=="svelte-1ppwycl"&&(qn.innerHTML=Wc),nm=i(e),Kn=p(e,"P",{"data-svelte-h":!0}),o(Kn)!=="svelte-1wla2hx"&&(Kn.innerHTML=Lc),im=i(e),d(Dn.$$.fragment,e),am=i(e),On=p(e,"P",{"data-svelte-h":!0}),o(On)!=="svelte-85vvld"&&(On.textContent=Sc),pm=i(e),d(ei.$$.fragment,e),om=i(e),d(ti.$$.fragment,e),rm=i(e),si=p(e,"P",{"data-svelte-h":!0}),o(si)!=="svelte-10j78ug"&&(si.textContent=Qc),dm=i(e),d(li.$$.fragment,e),mm=i(e),d(ni.$$.fragment,e),fm=i(e),ii=p(e,"P",{"data-svelte-h":!0}),o(ii)!=="svelte-1i5zdaf"&&(ii.textContent=Fc),um=i(e),ai=p(e,"OL",{"data-svelte-h":!0}),o(ai)!=="svelte-16qtrad"&&(ai.innerHTML=Ec),cm=i(e),d(pi.$$.fragment,e),wm=i(e),oi=p(e,"P",{"data-svelte-h":!0}),o(oi)!=="svelte-bmnf8q"&&(oi.textContent=Ac),hm=i(e),ri=p(e,"OL",{"data-svelte-h":!0}),o(ri)!=="svelte-gem8u9"&&(ri.innerHTML=Pc),ym=i(e),di=p(e,"P",{"data-svelte-h":!0}),o(di)!=="svelte-gr2fu5"&&(di.textContent=Yc),Mm=i(e),mi=p(e,"P",{"data-svelte-h":!0}),o(mi)!=="svelte-1wcop4v"&&(mi.textContent=qc),Tm=i(e),fi=p(e,"P",{"data-svelte-h":!0}),o(fi)!=="svelte-45u4zb"&&(fi.textContent=Kc),$m=i(e),ui=p(e,"P",{"data-svelte-h":!0}),o(ui)!=="svelte-puvloo"&&(ui.textContent=Dc),bm=i(e),ci=p(e,"OL",{"data-svelte-h":!0}),o(ci)!=="svelte-8lbm08"&&(ci.innerHTML=Oc),Jm=i(e),wi=p(e,"P",{"data-svelte-h":!0}),o(wi)!=="svelte-1240csr"&&(wi.textContent=ew),gm=i(e),d(hi.$$.fragment,e),jm=i(e),yi=p(e,"P",{"data-svelte-h":!0}),o(yi)!=="svelte-7dixon"&&(yi.textContent=tw),Cm=i(e),d(Mi.$$.fragment,e),Um=i(e),Ti=p(e,"P",{"data-svelte-h":!0}),o(Ti)!=="svelte-hcmust"&&(Ti.innerHTML=sw),vm=i(e),$i=p(e,"P",{"data-svelte-h":!0}),o($i)!=="svelte-61pj3v"&&($i.innerHTML=lw),_m=i(e),bi=p(e,"P",{"data-svelte-h":!0}),o(bi)!=="svelte-ty6adq"&&(bi.textContent=nw),Im=i(e),Ji=p(e,"UL",{"data-svelte-h":!0}),o(Ji)!=="svelte-ikwit4"&&(Ji.innerHTML=iw),xm=i(e),d(gi.$$.fragment,e),km=i(e),ji=p(e,"P",{"data-svelte-h":!0}),o(ji)!=="svelte-dysj7y"&&(ji.textContent=aw),Zm=i(e),Ci=p(e,"P",{"data-svelte-h":!0}),o(Ci)!=="svelte-i82w3a"&&(Ci.textContent=pw),Hm=i(e),d(Ui.$$.fragment,e),Gm=i(e),vi=p(e,"P",{"data-svelte-h":!0}),o(vi)!=="svelte-1awjoc2"&&(vi.textContent=ow),Xm=i(e),d(_i.$$.fragment,e),Bm=i(e),Ii=p(e,"P",{}),uw(Ii).forEach(s),this.h()},h(){cw(y,"name","hf:doc:metadata"),cw(y,"content",Uw)},m(e,t){$w(document.head,y),l(e,T,t),l(e,M,t),l(e,$,t),m(U,e,t),l(e,xi,t),l(e,v,t),l(e,ki,t),l(e,_,t),l(e,Zi,t),l(e,I,t),l(e,Hi,t),m(x,e,t),l(e,Gi,t),l(e,k,t),l(e,Xi,t),m(Z,e,t),l(e,Bi,t),l(e,H,t),l(e,Vi,t),m(G,e,t),l(e,Ri,t),m(X,e,t),l(e,Ni,t),l(e,B,t),l(e,zi,t),l(e,V,t),l(e,Wi,t),l(e,R,t),l(e,Li,t),m(N,e,t),l(e,Si,t),l(e,z,t),l(e,Qi,t),m(W,e,t),l(e,Fi,t),l(e,L,t),l(e,Ei,t),m(S,e,t),l(e,Ai,t),l(e,Q,t),l(e,Pi,t),l(e,F,t),l(e,Yi,t),m(E,e,t),l(e,qi,t),l(e,A,t),l(e,Ki,t),m(P,e,t),l(e,Di,t),l(e,Y,t),l(e,Oi,t),m(q,e,t),l(e,ea,t),m(K,e,t),l(e,ta,t),l(e,D,t),l(e,sa,t),m(O,e,t),l(e,la,t),m(ee,e,t),l(e,na,t),l(e,te,t),l(e,ia,t),m(se,e,t),l(e,aa,t),l(e,le,t),l(e,pa,t),l(e,ne,t),l(e,oa,t),l(e,ie,t),l(e,ra,t),m(ae,e,t),l(e,da,t),l(e,pe,t),l(e,ma,t),l(e,oe,t),l(e,fa,t),m(re,e,t),l(e,ua,t),l(e,de,t),l(e,ca,t),l(e,me,t),l(e,wa,t),m(fe,e,t),l(e,ha,t),l(e,ue,t),l(e,ya,t),l(e,ce,t),l(e,Ma,t),m(we,e,t),l(e,Ta,t),l(e,he,t),l(e,$a,t),m(ye,e,t),l(e,ba,t),l(e,Me,t),l(e,Ja,t),m(Te,e,t),l(e,ga,t),l(e,$e,t),l(e,ja,t),l(e,be,t),l(e,Ca,t),m(Je,e,t),l(e,Ua,t),m(ge,e,t),l(e,va,t),l(e,je,t),l(e,_a,t),m(Ce,e,t),l(e,Ia,t),m(Ue,e,t),l(e,xa,t),l(e,ve,t),l(e,ka,t),m(_e,e,t),l(e,Za,t),l(e,Ie,t),l(e,Ha,t),m(xe,e,t),l(e,Ga,t),l(e,ke,t),l(e,Xa,t),m(Ze,e,t),l(e,Ba,t),l(e,He,t),l(e,Va,t),m(Ge,e,t),l(e,Ra,t),m(Xe,e,t),l(e,Na,t),l(e,Be,t),l(e,za,t),m(Ve,e,t),l(e,Wa,t),l(e,Re,t),l(e,La,t),m(Ne,e,t),l(e,Sa,t),l(e,ze,t),l(e,Qa,t),l(e,We,t),l(e,Fa,t),m(Le,e,t),l(e,Ea,t),l(e,Se,t),l(e,Aa,t),m(Qe,e,t),l(e,Pa,t),l(e,Fe,t),l(e,Ya,t),l(e,Ee,t),l(e,qa,t),m(Ae,e,t),l(e,Ka,t),l(e,Pe,t),l(e,Da,t),m(Ye,e,t),l(e,Oa,t),m(qe,e,t),l(e,ep,t),l(e,Ke,t),l(e,tp,t),m(De,e,t),l(e,sp,t),m(Oe,e,t),l(e,lp,t),l(e,et,t),l(e,np,t),l(e,tt,t),l(e,ip,t),l(e,st,t),l(e,ap,t),m(lt,e,t),l(e,pp,t),l(e,nt,t),l(e,op,t),m(it,e,t),l(e,rp,t),l(e,at,t),l(e,dp,t),m(pt,e,t),l(e,mp,t),l(e,ot,t),l(e,fp,t),m(rt,e,t),l(e,up,t),m(J,e,t),l(e,cp,t),m(g,e,t),l(e,wp,t),m(dt,e,t),l(e,hp,t),m(mt,e,t),l(e,yp,t),l(e,ft,t),l(e,Mp,t),l(e,ut,t),l(e,Tp,t),m(ct,e,t),l(e,$p,t),l(e,wt,t),l(e,bp,t),m(ht,e,t),l(e,Jp,t),l(e,yt,t),l(e,gp,t),m(Mt,e,t),l(e,jp,t),l(e,Tt,t),l(e,Cp,t),m($t,e,t),l(e,Up,t),l(e,bt,t),l(e,vp,t),l(e,Jt,t),l(e,_p,t),m(gt,e,t),l(e,Ip,t),m(jt,e,t),l(e,xp,t),l(e,Ct,t),l(e,kp,t),m(Ut,e,t),l(e,Zp,t),l(e,vt,t),l(e,Hp,t),m(_t,e,t),l(e,Gp,t),l(e,It,t),l(e,Xp,t),m(xt,e,t),l(e,Bp,t),l(e,kt,t),l(e,Vp,t),m(Zt,e,t),l(e,Rp,t),m(Ht,e,t),l(e,Np,t),l(e,Gt,t),l(e,zp,t),m(Xt,e,t),l(e,Wp,t),m(Bt,e,t),l(e,Lp,t),m(Vt,e,t),l(e,Sp,t),l(e,Rt,t),l(e,Qp,t),m(Nt,e,t),l(e,Fp,t),l(e,zt,t),l(e,Ep,t),m(Wt,e,t),l(e,Ap,t),l(e,Lt,t),l(e,Pp,t),l(e,St,t),l(e,Yp,t),l(e,Qt,t),l(e,qp,t),l(e,Ft,t),l(e,Kp,t),l(e,Et,t),l(e,Dp,t),l(e,At,t),l(e,Op,t),m(Pt,e,t),l(e,eo,t),l(e,Yt,t),l(e,to,t),m(qt,e,t),l(e,so,t),l(e,Kt,t),l(e,lo,t),m(Dt,e,t),l(e,no,t),l(e,Ot,t),l(e,io,t),m(es,e,t),l(e,ao,t),l(e,ts,t),l(e,po,t),l(e,ss,t),l(e,oo,t),l(e,ls,t),l(e,ro,t),m(ns,e,t),l(e,mo,t),m(is,e,t),l(e,fo,t),l(e,as,t),l(e,uo,t),m(ps,e,t),l(e,co,t),l(e,os,t),l(e,wo,t),l(e,rs,t),l(e,ho,t),m(ds,e,t),l(e,yo,t),l(e,ms,t),l(e,Mo,t),m(fs,e,t),l(e,To,t),l(e,us,t),l(e,$o,t),l(e,cs,t),l(e,bo,t),m(ws,e,t),l(e,Jo,t),l(e,hs,t),l(e,go,t),l(e,ys,t),l(e,jo,t),l(e,Ms,t),l(e,Co,t),l(e,Ts,t),l(e,Uo,t),l(e,$s,t),l(e,vo,t),m(bs,e,t),l(e,_o,t),m(Js,e,t),l(e,Io,t),l(e,gs,t),l(e,xo,t),l(e,js,t),l(e,ko,t),m(Cs,e,t),l(e,Zo,t),l(e,Us,t),l(e,Ho,t),m(vs,e,t),l(e,Go,t),m(_s,e,t),l(e,Xo,t),l(e,Is,t),l(e,Bo,t),m(xs,e,t),l(e,Vo,t),m(ks,e,t),l(e,Ro,t),l(e,Zs,t),l(e,No,t),m(Hs,e,t),l(e,zo,t),l(e,Gs,t),l(e,Wo,t),l(e,Xs,t),l(e,Lo,t),m(Bs,e,t),l(e,So,t),m(Vs,e,t),l(e,Qo,t),l(e,Rs,t),l(e,Fo,t),l(e,Ns,t),l(e,Eo,t),m(zs,e,t),l(e,Ao,t),l(e,Ws,t),l(e,Po,t),m(Ls,e,t),l(e,Yo,t),l(e,Ss,t),l(e,qo,t),l(e,Qs,t),l(e,Ko,t),m(Fs,e,t),l(e,Do,t),l(e,Es,t),l(e,Oo,t),m(As,e,t),l(e,er,t),l(e,Ps,t),l(e,tr,t),m(Ys,e,t),l(e,sr,t),l(e,qs,t),l(e,lr,t),m(Ks,e,t),l(e,nr,t),l(e,Ds,t),l(e,ir,t),m(Os,e,t),l(e,ar,t),l(e,el,t),l(e,pr,t),l(e,tl,t),l(e,or,t),l(e,sl,t),l(e,rr,t),m(ll,e,t),l(e,dr,t),l(e,nl,t),l(e,mr,t),m(il,e,t),l(e,fr,t),l(e,al,t),l(e,ur,t),m(pl,e,t),l(e,cr,t),l(e,ol,t),l(e,wr,t),m(rl,e,t),l(e,hr,t),l(e,dl,t),l(e,yr,t),m(ml,e,t),l(e,Mr,t),l(e,fl,t),l(e,Tr,t),l(e,ul,t),l(e,$r,t),l(e,cl,t),l(e,br,t),m(wl,e,t),l(e,Jr,t),l(e,hl,t),l(e,gr,t),m(yl,e,t),l(e,jr,t),m(Ml,e,t),l(e,Cr,t),l(e,Tl,t),l(e,Ur,t),l(e,$l,t),l(e,vr,t),l(e,bl,t),l(e,_r,t),l(e,Jl,t),l(e,Ir,t),m(gl,e,t),l(e,xr,t),l(e,jl,t),l(e,kr,t),l(e,Cl,t),l(e,Zr,t),m(Ul,e,t),l(e,Hr,t),l(e,vl,t),l(e,Gr,t),l(e,_l,t),l(e,Xr,t),m(Il,e,t),l(e,Br,t),l(e,xl,t),l(e,Vr,t),l(e,kl,t),l(e,Rr,t),m(j,e,t),l(e,Nr,t),m(C,e,t),l(e,zr,t),m(Zl,e,t),l(e,Wr,t),l(e,Hl,t),l(e,Lr,t),m(Gl,e,t),l(e,Sr,t),m(Xl,e,t),l(e,Qr,t),l(e,Bl,t),l(e,Fr,t),l(e,Vl,t),l(e,Er,t),l(e,Rl,t),l(e,Ar,t),l(e,Nl,t),l(e,Pr,t),m(zl,e,t),l(e,Yr,t),l(e,Wl,t),l(e,qr,t),m(Ll,e,t),l(e,Kr,t),l(e,Sl,t),l(e,Dr,t),m(Ql,e,t),l(e,Or,t),l(e,Fl,t),l(e,ed,t),m(El,e,t),l(e,td,t),l(e,Al,t),l(e,sd,t),m(Pl,e,t),l(e,ld,t),l(e,Yl,t),l(e,nd,t),m(ql,e,t),l(e,id,t),l(e,Kl,t),l(e,ad,t),m(Dl,e,t),l(e,pd,t),l(e,Ol,t),l(e,od,t),m(en,e,t),l(e,rd,t),l(e,tn,t),l(e,dd,t),m(sn,e,t),l(e,md,t),l(e,ln,t),l(e,fd,t),m(nn,e,t),l(e,ud,t),l(e,an,t),l(e,cd,t),m(pn,e,t),l(e,wd,t),l(e,on,t),l(e,hd,t),m(rn,e,t),l(e,yd,t),l(e,dn,t),l(e,Md,t),m(mn,e,t),l(e,Td,t),l(e,fn,t),l(e,$d,t),m(un,e,t),l(e,bd,t),l(e,cn,t),l(e,Jd,t),m(wn,e,t),l(e,gd,t),l(e,hn,t),l(e,jd,t),l(e,yn,t),l(e,Cd,t),l(e,Mn,t),l(e,Ud,t),l(e,Tn,t),l(e,vd,t),l(e,$n,t),l(e,_d,t),m(bn,e,t),l(e,Id,t),l(e,Jn,t),l(e,xd,t),l(e,gn,t),l(e,kd,t),l(e,jn,t),l(e,Zd,t),m(Cn,e,t),l(e,Hd,t),l(e,Un,t),l(e,Gd,t),m(vn,e,t),l(e,Xd,t),l(e,_n,t),l(e,Bd,t),m(In,e,t),l(e,Vd,t),l(e,xn,t),l(e,Rd,t),m(kn,e,t),l(e,Nd,t),l(e,Zn,t),l(e,zd,t),l(e,Hn,t),l(e,Wd,t),m(Gn,e,t),l(e,Ld,t),l(e,Xn,t),l(e,Sd,t),m(Bn,e,t),l(e,Qd,t),l(e,Vn,t),l(e,Fd,t),m(Rn,e,t),l(e,Ed,t),l(e,Nn,t),l(e,Ad,t),m(zn,e,t),l(e,Pd,t),l(e,Wn,t),l(e,Yd,t),m(Ln,e,t),l(e,qd,t),l(e,Sn,t),l(e,Kd,t),m(Qn,e,t),l(e,Dd,t),m(Fn,e,t),l(e,Od,t),l(e,En,t),l(e,em,t),m(An,e,t),l(e,tm,t),l(e,Pn,t),l(e,sm,t),m(Yn,e,t),l(e,lm,t),l(e,qn,t),l(e,nm,t),l(e,Kn,t),l(e,im,t),m(Dn,e,t),l(e,am,t),l(e,On,t),l(e,pm,t),m(ei,e,t),l(e,om,t),m(ti,e,t),l(e,rm,t),l(e,si,t),l(e,dm,t),m(li,e,t),l(e,mm,t),m(ni,e,t),l(e,fm,t),l(e,ii,t),l(e,um,t),l(e,ai,t),l(e,cm,t),m(pi,e,t),l(e,wm,t),l(e,oi,t),l(e,hm,t),l(e,ri,t),l(e,ym,t),l(e,di,t),l(e,Mm,t),l(e,mi,t),l(e,Tm,t),l(e,fi,t),l(e,$m,t),l(e,ui,t),l(e,bm,t),l(e,ci,t),l(e,Jm,t),l(e,wi,t),l(e,gm,t),m(hi,e,t),l(e,jm,t),l(e,yi,t),l(e,Cm,t),m(Mi,e,t),l(e,Um,t),l(e,Ti,t),l(e,vm,t),l(e,$i,t),l(e,_m,t),l(e,bi,t),l(e,Im,t),l(e,Ji,t),l(e,xm,t),m(gi,e,t),l(e,km,t),l(e,ji,t),l(e,Zm,t),l(e,Ci,t),l(e,Hm,t),m(Ui,e,t),l(e,Gm,t),l(e,vi,t),l(e,Xm,t),m(_i,e,t),l(e,Bm,t),l(e,Ii,t),Vm=!0},p(e,[t]){const rw={};t&2&&(rw.$$scope={dirty:t,ctx:e}),J.$set(rw);const dw={};t&2&&(dw.$$scope={dirty:t,ctx:e}),g.$set(dw);const mw={};t&2&&(mw.$$scope={dirty:t,ctx:e}),j.$set(mw);const fw={};t&2&&(fw.$$scope={dirty:t,ctx:e}),C.$set(fw)},i(e){Vm||(f(U.$$.fragment,e),f(x.$$.fragment,e),f(Z.$$.fragment,e),f(G.$$.fragment,e),f(X.$$.fragment,e),f(N.$$.fragment,e),f(W.$$.fragment,e),f(S.$$.fragment,e),f(E.$$.fragment,e),f(P.$$.fragment,e),f(q.$$.fragment,e),f(K.$$.fragment,e),f(O.$$.fragment,e),f(ee.$$.fragment,e),f(se.$$.fragment,e),f(ae.$$.fragment,e),f(re.$$.fragment,e),f(fe.$$.fragment,e),f(we.$$.fragment,e),f(ye.$$.fragment,e),f(Te.$$.fragment,e),f(Je.$$.fragment,e),f(ge.$$.fragment,e),f(Ce.$$.fragment,e),f(Ue.$$.fragment,e),f(_e.$$.fragment,e),f(xe.$$.fragment,e),f(Ze.$$.fragment,e),f(Ge.$$.fragment,e),f(Xe.$$.fragment,e),f(Ve.$$.fragment,e),f(Ne.$$.fragment,e),f(Le.$$.fragment,e),f(Qe.$$.fragment,e),f(Ae.$$.fragment,e),f(Ye.$$.fragment,e),f(qe.$$.fragment,e),f(De.$$.fragment,e),f(Oe.$$.fragment,e),f(lt.$$.fragment,e),f(it.$$.fragment,e),f(pt.$$.fragment,e),f(rt.$$.fragment,e),f(J.$$.fragment,e),f(g.$$.fragment,e),f(dt.$$.fragment,e),f(mt.$$.fragment,e),f(ct.$$.fragment,e),f(ht.$$.fragment,e),f(Mt.$$.fragment,e),f($t.$$.fragment,e),f(gt.$$.fragment,e),f(jt.$$.fragment,e),f(Ut.$$.fragment,e),f(_t.$$.fragment,e),f(xt.$$.fragment,e),f(Zt.$$.fragment,e),f(Ht.$$.fragment,e),f(Xt.$$.fragment,e),f(Bt.$$.fragment,e),f(Vt.$$.fragment,e),f(Nt.$$.fragment,e),f(Wt.$$.fragment,e),f(Pt.$$.fragment,e),f(qt.$$.fragment,e),f(Dt.$$.fragment,e),f(es.$$.fragment,e),f(ns.$$.fragment,e),f(is.$$.fragment,e),f(ps.$$.fragment,e),f(ds.$$.fragment,e),f(fs.$$.fragment,e),f(ws.$$.fragment,e),f(bs.$$.fragment,e),f(Js.$$.fragment,e),f(Cs.$$.fragment,e),f(vs.$$.fragment,e),f(_s.$$.fragment,e),f(xs.$$.fragment,e),f(ks.$$.fragment,e),f(Hs.$$.fragment,e),f(Bs.$$.fragment,e),f(Vs.$$.fragment,e),f(zs.$$.fragment,e),f(Ls.$$.fragment,e),f(Fs.$$.fragment,e),f(As.$$.fragment,e),f(Ys.$$.fragment,e),f(Ks.$$.fragment,e),f(Os.$$.fragment,e),f(ll.$$.fragment,e),f(il.$$.fragment,e),f(pl.$$.fragment,e),f(rl.$$.fragment,e),f(ml.$$.fragment,e),f(wl.$$.fragment,e),f(yl.$$.fragment,e),f(Ml.$$.fragment,e),f(gl.$$.fragment,e),f(Ul.$$.fragment,e),f(Il.$$.fragment,e),f(j.$$.fragment,e),f(C.$$.fragment,e),f(Zl.$$.fragment,e),f(Gl.$$.fragment,e),f(Xl.$$.fragment,e),f(zl.$$.fragment,e),f(Ll.$$.fragment,e),f(Ql.$$.fragment,e),f(El.$$.fragment,e),f(Pl.$$.fragment,e),f(ql.$$.fragment,e),f(Dl.$$.fragment,e),f(en.$$.fragment,e),f(sn.$$.fragment,e),f(nn.$$.fragment,e),f(pn.$$.fragment,e),f(rn.$$.fragment,e),f(mn.$$.fragment,e),f(un.$$.fragment,e),f(wn.$$.fragment,e),f(bn.$$.fragment,e),f(Cn.$$.fragment,e),f(vn.$$.fragment,e),f(In.$$.fragment,e),f(kn.$$.fragment,e),f(Gn.$$.fragment,e),f(Bn.$$.fragment,e),f(Rn.$$.fragment,e),f(zn.$$.fragment,e),f(Ln.$$.fragment,e),f(Qn.$$.fragment,e),f(Fn.$$.fragment,e),f(An.$$.fragment,e),f(Yn.$$.fragment,e),f(Dn.$$.fragment,e),f(ei.$$.fragment,e),f(ti.$$.fragment,e),f(li.$$.fragment,e),f(ni.$$.fragment,e),f(pi.$$.fragment,e),f(hi.$$.fragment,e),f(Mi.$$.fragment,e),f(gi.$$.fragment,e),f(Ui.$$.fragment,e),f(_i.$$.fragment,e),Vm=!0)},o(e){u(U.$$.fragment,e),u(x.$$.fragment,e),u(Z.$$.fragment,e),u(G.$$.fragment,e),u(X.$$.fragment,e),u(N.$$.fragment,e),u(W.$$.fragment,e),u(S.$$.fragment,e),u(E.$$.fragment,e),u(P.$$.fragment,e),u(q.$$.fragment,e),u(K.$$.fragment,e),u(O.$$.fragment,e),u(ee.$$.fragment,e),u(se.$$.fragment,e),u(ae.$$.fragment,e),u(re.$$.fragment,e),u(fe.$$.fragment,e),u(we.$$.fragment,e),u(ye.$$.fragment,e),u(Te.$$.fragment,e),u(Je.$$.fragment,e),u(ge.$$.fragment,e),u(Ce.$$.fragment,e),u(Ue.$$.fragment,e),u(_e.$$.fragment,e),u(xe.$$.fragment,e),u(Ze.$$.fragment,e),u(Ge.$$.fragment,e),u(Xe.$$.fragment,e),u(Ve.$$.fragment,e),u(Ne.$$.fragment,e),u(Le.$$.fragment,e),u(Qe.$$.fragment,e),u(Ae.$$.fragment,e),u(Ye.$$.fragment,e),u(qe.$$.fragment,e),u(De.$$.fragment,e),u(Oe.$$.fragment,e),u(lt.$$.fragment,e),u(it.$$.fragment,e),u(pt.$$.fragment,e),u(rt.$$.fragment,e),u(J.$$.fragment,e),u(g.$$.fragment,e),u(dt.$$.fragment,e),u(mt.$$.fragment,e),u(ct.$$.fragment,e),u(ht.$$.fragment,e),u(Mt.$$.fragment,e),u($t.$$.fragment,e),u(gt.$$.fragment,e),u(jt.$$.fragment,e),u(Ut.$$.fragment,e),u(_t.$$.fragment,e),u(xt.$$.fragment,e),u(Zt.$$.fragment,e),u(Ht.$$.fragment,e),u(Xt.$$.fragment,e),u(Bt.$$.fragment,e),u(Vt.$$.fragment,e),u(Nt.$$.fragment,e),u(Wt.$$.fragment,e),u(Pt.$$.fragment,e),u(qt.$$.fragment,e),u(Dt.$$.fragment,e),u(es.$$.fragment,e),u(ns.$$.fragment,e),u(is.$$.fragment,e),u(ps.$$.fragment,e),u(ds.$$.fragment,e),u(fs.$$.fragment,e),u(ws.$$.fragment,e),u(bs.$$.fragment,e),u(Js.$$.fragment,e),u(Cs.$$.fragment,e),u(vs.$$.fragment,e),u(_s.$$.fragment,e),u(xs.$$.fragment,e),u(ks.$$.fragment,e),u(Hs.$$.fragment,e),u(Bs.$$.fragment,e),u(Vs.$$.fragment,e),u(zs.$$.fragment,e),u(Ls.$$.fragment,e),u(Fs.$$.fragment,e),u(As.$$.fragment,e),u(Ys.$$.fragment,e),u(Ks.$$.fragment,e),u(Os.$$.fragment,e),u(ll.$$.fragment,e),u(il.$$.fragment,e),u(pl.$$.fragment,e),u(rl.$$.fragment,e),u(ml.$$.fragment,e),u(wl.$$.fragment,e),u(yl.$$.fragment,e),u(Ml.$$.fragment,e),u(gl.$$.fragment,e),u(Ul.$$.fragment,e),u(Il.$$.fragment,e),u(j.$$.fragment,e),u(C.$$.fragment,e),u(Zl.$$.fragment,e),u(Gl.$$.fragment,e),u(Xl.$$.fragment,e),u(zl.$$.fragment,e),u(Ll.$$.fragment,e),u(Ql.$$.fragment,e),u(El.$$.fragment,e),u(Pl.$$.fragment,e),u(ql.$$.fragment,e),u(Dl.$$.fragment,e),u(en.$$.fragment,e),u(sn.$$.fragment,e),u(nn.$$.fragment,e),u(pn.$$.fragment,e),u(rn.$$.fragment,e),u(mn.$$.fragment,e),u(un.$$.fragment,e),u(wn.$$.fragment,e),u(bn.$$.fragment,e),u(Cn.$$.fragment,e),u(vn.$$.fragment,e),u(In.$$.fragment,e),u(kn.$$.fragment,e),u(Gn.$$.fragment,e),u(Bn.$$.fragment,e),u(Rn.$$.fragment,e),u(zn.$$.fragment,e),u(Ln.$$.fragment,e),u(Qn.$$.fragment,e),u(Fn.$$.fragment,e),u(An.$$.fragment,e),u(Yn.$$.fragment,e),u(Dn.$$.fragment,e),u(ei.$$.fragment,e),u(ti.$$.fragment,e),u(li.$$.fragment,e),u(ni.$$.fragment,e),u(pi.$$.fragment,e),u(hi.$$.fragment,e),u(Mi.$$.fragment,e),u(gi.$$.fragment,e),u(Ui.$$.fragment,e),u(_i.$$.fragment,e),Vm=!1},d(e){e&&(s(T),s(M),s($),s(xi),s(v),s(ki),s(_),s(Zi),s(I),s(Hi),s(Gi),s(k),s(Xi),s(Bi),s(H),s(Vi),s(Ri),s(Ni),s(B),s(zi),s(V),s(Wi),s(R),s(Li),s(Si),s(z),s(Qi),s(Fi),s(L),s(Ei),s(Ai),s(Q),s(Pi),s(F),s(Yi),s(qi),s(A),s(Ki),s(Di),s(Y),s(Oi),s(ea),s(ta),s(D),s(sa),s(la),s(na),s(te),s(ia),s(aa),s(le),s(pa),s(ne),s(oa),s(ie),s(ra),s(da),s(pe),s(ma),s(oe),s(fa),s(ua),s(de),s(ca),s(me),s(wa),s(ha),s(ue),s(ya),s(ce),s(Ma),s(Ta),s(he),s($a),s(ba),s(Me),s(Ja),s(ga),s($e),s(ja),s(be),s(Ca),s(Ua),s(va),s(je),s(_a),s(Ia),s(xa),s(ve),s(ka),s(Za),s(Ie),s(Ha),s(Ga),s(ke),s(Xa),s(Ba),s(He),s(Va),s(Ra),s(Na),s(Be),s(za),s(Wa),s(Re),s(La),s(Sa),s(ze),s(Qa),s(We),s(Fa),s(Ea),s(Se),s(Aa),s(Pa),s(Fe),s(Ya),s(Ee),s(qa),s(Ka),s(Pe),s(Da),s(Oa),s(ep),s(Ke),s(tp),s(sp),s(lp),s(et),s(np),s(tt),s(ip),s(st),s(ap),s(pp),s(nt),s(op),s(rp),s(at),s(dp),s(mp),s(ot),s(fp),s(up),s(cp),s(wp),s(hp),s(yp),s(ft),s(Mp),s(ut),s(Tp),s($p),s(wt),s(bp),s(Jp),s(yt),s(gp),s(jp),s(Tt),s(Cp),s(Up),s(bt),s(vp),s(Jt),s(_p),s(Ip),s(xp),s(Ct),s(kp),s(Zp),s(vt),s(Hp),s(Gp),s(It),s(Xp),s(Bp),s(kt),s(Vp),s(Rp),s(Np),s(Gt),s(zp),s(Wp),s(Lp),s(Sp),s(Rt),s(Qp),s(Fp),s(zt),s(Ep),s(Ap),s(Lt),s(Pp),s(St),s(Yp),s(Qt),s(qp),s(Ft),s(Kp),s(Et),s(Dp),s(At),s(Op),s(eo),s(Yt),s(to),s(so),s(Kt),s(lo),s(no),s(Ot),s(io),s(ao),s(ts),s(po),s(ss),s(oo),s(ls),s(ro),s(mo),s(fo),s(as),s(uo),s(co),s(os),s(wo),s(rs),s(ho),s(yo),s(ms),s(Mo),s(To),s(us),s($o),s(cs),s(bo),s(Jo),s(hs),s(go),s(ys),s(jo),s(Ms),s(Co),s(Ts),s(Uo),s($s),s(vo),s(_o),s(Io),s(gs),s(xo),s(js),s(ko),s(Zo),s(Us),s(Ho),s(Go),s(Xo),s(Is),s(Bo),s(Vo),s(Ro),s(Zs),s(No),s(zo),s(Gs),s(Wo),s(Xs),s(Lo),s(So),s(Qo),s(Rs),s(Fo),s(Ns),s(Eo),s(Ao),s(Ws),s(Po),s(Yo),s(Ss),s(qo),s(Qs),s(Ko),s(Do),s(Es),s(Oo),s(er),s(Ps),s(tr),s(sr),s(qs),s(lr),s(nr),s(Ds),s(ir),s(ar),s(el),s(pr),s(tl),s(or),s(sl),s(rr),s(dr),s(nl),s(mr),s(fr),s(al),s(ur),s(cr),s(ol),s(wr),s(hr),s(dl),s(yr),s(Mr),s(fl),s(Tr),s(ul),s($r),s(cl),s(br),s(Jr),s(hl),s(gr),s(jr),s(Cr),s(Tl),s(Ur),s($l),s(vr),s(bl),s(_r),s(Jl),s(Ir),s(xr),s(jl),s(kr),s(Cl),s(Zr),s(Hr),s(vl),s(Gr),s(_l),s(Xr),s(Br),s(xl),s(Vr),s(kl),s(Rr),s(Nr),s(zr),s(Wr),s(Hl),s(Lr),s(Sr),s(Qr),s(Bl),s(Fr),s(Vl),s(Er),s(Rl),s(Ar),s(Nl),s(Pr),s(Yr),s(Wl),s(qr),s(Kr),s(Sl),s(Dr),s(Or),s(Fl),s(ed),s(td),s(Al),s(sd),s(ld),s(Yl),s(nd),s(id),s(Kl),s(ad),s(pd),s(Ol),s(od),s(rd),s(tn),s(dd),s(md),s(ln),s(fd),s(ud),s(an),s(cd),s(wd),s(on),s(hd),s(yd),s(dn),s(Md),s(Td),s(fn),s($d),s(bd),s(cn),s(Jd),s(gd),s(hn),s(jd),s(yn),s(Cd),s(Mn),s(Ud),s(Tn),s(vd),s($n),s(_d),s(Id),s(Jn),s(xd),s(gn),s(kd),s(jn),s(Zd),s(Hd),s(Un),s(Gd),s(Xd),s(_n),s(Bd),s(Vd),s(xn),s(Rd),s(Nd),s(Zn),s(zd),s(Hn),s(Wd),s(Ld),s(Xn),s(Sd),s(Qd),s(Vn),s(Fd),s(Ed),s(Nn),s(Ad),s(Pd),s(Wn),s(Yd),s(qd),s(Sn),s(Kd),s(Dd),s(Od),s(En),s(em),s(tm),s(Pn),s(sm),s(lm),s(qn),s(nm),s(Kn),s(im),s(am),s(On),s(pm),s(om),s(rm),s(si),s(dm),s(mm),s(fm),s(ii),s(um),s(ai),s(cm),s(wm),s(oi),s(hm),s(ri),s(ym),s(di),s(Mm),s(mi),s(Tm),s(fi),s($m),s(ui),s(bm),s(ci),s(Jm),s(wi),s(gm),s(jm),s(yi),s(Cm),s(Um),s(Ti),s(vm),s($i),s(_m),s(bi),s(Im),s(Ji),s(xm),s(km),s(ji),s(Zm),s(Ci),s(Hm),s(Gm),s(vi),s(Xm),s(Bm),s(Ii)),s(y),c(U,e),c(x,e),c(Z,e),c(G,e),c(X,e),c(N,e),c(W,e),c(S,e),c(E,e),c(P,e),c(q,e),c(K,e),c(O,e),c(ee,e),c(se,e),c(ae,e),c(re,e),c(fe,e),c(we,e),c(ye,e),c(Te,e),c(Je,e),c(ge,e),c(Ce,e),c(Ue,e),c(_e,e),c(xe,e),c(Ze,e),c(Ge,e),c(Xe,e),c(Ve,e),c(Ne,e),c(Le,e),c(Qe,e),c(Ae,e),c(Ye,e),c(qe,e),c(De,e),c(Oe,e),c(lt,e),c(it,e),c(pt,e),c(rt,e),c(J,e),c(g,e),c(dt,e),c(mt,e),c(ct,e),c(ht,e),c(Mt,e),c($t,e),c(gt,e),c(jt,e),c(Ut,e),c(_t,e),c(xt,e),c(Zt,e),c(Ht,e),c(Xt,e),c(Bt,e),c(Vt,e),c(Nt,e),c(Wt,e),c(Pt,e),c(qt,e),c(Dt,e),c(es,e),c(ns,e),c(is,e),c(ps,e),c(ds,e),c(fs,e),c(ws,e),c(bs,e),c(Js,e),c(Cs,e),c(vs,e),c(_s,e),c(xs,e),c(ks,e),c(Hs,e),c(Bs,e),c(Vs,e),c(zs,e),c(Ls,e),c(Fs,e),c(As,e),c(Ys,e),c(Ks,e),c(Os,e),c(ll,e),c(il,e),c(pl,e),c(rl,e),c(ml,e),c(wl,e),c(yl,e),c(Ml,e),c(gl,e),c(Ul,e),c(Il,e),c(j,e),c(C,e),c(Zl,e),c(Gl,e),c(Xl,e),c(zl,e),c(Ll,e),c(Ql,e),c(El,e),c(Pl,e),c(ql,e),c(Dl,e),c(en,e),c(sn,e),c(nn,e),c(pn,e),c(rn,e),c(mn,e),c(un,e),c(wn,e),c(bn,e),c(Cn,e),c(vn,e),c(In,e),c(kn,e),c(Gn,e),c(Bn,e),c(Rn,e),c(zn,e),c(Ln,e),c(Qn,e),c(Fn,e),c(An,e),c(Yn,e),c(Dn,e),c(ei,e),c(ti,e),c(li,e),c(ni,e),c(pi,e),c(hi,e),c(Mi,e),c(gi,e),c(Ui,e),c(_i,e)}}}const Uw='{"title":"Testing","local":"testing","sections":[{"title":"How transformers are tested","local":"how-transformers-are-tested","sections":[],"depth":2},{"title":"Running tests","local":"running-tests","sections":[{"title":"Choosing which tests to run","local":"choosing-which-tests-to-run","sections":[],"depth":3},{"title":"Getting the list of all tests","local":"getting-the-list-of-all-tests","sections":[],"depth":3},{"title":"Run a specific test module","local":"run-a-specific-test-module","sections":[],"depth":3},{"title":"Run specific tests","local":"run-specific-tests","sections":[],"depth":3},{"title":"Run accelerate tests","local":"run-accelerate-tests","sections":[],"depth":3},{"title":"Run documentation tests","local":"run-documentation-tests","sections":[],"depth":3},{"title":"Run only modified tests","local":"run-only-modified-tests","sections":[],"depth":3},{"title":"Automatically rerun failed tests on source modification","local":"automatically-rerun-failed-tests-on-source-modification","sections":[],"depth":3},{"title":"Skip a test module","local":"skip-a-test-module","sections":[],"depth":3},{"title":"Clearing state","local":"clearing-state","sections":[],"depth":3},{"title":"Running tests in parallel","local":"running-tests-in-parallel","sections":[],"depth":3},{"title":"Test order and repetition","local":"test-order-and-repetition","sections":[{"title":"Repeat tests","local":"repeat-tests","sections":[],"depth":4},{"title":"Run tests in a random order","local":"run-tests-in-a-random-order","sections":[],"depth":4}],"depth":3},{"title":"Look and feel variations","local":"look-and-feel-variations","sections":[{"title":"pytest-sugar","local":"pytest-sugar","sections":[],"depth":4},{"title":"Report each sub-test name and its progress","local":"report-each-sub-test-name-and-its-progress","sections":[],"depth":4},{"title":"Instantly shows failed tests","local":"instantly-shows-failed-tests","sections":[],"depth":4}],"depth":3},{"title":"To GPU or not to GPU","local":"to-gpu-or-not-to-gpu","sections":[],"depth":3},{"title":"Testing with a specific PyTorch backend or device","local":"testing-with-a-specific-pytorch-backend-or-device","sections":[],"depth":3},{"title":"Distributed training","local":"distributed-training","sections":[],"depth":3},{"title":"Output capture","local":"output-capture","sections":[],"depth":3},{"title":"Color control","local":"color-control","sections":[],"depth":3},{"title":"Sending test report to online pastebin service","local":"sending-test-report-to-online-pastebin-service","sections":[],"depth":3}],"depth":2},{"title":"Writing tests","local":"writing-tests","sections":[{"title":"Parametrization","local":"parametrization","sections":[],"depth":3},{"title":"Files and directories","local":"files-and-directories","sections":[],"depth":3},{"title":"Temporary files and directories","local":"temporary-files-and-directories","sections":[],"depth":3},{"title":"Temporary sys.path override","local":"temporary-syspath-override","sections":[],"depth":3},{"title":"Skipping tests","local":"skipping-tests","sections":[{"title":"Implementation","local":"implementation","sections":[],"depth":4}],"depth":3},{"title":"Slow tests","local":"slow-tests","sections":[],"depth":3},{"title":"Testing the stdout/stderr output","local":"testing-the-stdoutstderr-output","sections":[],"depth":3},{"title":"Capturing logger stream","local":"capturing-logger-stream","sections":[],"depth":3},{"title":"Testing with environment variables","local":"testing-with-environment-variables","sections":[],"depth":3},{"title":"Getting reproducible results","local":"getting-reproducible-results","sections":[],"depth":3},{"title":"Debugging tests","local":"debugging-tests","sections":[],"depth":3}],"depth":2},{"title":"Working with github actions workflows","local":"working-with-github-actions-workflows","sections":[],"depth":2},{"title":"Testing Experimental CI Features","local":"testing-experimental-ci-features","sections":[],"depth":2},{"title":"DeepSpeed integration","local":"deepspeed-integration","sections":[],"depth":2}],"depth":1}';function vw(b){return hw(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Hw extends yw{constructor(y){super(),Mw(this,y,vw,Cw,ww,{})}}export{Hw as component};
