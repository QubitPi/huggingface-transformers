import{s as vn,f as _n,o as bn,n as S}from"../chunks/scheduler.9bc65507.js";import{S as yn,i as Mn,g as c,s as l,r as _,A as Cn,h as m,f as o,c as i,j as Q,u as b,x as h,k as J,y as f,a,v as y,d as M,t as C,w as x}from"../chunks/index.707bf1b6.js";import{T as Se}from"../chunks/Tip.c2ecdbf4.js";import{D as ee}from"../chunks/Docstring.17db21ae.js";import{C as Oe}from"../chunks/CodeBlock.54a9f38d.js";import{E as De}from"../chunks/ExampleCodeBlock.4f515aa9.js";import{P as xn}from"../chunks/PipelineTag.44585822.js";import{H as fe}from"../chunks/Heading.342b1fa6.js";function Tn(T){let t,v="Example:",d,r,g;return r=new Oe({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMENvbnZOZVhUVjJDb25maWclMkMlMjBDb252TmV4dFYyTW9kZWwlMEElMEElMjMlMjBJbml0aWFsaXppbmclMjBhJTIwQ29udk5lWFRWMiUyMGNvbnZuZXh0djItdGlueS0xay0yMjQlMjBzdHlsZSUyMGNvbmZpZ3VyYXRpb24lMEFjb25maWd1cmF0aW9uJTIwJTNEJTIwQ29udk5lWFRWMkNvbmZpZygpJTBBJTBBJTIzJTIwSW5pdGlhbGl6aW5nJTIwYSUyMG1vZGVsJTIwKHdpdGglMjByYW5kb20lMjB3ZWlnaHRzKSUyMGZyb20lMjB0aGUlMjBjb252bmV4dHYyLXRpbnktMWstMjI0JTIwc3R5bGUlMjBjb25maWd1cmF0aW9uJTBBbW9kZWwlMjAlM0QlMjBDb252TmV4dFYyTW9kZWwoY29uZmlndXJhdGlvbiklMEElMEElMjMlMjBBY2Nlc3NpbmclMjB0aGUlMjBtb2RlbCUyMGNvbmZpZ3VyYXRpb24lMEFjb25maWd1cmF0aW9uJTIwJTNEJTIwbW9kZWwuY29uZmln",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNeXTV2Config, ConvNextV2Model

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a ConvNeXTV2 convnextv2-tiny-1k-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = ConvNeXTV2Config()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model (with random weights) from the convnextv2-tiny-1k-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextV2Model(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`,wrap:!1}}),{c(){t=c("p"),t.textContent=v,d=l(),_(r.$$.fragment)},l(n){t=m(n,"P",{"data-svelte-h":!0}),h(t)!=="svelte-11lpom8"&&(t.textContent=v),d=i(n),b(r.$$.fragment,n)},m(n,u){a(n,t,u),a(n,d,u),y(r,n,u),g=!0},p:S,i(n){g||(M(r.$$.fragment,n),g=!0)},o(n){C(r.$$.fragment,n),g=!1},d(n){n&&(o(t),o(d)),x(r,n)}}}function wn(T){let t,v=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){t=c("p"),t.innerHTML=v},l(d){t=m(d,"P",{"data-svelte-h":!0}),h(t)!=="svelte-fincs2"&&(t.innerHTML=v)},m(d,r){a(d,t,r)},p:S,d(d){d&&o(t)}}}function $n(T){let t,v="Example:",d,r,g;return r=new Oe({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9JbWFnZVByb2Nlc3NvciUyQyUyMENvbnZOZXh0VjJNb2RlbCUwQWltcG9ydCUyMHRvcmNoJTBBZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBJTBBZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJodWdnaW5nZmFjZSUyRmNhdHMtaW1hZ2UlMjIpJTBBaW1hZ2UlMjAlM0QlMjBkYXRhc2V0JTVCJTIydGVzdCUyMiU1RCU1QiUyMmltYWdlJTIyJTVEJTVCMCU1RCUwQSUwQWltYWdlX3Byb2Nlc3NvciUyMCUzRCUyMEF1dG9JbWFnZVByb2Nlc3Nvci5mcm9tX3ByZXRyYWluZWQoJTIyZmFjZWJvb2slMkZjb252bmV4dHYyLXRpbnktMWstMjI0JTIyKSUwQW1vZGVsJTIwJTNEJTIwQ29udk5leHRWMk1vZGVsLmZyb21fcHJldHJhaW5lZCglMjJmYWNlYm9vayUyRmNvbnZuZXh0djItdGlueS0xay0yMjQlMjIpJTBBJTBBaW5wdXRzJTIwJTNEJTIwaW1hZ2VfcHJvY2Vzc29yKGltYWdlJTJDJTIwcmV0dXJuX3RlbnNvcnMlM0QlMjJwdCUyMiklMEElMEF3aXRoJTIwdG9yY2gubm9fZ3JhZCgpJTNBJTBBJTIwJTIwJTIwJTIwb3V0cHV0cyUyMCUzRCUyMG1vZGVsKCoqaW5wdXRzKSUwQSUwQWxhc3RfaGlkZGVuX3N0YXRlcyUyMCUzRCUyMG91dHB1dHMubGFzdF9oaWRkZW5fc3RhdGUlMEFsaXN0KGxhc3RfaGlkZGVuX3N0YXRlcy5zaGFwZSk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoImageProcessor, ConvNextV2Model
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>image_processor = AutoImageProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/convnextv2-tiny-1k-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextV2Model.from_pretrained(<span class="hljs-string">&quot;facebook/convnextv2-tiny-1k-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = image_processor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">768</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>]`,wrap:!1}}),{c(){t=c("p"),t.textContent=v,d=l(),_(r.$$.fragment)},l(n){t=m(n,"P",{"data-svelte-h":!0}),h(t)!=="svelte-11lpom8"&&(t.textContent=v),d=i(n),b(r.$$.fragment,n)},m(n,u){a(n,t,u),a(n,d,u),y(r,n,u),g=!0},p:S,i(n){g||(M(r.$$.fragment,n),g=!0)},o(n){C(r.$$.fragment,n),g=!1},d(n){n&&(o(t),o(d)),x(r,n)}}}function Nn(T){let t,v=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){t=c("p"),t.innerHTML=v},l(d){t=m(d,"P",{"data-svelte-h":!0}),h(t)!=="svelte-fincs2"&&(t.innerHTML=v)},m(d,r){a(d,t,r)},p:S,d(d){d&&o(t)}}}function jn(T){let t,v="Example:",d,r,g;return r=new Oe({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9JbWFnZVByb2Nlc3NvciUyQyUyMENvbnZOZXh0VjJGb3JJbWFnZUNsYXNzaWZpY2F0aW9uJTBBaW1wb3J0JTIwdG9yY2glMEFmcm9tJTIwZGF0YXNldHMlMjBpbXBvcnQlMjBsb2FkX2RhdGFzZXQlMEElMEFkYXRhc2V0JTIwJTNEJTIwbG9hZF9kYXRhc2V0KCUyMmh1Z2dpbmdmYWNlJTJGY2F0cy1pbWFnZSUyMiklMEFpbWFnZSUyMCUzRCUyMGRhdGFzZXQlNUIlMjJ0ZXN0JTIyJTVEJTVCJTIyaW1hZ2UlMjIlNUQlNUIwJTVEJTBBJTBBaW1hZ2VfcHJvY2Vzc29yJTIwJTNEJTIwQXV0b0ltYWdlUHJvY2Vzc29yLmZyb21fcHJldHJhaW5lZCglMjJmYWNlYm9vayUyRmNvbnZuZXh0djItdGlueS0xay0yMjQlMjIpJTBBbW9kZWwlMjAlM0QlMjBDb252TmV4dFYyRm9ySW1hZ2VDbGFzc2lmaWNhdGlvbi5mcm9tX3ByZXRyYWluZWQoJTIyZmFjZWJvb2slMkZjb252bmV4dHYyLXRpbnktMWstMjI0JTIyKSUwQSUwQWlucHV0cyUyMCUzRCUyMGltYWdlX3Byb2Nlc3NvcihpbWFnZSUyQyUyMHJldHVybl90ZW5zb3JzJTNEJTIycHQlMjIpJTBBJTBBd2l0aCUyMHRvcmNoLm5vX2dyYWQoKSUzQSUwQSUyMCUyMCUyMCUyMGxvZ2l0cyUyMCUzRCUyMG1vZGVsKCoqaW5wdXRzKS5sb2dpdHMlMEElMEElMjMlMjBtb2RlbCUyMHByZWRpY3RzJTIwb25lJTIwb2YlMjB0aGUlMjAxMDAwJTIwSW1hZ2VOZXQlMjBjbGFzc2VzJTBBcHJlZGljdGVkX2xhYmVsJTIwJTNEJTIwbG9naXRzLmFyZ21heCgtMSkuaXRlbSgpJTBBcHJpbnQobW9kZWwuY29uZmlnLmlkMmxhYmVsJTVCcHJlZGljdGVkX2xhYmVsJTVEKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoImageProcessor, ConvNextV2ForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>image_processor = AutoImageProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/convnextv2-tiny-1k-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextV2ForImageClassification.from_pretrained(<span class="hljs-string">&quot;facebook/convnextv2-tiny-1k-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = image_processor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`,wrap:!1}}),{c(){t=c("p"),t.textContent=v,d=l(),_(r.$$.fragment)},l(n){t=m(n,"P",{"data-svelte-h":!0}),h(t)!=="svelte-11lpom8"&&(t.textContent=v),d=i(n),b(r.$$.fragment,n)},m(n,u){a(n,t,u),a(n,d,u),y(r,n,u),g=!0},p:S,i(n){g||(M(r.$$.fragment,n),g=!0)},o(n){C(r.$$.fragment,n),g=!1},d(n){n&&(o(t),o(d)),x(r,n)}}}function Vn(T){let t,v="TensorFlow models and layers in <code>transformers</code> accept two formats as input:",d,r,g="<li>having all inputs as keyword arguments (like PyTorch models), or</li> <li>having all inputs as a list, tuple or dict in the first positional argument.</li>",n,u,A=`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like <code>model.fit()</code> things should “just work” for you - just
pass your inputs and labels in any format that <code>model.fit()</code> supports! If, however, you want to use the second
format outside of Keras methods like <code>fit()</code> and <code>predict()</code>, such as when creating your own layers or models with
the Keras <code>Functional</code> API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`,j,$,D=`<li>a single Tensor with <code>pixel_values</code> only and nothing else: <code>model(pixel_values)</code></li> <li>a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
<code>model([pixel_values, attention_mask])</code> or <code>model([pixel_values, attention_mask, token_type_ids])</code></li> <li>a dictionary with one or several input Tensors associated to the input names given in the docstring:
<code>model({&quot;pixel_values&quot;: pixel_values, &quot;token_type_ids&quot;: token_type_ids})</code></li>`,V,N,O=`Note that when creating models and layers with
<a href="https://keras.io/guides/making_new_layers_and_models_via_subclassing/" rel="nofollow">subclassing</a> then you don’t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`;return{c(){t=c("p"),t.innerHTML=v,d=l(),r=c("ul"),r.innerHTML=g,n=l(),u=c("p"),u.innerHTML=A,j=l(),$=c("ul"),$.innerHTML=D,V=l(),N=c("p"),N.innerHTML=O},l(p){t=m(p,"P",{"data-svelte-h":!0}),h(t)!=="svelte-1ajbfxg"&&(t.innerHTML=v),d=i(p),r=m(p,"UL",{"data-svelte-h":!0}),h(r)!=="svelte-qm1t26"&&(r.innerHTML=g),n=i(p),u=m(p,"P",{"data-svelte-h":!0}),h(u)!=="svelte-1v9qsc5"&&(u.innerHTML=A),j=i(p),$=m(p,"UL",{"data-svelte-h":!0}),h($)!=="svelte-99h8aq"&&($.innerHTML=D),V=i(p),N=m(p,"P",{"data-svelte-h":!0}),h(N)!=="svelte-1an3odd"&&(N.innerHTML=O)},m(p,w){a(p,t,w),a(p,d,w),a(p,r,w),a(p,n,w),a(p,u,w),a(p,j,w),a(p,$,w),a(p,V,w),a(p,N,w)},p:S,d(p){p&&(o(t),o(d),o(r),o(n),o(u),o(j),o($),o(V),o(N))}}}function Fn(T){let t,v=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){t=c("p"),t.innerHTML=v},l(d){t=m(d,"P",{"data-svelte-h":!0}),h(t)!=="svelte-fincs2"&&(t.innerHTML=v)},m(d,r){a(d,t,r)},p:S,d(d){d&&o(t)}}}function In(T){let t,v="Example:",d,r,g;return r=new Oe({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9JbWFnZVByb2Nlc3NvciUyQyUyMFRGQ29udk5leHRWMk1vZGVsJTBBZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBJTBBZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJodWdnaW5nZmFjZSUyRmNhdHMtaW1hZ2UlMjIpJTBBaW1hZ2UlMjAlM0QlMjBkYXRhc2V0JTVCJTIydGVzdCUyMiU1RCU1QiUyMmltYWdlJTIyJTVEJTVCMCU1RCUwQSUwQWltYWdlX3Byb2Nlc3NvciUyMCUzRCUyMEF1dG9JbWFnZVByb2Nlc3Nvci5mcm9tX3ByZXRyYWluZWQoJTIyZmFjZWJvb2slMkZjb252bmV4dHYyLXRpbnktMWstMjI0JTIyKSUwQW1vZGVsJTIwJTNEJTIwVEZDb252TmV4dFYyTW9kZWwuZnJvbV9wcmV0cmFpbmVkKCUyMmZhY2Vib29rJTJGY29udm5leHR2Mi10aW55LTFrLTIyNCUyMiklMEElMEFpbnB1dHMlMjAlM0QlMjBpbWFnZV9wcm9jZXNzb3IoaW1hZ2UlMkMlMjByZXR1cm5fdGVuc29ycyUzRCUyMnRmJTIyKSUwQW91dHB1dHMlMjAlM0QlMjBtb2RlbCgqKmlucHV0cyklMEElMEFsYXN0X2hpZGRlbl9zdGF0ZXMlMjAlM0QlMjBvdXRwdXRzLmxhc3RfaGlkZGVuX3N0YXRlJTBBbGlzdChsYXN0X2hpZGRlbl9zdGF0ZXMuc2hhcGUp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoImageProcessor, TFConvNextV2Model
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>image_processor = AutoImageProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/convnextv2-tiny-1k-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFConvNextV2Model.from_pretrained(<span class="hljs-string">&quot;facebook/convnextv2-tiny-1k-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = image_processor(image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">768</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>]`,wrap:!1}}),{c(){t=c("p"),t.textContent=v,d=l(),_(r.$$.fragment)},l(n){t=m(n,"P",{"data-svelte-h":!0}),h(t)!=="svelte-11lpom8"&&(t.textContent=v),d=i(n),b(r.$$.fragment,n)},m(n,u){a(n,t,u),a(n,d,u),y(r,n,u),g=!0},p:S,i(n){g||(M(r.$$.fragment,n),g=!0)},o(n){C(r.$$.fragment,n),g=!1},d(n){n&&(o(t),o(d)),x(r,n)}}}function kn(T){let t,v="TensorFlow models and layers in <code>transformers</code> accept two formats as input:",d,r,g="<li>having all inputs as keyword arguments (like PyTorch models), or</li> <li>having all inputs as a list, tuple or dict in the first positional argument.</li>",n,u,A=`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like <code>model.fit()</code> things should “just work” for you - just
pass your inputs and labels in any format that <code>model.fit()</code> supports! If, however, you want to use the second
format outside of Keras methods like <code>fit()</code> and <code>predict()</code>, such as when creating your own layers or models with
the Keras <code>Functional</code> API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`,j,$,D=`<li>a single Tensor with <code>pixel_values</code> only and nothing else: <code>model(pixel_values)</code></li> <li>a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
<code>model([pixel_values, attention_mask])</code> or <code>model([pixel_values, attention_mask, token_type_ids])</code></li> <li>a dictionary with one or several input Tensors associated to the input names given in the docstring:
<code>model({&quot;pixel_values&quot;: pixel_values, &quot;token_type_ids&quot;: token_type_ids})</code></li>`,V,N,O=`Note that when creating models and layers with
<a href="https://keras.io/guides/making_new_layers_and_models_via_subclassing/" rel="nofollow">subclassing</a> then you don’t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`;return{c(){t=c("p"),t.innerHTML=v,d=l(),r=c("ul"),r.innerHTML=g,n=l(),u=c("p"),u.innerHTML=A,j=l(),$=c("ul"),$.innerHTML=D,V=l(),N=c("p"),N.innerHTML=O},l(p){t=m(p,"P",{"data-svelte-h":!0}),h(t)!=="svelte-1ajbfxg"&&(t.innerHTML=v),d=i(p),r=m(p,"UL",{"data-svelte-h":!0}),h(r)!=="svelte-qm1t26"&&(r.innerHTML=g),n=i(p),u=m(p,"P",{"data-svelte-h":!0}),h(u)!=="svelte-1v9qsc5"&&(u.innerHTML=A),j=i(p),$=m(p,"UL",{"data-svelte-h":!0}),h($)!=="svelte-99h8aq"&&($.innerHTML=D),V=i(p),N=m(p,"P",{"data-svelte-h":!0}),h(N)!=="svelte-1an3odd"&&(N.innerHTML=O)},m(p,w){a(p,t,w),a(p,d,w),a(p,r,w),a(p,n,w),a(p,u,w),a(p,j,w),a(p,$,w),a(p,V,w),a(p,N,w)},p:S,d(p){p&&(o(t),o(d),o(r),o(n),o(u),o(j),o($),o(V),o(N))}}}function Jn(T){let t,v=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){t=c("p"),t.innerHTML=v},l(d){t=m(d,"P",{"data-svelte-h":!0}),h(t)!=="svelte-fincs2"&&(t.innerHTML=v)},m(d,r){a(d,t,r)},p:S,d(d){d&&o(t)}}}function Zn(T){let t,v="Example:",d,r,g;return r=new Oe({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9JbWFnZVByb2Nlc3NvciUyQyUyMFRGQ29udk5leHRWMkZvckltYWdlQ2xhc3NpZmljYXRpb24lMEFpbXBvcnQlMjB0ZW5zb3JmbG93JTIwYXMlMjB0ZiUwQWZyb20lMjBkYXRhc2V0cyUyMGltcG9ydCUyMGxvYWRfZGF0YXNldCUwQSUwQWRhdGFzZXQlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyaHVnZ2luZ2ZhY2UlMkZjYXRzLWltYWdlJTIyKSUwQWltYWdlJTIwJTNEJTIwZGF0YXNldCU1QiUyMnRlc3QlMjIlNUQlNUIlMjJpbWFnZSUyMiU1RCU1QjAlNUQlMEElMEFpbWFnZV9wcm9jZXNzb3IlMjAlM0QlMjBBdXRvSW1hZ2VQcm9jZXNzb3IuZnJvbV9wcmV0cmFpbmVkKCUyMmZhY2Vib29rJTJGY29udm5leHR2Mi10aW55LTFrLTIyNCUyMiklMEFtb2RlbCUyMCUzRCUyMFRGQ29udk5leHRWMkZvckltYWdlQ2xhc3NpZmljYXRpb24uZnJvbV9wcmV0cmFpbmVkKCUyMmZhY2Vib29rJTJGY29udm5leHR2Mi10aW55LTFrLTIyNCUyMiklMEElMEFpbnB1dHMlMjAlM0QlMjBpbWFnZV9wcm9jZXNzb3IoaW1hZ2UlMkMlMjByZXR1cm5fdGVuc29ycyUzRCUyMnRmJTIyKSUwQWxvZ2l0cyUyMCUzRCUyMG1vZGVsKCoqaW5wdXRzKS5sb2dpdHMlMEElMEElMjMlMjBtb2RlbCUyMHByZWRpY3RzJTIwb25lJTIwb2YlMjB0aGUlMjAxMDAwJTIwSW1hZ2VOZXQlMjBjbGFzc2VzJTBBcHJlZGljdGVkX2xhYmVsJTIwJTNEJTIwaW50KHRmLm1hdGguYXJnbWF4KGxvZ2l0cyUyQyUyMGF4aXMlM0QtMSkpJTBBcHJpbnQobW9kZWwuY29uZmlnLmlkMmxhYmVsJTVCcHJlZGljdGVkX2xhYmVsJTVEKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoImageProcessor, TFConvNextV2ForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>image_processor = AutoImageProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/convnextv2-tiny-1k-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFConvNextV2ForImageClassification.from_pretrained(<span class="hljs-string">&quot;facebook/convnextv2-tiny-1k-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = image_processor(image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = <span class="hljs-built_in">int</span>(tf.math.argmax(logits, axis=-<span class="hljs-number">1</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`,wrap:!1}}),{c(){t=c("p"),t.textContent=v,d=l(),_(r.$$.fragment)},l(n){t=m(n,"P",{"data-svelte-h":!0}),h(t)!=="svelte-11lpom8"&&(t.textContent=v),d=i(n),b(r.$$.fragment,n)},m(n,u){a(n,t,u),a(n,d,u),y(r,n,u),g=!0},p:S,i(n){g||(M(r.$$.fragment,n),g=!0)},o(n){C(r.$$.fragment,n),g=!1},d(n){n&&(o(t),o(d)),x(r,n)}}}function Wn(T){let t,v,d,r,g,n,u,A,j,$=`The ConvNeXt V2 model was proposed in <a href="https://arxiv.org/abs/2301.00808" rel="nofollow">ConvNeXt V2: Co-designing and Scaling ConvNets with Masked Autoencoders</a> by Sanghyun Woo, Shoubhik Debnath, Ronghang Hu, Xinlei Chen, Zhuang Liu, In So Kweon, Saining Xie.
ConvNeXt V2 is a pure convolutional model (ConvNet), inspired by the design of Vision Transformers, and a successor of <a href="convnext">ConvNeXT</a>.`,D,V,N="The abstract from the paper is the following:",O,p,w="<em>Driven by improved architectures and better representation learning frameworks, the field of visual recognition has enjoyed rapid modernization and performance boost in the early 2020s. For example, modern ConvNets, represented by ConvNeXt, have demonstrated strong performance in various scenarios. While these models were originally designed for supervised learning with ImageNet labels, they can also potentially benefit from self-supervised learning techniques such as masked  autoencoders (MAE). However, we found that simply combining these two approaches leads to subpar performance. In this paper, we propose a fully convolutional masked autoencoder framework and a new Global Response Normalization (GRN) layer that can be added to the ConvNeXt architecture to enhance inter-channel feature competition. This co-design of self-supervised learning techniques and architectural improvement results in a new model family called ConvNeXt V2, which significantly improves the performance of pure ConvNets on various recognition benchmarks, including ImageNet classification, COCO detection, and ADE20K segmentation. We also provide pre-trained ConvNeXt V2 models of various sizes, ranging from an efficient 3.7M-parameter Atto model with 76.7% top-1 accuracy on ImageNet, to a 650M Huge model that achieves a state-of-the-art 88.9% accuracy using only public training data.</em>",Ke,te,Qt,et,ue,St='ConvNeXt V2 architecture. Taken from the <a href="https://arxiv.org/abs/2301.00808">original paper</a>.',tt,he,At='This model was contributed by <a href="https://huggingface.co/adirik" rel="nofollow">adirik</a>. The original code can be found <a href="https://github.com/facebookresearch/ConvNeXt-V2" rel="nofollow">here</a>.',nt,ge,ot,ve,Dt="A list of official Hugging Face and community (indicated by 🌎) resources to help you get started with ConvNeXt V2.",st,_e,at,be,Ot='<li><a href="/docs/transformers/main/en/model_doc/convnextv2#transformers.ConvNextV2ForImageClassification">ConvNextV2ForImageClassification</a> is supported by this <a href="https://github.com/huggingface/transformers/tree/main/examples/pytorch/image-classification" rel="nofollow">example script</a> and <a href="https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/image_classification.ipynb" rel="nofollow">notebook</a>.</li>',rt,ye,Kt="If you’re interested in submitting a resource to be included here, please feel free to open a Pull Request and we’ll review it! The resource should ideally demonstrate something new instead of duplicating an existing resource.",lt,Me,it,Z,Ce,bt,We,en=`This is the configuration class to store the configuration of a <a href="/docs/transformers/main/en/model_doc/convnextv2#transformers.ConvNextV2Model">ConvNextV2Model</a>. It is used to instantiate an
ConvNeXTV2 model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the ConvNeXTV2
<a href="https://huggingface.co/facebook/convnextv2-tiny-1k-224" rel="nofollow">facebook/convnextv2-tiny-1k-224</a> architecture.`,yt,Ue,tn=`Configuration objects inherit from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> and can be used to control the model outputs. Read the
documentation from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> for more information.`,Mt,ne,dt,xe,ct,B,Te,Ct,He,nn=`The bare ConvNextV2 model outputting raw features without any specific head on top.
This model is a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`,xt,H,we,Tt,Ge,on='The <a href="/docs/transformers/main/en/model_doc/convnextv2#transformers.ConvNextV2Model">ConvNextV2Model</a> forward method, overrides the <code>__call__</code> special method.',wt,oe,$t,se,mt,$e,pt,W,Ne,Nt,Re,sn=`ConvNextV2 Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`,jt,Le,an=`This model is a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`,Vt,G,je,Ft,Be,rn='The <a href="/docs/transformers/main/en/model_doc/convnextv2#transformers.ConvNextV2ForImageClassification">ConvNextV2ForImageClassification</a> forward method, overrides the <code>__call__</code> special method.',It,ae,kt,re,ft,Ve,ut,I,Fe,Jt,ze,ln=`The bare ConvNextV2 model outputting raw features without any specific head on top.
This model inherits from <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`,Zt,Xe,dn=`This model is also a <a href="https://www.tensorflow.org/api_docs/python/tf/keras/Model" rel="nofollow">keras.Model</a> subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`,Wt,le,Ut,R,Ie,Ht,Pe,cn='The <a href="/docs/transformers/main/en/model_doc/convnextv2#transformers.TFConvNextV2Model">TFConvNextV2Model</a> forward method, overrides the <code>__call__</code> special method.',Gt,ie,Rt,de,ht,ke,gt,F,Je,Lt,Ee,mn=`ConvNextV2 Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`,Bt,qe,pn=`This model inherits from <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`,zt,Ye,fn=`This model is also a <a href="https://www.tensorflow.org/api_docs/python/tf/keras/Model" rel="nofollow">keras.Model</a> subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`,Xt,ce,Pt,L,Ze,Et,Qe,un='The <a href="/docs/transformers/main/en/model_doc/convnextv2#transformers.TFConvNextV2ForImageClassification">TFConvNextV2ForImageClassification</a> forward method, overrides the <code>__call__</code> special method.',qt,me,Yt,pe,vt,Ae,_t;return g=new fe({props:{title:"ConvNeXt V2",local:"convnext-v2",headingTag:"h1"}}),u=new fe({props:{title:"Overview",local:"overview",headingTag:"h2"}}),ge=new fe({props:{title:"Resources",local:"resources",headingTag:"h2"}}),_e=new xn({props:{pipeline:"image-classification"}}),Me=new fe({props:{title:"ConvNextV2Config",local:"transformers.ConvNextV2Config",headingTag:"h2"}}),Ce=new ee({props:{name:"class transformers.ConvNextV2Config",anchor:"transformers.ConvNextV2Config",parameters:[{name:"num_channels",val:" = 3"},{name:"patch_size",val:" = 4"},{name:"num_stages",val:" = 4"},{name:"hidden_sizes",val:" = None"},{name:"depths",val:" = None"},{name:"hidden_act",val:" = 'gelu'"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-12"},{name:"drop_path_rate",val:" = 0.0"},{name:"image_size",val:" = 224"},{name:"out_features",val:" = None"},{name:"out_indices",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ConvNextV2Config.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.ConvNextV2Config.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, optional, defaults to 4) &#x2014;
Patch size to use in the patch embedding layer.`,name:"patch_size"},{anchor:"transformers.ConvNextV2Config.num_stages",description:`<strong>num_stages</strong> (<code>int</code>, optional, defaults to 4) &#x2014;
The number of stages in the model.`,name:"num_stages"},{anchor:"transformers.ConvNextV2Config.hidden_sizes",description:`<strong>hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[96, 192, 384, 768]</code>) &#x2014;
Dimensionality (hidden size) at each stage.`,name:"hidden_sizes"},{anchor:"transformers.ConvNextV2Config.depths",description:`<strong>depths</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[3, 3, 9, 3]</code>) &#x2014;
Depth (number of blocks) for each stage.`,name:"depths"},{anchor:"transformers.ConvNextV2Config.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in each block. If string, <code>&quot;gelu&quot;</code>, <code>&quot;relu&quot;</code>,
<code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.ConvNextV2Config.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.ConvNextV2Config.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.ConvNextV2Config.drop_path_rate",description:`<strong>drop_path_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The drop rate for stochastic depth.`,name:"drop_path_rate"},{anchor:"transformers.ConvNextV2Config.out_features",description:`<strong>out_features</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
If used as backbone, list of features to output. Can be any of <code>&quot;stem&quot;</code>, <code>&quot;stage1&quot;</code>, <code>&quot;stage2&quot;</code>, etc.
(depending on how many stages the model has). If unset and <code>out_indices</code> is set, will default to the
corresponding stages. If unset and <code>out_indices</code> is unset, will default to the last stage. Must be in the
same order as defined in the <code>stage_names</code> attribute.`,name:"out_features"},{anchor:"transformers.ConvNextV2Config.out_indices",description:`<strong>out_indices</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
If used as backbone, list of indices of features to output. Can be any of 0, 1, 2, etc. (depending on how
many stages the model has). If unset and <code>out_features</code> is set, will default to the corresponding stages.
If unset and <code>out_features</code> is unset, will default to the last stage. Must be in the
same order as defined in the <code>stage_names</code> attribute.`,name:"out_indices"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/convnextv2/configuration_convnextv2.py#L30"}}),ne=new De({props:{anchor:"transformers.ConvNextV2Config.example",$$slots:{default:[Tn]},$$scope:{ctx:T}}}),xe=new fe({props:{title:"ConvNextV2Model",local:"transformers.ConvNextV2Model",headingTag:"h2"}}),Te=new ee({props:{name:"class transformers.ConvNextV2Model",anchor:"transformers.ConvNextV2Model",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.ConvNextV2Model.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/convnextv2#transformers.ConvNextV2Config">ConvNextV2Config</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/convnextv2/modeling_convnextv2.py#L344"}}),we=new ee({props:{name:"forward",anchor:"transformers.ConvNextV2Model.forward",parameters:[{name:"pixel_values",val:": FloatTensor = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.ConvNextV2Model.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor">ConvNextImageProcessor</a>. See
<a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor.__call__">ConvNextImageProcessor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.ConvNextV2Model.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ConvNextV2Model.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/convnextv2/modeling_convnextv2.py#L363",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/convnextv2#transformers.ConvNextV2Config"
>ConvNextV2Config</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) — Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) — Last layer hidden-state after a pooling operation on the spatial dimensions.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, num_channels, height, width)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),oe=new Se({props:{$$slots:{default:[wn]},$$scope:{ctx:T}}}),se=new De({props:{anchor:"transformers.ConvNextV2Model.forward.example",$$slots:{default:[$n]},$$scope:{ctx:T}}}),$e=new fe({props:{title:"ConvNextV2ForImageClassification",local:"transformers.ConvNextV2ForImageClassification",headingTag:"h2"}}),Ne=new ee({props:{name:"class transformers.ConvNextV2ForImageClassification",anchor:"transformers.ConvNextV2ForImageClassification",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.ConvNextV2ForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/convnextv2#transformers.ConvNextV2Config">ConvNextV2Config</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/convnextv2/modeling_convnextv2.py#L408"}}),je=new ee({props:{name:"forward",anchor:"transformers.ConvNextV2ForImageClassification.forward",parameters:[{name:"pixel_values",val:": FloatTensor = None"},{name:"labels",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.ConvNextV2ForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor">ConvNextImageProcessor</a>. See
<a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor.__call__">ConvNextImageProcessor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.ConvNextV2ForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ConvNextV2ForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.ConvNextV2ForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/convnextv2/modeling_convnextv2.py#L431",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/convnextv2#transformers.ConvNextV2Config"
>ConvNextV2Config</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) — Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) — Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also
called feature maps) of the model at the output of each stage.</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),ae=new Se({props:{$$slots:{default:[Nn]},$$scope:{ctx:T}}}),re=new De({props:{anchor:"transformers.ConvNextV2ForImageClassification.forward.example",$$slots:{default:[jn]},$$scope:{ctx:T}}}),Ve=new fe({props:{title:"TFConvNextV2Model",local:"transformers.TFConvNextV2Model",headingTag:"h2"}}),Fe=new ee({props:{name:"class transformers.TFConvNextV2Model",anchor:"transformers.TFConvNextV2Model",parameters:[{name:"config",val:": ConvNextV2Config"},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFConvNextV2Model.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/convnextv2#transformers.ConvNextV2Config">ConvNextV2Config</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/convnextv2/modeling_tf_convnextv2.py#L545"}}),le=new Se({props:{$$slots:{default:[Vn]},$$scope:{ctx:T}}}),Ie=new ee({props:{name:"call",anchor:"transformers.TFConvNextV2Model.call",parameters:[{name:"pixel_values",val:": TFModelInputType | None = None"},{name:"output_hidden_states",val:": Optional[bool] = None"},{name:"return_dict",val:": Optional[bool] = None"},{name:"training",val:": bool = False"}],parametersDescription:[{anchor:"transformers.TFConvNextV2Model.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code>, <code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoImageProcessor">AutoImageProcessor</a>. See
<a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor.__call__">ConvNextImageProcessor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.TFConvNextV2Model.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFConvNextV2Model.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to <code>True</code>.`,name:"return_dict"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/convnextv2/modeling_tf_convnextv2.py#L554",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <code>transformers.modeling_tf_outputs.TFBaseModelOutputWithPoolingAndNoAttention</code> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/convnextv2#transformers.ConvNextV2Config"
>ConvNextV2Config</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) — Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, hidden_size)</code>) — Last layer hidden-state after a pooling operation on the spatial dimensions.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) — Tuple of <code>tf.Tensor</code> (one for the output of the embeddings, if the model has an embedding layer, + one for
the output of each layer) of shape <code>(batch_size, num_channels, height, width)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>transformers.modeling_tf_outputs.TFBaseModelOutputWithPoolingAndNoAttention</code> or <code>tuple(tf.Tensor)</code></p>
`}}),ie=new Se({props:{$$slots:{default:[Fn]},$$scope:{ctx:T}}}),de=new De({props:{anchor:"transformers.TFConvNextV2Model.call.example",$$slots:{default:[In]},$$scope:{ctx:T}}}),ke=new fe({props:{title:"TFConvNextV2ForImageClassification",local:"transformers.TFConvNextV2ForImageClassification",headingTag:"h2"}}),Je=new ee({props:{name:"class transformers.TFConvNextV2ForImageClassification",anchor:"transformers.TFConvNextV2ForImageClassification",parameters:[{name:"config",val:": ConvNextV2Config"},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFConvNextV2ForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/convnextv2#transformers.ConvNextV2Config">ConvNextV2Config</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/convnextv2/modeling_tf_convnextv2.py#L603"}}),ce=new Se({props:{$$slots:{default:[kn]},$$scope:{ctx:T}}}),Ze=new ee({props:{name:"call",anchor:"transformers.TFConvNextV2ForImageClassification.call",parameters:[{name:"pixel_values",val:": TFModelInputType | None = None"},{name:"output_hidden_states",val:": Optional[bool] = None"},{name:"return_dict",val:": Optional[bool] = None"},{name:"labels",val:": np.ndarray | tf.Tensor | None = None"},{name:"training",val:": Optional[bool] = False"}],parametersDescription:[{anchor:"transformers.TFConvNextV2ForImageClassification.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code>, <code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoImageProcessor">AutoImageProcessor</a>. See
<a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor.__call__">ConvNextImageProcessor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.TFConvNextV2ForImageClassification.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFConvNextV2ForImageClassification.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to <code>True</code>.`,name:"return_dict"},{anchor:"transformers.TFConvNextV2ForImageClassification.call.labels",description:`<strong>labels</strong> (<code>tf.Tensor</code> or <code>np.ndarray</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/convnextv2/modeling_tf_convnextv2.py#L625",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <code>transformers.modeling_tf_outputs.TFImageClassifierOutputWithNoAttention</code> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/convnextv2#transformers.ConvNextV2Config"
>ConvNextV2Config</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) — Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels)</code>) — Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) — Tuple of <code>tf.Tensor</code> (one for the output of the embeddings, if the model has an embedding layer, + one for
the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called
feature maps) of the model at the output of each stage.</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>transformers.modeling_tf_outputs.TFImageClassifierOutputWithNoAttention</code> or <code>tuple(tf.Tensor)</code></p>
`}}),me=new Se({props:{$$slots:{default:[Jn]},$$scope:{ctx:T}}}),pe=new De({props:{anchor:"transformers.TFConvNextV2ForImageClassification.call.example",$$slots:{default:[Zn]},$$scope:{ctx:T}}}),{c(){t=c("meta"),v=l(),d=c("p"),r=l(),_(g.$$.fragment),n=l(),_(u.$$.fragment),A=l(),j=c("p"),j.innerHTML=$,D=l(),V=c("p"),V.textContent=N,O=l(),p=c("p"),p.innerHTML=w,Ke=l(),te=c("img"),et=l(),ue=c("small"),ue.innerHTML=St,tt=l(),he=c("p"),he.innerHTML=At,nt=l(),_(ge.$$.fragment),ot=l(),ve=c("p"),ve.textContent=Dt,st=l(),_(_e.$$.fragment),at=l(),be=c("ul"),be.innerHTML=Ot,rt=l(),ye=c("p"),ye.textContent=Kt,lt=l(),_(Me.$$.fragment),it=l(),Z=c("div"),_(Ce.$$.fragment),bt=l(),We=c("p"),We.innerHTML=en,yt=l(),Ue=c("p"),Ue.innerHTML=tn,Mt=l(),_(ne.$$.fragment),dt=l(),_(xe.$$.fragment),ct=l(),B=c("div"),_(Te.$$.fragment),Ct=l(),He=c("p"),He.innerHTML=nn,xt=l(),H=c("div"),_(we.$$.fragment),Tt=l(),Ge=c("p"),Ge.innerHTML=on,wt=l(),_(oe.$$.fragment),$t=l(),_(se.$$.fragment),mt=l(),_($e.$$.fragment),pt=l(),W=c("div"),_(Ne.$$.fragment),Nt=l(),Re=c("p"),Re.textContent=sn,jt=l(),Le=c("p"),Le.innerHTML=an,Vt=l(),G=c("div"),_(je.$$.fragment),Ft=l(),Be=c("p"),Be.innerHTML=rn,It=l(),_(ae.$$.fragment),kt=l(),_(re.$$.fragment),ft=l(),_(Ve.$$.fragment),ut=l(),I=c("div"),_(Fe.$$.fragment),Jt=l(),ze=c("p"),ze.innerHTML=ln,Zt=l(),Xe=c("p"),Xe.innerHTML=dn,Wt=l(),_(le.$$.fragment),Ut=l(),R=c("div"),_(Ie.$$.fragment),Ht=l(),Pe=c("p"),Pe.innerHTML=cn,Gt=l(),_(ie.$$.fragment),Rt=l(),_(de.$$.fragment),ht=l(),_(ke.$$.fragment),gt=l(),F=c("div"),_(Je.$$.fragment),Lt=l(),Ee=c("p"),Ee.textContent=mn,Bt=l(),qe=c("p"),qe.innerHTML=pn,zt=l(),Ye=c("p"),Ye.innerHTML=fn,Xt=l(),_(ce.$$.fragment),Pt=l(),L=c("div"),_(Ze.$$.fragment),Et=l(),Qe=c("p"),Qe.innerHTML=un,qt=l(),_(me.$$.fragment),Yt=l(),_(pe.$$.fragment),vt=l(),Ae=c("p"),this.h()},l(e){const s=Cn("svelte-u9bgzb",document.head);t=m(s,"META",{name:!0,content:!0}),s.forEach(o),v=i(e),d=m(e,"P",{}),Q(d).forEach(o),r=i(e),b(g.$$.fragment,e),n=i(e),b(u.$$.fragment,e),A=i(e),j=m(e,"P",{"data-svelte-h":!0}),h(j)!=="svelte-wq6ps0"&&(j.innerHTML=$),D=i(e),V=m(e,"P",{"data-svelte-h":!0}),h(V)!=="svelte-vfdo9a"&&(V.textContent=N),O=i(e),p=m(e,"P",{"data-svelte-h":!0}),h(p)!=="svelte-9q4js6"&&(p.innerHTML=w),Ke=i(e),te=m(e,"IMG",{src:!0,alt:!0,width:!0}),et=i(e),ue=m(e,"SMALL",{"data-svelte-h":!0}),h(ue)!=="svelte-10q852d"&&(ue.innerHTML=St),tt=i(e),he=m(e,"P",{"data-svelte-h":!0}),h(he)!=="svelte-kiq3o2"&&(he.innerHTML=At),nt=i(e),b(ge.$$.fragment,e),ot=i(e),ve=m(e,"P",{"data-svelte-h":!0}),h(ve)!=="svelte-16akdts"&&(ve.textContent=Dt),st=i(e),b(_e.$$.fragment,e),at=i(e),be=m(e,"UL",{"data-svelte-h":!0}),h(be)!=="svelte-15g5zdk"&&(be.innerHTML=Ot),rt=i(e),ye=m(e,"P",{"data-svelte-h":!0}),h(ye)!=="svelte-1xesile"&&(ye.textContent=Kt),lt=i(e),b(Me.$$.fragment,e),it=i(e),Z=m(e,"DIV",{class:!0});var z=Q(Z);b(Ce.$$.fragment,z),bt=i(z),We=m(z,"P",{"data-svelte-h":!0}),h(We)!=="svelte-1f50dy8"&&(We.innerHTML=en),yt=i(z),Ue=m(z,"P",{"data-svelte-h":!0}),h(Ue)!=="svelte-o55m63"&&(Ue.innerHTML=tn),Mt=i(z),b(ne.$$.fragment,z),z.forEach(o),dt=i(e),b(xe.$$.fragment,e),ct=i(e),B=m(e,"DIV",{class:!0});var K=Q(B);b(Te.$$.fragment,K),Ct=i(K),He=m(K,"P",{"data-svelte-h":!0}),h(He)!=="svelte-vxpmpx"&&(He.innerHTML=nn),xt=i(K),H=m(K,"DIV",{class:!0});var X=Q(H);b(we.$$.fragment,X),Tt=i(X),Ge=m(X,"P",{"data-svelte-h":!0}),h(Ge)!=="svelte-3v038a"&&(Ge.innerHTML=on),wt=i(X),b(oe.$$.fragment,X),$t=i(X),b(se.$$.fragment,X),X.forEach(o),K.forEach(o),mt=i(e),b($e.$$.fragment,e),pt=i(e),W=m(e,"DIV",{class:!0});var P=Q(W);b(Ne.$$.fragment,P),Nt=i(P),Re=m(P,"P",{"data-svelte-h":!0}),h(Re)!=="svelte-14zttn9"&&(Re.textContent=sn),jt=i(P),Le=m(P,"P",{"data-svelte-h":!0}),h(Le)!=="svelte-1gjh92c"&&(Le.innerHTML=an),Vt=i(P),G=m(P,"DIV",{class:!0});var E=Q(G);b(je.$$.fragment,E),Ft=i(E),Be=m(E,"P",{"data-svelte-h":!0}),h(Be)!=="svelte-t1fmv8"&&(Be.innerHTML=rn),It=i(E),b(ae.$$.fragment,E),kt=i(E),b(re.$$.fragment,E),E.forEach(o),P.forEach(o),ft=i(e),b(Ve.$$.fragment,e),ut=i(e),I=m(e,"DIV",{class:!0});var U=Q(I);b(Fe.$$.fragment,U),Jt=i(U),ze=m(U,"P",{"data-svelte-h":!0}),h(ze)!=="svelte-tyiuhp"&&(ze.innerHTML=ln),Zt=i(U),Xe=m(U,"P",{"data-svelte-h":!0}),h(Xe)!=="svelte-1be7e3c"&&(Xe.innerHTML=dn),Wt=i(U),b(le.$$.fragment,U),Ut=i(U),R=m(U,"DIV",{class:!0});var q=Q(R);b(Ie.$$.fragment,q),Ht=i(q),Pe=m(q,"P",{"data-svelte-h":!0}),h(Pe)!=="svelte-i24bsq"&&(Pe.innerHTML=cn),Gt=i(q),b(ie.$$.fragment,q),Rt=i(q),b(de.$$.fragment,q),q.forEach(o),U.forEach(o),ht=i(e),b(ke.$$.fragment,e),gt=i(e),F=m(e,"DIV",{class:!0});var k=Q(F);b(Je.$$.fragment,k),Lt=i(k),Ee=m(k,"P",{"data-svelte-h":!0}),h(Ee)!=="svelte-14zttn9"&&(Ee.textContent=mn),Bt=i(k),qe=m(k,"P",{"data-svelte-h":!0}),h(qe)!=="svelte-1qaxm70"&&(qe.innerHTML=pn),zt=i(k),Ye=m(k,"P",{"data-svelte-h":!0}),h(Ye)!=="svelte-1be7e3c"&&(Ye.innerHTML=fn),Xt=i(k),b(ce.$$.fragment,k),Pt=i(k),L=m(k,"DIV",{class:!0});var Y=Q(L);b(Ze.$$.fragment,Y),Et=i(Y),Qe=m(Y,"P",{"data-svelte-h":!0}),h(Qe)!=="svelte-11p7mq0"&&(Qe.innerHTML=un),qt=i(Y),b(me.$$.fragment,Y),Yt=i(Y),b(pe.$$.fragment,Y),Y.forEach(o),k.forEach(o),vt=i(e),Ae=m(e,"P",{}),Q(Ae).forEach(o),this.h()},h(){J(t,"name","hf:doc:metadata"),J(t,"content",Un),_n(te.src,Qt="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/convnextv2_architecture.png")||J(te,"src",Qt),J(te,"alt","drawing"),J(te,"width","600"),J(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),J(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),J(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),J(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),J(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),J(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),J(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),J(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),J(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,s){f(document.head,t),a(e,v,s),a(e,d,s),a(e,r,s),y(g,e,s),a(e,n,s),y(u,e,s),a(e,A,s),a(e,j,s),a(e,D,s),a(e,V,s),a(e,O,s),a(e,p,s),a(e,Ke,s),a(e,te,s),a(e,et,s),a(e,ue,s),a(e,tt,s),a(e,he,s),a(e,nt,s),y(ge,e,s),a(e,ot,s),a(e,ve,s),a(e,st,s),y(_e,e,s),a(e,at,s),a(e,be,s),a(e,rt,s),a(e,ye,s),a(e,lt,s),y(Me,e,s),a(e,it,s),a(e,Z,s),y(Ce,Z,null),f(Z,bt),f(Z,We),f(Z,yt),f(Z,Ue),f(Z,Mt),y(ne,Z,null),a(e,dt,s),y(xe,e,s),a(e,ct,s),a(e,B,s),y(Te,B,null),f(B,Ct),f(B,He),f(B,xt),f(B,H),y(we,H,null),f(H,Tt),f(H,Ge),f(H,wt),y(oe,H,null),f(H,$t),y(se,H,null),a(e,mt,s),y($e,e,s),a(e,pt,s),a(e,W,s),y(Ne,W,null),f(W,Nt),f(W,Re),f(W,jt),f(W,Le),f(W,Vt),f(W,G),y(je,G,null),f(G,Ft),f(G,Be),f(G,It),y(ae,G,null),f(G,kt),y(re,G,null),a(e,ft,s),y(Ve,e,s),a(e,ut,s),a(e,I,s),y(Fe,I,null),f(I,Jt),f(I,ze),f(I,Zt),f(I,Xe),f(I,Wt),y(le,I,null),f(I,Ut),f(I,R),y(Ie,R,null),f(R,Ht),f(R,Pe),f(R,Gt),y(ie,R,null),f(R,Rt),y(de,R,null),a(e,ht,s),y(ke,e,s),a(e,gt,s),a(e,F,s),y(Je,F,null),f(F,Lt),f(F,Ee),f(F,Bt),f(F,qe),f(F,zt),f(F,Ye),f(F,Xt),y(ce,F,null),f(F,Pt),f(F,L),y(Ze,L,null),f(L,Et),f(L,Qe),f(L,qt),y(me,L,null),f(L,Yt),y(pe,L,null),a(e,vt,s),a(e,Ae,s),_t=!0},p(e,[s]){const z={};s&2&&(z.$$scope={dirty:s,ctx:e}),ne.$set(z);const K={};s&2&&(K.$$scope={dirty:s,ctx:e}),oe.$set(K);const X={};s&2&&(X.$$scope={dirty:s,ctx:e}),se.$set(X);const P={};s&2&&(P.$$scope={dirty:s,ctx:e}),ae.$set(P);const E={};s&2&&(E.$$scope={dirty:s,ctx:e}),re.$set(E);const U={};s&2&&(U.$$scope={dirty:s,ctx:e}),le.$set(U);const q={};s&2&&(q.$$scope={dirty:s,ctx:e}),ie.$set(q);const k={};s&2&&(k.$$scope={dirty:s,ctx:e}),de.$set(k);const Y={};s&2&&(Y.$$scope={dirty:s,ctx:e}),ce.$set(Y);const hn={};s&2&&(hn.$$scope={dirty:s,ctx:e}),me.$set(hn);const gn={};s&2&&(gn.$$scope={dirty:s,ctx:e}),pe.$set(gn)},i(e){_t||(M(g.$$.fragment,e),M(u.$$.fragment,e),M(ge.$$.fragment,e),M(_e.$$.fragment,e),M(Me.$$.fragment,e),M(Ce.$$.fragment,e),M(ne.$$.fragment,e),M(xe.$$.fragment,e),M(Te.$$.fragment,e),M(we.$$.fragment,e),M(oe.$$.fragment,e),M(se.$$.fragment,e),M($e.$$.fragment,e),M(Ne.$$.fragment,e),M(je.$$.fragment,e),M(ae.$$.fragment,e),M(re.$$.fragment,e),M(Ve.$$.fragment,e),M(Fe.$$.fragment,e),M(le.$$.fragment,e),M(Ie.$$.fragment,e),M(ie.$$.fragment,e),M(de.$$.fragment,e),M(ke.$$.fragment,e),M(Je.$$.fragment,e),M(ce.$$.fragment,e),M(Ze.$$.fragment,e),M(me.$$.fragment,e),M(pe.$$.fragment,e),_t=!0)},o(e){C(g.$$.fragment,e),C(u.$$.fragment,e),C(ge.$$.fragment,e),C(_e.$$.fragment,e),C(Me.$$.fragment,e),C(Ce.$$.fragment,e),C(ne.$$.fragment,e),C(xe.$$.fragment,e),C(Te.$$.fragment,e),C(we.$$.fragment,e),C(oe.$$.fragment,e),C(se.$$.fragment,e),C($e.$$.fragment,e),C(Ne.$$.fragment,e),C(je.$$.fragment,e),C(ae.$$.fragment,e),C(re.$$.fragment,e),C(Ve.$$.fragment,e),C(Fe.$$.fragment,e),C(le.$$.fragment,e),C(Ie.$$.fragment,e),C(ie.$$.fragment,e),C(de.$$.fragment,e),C(ke.$$.fragment,e),C(Je.$$.fragment,e),C(ce.$$.fragment,e),C(Ze.$$.fragment,e),C(me.$$.fragment,e),C(pe.$$.fragment,e),_t=!1},d(e){e&&(o(v),o(d),o(r),o(n),o(A),o(j),o(D),o(V),o(O),o(p),o(Ke),o(te),o(et),o(ue),o(tt),o(he),o(nt),o(ot),o(ve),o(st),o(at),o(be),o(rt),o(ye),o(lt),o(it),o(Z),o(dt),o(ct),o(B),o(mt),o(pt),o(W),o(ft),o(ut),o(I),o(ht),o(gt),o(F),o(vt),o(Ae)),o(t),x(g,e),x(u,e),x(ge,e),x(_e,e),x(Me,e),x(Ce),x(ne),x(xe,e),x(Te),x(we),x(oe),x(se),x($e,e),x(Ne),x(je),x(ae),x(re),x(Ve,e),x(Fe),x(le),x(Ie),x(ie),x(de),x(ke,e),x(Je),x(ce),x(Ze),x(me),x(pe)}}}const Un='{"title":"ConvNeXt V2","local":"convnext-v2","sections":[{"title":"Overview","local":"overview","sections":[],"depth":2},{"title":"Resources","local":"resources","sections":[],"depth":2},{"title":"ConvNextV2Config","local":"transformers.ConvNextV2Config","sections":[],"depth":2},{"title":"ConvNextV2Model","local":"transformers.ConvNextV2Model","sections":[],"depth":2},{"title":"ConvNextV2ForImageClassification","local":"transformers.ConvNextV2ForImageClassification","sections":[],"depth":2},{"title":"TFConvNextV2Model","local":"transformers.TFConvNextV2Model","sections":[],"depth":2},{"title":"TFConvNextV2ForImageClassification","local":"transformers.TFConvNextV2ForImageClassification","sections":[],"depth":2}],"depth":1}';function Hn(T){return bn(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class qn extends yn{constructor(t){super(),Mn(this,t,Hn,Wn,vn,{})}}export{qn as component};
