import{s as It,f as Wt,o as Ft,n as Te}from"../chunks/scheduler.9bc65507.js";import{S as Nt,i as Ut,g as l,s as i,r as u,A as kt,h as d,f as n,c as r,j as ce,u as g,x as h,k as U,y as p,a as o,v as _,d as b,t as w,w as y}from"../chunks/index.707bf1b6.js";import{T as Dt}from"../chunks/Tip.c2ecdbf4.js";import{D as ye}from"../chunks/Docstring.17db21ae.js";import{C as rt}from"../chunks/CodeBlock.54a9f38d.js";import{E as it}from"../chunks/ExampleCodeBlock.4f515aa9.js";import{P as Jt}from"../chunks/PipelineTag.44585822.js";import{H as me}from"../chunks/Heading.342b1fa6.js";function Zt(C){let a,T="Example:",c,m,f;return m=new rt({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERpbmF0Q29uZmlnJTJDJTIwRGluYXRNb2RlbCUwQSUwQSUyMyUyMEluaXRpYWxpemluZyUyMGElMjBEaW5hdCUyMHNoaS1sYWJzJTJGZGluYXQtbWluaS1pbjFrLTIyNCUyMHN0eWxlJTIwY29uZmlndXJhdGlvbiUwQWNvbmZpZ3VyYXRpb24lMjAlM0QlMjBEaW5hdENvbmZpZygpJTBBJTBBJTIzJTIwSW5pdGlhbGl6aW5nJTIwYSUyMG1vZGVsJTIwKHdpdGglMjByYW5kb20lMjB3ZWlnaHRzKSUyMGZyb20lMjB0aGUlMjBzaGktbGFicyUyRmRpbmF0LW1pbmktaW4xay0yMjQlMjBzdHlsZSUyMGNvbmZpZ3VyYXRpb24lMEFtb2RlbCUyMCUzRCUyMERpbmF0TW9kZWwoY29uZmlndXJhdGlvbiklMEElMEElMjMlMjBBY2Nlc3NpbmclMjB0aGUlMjBtb2RlbCUyMGNvbmZpZ3VyYXRpb24lMEFjb25maWd1cmF0aW9uJTIwJTNEJTIwbW9kZWwuY29uZmln",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DinatConfig, DinatModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a Dinat shi-labs/dinat-mini-in1k-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = DinatConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model (with random weights) from the shi-labs/dinat-mini-in1k-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DinatModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`,wrap:!1}}),{c(){a=l("p"),a.textContent=T,c=i(),u(m.$$.fragment)},l(s){a=d(s,"P",{"data-svelte-h":!0}),h(a)!=="svelte-11lpom8"&&(a.textContent=T),c=r(s),g(m.$$.fragment,s)},m(s,M){o(s,a,M),o(s,c,M),_(m,s,M),f=!0},p:Te,i(s){f||(b(m.$$.fragment,s),f=!0)},o(s){w(m.$$.fragment,s),f=!1},d(s){s&&(n(a),n(c)),y(m,s)}}}function zt(C){let a,T=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){a=l("p"),a.innerHTML=T},l(c){a=d(c,"P",{"data-svelte-h":!0}),h(a)!=="svelte-fincs2"&&(a.innerHTML=T)},m(c,m){o(c,a,m)},p:Te,d(c){c&&n(a)}}}function Gt(C){let a,T="Example:",c,m,f;return m=new rt({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9JbWFnZVByb2Nlc3NvciUyQyUyMERpbmF0TW9kZWwlMEFpbXBvcnQlMjB0b3JjaCUwQWZyb20lMjBkYXRhc2V0cyUyMGltcG9ydCUyMGxvYWRfZGF0YXNldCUwQSUwQWRhdGFzZXQlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyaHVnZ2luZ2ZhY2UlMkZjYXRzLWltYWdlJTIyKSUwQWltYWdlJTIwJTNEJTIwZGF0YXNldCU1QiUyMnRlc3QlMjIlNUQlNUIlMjJpbWFnZSUyMiU1RCU1QjAlNUQlMEElMEFpbWFnZV9wcm9jZXNzb3IlMjAlM0QlMjBBdXRvSW1hZ2VQcm9jZXNzb3IuZnJvbV9wcmV0cmFpbmVkKCUyMnNoaS1sYWJzJTJGZGluYXQtbWluaS1pbjFrLTIyNCUyMiklMEFtb2RlbCUyMCUzRCUyMERpbmF0TW9kZWwuZnJvbV9wcmV0cmFpbmVkKCUyMnNoaS1sYWJzJTJGZGluYXQtbWluaS1pbjFrLTIyNCUyMiklMEElMEFpbnB1dHMlMjAlM0QlMjBpbWFnZV9wcm9jZXNzb3IoaW1hZ2UlMkMlMjByZXR1cm5fdGVuc29ycyUzRCUyMnB0JTIyKSUwQSUwQXdpdGglMjB0b3JjaC5ub19ncmFkKCklM0ElMEElMjAlMjAlMjAlMjBvdXRwdXRzJTIwJTNEJTIwbW9kZWwoKippbnB1dHMpJTBBJTBBbGFzdF9oaWRkZW5fc3RhdGVzJTIwJTNEJTIwb3V0cHV0cy5sYXN0X2hpZGRlbl9zdGF0ZSUwQWxpc3QobGFzdF9oaWRkZW5fc3RhdGVzLnNoYXBlKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoImageProcessor, DinatModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>image_processor = AutoImageProcessor.from_pretrained(<span class="hljs-string">&quot;shi-labs/dinat-mini-in1k-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DinatModel.from_pretrained(<span class="hljs-string">&quot;shi-labs/dinat-mini-in1k-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = image_processor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">512</span>]`,wrap:!1}}),{c(){a=l("p"),a.textContent=T,c=i(),u(m.$$.fragment)},l(s){a=d(s,"P",{"data-svelte-h":!0}),h(a)!=="svelte-11lpom8"&&(a.textContent=T),c=r(s),g(m.$$.fragment,s)},m(s,M){o(s,a,M),o(s,c,M),_(m,s,M),f=!0},p:Te,i(s){f||(b(m.$$.fragment,s),f=!0)},o(s){w(m.$$.fragment,s),f=!1},d(s){s&&(n(a),n(c)),y(m,s)}}}function At(C){let a,T=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){a=l("p"),a.innerHTML=T},l(c){a=d(c,"P",{"data-svelte-h":!0}),h(a)!=="svelte-fincs2"&&(a.innerHTML=T)},m(c,m){o(c,a,m)},p:Te,d(c){c&&n(a)}}}function Rt(C){let a,T="Example:",c,m,f;return m=new rt({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9JbWFnZVByb2Nlc3NvciUyQyUyMERpbmF0Rm9ySW1hZ2VDbGFzc2lmaWNhdGlvbiUwQWltcG9ydCUyMHRvcmNoJTBBZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBJTBBZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJodWdnaW5nZmFjZSUyRmNhdHMtaW1hZ2UlMjIpJTBBaW1hZ2UlMjAlM0QlMjBkYXRhc2V0JTVCJTIydGVzdCUyMiU1RCU1QiUyMmltYWdlJTIyJTVEJTVCMCU1RCUwQSUwQWltYWdlX3Byb2Nlc3NvciUyMCUzRCUyMEF1dG9JbWFnZVByb2Nlc3Nvci5mcm9tX3ByZXRyYWluZWQoJTIyc2hpLWxhYnMlMkZkaW5hdC1taW5pLWluMWstMjI0JTIyKSUwQW1vZGVsJTIwJTNEJTIwRGluYXRGb3JJbWFnZUNsYXNzaWZpY2F0aW9uLmZyb21fcHJldHJhaW5lZCglMjJzaGktbGFicyUyRmRpbmF0LW1pbmktaW4xay0yMjQlMjIpJTBBJTBBaW5wdXRzJTIwJTNEJTIwaW1hZ2VfcHJvY2Vzc29yKGltYWdlJTJDJTIwcmV0dXJuX3RlbnNvcnMlM0QlMjJwdCUyMiklMEElMEF3aXRoJTIwdG9yY2gubm9fZ3JhZCgpJTNBJTBBJTIwJTIwJTIwJTIwbG9naXRzJTIwJTNEJTIwbW9kZWwoKippbnB1dHMpLmxvZ2l0cyUwQSUwQSUyMyUyMG1vZGVsJTIwcHJlZGljdHMlMjBvbmUlMjBvZiUyMHRoZSUyMDEwMDAlMjBJbWFnZU5ldCUyMGNsYXNzZXMlMEFwcmVkaWN0ZWRfbGFiZWwlMjAlM0QlMjBsb2dpdHMuYXJnbWF4KC0xKS5pdGVtKCklMEFwcmludChtb2RlbC5jb25maWcuaWQybGFiZWwlNUJwcmVkaWN0ZWRfbGFiZWwlNUQp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoImageProcessor, DinatForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>image_processor = AutoImageProcessor.from_pretrained(<span class="hljs-string">&quot;shi-labs/dinat-mini-in1k-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DinatForImageClassification.from_pretrained(<span class="hljs-string">&quot;shi-labs/dinat-mini-in1k-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = image_processor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`,wrap:!1}}),{c(){a=l("p"),a.textContent=T,c=i(),u(m.$$.fragment)},l(s){a=d(s,"P",{"data-svelte-h":!0}),h(a)!=="svelte-11lpom8"&&(a.textContent=T),c=r(s),g(m.$$.fragment,s)},m(s,M){o(s,a,M),o(s,c,M),_(m,s,M),f=!0},p:Te,i(s){f||(b(m.$$.fragment,s),f=!0)},o(s){w(m.$$.fragment,s),f=!1},d(s){s&&(n(a),n(c)),y(m,s)}}}function Lt(C){let a,T,c,m,f,s,M,Me,L,lt=`DiNAT was proposed in <a href="https://arxiv.org/abs/2209.15001" rel="nofollow">Dilated Neighborhood Attention Transformer</a>
by Ali Hassani and Humphrey Shi.`,ve,P,dt=`It extends <a href="nat">NAT</a> by adding a Dilated Neighborhood Attention pattern to capture global context,
and shows significant performance improvements over it.`,$e,E,ct="The abstract from the paper is the following:",Ce,H,mt=`<em>Transformers are quickly becoming one of the most heavily applied deep learning architectures across modalities,
domains, and tasks. In vision, on top of ongoing efforts into plain transformers, hierarchical transformers have
also gained significant attention, thanks to their performance and easy integration into existing frameworks.
These models typically employ localized attention mechanisms, such as the sliding-window Neighborhood Attention (NA)
or Swin Transformer’s Shifted Window Self Attention. While effective at reducing self attention’s quadratic complexity,
local attention weakens two of the most desirable properties of self attention: long range inter-dependency modeling,
and global receptive field. In this paper, we introduce Dilated Neighborhood Attention (DiNA), a natural, flexible and
efficient extension to NA that can capture more global context and expand receptive fields exponentially at no
additional cost. NA’s local attention and DiNA’s sparse global attention complement each other, and therefore we
introduce Dilated Neighborhood Attention Transformer (DiNAT), a new hierarchical vision transformer built upon both.
DiNAT variants enjoy significant improvements over strong baselines such as NAT, Swin, and ConvNeXt.
Our large model is faster and ahead of its Swin counterpart by 1.5% box AP in COCO object detection,
1.3% mask AP in COCO instance segmentation, and 1.1% mIoU in ADE20K semantic segmentation.
Paired with new frameworks, our large variant is the new state of the art panoptic segmentation model on COCO (58.2 PQ)
and ADE20K (48.5 PQ), and instance segmentation model on Cityscapes (44.5 AP) and ADE20K (35.4 AP) (no extra data).
It also matches the state of the art specialized semantic segmentation models on ADE20K (58.2 mIoU),
and ranks second on Cityscapes (84.5 mIoU) (no extra data).</em>`,xe,J,pt,je,q,ht=`Neighborhood Attention with different dilation values.
Taken from the <a href="https://arxiv.org/abs/2209.15001">original paper</a>.`,De,B,ft=`This model was contributed by <a href="https://huggingface.co/alihassanijr" rel="nofollow">Ali Hassani</a>.
The original code can be found <a href="https://github.com/SHI-Labs/Neighborhood-Attention-Transformer" rel="nofollow">here</a>.`,Ie,S,We,Q,ut=`DiNAT can be used as a <em>backbone</em>. When <code>output_hidden_states = True</code>,
it will output both <code>hidden_states</code> and <code>reshaped_hidden_states</code>. The <code>reshaped_hidden_states</code> have a shape of <code>(batch, num_channels, height, width)</code> rather than <code>(batch_size, height, width, num_channels)</code>.`,Fe,V,gt="Notes:",Ne,X,_t=`<li>DiNAT depends on <a href="https://github.com/SHI-Labs/NATTEN/" rel="nofollow">NATTEN</a>’s implementation of Neighborhood Attention and Dilated Neighborhood Attention.
You can install it with pre-built wheels for Linux by referring to <a href="https://shi-labs.com/natten" rel="nofollow">shi-labs.com/natten</a>, or build on your system by running <code>pip install natten</code>.
Note that the latter will likely take time to compile. NATTEN does not support Windows devices yet.</li> <li>Patch size of 4 is only supported at the moment.</li>`,Ue,Y,ke,O,bt="A list of official Hugging Face and community (indicated by 🌎) resources to help you get started with DiNAT.",Je,K,Ze,ee,wt='<li><a href="/docs/transformers/main/en/model_doc/dinat#transformers.DinatForImageClassification">DinatForImageClassification</a> is supported by this <a href="https://github.com/huggingface/transformers/tree/main/examples/pytorch/image-classification" rel="nofollow">example script</a> and <a href="https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/image_classification.ipynb" rel="nofollow">notebook</a>.</li> <li>See also: <a href="../tasks/image_classification">Image classification task guide</a></li>',ze,te,yt="If you’re interested in submitting a resource to be included here, please feel free to open a Pull Request and we’ll review it! The resource should ideally demonstrate something new instead of duplicating an existing resource.",Ge,ne,Ae,v,oe,Be,pe,Tt=`This is the configuration class to store the configuration of a <a href="/docs/transformers/main/en/model_doc/dinat#transformers.DinatModel">DinatModel</a>. It is used to instantiate a Dinat
model according to the specified arguments, defining the model architecture. Instantiating a configuration with the
defaults will yield a similar configuration to that of the Dinat
<a href="https://huggingface.co/shi-labs/dinat-mini-in1k-224" rel="nofollow">shi-labs/dinat-mini-in1k-224</a> architecture.`,Se,he,Mt=`Configuration objects inherit from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> and can be used to control the model outputs. Read the
documentation from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> for more information.`,Qe,Z,Re,ae,Le,D,se,Ve,fe,vt=`The bare Dinat Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`,Xe,x,ie,Ye,ue,$t='The <a href="/docs/transformers/main/en/model_doc/dinat#transformers.DinatModel">DinatModel</a> forward method, overrides the <code>__call__</code> special method.',Oe,z,Ke,G,Pe,re,Ee,$,le,et,ge,Ct=`Dinat Model transformer with an image classification head on top (a linear layer on top of the final hidden state
of the [CLS] token) e.g. for ImageNet.`,tt,_e,xt=`This model is a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`,nt,j,de,ot,be,jt='The <a href="/docs/transformers/main/en/model_doc/dinat#transformers.DinatForImageClassification">DinatForImageClassification</a> forward method, overrides the <code>__call__</code> special method.',at,A,st,R,He,we,qe;return f=new me({props:{title:"Dilated Neighborhood Attention Transformer",local:"dilated-neighborhood-attention-transformer",headingTag:"h1"}}),M=new me({props:{title:"Overview",local:"overview",headingTag:"h2"}}),S=new me({props:{title:"Usage tips",local:"usage-tips",headingTag:"h2"}}),Y=new me({props:{title:"Resources",local:"resources",headingTag:"h2"}}),K=new Jt({props:{pipeline:"image-classification"}}),ne=new me({props:{title:"DinatConfig",local:"transformers.DinatConfig",headingTag:"h2"}}),oe=new ye({props:{name:"class transformers.DinatConfig",anchor:"transformers.DinatConfig",parameters:[{name:"patch_size",val:" = 4"},{name:"num_channels",val:" = 3"},{name:"embed_dim",val:" = 64"},{name:"depths",val:" = [3, 4, 6, 5]"},{name:"num_heads",val:" = [2, 4, 8, 16]"},{name:"kernel_size",val:" = 7"},{name:"dilations",val:" = [[1, 8, 1], [1, 4, 1, 4], [1, 2, 1, 2, 1, 2], [1, 1, 1, 1, 1]]"},{name:"mlp_ratio",val:" = 3.0"},{name:"qkv_bias",val:" = True"},{name:"hidden_dropout_prob",val:" = 0.0"},{name:"attention_probs_dropout_prob",val:" = 0.0"},{name:"drop_path_rate",val:" = 0.1"},{name:"hidden_act",val:" = 'gelu'"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-05"},{name:"layer_scale_init_value",val:" = 0.0"},{name:"out_features",val:" = None"},{name:"out_indices",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.DinatConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
The size (resolution) of each patch. NOTE: Only patch size of 4 is supported at the moment.`,name:"patch_size"},{anchor:"transformers.DinatConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.DinatConfig.embed_dim",description:`<strong>embed_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 64) &#x2014;
Dimensionality of patch embedding.`,name:"embed_dim"},{anchor:"transformers.DinatConfig.depths",description:`<strong>depths</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[3, 4, 6, 5]</code>) &#x2014;
Number of layers in each level of the encoder.`,name:"depths"},{anchor:"transformers.DinatConfig.num_heads",description:`<strong>num_heads</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[2, 4, 8, 16]</code>) &#x2014;
Number of attention heads in each layer of the Transformer encoder.`,name:"num_heads"},{anchor:"transformers.DinatConfig.kernel_size",description:`<strong>kernel_size</strong> (<code>int</code>, <em>optional</em>, defaults to 7) &#x2014;
Neighborhood Attention kernel size.`,name:"kernel_size"},{anchor:"transformers.DinatConfig.dilations",description:`<strong>dilations</strong> (<code>List[List[int]]</code>, <em>optional</em>, defaults to <code>[[1, 8, 1], [1, 4, 1, 4], [1, 2, 1, 2, 1, 2], [1, 1, 1, 1, 1]]</code>) &#x2014;
Dilation value of each NA layer in the Transformer encoder.`,name:"dilations"},{anchor:"transformers.DinatConfig.mlp_ratio",description:`<strong>mlp_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 3.0) &#x2014;
Ratio of MLP hidden dimensionality to embedding dimensionality.`,name:"mlp_ratio"},{anchor:"transformers.DinatConfig.qkv_bias",description:`<strong>qkv_bias</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not a learnable bias should be added to the queries, keys and values.`,name:"qkv_bias"},{anchor:"transformers.DinatConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout probability for all fully connected layers in the embeddings and encoder.`,name:"hidden_dropout_prob"},{anchor:"transformers.DinatConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.DinatConfig.drop_path_rate",description:`<strong>drop_path_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
Stochastic depth rate.`,name:"drop_path_rate"},{anchor:"transformers.DinatConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder. If string, <code>&quot;gelu&quot;</code>, <code>&quot;relu&quot;</code>,
<code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.DinatConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.DinatConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-05) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.DinatConfig.layer_scale_init_value",description:`<strong>layer_scale_init_value</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The initial value for the layer scale. Disabled if &lt;=0.`,name:"layer_scale_init_value"},{anchor:"transformers.DinatConfig.out_features",description:`<strong>out_features</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
If used as backbone, list of features to output. Can be any of <code>&quot;stem&quot;</code>, <code>&quot;stage1&quot;</code>, <code>&quot;stage2&quot;</code>, etc.
(depending on how many stages the model has). If unset and <code>out_indices</code> is set, will default to the
corresponding stages. If unset and <code>out_indices</code> is unset, will default to the last stage. Must be in the
same order as defined in the <code>stage_names</code> attribute.`,name:"out_features"},{anchor:"transformers.DinatConfig.out_indices",description:`<strong>out_indices</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
If used as backbone, list of indices of features to output. Can be any of 0, 1, 2, etc. (depending on how
many stages the model has). If unset and <code>out_features</code> is set, will default to the corresponding stages.
If unset and <code>out_features</code> is unset, will default to the last stage. Must be in the
same order as defined in the <code>stage_names</code> attribute.`,name:"out_indices"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/dinat/configuration_dinat.py#L30"}}),Z=new it({props:{anchor:"transformers.DinatConfig.example",$$slots:{default:[Zt]},$$scope:{ctx:C}}}),ae=new me({props:{title:"DinatModel",local:"transformers.DinatModel",headingTag:"h2"}}),se=new ye({props:{name:"class transformers.DinatModel",anchor:"transformers.DinatModel",parameters:[{name:"config",val:""},{name:"add_pooling_layer",val:" = True"}],parametersDescription:[{anchor:"transformers.DinatModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/dinat#transformers.DinatConfig">DinatConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/dinat/modeling_dinat.py#L692"}}),ie=new ye({props:{name:"forward",anchor:"transformers.DinatModel.forward",parameters:[{name:"pixel_values",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.DinatModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoImageProcessor">AutoImageProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor.__call__">ViTImageProcessor.<strong>call</strong>()</a>
for details.`,name:"pixel_values"},{anchor:"transformers.DinatModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.DinatModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.DinatModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/dinat/modeling_dinat.py#L727",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <code>transformers.models.dinat.modeling_dinat.DinatModelOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/dinat#transformers.DinatConfig"
>DinatConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) — Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>, <em>optional</em>, returned when <code>add_pooling_layer=True</code> is passed) — Average pooling of the last layer hidden-state.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for each stage) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
<li>
<p><strong>reshaped_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, hidden_size, height, width)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs reshaped to
include the spatial dimensions.</p>
</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>transformers.models.dinat.modeling_dinat.DinatModelOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),z=new Dt({props:{$$slots:{default:[zt]},$$scope:{ctx:C}}}),G=new it({props:{anchor:"transformers.DinatModel.forward.example",$$slots:{default:[Gt]},$$scope:{ctx:C}}}),re=new me({props:{title:"DinatForImageClassification",local:"transformers.DinatForImageClassification",headingTag:"h2"}}),le=new ye({props:{name:"class transformers.DinatForImageClassification",anchor:"transformers.DinatForImageClassification",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.DinatForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/dinat#transformers.DinatConfig">DinatConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/dinat/modeling_dinat.py#L782"}}),de=new ye({props:{name:"forward",anchor:"transformers.DinatForImageClassification.forward",parameters:[{name:"pixel_values",val:": Optional = None"},{name:"labels",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.DinatForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoImageProcessor">AutoImageProcessor</a>. See <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor.__call__">ViTImageProcessor.<strong>call</strong>()</a>
for details.`,name:"pixel_values"},{anchor:"transformers.DinatForImageClassification.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.DinatForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.DinatForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.DinatForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/dinat/modeling_dinat.py#L806",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <code>transformers.models.dinat.modeling_dinat.DinatImageClassifierOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/dinat#transformers.DinatConfig"
>DinatConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) — Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) — Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for each stage) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
<li>
<p><strong>reshaped_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) — Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, hidden_size, height, width)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs reshaped to
include the spatial dimensions.</p>
</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>transformers.models.dinat.modeling_dinat.DinatImageClassifierOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),A=new Dt({props:{$$slots:{default:[At]},$$scope:{ctx:C}}}),R=new it({props:{anchor:"transformers.DinatForImageClassification.forward.example",$$slots:{default:[Rt]},$$scope:{ctx:C}}}),{c(){a=l("meta"),T=i(),c=l("p"),m=i(),u(f.$$.fragment),s=i(),u(M.$$.fragment),Me=i(),L=l("p"),L.innerHTML=lt,ve=i(),P=l("p"),P.innerHTML=dt,$e=i(),E=l("p"),E.textContent=ct,Ce=i(),H=l("p"),H.innerHTML=mt,xe=i(),J=l("img"),je=i(),q=l("small"),q.innerHTML=ht,De=i(),B=l("p"),B.innerHTML=ft,Ie=i(),u(S.$$.fragment),We=i(),Q=l("p"),Q.innerHTML=ut,Fe=i(),V=l("p"),V.textContent=gt,Ne=i(),X=l("ul"),X.innerHTML=_t,Ue=i(),u(Y.$$.fragment),ke=i(),O=l("p"),O.textContent=bt,Je=i(),u(K.$$.fragment),Ze=i(),ee=l("ul"),ee.innerHTML=wt,ze=i(),te=l("p"),te.textContent=yt,Ge=i(),u(ne.$$.fragment),Ae=i(),v=l("div"),u(oe.$$.fragment),Be=i(),pe=l("p"),pe.innerHTML=Tt,Se=i(),he=l("p"),he.innerHTML=Mt,Qe=i(),u(Z.$$.fragment),Re=i(),u(ae.$$.fragment),Le=i(),D=l("div"),u(se.$$.fragment),Ve=i(),fe=l("p"),fe.innerHTML=vt,Xe=i(),x=l("div"),u(ie.$$.fragment),Ye=i(),ue=l("p"),ue.innerHTML=$t,Oe=i(),u(z.$$.fragment),Ke=i(),u(G.$$.fragment),Pe=i(),u(re.$$.fragment),Ee=i(),$=l("div"),u(le.$$.fragment),et=i(),ge=l("p"),ge.textContent=Ct,tt=i(),_e=l("p"),_e.innerHTML=xt,nt=i(),j=l("div"),u(de.$$.fragment),ot=i(),be=l("p"),be.innerHTML=jt,at=i(),u(A.$$.fragment),st=i(),u(R.$$.fragment),He=i(),we=l("p"),this.h()},l(e){const t=kt("svelte-u9bgzb",document.head);a=d(t,"META",{name:!0,content:!0}),t.forEach(n),T=r(e),c=d(e,"P",{}),ce(c).forEach(n),m=r(e),g(f.$$.fragment,e),s=r(e),g(M.$$.fragment,e),Me=r(e),L=d(e,"P",{"data-svelte-h":!0}),h(L)!=="svelte-3lrypl"&&(L.innerHTML=lt),ve=r(e),P=d(e,"P",{"data-svelte-h":!0}),h(P)!=="svelte-1xqjndc"&&(P.innerHTML=dt),$e=r(e),E=d(e,"P",{"data-svelte-h":!0}),h(E)!=="svelte-vfdo9a"&&(E.textContent=ct),Ce=r(e),H=d(e,"P",{"data-svelte-h":!0}),h(H)!=="svelte-1ufwjgc"&&(H.innerHTML=mt),xe=r(e),J=d(e,"IMG",{src:!0,alt:!0,width:!0}),je=r(e),q=d(e,"SMALL",{"data-svelte-h":!0}),h(q)!=="svelte-cvtpr4"&&(q.innerHTML=ht),De=r(e),B=d(e,"P",{"data-svelte-h":!0}),h(B)!=="svelte-1emlw2j"&&(B.innerHTML=ft),Ie=r(e),g(S.$$.fragment,e),We=r(e),Q=d(e,"P",{"data-svelte-h":!0}),h(Q)!=="svelte-1rigu5j"&&(Q.innerHTML=ut),Fe=r(e),V=d(e,"P",{"data-svelte-h":!0}),h(V)!=="svelte-1biq3pv"&&(V.textContent=gt),Ne=r(e),X=d(e,"UL",{"data-svelte-h":!0}),h(X)!=="svelte-dxsoin"&&(X.innerHTML=_t),Ue=r(e),g(Y.$$.fragment,e),ke=r(e),O=d(e,"P",{"data-svelte-h":!0}),h(O)!=="svelte-1nm4j59"&&(O.textContent=bt),Je=r(e),g(K.$$.fragment,e),Ze=r(e),ee=d(e,"UL",{"data-svelte-h":!0}),h(ee)!=="svelte-mopgip"&&(ee.innerHTML=wt),ze=r(e),te=d(e,"P",{"data-svelte-h":!0}),h(te)!=="svelte-1xesile"&&(te.textContent=yt),Ge=r(e),g(ne.$$.fragment,e),Ae=r(e),v=d(e,"DIV",{class:!0});var I=ce(v);g(oe.$$.fragment,I),Be=r(I),pe=d(I,"P",{"data-svelte-h":!0}),h(pe)!=="svelte-v5wi0v"&&(pe.innerHTML=Tt),Se=r(I),he=d(I,"P",{"data-svelte-h":!0}),h(he)!=="svelte-o55m63"&&(he.innerHTML=Mt),Qe=r(I),g(Z.$$.fragment,I),I.forEach(n),Re=r(e),g(ae.$$.fragment,e),Le=r(e),D=d(e,"DIV",{class:!0});var k=ce(D);g(se.$$.fragment,k),Ve=r(k),fe=d(k,"P",{"data-svelte-h":!0}),h(fe)!=="svelte-bq276k"&&(fe.innerHTML=vt),Xe=r(k),x=d(k,"DIV",{class:!0});var W=ce(x);g(ie.$$.fragment,W),Ye=r(W),ue=d(W,"P",{"data-svelte-h":!0}),h(ue)!=="svelte-jb4bz"&&(ue.innerHTML=$t),Oe=r(W),g(z.$$.fragment,W),Ke=r(W),g(G.$$.fragment,W),W.forEach(n),k.forEach(n),Pe=r(e),g(re.$$.fragment,e),Ee=r(e),$=d(e,"DIV",{class:!0});var F=ce($);g(le.$$.fragment,F),et=r(F),ge=d(F,"P",{"data-svelte-h":!0}),h(ge)!=="svelte-17tpduv"&&(ge.textContent=Ct),tt=r(F),_e=d(F,"P",{"data-svelte-h":!0}),h(_e)!=="svelte-68lg8f"&&(_e.innerHTML=xt),nt=r(F),j=d(F,"DIV",{class:!0});var N=ce(j);g(de.$$.fragment,N),ot=r(N),be=d(N,"P",{"data-svelte-h":!0}),h(be)!=="svelte-1w8jja9"&&(be.innerHTML=jt),at=r(N),g(A.$$.fragment,N),st=r(N),g(R.$$.fragment,N),N.forEach(n),F.forEach(n),He=r(e),we=d(e,"P",{}),ce(we).forEach(n),this.h()},h(){U(a,"name","hf:doc:metadata"),U(a,"content",Pt),Wt(J.src,pt="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/dilated-neighborhood-attention-pattern.jpg")||U(J,"src",pt),U(J,"alt","drawing"),U(J,"width","600"),U(v,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(x,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),U($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,t){p(document.head,a),o(e,T,t),o(e,c,t),o(e,m,t),_(f,e,t),o(e,s,t),_(M,e,t),o(e,Me,t),o(e,L,t),o(e,ve,t),o(e,P,t),o(e,$e,t),o(e,E,t),o(e,Ce,t),o(e,H,t),o(e,xe,t),o(e,J,t),o(e,je,t),o(e,q,t),o(e,De,t),o(e,B,t),o(e,Ie,t),_(S,e,t),o(e,We,t),o(e,Q,t),o(e,Fe,t),o(e,V,t),o(e,Ne,t),o(e,X,t),o(e,Ue,t),_(Y,e,t),o(e,ke,t),o(e,O,t),o(e,Je,t),_(K,e,t),o(e,Ze,t),o(e,ee,t),o(e,ze,t),o(e,te,t),o(e,Ge,t),_(ne,e,t),o(e,Ae,t),o(e,v,t),_(oe,v,null),p(v,Be),p(v,pe),p(v,Se),p(v,he),p(v,Qe),_(Z,v,null),o(e,Re,t),_(ae,e,t),o(e,Le,t),o(e,D,t),_(se,D,null),p(D,Ve),p(D,fe),p(D,Xe),p(D,x),_(ie,x,null),p(x,Ye),p(x,ue),p(x,Oe),_(z,x,null),p(x,Ke),_(G,x,null),o(e,Pe,t),_(re,e,t),o(e,Ee,t),o(e,$,t),_(le,$,null),p($,et),p($,ge),p($,tt),p($,_e),p($,nt),p($,j),_(de,j,null),p(j,ot),p(j,be),p(j,at),_(A,j,null),p(j,st),_(R,j,null),o(e,He,t),o(e,we,t),qe=!0},p(e,[t]){const I={};t&2&&(I.$$scope={dirty:t,ctx:e}),Z.$set(I);const k={};t&2&&(k.$$scope={dirty:t,ctx:e}),z.$set(k);const W={};t&2&&(W.$$scope={dirty:t,ctx:e}),G.$set(W);const F={};t&2&&(F.$$scope={dirty:t,ctx:e}),A.$set(F);const N={};t&2&&(N.$$scope={dirty:t,ctx:e}),R.$set(N)},i(e){qe||(b(f.$$.fragment,e),b(M.$$.fragment,e),b(S.$$.fragment,e),b(Y.$$.fragment,e),b(K.$$.fragment,e),b(ne.$$.fragment,e),b(oe.$$.fragment,e),b(Z.$$.fragment,e),b(ae.$$.fragment,e),b(se.$$.fragment,e),b(ie.$$.fragment,e),b(z.$$.fragment,e),b(G.$$.fragment,e),b(re.$$.fragment,e),b(le.$$.fragment,e),b(de.$$.fragment,e),b(A.$$.fragment,e),b(R.$$.fragment,e),qe=!0)},o(e){w(f.$$.fragment,e),w(M.$$.fragment,e),w(S.$$.fragment,e),w(Y.$$.fragment,e),w(K.$$.fragment,e),w(ne.$$.fragment,e),w(oe.$$.fragment,e),w(Z.$$.fragment,e),w(ae.$$.fragment,e),w(se.$$.fragment,e),w(ie.$$.fragment,e),w(z.$$.fragment,e),w(G.$$.fragment,e),w(re.$$.fragment,e),w(le.$$.fragment,e),w(de.$$.fragment,e),w(A.$$.fragment,e),w(R.$$.fragment,e),qe=!1},d(e){e&&(n(T),n(c),n(m),n(s),n(Me),n(L),n(ve),n(P),n($e),n(E),n(Ce),n(H),n(xe),n(J),n(je),n(q),n(De),n(B),n(Ie),n(We),n(Q),n(Fe),n(V),n(Ne),n(X),n(Ue),n(ke),n(O),n(Je),n(Ze),n(ee),n(ze),n(te),n(Ge),n(Ae),n(v),n(Re),n(Le),n(D),n(Pe),n(Ee),n($),n(He),n(we)),n(a),y(f,e),y(M,e),y(S,e),y(Y,e),y(K,e),y(ne,e),y(oe),y(Z),y(ae,e),y(se),y(ie),y(z),y(G),y(re,e),y(le),y(de),y(A),y(R)}}}const Pt='{"title":"Dilated Neighborhood Attention Transformer","local":"dilated-neighborhood-attention-transformer","sections":[{"title":"Overview","local":"overview","sections":[],"depth":2},{"title":"Usage tips","local":"usage-tips","sections":[],"depth":2},{"title":"Resources","local":"resources","sections":[],"depth":2},{"title":"DinatConfig","local":"transformers.DinatConfig","sections":[],"depth":2},{"title":"DinatModel","local":"transformers.DinatModel","sections":[],"depth":2},{"title":"DinatForImageClassification","local":"transformers.DinatForImageClassification","sections":[],"depth":2}],"depth":1}';function Et(C){return Ft(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ot extends Nt{constructor(a){super(),Ut(this,a,Et,Lt,It,{})}}export{Ot as component};
