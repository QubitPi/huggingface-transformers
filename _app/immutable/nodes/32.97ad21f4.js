import{s as Jt,n as Ut,o as zt}from"../chunks/scheduler.9bc65507.js";import{S as Nt,i as Rt,g as o,s as a,r as d,A as Bt,h as s,f as r,c as n,j as v,u as c,x as l,k as b,y as t,a as p,v as u,d as f,t as h,w as g}from"../chunks/index.707bf1b6.js";import{D as _}from"../chunks/Docstring.17db21ae.js";import{H as Ke}from"../chunks/Heading.342b1fa6.js";function Zt(Pt){let F,Fe,De,ye,S,Ce,O,Dt="This page lists all the utility functions the library provides for pipelines.",Te,I,wt="Most of those are only useful if you are studying the code of the models in the library.",Le,V,He,y,W,Xe,re,Ft='Base interface for handling arguments for each <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.Pipeline">Pipeline</a>.',Ee,C,q,Ye,ae,yt=`Handles arguments for zero-shot for text classification by turning each possible label into an NLI
premise/hypothesis pair.`,Me,P,j,et,ne,Ct=`QuestionAnsweringPipeline requires the user to provide multiple arguments (i.e. question &amp; context) to be mapped to
internal <code>SquadExample</code>.`,tt,oe,Tt=`QuestionAnsweringArgumentHandler manages all the possible to create a <code>SquadExample</code> from the command-line
supplied arguments.`,ke,J,Ae,m,U,rt,se,Lt=`Base class for all the pipeline supported data format both for reading and writing. Supported data formats
currently includes:`,at,ie,Ht="<li>JSON</li> <li>CSV</li> <li>stdin/stdout (pipe)</li>",nt,pe,Et=`<code>PipelineDataFormat</code> also includes some utilities to work with multi-columns like mapping from datasets columns to
pipelines keyword arguments through the <code>dataset_kwarg_1=dataset_column_1</code> format.`,ot,L,z,st,le,Mt='Creates an instance of the right subclass of <a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.PipelineDataFormat">PipelineDataFormat</a> depending on <code>format</code>.',it,H,N,pt,me,kt='Save the provided data object with the representation for the current <a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.PipelineDataFormat">PipelineDataFormat</a>.',lt,E,R,mt,de,At="Save the provided data object as a pickle-formatted binary data on the disk.",Qe,D,B,dt,ce,Qt="Support for pipelines using CSV data format.",ct,M,Z,ut,ue,St='Save the provided data object with the representation for the current <a href="/docs/transformers/main/en/internal/pipelines_utils#transformers.PipelineDataFormat">PipelineDataFormat</a>.',Se,w,G,ft,fe,Ot="Support for pipelines using JSON file format.",ht,k,K,gt,he,It="Save the provided data object in a json file.",Oe,x,X,vt,ge,Vt="Read data from piped input to the python process. For multi columns data, columns should separated by",bt,ve,Wt="If columns are provided, then the output will be a dictionary with {column_x: value_x}",$t,A,Y,_t,be,qt="Print the data.",Ie,ee,Ve,T,te,xt,$e,jt='Raised by a <a href="/docs/transformers/main/en/main_classes/pipelines#transformers.Pipeline">Pipeline</a> when handling <strong>call</strong>.',We,we,qe;return S=new Ke({props:{title:"Utilities for pipelines",local:"utilities-for-pipelines",headingTag:"h1"}}),V=new Ke({props:{title:"Argument handling",local:"transformers.pipelines.ArgumentHandler",headingTag:"h2"}}),W=new _({props:{name:"class transformers.pipelines.ArgumentHandler",anchor:"transformers.pipelines.ArgumentHandler",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/base.py#L435"}}),q=new _({props:{name:"class transformers.pipelines.ZeroShotClassificationArgumentHandler",anchor:"transformers.pipelines.ZeroShotClassificationArgumentHandler",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/zero_shot_classification.py#L14"}}),j=new _({props:{name:"class transformers.pipelines.QuestionAnsweringArgumentHandler",anchor:"transformers.pipelines.QuestionAnsweringArgumentHandler",parameters:[],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/question_answering.py#L150"}}),J=new Ke({props:{title:"Data format",local:"transformers.PipelineDataFormat",headingTag:"h2"}}),U=new _({props:{name:"class transformers.PipelineDataFormat",anchor:"transformers.PipelineDataFormat",parameters:[{name:"output_path",val:": Optional"},{name:"input_path",val:": Optional"},{name:"column",val:": Optional"},{name:"overwrite",val:": bool = False"}],parametersDescription:[{anchor:"transformers.PipelineDataFormat.output_path",description:"<strong>output_path</strong> (<code>str</code>) &#x2014; Where to save the outgoing data.",name:"output_path"},{anchor:"transformers.PipelineDataFormat.input_path",description:"<strong>input_path</strong> (<code>str</code>) &#x2014; Where to look for the input data.",name:"input_path"},{anchor:"transformers.PipelineDataFormat.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; The column to read.",name:"column"},{anchor:"transformers.PipelineDataFormat.overwrite",description:`<strong>overwrite</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to overwrite the <code>output_path</code>.`,name:"overwrite"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/base.py#L445"}}),z=new _({props:{name:"from_str",anchor:"transformers.PipelineDataFormat.from_str",parameters:[{name:"format",val:": str"},{name:"output_path",val:": Optional"},{name:"input_path",val:": Optional"},{name:"column",val:": Optional"},{name:"overwrite",val:" = False"}],parametersDescription:[{anchor:"transformers.PipelineDataFormat.from_str.format",description:`<strong>format</strong> (<code>str</code>) &#x2014;
The format of the desired pipeline. Acceptable values are <code>&quot;json&quot;</code>, <code>&quot;csv&quot;</code> or <code>&quot;pipe&quot;</code>.`,name:"format"},{anchor:"transformers.PipelineDataFormat.from_str.output_path",description:`<strong>output_path</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Where to save the outgoing data.`,name:"output_path"},{anchor:"transformers.PipelineDataFormat.from_str.input_path",description:`<strong>input_path</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Where to look for the input data.`,name:"input_path"},{anchor:"transformers.PipelineDataFormat.from_str.column",description:`<strong>column</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The column to read.`,name:"column"},{anchor:"transformers.PipelineDataFormat.from_str.overwrite",description:`<strong>overwrite</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to overwrite the <code>output_path</code>.`,name:"overwrite"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/base.py#L522",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The proper data format.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/transformers/main/en/internal/pipelines_utils#transformers.PipelineDataFormat"
>PipelineDataFormat</a></p>
`}}),N=new _({props:{name:"save",anchor:"transformers.PipelineDataFormat.save",parameters:[{name:"data",val:": Union"}],parametersDescription:[{anchor:"transformers.PipelineDataFormat.save.data",description:"<strong>data</strong> (<code>dict</code> or list of <code>dict</code>) &#x2014; The data to store.",name:"data"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/base.py#L494"}}),R=new _({props:{name:"save_binary",anchor:"transformers.PipelineDataFormat.save_binary",parameters:[{name:"data",val:": Union"}],parametersDescription:[{anchor:"transformers.PipelineDataFormat.save_binary.data",description:"<strong>data</strong> (<code>dict</code> or list of <code>dict</code>) &#x2014; The data to store.",name:"data"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/base.py#L504",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Path where the data has been saved.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>str</code></p>
`}}),B=new _({props:{name:"class transformers.CsvPipelineDataFormat",anchor:"transformers.CsvPipelineDataFormat",parameters:[{name:"output_path",val:": Optional"},{name:"input_path",val:": Optional"},{name:"column",val:": Optional"},{name:"overwrite",val:" = False"}],parametersDescription:[{anchor:"transformers.CsvPipelineDataFormat.output_path",description:"<strong>output_path</strong> (<code>str</code>) &#x2014; Where to save the outgoing data.",name:"output_path"},{anchor:"transformers.CsvPipelineDataFormat.input_path",description:"<strong>input_path</strong> (<code>str</code>) &#x2014; Where to look for the input data.",name:"input_path"},{anchor:"transformers.CsvPipelineDataFormat.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; The column to read.",name:"column"},{anchor:"transformers.CsvPipelineDataFormat.overwrite",description:`<strong>overwrite</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to overwrite the <code>output_path</code>.`,name:"overwrite"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/base.py#L558"}}),Z=new _({props:{name:"save",anchor:"transformers.CsvPipelineDataFormat.save",parameters:[{name:"data",val:": List"}],parametersDescription:[{anchor:"transformers.CsvPipelineDataFormat.save.data",description:"<strong>data</strong> (<code>List[dict]</code>) &#x2014; The data to store.",name:"data"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/base.py#L588"}}),G=new _({props:{name:"class transformers.JsonPipelineDataFormat",anchor:"transformers.JsonPipelineDataFormat",parameters:[{name:"output_path",val:": Optional"},{name:"input_path",val:": Optional"},{name:"column",val:": Optional"},{name:"overwrite",val:" = False"}],parametersDescription:[{anchor:"transformers.JsonPipelineDataFormat.output_path",description:"<strong>output_path</strong> (<code>str</code>) &#x2014; Where to save the outgoing data.",name:"output_path"},{anchor:"transformers.JsonPipelineDataFormat.input_path",description:"<strong>input_path</strong> (<code>str</code>) &#x2014; Where to look for the input data.",name:"input_path"},{anchor:"transformers.JsonPipelineDataFormat.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; The column to read.",name:"column"},{anchor:"transformers.JsonPipelineDataFormat.overwrite",description:`<strong>overwrite</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to overwrite the <code>output_path</code>.`,name:"overwrite"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/base.py#L602"}}),K=new _({props:{name:"save",anchor:"transformers.JsonPipelineDataFormat.save",parameters:[{name:"data",val:": dict"}],parametersDescription:[{anchor:"transformers.JsonPipelineDataFormat.save.data",description:"<strong>data</strong> (<code>dict</code>) &#x2014; The data to store.",name:"data"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/base.py#L633"}}),X=new _({props:{name:"class transformers.PipedPipelineDataFormat",anchor:"transformers.PipedPipelineDataFormat",parameters:[{name:"output_path",val:": Optional"},{name:"input_path",val:": Optional"},{name:"column",val:": Optional"},{name:"overwrite",val:": bool = False"}],parametersDescription:[{anchor:"transformers.PipedPipelineDataFormat.output_path",description:"<strong>output_path</strong> (<code>str</code>) &#x2014; Where to save the outgoing data.",name:"output_path"},{anchor:"transformers.PipedPipelineDataFormat.input_path",description:"<strong>input_path</strong> (<code>str</code>) &#x2014; Where to look for the input data.",name:"input_path"},{anchor:"transformers.PipedPipelineDataFormat.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; The column to read.",name:"column"},{anchor:"transformers.PipedPipelineDataFormat.overwrite",description:`<strong>overwrite</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to overwrite the <code>output_path</code>.`,name:"overwrite"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/base.py#L644"}}),Y=new _({props:{name:"save",anchor:"transformers.PipedPipelineDataFormat.save",parameters:[{name:"data",val:": dict"}],parametersDescription:[{anchor:"transformers.PipedPipelineDataFormat.save.data",description:"<strong>data</strong> (<code>dict</code>) &#x2014; The data to store.",name:"data"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/base.py#L673"}}),ee=new Ke({props:{title:"Utilities",local:"transformers.pipelines.PipelineException",headingTag:"h2"}}),te=new _({props:{name:"class transformers.pipelines.PipelineException",anchor:"transformers.pipelines.PipelineException",parameters:[{name:"task",val:": str"},{name:"model",val:": str"},{name:"reason",val:": str"}],parametersDescription:[{anchor:"transformers.pipelines.PipelineException.task",description:"<strong>task</strong> (<code>str</code>) &#x2014; The task of the pipeline.",name:"task"},{anchor:"transformers.pipelines.PipelineException.model",description:"<strong>model</strong> (<code>str</code>) &#x2014; The model used by the pipeline.",name:"model"},{anchor:"transformers.pipelines.PipelineException.reason",description:"<strong>reason</strong> (<code>str</code>) &#x2014; The error message to display.",name:"reason"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/pipelines/base.py#L418"}}),{c(){F=o("meta"),Fe=a(),De=o("p"),ye=a(),d(S.$$.fragment),Ce=a(),O=o("p"),O.textContent=Dt,Te=a(),I=o("p"),I.textContent=wt,Le=a(),d(V.$$.fragment),He=a(),y=o("div"),d(W.$$.fragment),Xe=a(),re=o("p"),re.innerHTML=Ft,Ee=a(),C=o("div"),d(q.$$.fragment),Ye=a(),ae=o("p"),ae.textContent=yt,Me=a(),P=o("div"),d(j.$$.fragment),et=a(),ne=o("p"),ne.innerHTML=Ct,tt=a(),oe=o("p"),oe.innerHTML=Tt,ke=a(),d(J.$$.fragment),Ae=a(),m=o("div"),d(U.$$.fragment),rt=a(),se=o("p"),se.textContent=Lt,at=a(),ie=o("ul"),ie.innerHTML=Ht,nt=a(),pe=o("p"),pe.innerHTML=Et,ot=a(),L=o("div"),d(z.$$.fragment),st=a(),le=o("p"),le.innerHTML=Mt,it=a(),H=o("div"),d(N.$$.fragment),pt=a(),me=o("p"),me.innerHTML=kt,lt=a(),E=o("div"),d(R.$$.fragment),mt=a(),de=o("p"),de.textContent=At,Qe=a(),D=o("div"),d(B.$$.fragment),dt=a(),ce=o("p"),ce.textContent=Qt,ct=a(),M=o("div"),d(Z.$$.fragment),ut=a(),ue=o("p"),ue.innerHTML=St,Se=a(),w=o("div"),d(G.$$.fragment),ft=a(),fe=o("p"),fe.textContent=Ot,ht=a(),k=o("div"),d(K.$$.fragment),gt=a(),he=o("p"),he.textContent=It,Oe=a(),x=o("div"),d(X.$$.fragment),vt=a(),ge=o("p"),ge.textContent=Vt,bt=a(),ve=o("p"),ve.textContent=Wt,$t=a(),A=o("div"),d(Y.$$.fragment),_t=a(),be=o("p"),be.textContent=qt,Ie=a(),d(ee.$$.fragment),Ve=a(),T=o("div"),d(te.$$.fragment),xt=a(),$e=o("p"),$e.innerHTML=jt,We=a(),we=o("p"),this.h()},l(e){const i=Bt("svelte-u9bgzb",document.head);F=s(i,"META",{name:!0,content:!0}),i.forEach(r),Fe=n(e),De=s(e,"P",{}),v(De).forEach(r),ye=n(e),c(S.$$.fragment,e),Ce=n(e),O=s(e,"P",{"data-svelte-h":!0}),l(O)!=="svelte-wr9t4b"&&(O.textContent=Dt),Te=n(e),I=s(e,"P",{"data-svelte-h":!0}),l(I)!=="svelte-1ui7w53"&&(I.textContent=wt),Le=n(e),c(V.$$.fragment,e),He=n(e),y=s(e,"DIV",{class:!0});var je=v(y);c(W.$$.fragment,je),Xe=n(je),re=s(je,"P",{"data-svelte-h":!0}),l(re)!=="svelte-1tvsyzq"&&(re.innerHTML=Ft),je.forEach(r),Ee=n(e),C=s(e,"DIV",{class:!0});var Je=v(C);c(q.$$.fragment,Je),Ye=n(Je),ae=s(Je,"P",{"data-svelte-h":!0}),l(ae)!=="svelte-1hjf3sf"&&(ae.textContent=yt),Je.forEach(r),Me=n(e),P=s(e,"DIV",{class:!0});var _e=v(P);c(j.$$.fragment,_e),et=n(_e),ne=s(_e,"P",{"data-svelte-h":!0}),l(ne)!=="svelte-12i18ng"&&(ne.innerHTML=Ct),tt=n(_e),oe=s(_e,"P",{"data-svelte-h":!0}),l(oe)!=="svelte-z2nze2"&&(oe.innerHTML=Tt),_e.forEach(r),ke=n(e),c(J.$$.fragment,e),Ae=n(e),m=s(e,"DIV",{class:!0});var $=v(m);c(U.$$.fragment,$),rt=n($),se=s($,"P",{"data-svelte-h":!0}),l(se)!=="svelte-1mb1edh"&&(se.textContent=Lt),at=n($),ie=s($,"UL",{"data-svelte-h":!0}),l(ie)!=="svelte-1uf4n4e"&&(ie.innerHTML=Ht),nt=n($),pe=s($,"P",{"data-svelte-h":!0}),l(pe)!=="svelte-u9lis0"&&(pe.innerHTML=Et),ot=n($),L=s($,"DIV",{class:!0});var Ue=v(L);c(z.$$.fragment,Ue),st=n(Ue),le=s(Ue,"P",{"data-svelte-h":!0}),l(le)!=="svelte-iesbza"&&(le.innerHTML=Mt),Ue.forEach(r),it=n($),H=s($,"DIV",{class:!0});var ze=v(H);c(N.$$.fragment,ze),pt=n(ze),me=s(ze,"P",{"data-svelte-h":!0}),l(me)!=="svelte-1u97f0u"&&(me.innerHTML=kt),ze.forEach(r),lt=n($),E=s($,"DIV",{class:!0});var Ne=v(E);c(R.$$.fragment,Ne),mt=n(Ne),de=s(Ne,"P",{"data-svelte-h":!0}),l(de)!=="svelte-i36752"&&(de.textContent=At),Ne.forEach(r),$.forEach(r),Qe=n(e),D=s(e,"DIV",{class:!0});var xe=v(D);c(B.$$.fragment,xe),dt=n(xe),ce=s(xe,"P",{"data-svelte-h":!0}),l(ce)!=="svelte-jm6p0u"&&(ce.textContent=Qt),ct=n(xe),M=s(xe,"DIV",{class:!0});var Re=v(M);c(Z.$$.fragment,Re),ut=n(Re),ue=s(Re,"P",{"data-svelte-h":!0}),l(ue)!=="svelte-1u97f0u"&&(ue.innerHTML=St),Re.forEach(r),xe.forEach(r),Se=n(e),w=s(e,"DIV",{class:!0});var Pe=v(w);c(G.$$.fragment,Pe),ft=n(Pe),fe=s(Pe,"P",{"data-svelte-h":!0}),l(fe)!=="svelte-jpmp8k"&&(fe.textContent=Ot),ht=n(Pe),k=s(Pe,"DIV",{class:!0});var Be=v(k);c(K.$$.fragment,Be),gt=n(Be),he=s(Be,"P",{"data-svelte-h":!0}),l(he)!=="svelte-1ly8fsk"&&(he.textContent=It),Be.forEach(r),Pe.forEach(r),Oe=n(e),x=s(e,"DIV",{class:!0});var Q=v(x);c(X.$$.fragment,Q),vt=n(Q),ge=s(Q,"P",{"data-svelte-h":!0}),l(ge)!=="svelte-vxtild"&&(ge.textContent=Vt),bt=n(Q),ve=s(Q,"P",{"data-svelte-h":!0}),l(ve)!=="svelte-83moxo"&&(ve.textContent=Wt),$t=n(Q),A=s(Q,"DIV",{class:!0});var Ze=v(A);c(Y.$$.fragment,Ze),_t=n(Ze),be=s(Ze,"P",{"data-svelte-h":!0}),l(be)!=="svelte-v6konq"&&(be.textContent=qt),Ze.forEach(r),Q.forEach(r),Ie=n(e),c(ee.$$.fragment,e),Ve=n(e),T=s(e,"DIV",{class:!0});var Ge=v(T);c(te.$$.fragment,Ge),xt=n(Ge),$e=s(Ge,"P",{"data-svelte-h":!0}),l($e)!=="svelte-43ud0a"&&($e.innerHTML=jt),Ge.forEach(r),We=n(e),we=s(e,"P",{}),v(we).forEach(r),this.h()},h(){b(F,"name","hf:doc:metadata"),b(F,"content",Gt),b(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),b(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),b(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),b(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),b(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),b(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),b(m,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),b(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),b(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),b(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),b(w,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),b(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),b(x,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),b(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,i){t(document.head,F),p(e,Fe,i),p(e,De,i),p(e,ye,i),u(S,e,i),p(e,Ce,i),p(e,O,i),p(e,Te,i),p(e,I,i),p(e,Le,i),u(V,e,i),p(e,He,i),p(e,y,i),u(W,y,null),t(y,Xe),t(y,re),p(e,Ee,i),p(e,C,i),u(q,C,null),t(C,Ye),t(C,ae),p(e,Me,i),p(e,P,i),u(j,P,null),t(P,et),t(P,ne),t(P,tt),t(P,oe),p(e,ke,i),u(J,e,i),p(e,Ae,i),p(e,m,i),u(U,m,null),t(m,rt),t(m,se),t(m,at),t(m,ie),t(m,nt),t(m,pe),t(m,ot),t(m,L),u(z,L,null),t(L,st),t(L,le),t(m,it),t(m,H),u(N,H,null),t(H,pt),t(H,me),t(m,lt),t(m,E),u(R,E,null),t(E,mt),t(E,de),p(e,Qe,i),p(e,D,i),u(B,D,null),t(D,dt),t(D,ce),t(D,ct),t(D,M),u(Z,M,null),t(M,ut),t(M,ue),p(e,Se,i),p(e,w,i),u(G,w,null),t(w,ft),t(w,fe),t(w,ht),t(w,k),u(K,k,null),t(k,gt),t(k,he),p(e,Oe,i),p(e,x,i),u(X,x,null),t(x,vt),t(x,ge),t(x,bt),t(x,ve),t(x,$t),t(x,A),u(Y,A,null),t(A,_t),t(A,be),p(e,Ie,i),u(ee,e,i),p(e,Ve,i),p(e,T,i),u(te,T,null),t(T,xt),t(T,$e),p(e,We,i),p(e,we,i),qe=!0},p:Ut,i(e){qe||(f(S.$$.fragment,e),f(V.$$.fragment,e),f(W.$$.fragment,e),f(q.$$.fragment,e),f(j.$$.fragment,e),f(J.$$.fragment,e),f(U.$$.fragment,e),f(z.$$.fragment,e),f(N.$$.fragment,e),f(R.$$.fragment,e),f(B.$$.fragment,e),f(Z.$$.fragment,e),f(G.$$.fragment,e),f(K.$$.fragment,e),f(X.$$.fragment,e),f(Y.$$.fragment,e),f(ee.$$.fragment,e),f(te.$$.fragment,e),qe=!0)},o(e){h(S.$$.fragment,e),h(V.$$.fragment,e),h(W.$$.fragment,e),h(q.$$.fragment,e),h(j.$$.fragment,e),h(J.$$.fragment,e),h(U.$$.fragment,e),h(z.$$.fragment,e),h(N.$$.fragment,e),h(R.$$.fragment,e),h(B.$$.fragment,e),h(Z.$$.fragment,e),h(G.$$.fragment,e),h(K.$$.fragment,e),h(X.$$.fragment,e),h(Y.$$.fragment,e),h(ee.$$.fragment,e),h(te.$$.fragment,e),qe=!1},d(e){e&&(r(Fe),r(De),r(ye),r(Ce),r(O),r(Te),r(I),r(Le),r(He),r(y),r(Ee),r(C),r(Me),r(P),r(ke),r(Ae),r(m),r(Qe),r(D),r(Se),r(w),r(Oe),r(x),r(Ie),r(Ve),r(T),r(We),r(we)),r(F),g(S,e),g(V,e),g(W),g(q),g(j),g(J,e),g(U),g(z),g(N),g(R),g(B),g(Z),g(G),g(K),g(X),g(Y),g(ee,e),g(te)}}}const Gt='{"title":"Utilities for pipelines","local":"utilities-for-pipelines","sections":[{"title":"Argument handling","local":"transformers.pipelines.ArgumentHandler","sections":[],"depth":2},{"title":"Data format","local":"transformers.PipelineDataFormat","sections":[],"depth":2},{"title":"Utilities","local":"transformers.pipelines.PipelineException","sections":[],"depth":2}],"depth":1}';function Kt(Pt){return zt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class rr extends Nt{constructor(F){super(),Rt(this,F,Kt,Zt,Jt,{})}}export{rr as component};
