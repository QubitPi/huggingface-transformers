import{s as Os,o as As,n as q}from"../chunks/scheduler.9bc65507.js";import{S as Ks,i as ea,g as l,s as n,r as f,A as ta,h as d,f as r,c as s,j as T,u,x as b,k,y as t,a as c,v as h,d as g,t as _,w as v}from"../chunks/index.707bf1b6.js";import{T as uo}from"../chunks/Tip.c2ecdbf4.js";import{D as x}from"../chunks/Docstring.17db21ae.js";import{C as ye}from"../chunks/CodeBlock.54a9f38d.js";import{E as vt}from"../chunks/ExampleCodeBlock.4f515aa9.js";import{H as U}from"../chunks/Heading.342b1fa6.js";function oa(w){let a,y="Example:",p,m,C;return m=new ye({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMENsdnBDb25maWclMkMlMjBDbHZwTW9kZWxGb3JDb25kaXRpb25hbEdlbmVyYXRpb24lMEElMEElMjMlMjBJbml0aWFsaXppbmclMjBhJTIwQ2x2cENvbmZpZyUyMHdpdGglMjBzdXNuYXRvJTJGY2x2cF9kZXYlMjBzdHlsZSUyMGNvbmZpZ3VyYXRpb24lMEFjb25maWd1cmF0aW9uJTIwJTNEJTIwQ2x2cENvbmZpZygpJTBBJTBBJTIzJTIwSW5pdGlhbGl6aW5nJTIwYSUyMENsdnBNb2RlbEZvckNvbmRpdGlvbmFsR2VuZXJhdGlvbiUyMCh3aXRoJTIwcmFuZG9tJTIwd2VpZ2h0cyklMjBmcm9tJTIwdGhlJTIwc3VzbmF0byUyRmNsdnBfZGV2JTIwc3R5bGUlMjBjb25maWd1cmF0aW9uJTBBbW9kZWwlMjAlM0QlMjBDbHZwTW9kZWxGb3JDb25kaXRpb25hbEdlbmVyYXRpb24oY29uZmlndXJhdGlvbiklMEElMEElMjMlMjBBY2Nlc3NpbmclMjB0aGUlMjBtb2RlbCUyMGNvbmZpZ3VyYXRpb24lMEFjb25maWd1cmF0aW9uJTIwJTNEJTIwbW9kZWwuY29uZmlnJTBBJTBBJTIzJTIwV2UlMjBjYW4lMjBhbHNvJTIwaW5pdGlhbGl6ZSUyMGElMjBDTFZQQ29uZmlnJTIwZnJvbSUyMGElMjBDTFZQVGV4dENvbmZpZyUyQyUyMENMVlBTcGVlY2hDb25maWclMjBhbmQlMjBhJTIwQ0xWUEF1dG9SZWdyZXNzaXZlQ29uZmlnJTBBZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMENsdnBFbmNvZGVyQ29uZmlnJTJDJTIwQ2x2cERlY29kZXJDb25maWclMEElMEElMjMlMjBJbml0aWFsaXppbmclMjBhJTIwQ0xWUCUyMHRleHQlMkMlMjBDTFZQJTIwc3BlZWNoJTIwYW5kJTIwQ0xWUCUyMGRlY29kZXIlMjBjb25maWd1cmF0aW9uJTBBY29uZmlnX3RleHQlMjAlM0QlMjBDbHZwRW5jb2RlckNvbmZpZygpJTBBY29uZmlnX3NwZWVjaCUyMCUzRCUyMENsdnBFbmNvZGVyQ29uZmlnKCklMEFkZWNvZGVyX2NvbmZpZyUyMCUzRCUyMENsdnBEZWNvZGVyQ29uZmlnKCklMEElMEFjb25maWclMjAlM0QlMjBDbHZwQ29uZmlnLmZyb21fc3ViX21vZGVsX2NvbmZpZ3MoY29uZmlnX3RleHQlMkMlMjBjb25maWdfc3BlZWNoJTJDJTIwZGVjb2Rlcl9jb25maWcp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ClvpConfig, ClvpModelForConditionalGeneration

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a ClvpConfig with susnato/clvp_dev style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = ClvpConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a ClvpModelForConditionalGeneration (with random weights) from the susnato/clvp_dev style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ClvpModelForConditionalGeneration(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># We can also initialize a CLVPConfig from a CLVPTextConfig, CLVPSpeechConfig and a CLVPAutoRegressiveConfig</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ClvpEncoderConfig, ClvpDecoderConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a CLVP text, CLVP speech and CLVP decoder configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config_text = ClvpEncoderConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span>config_speech = ClvpEncoderConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span>decoder_config = ClvpDecoderConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span>config = ClvpConfig.from_sub_model_configs(config_text, config_speech, decoder_config)`,wrap:!1}}),{c(){a=l("p"),a.textContent=y,p=n(),f(m.$$.fragment)},l(o){a=d(o,"P",{"data-svelte-h":!0}),b(a)!=="svelte-11lpom8"&&(a.textContent=y),p=s(o),u(m.$$.fragment,o)},m(o,M){c(o,a,M),c(o,p,M),h(m,o,M),C=!0},p:q,i(o){C||(g(m.$$.fragment,o),C=!0)},o(o){_(m.$$.fragment,o),C=!1},d(o){o&&(r(a),r(p)),v(m,o)}}}function na(w){let a,y="Example:",p,m,C;return m=new ye({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMENsdnBFbmNvZGVyQ29uZmlnJTJDJTIwQ2x2cEVuY29kZXIlMEElMEElMjMlMjBJbml0aWFsaXppbmclMjBhJTIwQ2x2cEVuY29kZXJDb25maWclMjB3aXRoJTIwc3VzbmF0byUyRmNsdnBfZGV2JTIwc3R5bGUlMjBjb25maWd1cmF0aW9uJTBBZW5jb2Rlcl9jb25maWd1cmF0aW9uJTIwJTNEJTIwQ2x2cEVuY29kZXJDb25maWcoKSUwQSUwQSUyMyUyMEluaXRpYWxpemluZyUyMGElMjBDbHZwRW5jb2RlciUyMCh3aXRoJTIwcmFuZG9tJTIwd2VpZ2h0cyklMjBmcm9tJTIwdGhlJTIwc3VzbmF0byUyRmNsdnBfZGV2JTIwc3R5bGUlMjBjb25maWd1cmF0aW9uJTBBbW9kZWwlMjAlM0QlMjBDbHZwRW5jb2RlcihlbmNvZGVyX2NvbmZpZ3VyYXRpb24pJTBBJTBBJTIzJTIwQWNjZXNzaW5nJTIwdGhlJTIwbW9kZWwlMjBjb25maWd1cmF0aW9uJTBBY29uZmlndXJhdGlvbiUyMCUzRCUyMG1vZGVsLmNvbmZpZw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ClvpEncoderConfig, ClvpEncoder

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a ClvpEncoderConfig with susnato/clvp_dev style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>encoder_configuration = ClvpEncoderConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a ClvpEncoder (with random weights) from the susnato/clvp_dev style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ClvpEncoder(encoder_configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`,wrap:!1}}),{c(){a=l("p"),a.textContent=y,p=n(),f(m.$$.fragment)},l(o){a=d(o,"P",{"data-svelte-h":!0}),b(a)!=="svelte-11lpom8"&&(a.textContent=y),p=s(o),u(m.$$.fragment,o)},m(o,M){c(o,a,M),c(o,p,M),h(m,o,M),C=!0},p:q,i(o){C||(g(m.$$.fragment,o),C=!0)},o(o){_(m.$$.fragment,o),C=!1},d(o){o&&(r(a),r(p)),v(m,o)}}}function sa(w){let a,y="Example:",p,m,C;return m=new ye({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMENsdnBEZWNvZGVyQ29uZmlnJTJDJTIwQ2x2cERlY29kZXIlMEElMEElMjMlMjBJbml0aWFsaXppbmclMjBhJTIwQ2x2cERlY29kZXJDb25maWclMjB3aXRoJTIwc3VzbmF0byUyRmNsdnBfZGV2JTIwc3R5bGUlMjBjb25maWd1cmF0aW9uJTBBZGVjb2Rlcl9jb25maWd1cmF0aW9uJTIwJTNEJTIwQ2x2cERlY29kZXJDb25maWcoKSUwQSUwQSUyMyUyMEluaXRpYWxpemluZyUyMGElMjBDbHZwRGVjb2RlciUyMCh3aXRoJTIwcmFuZG9tJTIwd2VpZ2h0cyklMjBmcm9tJTIwdGhlJTIwc3VzbmF0byUyRmNsdnBfZGV2JTIwc3R5bGUlMjBjb25maWd1cmF0aW9uJTBBbW9kZWwlMjAlM0QlMjBDbHZwRGVjb2RlcihkZWNvZGVyX2NvbmZpZ3VyYXRpb24pJTBBJTBBJTIzJTIwQWNjZXNzaW5nJTIwdGhlJTIwbW9kZWwlMjBjb25maWd1cmF0aW9uJTBBY29uZmlndXJhdGlvbiUyMCUzRCUyMG1vZGVsLmNvbmZpZw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ClvpDecoderConfig, ClvpDecoder

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a ClvpDecoderConfig with susnato/clvp_dev style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>decoder_configuration = ClvpDecoderConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a ClvpDecoder (with random weights) from the susnato/clvp_dev style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ClvpDecoder(decoder_configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`,wrap:!1}}),{c(){a=l("p"),a.textContent=y,p=n(),f(m.$$.fragment)},l(o){a=d(o,"P",{"data-svelte-h":!0}),b(a)!=="svelte-11lpom8"&&(a.textContent=y),p=s(o),u(m.$$.fragment,o)},m(o,M){c(o,a,M),c(o,p,M),h(m,o,M),C=!0},p:q,i(o){C||(g(m.$$.fragment,o),C=!0)},o(o){_(m.$$.fragment,o),C=!1},d(o){o&&(r(a),r(p)),v(m,o)}}}function aa(w){let a,y="be encoded differently whether it is at the beginning of the sentence (without space) or not:",p,m,C;return m=new ye({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMENsdnBUb2tlbml6ZXIlMEElMEF0b2tlbml6ZXIlMjAlM0QlMjBDbHZwVG9rZW5pemVyLmZyb21fcHJldHJhaW5lZCglMjJzdXNuYXRvJTJGY2x2cF9kZXYlMjIpJTBBdG9rZW5pemVyKCUyMkhlbGxvJTIwd29ybGQlMjIpJTVCJTIyaW5wdXRfaWRzJTIyJTVEJTBBJTBBdG9rZW5pemVyKCUyMiUyMEhlbGxvJTIwd29ybGQlMjIpJTVCJTIyaW5wdXRfaWRzJTIyJTVE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ClvpTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = ClvpTokenizer.from_pretrained(<span class="hljs-string">&quot;susnato/clvp_dev&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer(<span class="hljs-string">&quot;Hello world&quot;</span>)[<span class="hljs-string">&quot;input_ids&quot;</span>]
[<span class="hljs-number">62</span>, <span class="hljs-number">84</span>, <span class="hljs-number">28</span>, <span class="hljs-number">2</span>, <span class="hljs-number">179</span>, <span class="hljs-number">79</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer(<span class="hljs-string">&quot; Hello world&quot;</span>)[<span class="hljs-string">&quot;input_ids&quot;</span>]
[<span class="hljs-number">2</span>, <span class="hljs-number">62</span>, <span class="hljs-number">84</span>, <span class="hljs-number">28</span>, <span class="hljs-number">2</span>, <span class="hljs-number">179</span>, <span class="hljs-number">79</span>]`,wrap:!1}}),{c(){a=l("p"),a.textContent=y,p=n(),f(m.$$.fragment)},l(o){a=d(o,"P",{"data-svelte-h":!0}),b(a)!=="svelte-12atnao"&&(a.textContent=y),p=s(o),u(m.$$.fragment,o)},m(o,M){c(o,a,M),c(o,p,M),h(m,o,M),C=!0},p:q,i(o){C||(g(m.$$.fragment,o),C=!0)},o(o){_(m.$$.fragment,o),C=!1},d(o){o&&(r(a),r(p)),v(m,o)}}}function ra(w){let a,y="When used with <code>is_split_into_words=True</code>, this tokenizer will add a space before each word (even the first one).";return{c(){a=l("p"),a.innerHTML=y},l(p){a=d(p,"P",{"data-svelte-h":!0}),b(a)!=="svelte-jhmxzm"&&(a.innerHTML=y)},m(p,m){c(p,a,m)},p:q,d(p){p&&r(a)}}}function ia(w){let a,y=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){a=l("p"),a.innerHTML=y},l(p){a=d(p,"P",{"data-svelte-h":!0}),b(a)!=="svelte-fincs2"&&(a.innerHTML=y)},m(p,m){c(p,a,m)},p:q,d(p){p&&r(a)}}}function la(w){let a,y="Examples:",p,m,C;return m=new ye({props:{code:"aW1wb3J0JTIwZGF0YXNldHMlMEFmcm9tJTIwdHJhbnNmb3JtZXJzJTIwaW1wb3J0JTIwQ2x2cFByb2Nlc3NvciUyQyUyMENsdnBNb2RlbEZvckNvbmRpdGlvbmFsR2VuZXJhdGlvbiUwQSUwQSUyMyUyMERlZmluZSUyMHRoZSUyMFRleHQlMjBhbmQlMjBMb2FkJTIwdGhlJTIwQXVkaW8lMjAoV2UlMjBhcmUlMjB0YWtpbmclMjBhbiUyMGF1ZGlvJTIwZXhhbXBsZSUyMGZyb20lMjBIdWdnaW5nRmFjZSUyMEh1YiUyMHVzaW5nJTIwJTYwZGF0YXNldHMlNjAlMjBsaWJyYXJ5KSUwQXRleHQlMjAlM0QlMjAlMjJUaGlzJTIwaXMlMjBhbiUyMGV4YW1wbGUlMjB0ZXh0LiUyMiUwQSUwQWRzJTIwJTNEJTIwZGF0YXNldHMubG9hZF9kYXRhc2V0KCUyMmhmLWludGVybmFsLXRlc3RpbmclMkZsaWJyaXNwZWVjaF9hc3JfZHVtbXklMjIlMkMlMjAlMjJjbGVhbiUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcyUyMCUzRCUyMGRzLmNhc3RfY29sdW1uKCUyMmF1ZGlvJTIyJTJDJTIwZGF0YXNldHMuQXVkaW8oc2FtcGxpbmdfcmF0ZSUzRDIyMDUwKSklMEFfJTJDJTIwYXVkaW8lMkMlMjBzciUyMCUzRCUyMGRzLnNvcnQoJTIyaWQlMjIpLnNlbGVjdChyYW5nZSgxKSklNUIlM0ExJTVEJTVCJTIyYXVkaW8lMjIlNUQlNUIwJTVELnZhbHVlcygpJTBBJTBBJTIzJTIwRGVmaW5lJTIwcHJvY2Vzc29yJTIwYW5kJTIwbW9kZWwlMEFwcm9jZXNzb3IlMjAlM0QlMjBDbHZwUHJvY2Vzc29yLmZyb21fcHJldHJhaW5lZCglMjJzdXNuYXRvJTJGY2x2cF9kZXYlMjIpJTBBbW9kZWwlMjAlM0QlMjBDbHZwTW9kZWxGb3JDb25kaXRpb25hbEdlbmVyYXRpb24uZnJvbV9wcmV0cmFpbmVkKCUyMnN1c25hdG8lMkZjbHZwX2RldiUyMiklMEElMEElMjMlMjBwcm9jZXNzb3IlMjBvdXRwdXRzJTIwYW5kJTIwbW9kZWwlMjBvdXRwdXRzJTBBcHJvY2Vzc29yX291dHB1dCUyMCUzRCUyMHByb2Nlc3NvcihyYXdfc3BlZWNoJTNEYXVkaW8lMkMlMjBzYW1wbGluZ19yYXRlJTNEc3IlMkMlMjB0ZXh0JTNEdGV4dCUyQyUyMHJldHVybl90ZW5zb3JzJTNEJTIycHQlMjIpJTBBb3V0cHV0cyUyMCUzRCUyMG1vZGVsKCUwQSUyMCUyMCUyMCUyMGlucHV0X2lkcyUzRHByb2Nlc3Nvcl9vdXRwdXQlNUIlMjJpbnB1dF9pZHMlMjIlNUQlMkMlMEElMjAlMjAlMjAlMjBpbnB1dF9mZWF0dXJlcyUzRHByb2Nlc3Nvcl9vdXRwdXQlNUIlMjJpbnB1dF9mZWF0dXJlcyUyMiU1RCUyQyUwQSUyMCUyMCUyMCUyMHJldHVybl9kaWN0JTNEVHJ1ZSUyQyUwQSk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ClvpProcessor, ClvpModelForConditionalGeneration

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Define the Text and Load the Audio (We are taking an audio example from HuggingFace Hub using \`datasets\` library)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;This is an example text.&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&quot;hf-internal-testing/librispeech_asr_dummy&quot;</span>, <span class="hljs-string">&quot;clean&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, datasets.Audio(sampling_rate=<span class="hljs-number">22050</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>_, audio, sr = ds.sort(<span class="hljs-string">&quot;id&quot;</span>).select(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>))[:<span class="hljs-number">1</span>][<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-number">0</span>].values()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Define processor and model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = ClvpProcessor.from_pretrained(<span class="hljs-string">&quot;susnato/clvp_dev&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ClvpModelForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;susnato/clvp_dev&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># processor outputs and model outputs</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor_output = processor(raw_speech=audio, sampling_rate=sr, text=text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(
<span class="hljs-meta">... </span>    input_ids=processor_output[<span class="hljs-string">&quot;input_ids&quot;</span>],
<span class="hljs-meta">... </span>    input_features=processor_output[<span class="hljs-string">&quot;input_features&quot;</span>],
<span class="hljs-meta">... </span>    return_dict=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>)`,wrap:!1}}),{c(){a=l("p"),a.textContent=y,p=n(),f(m.$$.fragment)},l(o){a=d(o,"P",{"data-svelte-h":!0}),b(a)!=="svelte-kvfsh7"&&(a.textContent=y),p=s(o),u(m.$$.fragment,o)},m(o,M){c(o,a,M),c(o,p,M),h(m,o,M),C=!0},p:q,i(o){C||(g(m.$$.fragment,o),C=!0)},o(o){_(m.$$.fragment,o),C=!1},d(o){o&&(r(a),r(p)),v(m,o)}}}function da(w){let a,y="Examples:",p,m,C;return m=new ye({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMENsdnBQcm9jZXNzb3IlMkMlMjBDbHZwTW9kZWxGb3JDb25kaXRpb25hbEdlbmVyYXRpb24lMEElMEElMjMlMjBEZWZpbmUlMjB0aGUlMjBUZXh0JTBBdGV4dCUyMCUzRCUyMCUyMlRoaXMlMjBpcyUyMGFuJTIwZXhhbXBsZSUyMHRleHQuJTIyJTBBJTBBJTIzJTIwRGVmaW5lJTIwcHJvY2Vzc29yJTIwYW5kJTIwbW9kZWwlMEFwcm9jZXNzb3IlMjAlM0QlMjBDbHZwUHJvY2Vzc29yLmZyb21fcHJldHJhaW5lZCglMjJzdXNuYXRvJTJGY2x2cF9kZXYlMjIpJTBBbW9kZWwlMjAlM0QlMjBDbHZwTW9kZWxGb3JDb25kaXRpb25hbEdlbmVyYXRpb24uZnJvbV9wcmV0cmFpbmVkKCUyMnN1c25hdG8lMkZjbHZwX2RldiUyMiklMEElMEElMjMlMjBHZW5lcmF0ZSUyMHByb2Nlc3NvciUyMG91dHB1dCUyMGFuZCUyMHRleHQlMjBlbWJlZHMlMEFwcm9jZXNzb3Jfb3V0cHV0JTIwJTNEJTIwcHJvY2Vzc29yKHRleHQlM0R0ZXh0JTJDJTIwcmV0dXJuX3RlbnNvcnMlM0QlMjJwdCUyMiklMEF0ZXh0X2VtYmVkcyUyMCUzRCUyMG1vZGVsLmdldF90ZXh0X2ZlYXR1cmVzKGlucHV0X2lkcyUzRHByb2Nlc3Nvcl9vdXRwdXQlNUIlMjJpbnB1dF9pZHMlMjIlNUQp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ClvpProcessor, ClvpModelForConditionalGeneration

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Define the Text</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;This is an example text.&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Define processor and model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = ClvpProcessor.from_pretrained(<span class="hljs-string">&quot;susnato/clvp_dev&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ClvpModelForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;susnato/clvp_dev&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Generate processor output and text embeds</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor_output = processor(text=text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>text_embeds = model.get_text_features(input_ids=processor_output[<span class="hljs-string">&quot;input_ids&quot;</span>])`,wrap:!1}}),{c(){a=l("p"),a.textContent=y,p=n(),f(m.$$.fragment)},l(o){a=d(o,"P",{"data-svelte-h":!0}),b(a)!=="svelte-kvfsh7"&&(a.textContent=y),p=s(o),u(m.$$.fragment,o)},m(o,M){c(o,a,M),c(o,p,M),h(m,o,M),C=!0},p:q,i(o){C||(g(m.$$.fragment,o),C=!0)},o(o){_(m.$$.fragment,o),C=!1},d(o){o&&(r(a),r(p)),v(m,o)}}}function ca(w){let a,y="Examples:",p,m,C;return m=new ye({props:{code:"aW1wb3J0JTIwZGF0YXNldHMlMEFmcm9tJTIwdHJhbnNmb3JtZXJzJTIwaW1wb3J0JTIwQ2x2cFByb2Nlc3NvciUyQyUyMENsdnBNb2RlbEZvckNvbmRpdGlvbmFsR2VuZXJhdGlvbiUwQSUwQSUyMyUyMERlZmluZSUyMHRoZSUyMFRleHQlMjBhbmQlMjBMb2FkJTIwdGhlJTIwQXVkaW8lMjAoV2UlMjBhcmUlMjB0YWtpbmclMjBhbiUyMGF1ZGlvJTIwZXhhbXBsZSUyMGZyb20lMjBIdWdnaW5nRmFjZSUyMEh1YiUyMHVzaW5nJTIwJTYwZGF0YXNldHMlNjAlMjBsaWJyYXJ5KSUwQXRleHQlMjAlM0QlMjAlMjJUaGlzJTIwaXMlMjBhbiUyMGV4YW1wbGUlMjB0ZXh0LiUyMiUwQWRzJTIwJTNEJTIwZGF0YXNldHMubG9hZF9kYXRhc2V0KCUyMmhmLWludGVybmFsLXRlc3RpbmclMkZsaWJyaXNwZWVjaF9hc3JfZHVtbXklMjIlMkMlMjAlMjJjbGVhbiUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcyUyMCUzRCUyMGRzLmNhc3RfY29sdW1uKCUyMmF1ZGlvJTIyJTJDJTIwZGF0YXNldHMuQXVkaW8oc2FtcGxpbmdfcmF0ZSUzRDIyMDUwKSklMEFfJTJDJTIwYXVkaW8lMkMlMjBzciUyMCUzRCUyMGRzLnNvcnQoJTIyaWQlMjIpLnNlbGVjdChyYW5nZSgxKSklNUIlM0ExJTVEJTVCJTIyYXVkaW8lMjIlNUQlNUIwJTVELnZhbHVlcygpJTBBJTBBJTIzJTIwRGVmaW5lJTIwcHJvY2Vzc29yJTIwYW5kJTIwbW9kZWwlMEFwcm9jZXNzb3IlMjAlM0QlMjBDbHZwUHJvY2Vzc29yLmZyb21fcHJldHJhaW5lZCglMjJzdXNuYXRvJTJGY2x2cF9kZXYlMjIpJTBBbW9kZWwlMjAlM0QlMjBDbHZwTW9kZWxGb3JDb25kaXRpb25hbEdlbmVyYXRpb24uZnJvbV9wcmV0cmFpbmVkKCUyMnN1c25hdG8lMkZjbHZwX2RldiUyMiklMEElMEElMjMlMjBHZW5lcmF0ZSUyMHByb2Nlc3NvciUyMG91dHB1dCUyMGFuZCUyMG1vZGVsJTIwb3V0cHV0JTBBcHJvY2Vzc29yX291dHB1dCUyMCUzRCUyMHByb2Nlc3NvcihyYXdfc3BlZWNoJTNEYXVkaW8lMkMlMjBzYW1wbGluZ19yYXRlJTNEc3IlMkMlMjB0ZXh0JTNEdGV4dCUyQyUyMHJldHVybl90ZW5zb3JzJTNEJTIycHQlMjIpJTBBc3BlZWNoX2VtYmVkcyUyMCUzRCUyMG1vZGVsLmdldF9zcGVlY2hfZmVhdHVyZXMoJTBBJTIwJTIwJTIwJTIwaW5wdXRfaWRzJTNEcHJvY2Vzc29yX291dHB1dCU1QiUyMmlucHV0X2lkcyUyMiU1RCUyQyUyMGlucHV0X2ZlYXR1cmVzJTNEcHJvY2Vzc29yX291dHB1dCU1QiUyMmlucHV0X2ZlYXR1cmVzJTIyJTVEJTBBKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ClvpProcessor, ClvpModelForConditionalGeneration

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Define the Text and Load the Audio (We are taking an audio example from HuggingFace Hub using \`datasets\` library)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;This is an example text.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&quot;hf-internal-testing/librispeech_asr_dummy&quot;</span>, <span class="hljs-string">&quot;clean&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, datasets.Audio(sampling_rate=<span class="hljs-number">22050</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>_, audio, sr = ds.sort(<span class="hljs-string">&quot;id&quot;</span>).select(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>))[:<span class="hljs-number">1</span>][<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-number">0</span>].values()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Define processor and model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = ClvpProcessor.from_pretrained(<span class="hljs-string">&quot;susnato/clvp_dev&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ClvpModelForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;susnato/clvp_dev&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Generate processor output and model output</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor_output = processor(raw_speech=audio, sampling_rate=sr, text=text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>speech_embeds = model.get_speech_features(
<span class="hljs-meta">... </span>    input_ids=processor_output[<span class="hljs-string">&quot;input_ids&quot;</span>], input_features=processor_output[<span class="hljs-string">&quot;input_features&quot;</span>]
<span class="hljs-meta">... </span>)`,wrap:!1}}),{c(){a=l("p"),a.textContent=y,p=n(),f(m.$$.fragment)},l(o){a=d(o,"P",{"data-svelte-h":!0}),b(a)!=="svelte-kvfsh7"&&(a.textContent=y),p=s(o),u(m.$$.fragment,o)},m(o,M){c(o,a,M),c(o,p,M),h(m,o,M),C=!0},p:q,i(o){C||(g(m.$$.fragment,o),C=!0)},o(o){_(m.$$.fragment,o),C=!1},d(o){o&&(r(a),r(p)),v(m,o)}}}function pa(w){let a,y=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){a=l("p"),a.innerHTML=y},l(p){a=d(p,"P",{"data-svelte-h":!0}),b(a)!=="svelte-fincs2"&&(a.innerHTML=y)},m(p,m){c(p,a,m)},p:q,d(p){p&&r(a)}}}function ma(w){let a,y=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){a=l("p"),a.innerHTML=y},l(p){a=d(p,"P",{"data-svelte-h":!0}),b(a)!=="svelte-fincs2"&&(a.innerHTML=y)},m(p,m){c(p,a,m)},p:q,d(p){p&&r(a)}}}function fa(w){let a,y=`Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code>
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`;return{c(){a=l("p"),a.innerHTML=y},l(p){a=d(p,"P",{"data-svelte-h":!0}),b(a)!=="svelte-fincs2"&&(a.innerHTML=y)},m(p,m){c(p,a,m)},p:q,d(p){p&&r(a)}}}function ua(w){let a,y,p,m,C,o,M,ho,Me,rs='The CLVP (Contrastive Language-Voice Pretrained Transformer) model was proposed in <a href="https://arxiv.org/abs/2305.07243" rel="nofollow">Better speech synthesis through scaling</a> by James Betker.',go,Te,is="The abstract from the paper is the following:",_o,ke,ls="<em>In recent years, the field of image generation has been revolutionized by the application of autoregressive transformers and DDPMs. These approaches model the process of image generation as a step-wise probabilistic processes and leverage large amounts of compute and data to learn the image distribution. This methodology of improving performance need not be confined to images. This paper describes a way to apply advances in the image generative domain to speech synthesis. The result is TorToise - an expressive, multi-voice text-to-speech system.</em>",vo,we,ds=`This model was contributed by <a href="https://huggingface.co/susnato" rel="nofollow">Susnato Dhar</a>.
The original code can be found <a href="https://github.com/neonbjb/tortoise-tts" rel="nofollow">here</a>.`,bo,xe,Co,$e,cs="<li>CLVP is an integral part of the Tortoise TTS model.</li> <li>CLVP can be used to compare different generated speech candidates with the provided text, and the best speech tokens are forwarded to the diffusion model.</li> <li>The use of the <code>ClvpModelForConditionalGeneration.generate()</code> method is strongly recommended for tortoise usage.</li> <li>Note that the CLVP model expects the audio to be sampled at 22.05 kHz contrary to other audio models which expects 16 kHz.</li>",yo,je,Mo,Je,ps='<li>The <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpTokenizer">ClvpTokenizer</a> tokenizes the text input, and the <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpFeatureExtractor">ClvpFeatureExtractor</a> extracts the log mel-spectrogram from the desired audio.</li> <li><code>ClvpConditioningEncoder</code> takes those text tokens and audio representations and converts them into embeddings conditioned on the text and audio.</li> <li>The <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpForCausalLM">ClvpForCausalLM</a> uses those embeddings to generate multiple speech candidates.</li> <li>Each speech candidate is passed through the speech encoder (<a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpEncoder">ClvpEncoder</a>) which converts them into a vector representation, and the text encoder (<a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpEncoder">ClvpEncoder</a>) converts the text tokens into the same latent space.</li> <li>At the end, we compare each speech vector with the text vector to see which speech vector is most similar to the text vector.</li> <li><code>ClvpModelForConditionalGeneration.generate()</code> compresses all of the logic described above into a single method.</li>',To,ze,ms="Example :",ko,Fe,wo,Ee,xo,F,Ze,So,bt,fs=`<a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpConfig">ClvpConfig</a> is the configuration class to store the configuration of a <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpModelForConditionalGeneration">ClvpModelForConditionalGeneration</a>. It
is used to instantiate a CLVP model according to the specified arguments, defining the text model, speech model and
decoder model configs. Instantiating a configuration with the defaults will yield a similar configuration to that
of the CLVP <a href="https://huggingface.co/susnato/clvp_dev" rel="nofollow">susnato/clvp_dev</a> architecture.`,Oo,Ct,us=`Configuration objects inherit from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> and can be used to control the model outputs. Read the
documentation from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> for more information.`,Ao,te,Ko,oe,Ie,en,yt,hs=`Instantiate a <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpConfig">ClvpConfig</a> (or a derived class) from CLVP text model configuration, CLVP speech model
configuration and CLVP decoder model configuration.`,$o,Ue,jo,G,We,tn,Mt,gs=`This is the configuration class to store the configuration of a <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpEncoder">ClvpEncoder</a>. It is used to instantiate a CLVP
text or CLVP speech encoder according to the specified arguments. Instantiating a configuration with the defaults
will yield a similar configuration to that of the encoder of the CLVP
<a href="https://huggingface.co/susnato/clvp_dev" rel="nofollow">susnato/clvp_dev</a> architecture.`,on,Tt,_s=`Configuration objects inherit from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> and can be used to control the model outputs. Read the
documentation from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> for more information.`,nn,ne,Jo,Ge,zo,E,Ne,sn,kt,vs=`This is the configuration class to store the configuration of a <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpDecoder">ClvpDecoder</a>. It is used to instantiate a CLVP
Decoder Model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the Decoder part of the CLVP
<a href="https://huggingface.co/susnato/clvp_dev" rel="nofollow">susnato/clvp_dev</a> architecture.`,an,wt,bs=`Configuration objects inherit from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> and can be used to control the model outputs. Read the
documentation from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a> for more information.`,rn,xt,Cs="The architecture is similar to GPT2.",ln,se,Fo,Be,Eo,$,Ve,dn,$t,ys="Construct a CLVP tokenizer. Based on byte-level Byte-Pair-Encoding.",cn,jt,Ms="This tokenizer has been trained to treat spaces like parts of the tokens (a bit like sentencepiece) so a word will",pn,ae,mn,Jt,Ts=`You can get around that behavior by passing <code>add_prefix_space=True</code> when instantiating this tokenizer or when you
call it on some text, but since the model was not pretrained this way, it might yield a decrease in performance.`,fn,re,un,zt,ks=`This tokenizer inherits from <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a> which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`,hn,Ft,He,Zo,Le,Io,Z,Pe,gn,Et,ws="Constructs a CLVP feature extractor.",_n,Zt,xs=`This feature extractor inherits from <a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.SequenceFeatureExtractor">SequenceFeatureExtractor</a> which contains
most of the main methods. Users should refer to this superclass for more information regarding those methods.`,vn,It,$s="This class extracts log-mel-spectrogram features from raw speech using a custom numpy implementation of the <code>Short Time Fourier Transform</code> which should match pytorch’s <code>torch.stft</code> equivalent.",bn,Q,qe,Cn,Ut,js=`<code>ClvpFeatureExtractor</code> is used to extract various voice specific properties such as the pitch and tone of the
voice, speaking speed, and even speaking defects like a lisp or stuttering from a sample voice or <code>raw_speech</code>.`,yn,Wt,Js=`First the voice is padded or truncated in a way such that it becomes a waveform of <code>self.default_audio_length</code>
seconds long and then the log-mel spectrogram is extracted from it.`,Uo,De,Wo,z,Xe,Mn,Gt,zs="Constructs a CLVP processor which wraps a CLVP Feature Extractor and a CLVP Tokenizer into a single processor.",Tn,Nt,Fs=`<a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpProcessor">ClvpProcessor</a> offers all the functionalities of <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpFeatureExtractor">ClvpFeatureExtractor</a> and <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpTokenizer">ClvpTokenizer</a>. See the
<a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpProcessor.__call__"><strong>call</strong>()</a>, <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpProcessor.decode">decode()</a> and <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpProcessor.batch_decode">batch_decode()</a> for more information.`,kn,ie,Re,wn,Bt,Es=`Forwards the <code>audio</code> and <code>sampling_rate</code> arguments to <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpFeatureExtractor.__call__"><strong>call</strong>()</a> and the <code>text</code>
argument to <a href="/docs/transformers/main/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerTokenizer.__call__"><strong>call</strong>()</a>. Please refer to the doctsring of the above two methods for more
information.`,xn,le,Qe,$n,Vt,Zs=`This method forwards all its arguments to ClvpTokenizer’s <a href="/docs/transformers/main/en/model_doc/speecht5#transformers.SpeechT5Tokenizer.decode">decode()</a>. Please refer to
the docstring of this method for more information.`,jn,de,Ye,Jn,Ht,Is=`This method forwards all its arguments to ClvpTokenizer’s <a href="/docs/transformers/main/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerTokenizer.batch_decode">batch_decode()</a>. Please
refer to the docstring of this method for more information.`,Go,Se,No,j,Oe,zn,Lt,Us=`The composite CLVP model with a text encoder, speech encoder and speech decoder model.The speech decoder model generates the speech_ids from the text and the text encoder and speech encoder workstogether to filter out the best speech_ids.
This model inherits from <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a>. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`,Fn,Pt,Ws=`This model is also a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`,En,P,Ae,Zn,qt,Gs='The <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpModelForConditionalGeneration">ClvpModelForConditionalGeneration</a> forward method, overrides the <code>__call__</code> special method.',In,ce,Un,pe,Wn,me,Ke,Gn,Dt,Ns=`Generate method for <code>ClvpModelForConditionalGeneration</code>, this method calls the <code>generate</code> method of
<code>ClvpForCausalLM</code> and then uses those generated <code>speech_ids</code> to process <code>text_embeds</code> and <code>speech_embeds</code> using
<code>ClvpEncoder</code>.`,Nn,Y,et,Bn,Xt,Bs=`This method can be used to extract text_embeds from a text. The text embeddings obtained by applying the
projection layer to the pooled output of the CLVP text encoder model.`,Vn,fe,Hn,S,tt,Ln,Rt,Vs=`This method can be used to extract speech_embeds. The speech embeddings are obtained by applying the speech
model on speech_ids. If speech_ids is not present but both input_ids and input_features are given then the
decoder model will be used to first generate the speech_ids and then applying the speech model.`,Pn,ue,Bo,ot,Vo,N,nt,qn,Qt,Hs=`The CLVP decoder model with a language modelling head on top.
This model inherits from <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a>. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`,Dn,Yt,Ls=`This model is also a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`,Xn,O,st,Rn,St,Ps='The <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpForCausalLM">ClvpForCausalLM</a> forward method, overrides the <code>__call__</code> special method.',Qn,he,Ho,at,Lo,B,rt,Yn,Ot,qs=`The bare Clvp decoder model outputting raw hidden-states without any specific head on top.
This model inherits from <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a>. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`,Sn,At,Ds=`This model is also a PyTorch <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module" rel="nofollow">torch.nn.Module</a> subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`,On,A,it,An,Kt,Xs='The <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpModel">ClvpModel</a> forward method, overrides the <code>__call__</code> special method.',Kn,ge,Po,lt,qo,D,dt,es,eo,Rs=`Transformer encoder consisting of <code>config.num_hidden_layers</code> self attention layers. Each layer is a
<code>ClvpEncoderLayer</code>.`,ts,to,ct,Do,pt,Xo,X,mt,os,oo,Qs="Transformer decoder consisting of <em>config.num_hidden_layers</em> layers. Each layer is a <code>ClvpDecoderLayer</code>",ns,K,ft,ss,no,Ys='The <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpDecoder">ClvpDecoder</a> forward method, overrides the <code>__call__</code> special method.',as,_e,Ro,mo,Qo;return C=new U({props:{title:"CLVP",local:"clvp",headingTag:"h1"}}),M=new U({props:{title:"Overview",local:"overview",headingTag:"h2"}}),xe=new U({props:{title:"Usage tips",local:"usage-tips",headingTag:"h2"}}),je=new U({props:{title:"Brief Explanation:",local:"brief-explanation",headingTag:"h2"}}),Fe=new ye({props:{code:"aW1wb3J0JTIwZGF0YXNldHMlMEFmcm9tJTIwdHJhbnNmb3JtZXJzJTIwaW1wb3J0JTIwQ2x2cFByb2Nlc3NvciUyQyUyMENsdnBNb2RlbEZvckNvbmRpdGlvbmFsR2VuZXJhdGlvbiUwQSUwQSUyMyUyMERlZmluZSUyMHRoZSUyMFRleHQlMjBhbmQlMjBMb2FkJTIwdGhlJTIwQXVkaW8lMjAoV2UlMjBhcmUlMjB0YWtpbmclMjBhbiUyMGF1ZGlvJTIwZXhhbXBsZSUyMGZyb20lMjBIdWdnaW5nRmFjZSUyMEh1YiUyMHVzaW5nJTIwJTYwZGF0YXNldHMlNjAlMjBsaWJyYXJ5KS4lMEF0ZXh0JTIwJTNEJTIwJTIyVGhpcyUyMGlzJTIwYW4lMjBleGFtcGxlJTIwdGV4dC4lMjIlMEElMEFkcyUyMCUzRCUyMGRhdGFzZXRzLmxvYWRfZGF0YXNldCglMjJoZi1pbnRlcm5hbC10ZXN0aW5nJTJGbGlicmlzcGVlY2hfYXNyX2R1bW15JTIyJTJDJTIwJTIyY2xlYW4lMjIlMkMlMjBzcGxpdCUzRCUyMnZhbGlkYXRpb24lMjIpJTBBZHMlMjAlM0QlMjBkcy5jYXN0X2NvbHVtbiglMjJhdWRpbyUyMiUyQyUyMGRhdGFzZXRzLkF1ZGlvKHNhbXBsaW5nX3JhdGUlM0QyMjA1MCkpJTBBc2FtcGxlJTIwJTNEJTIwZHMlNUIwJTVEJTVCJTIyYXVkaW8lMjIlNUQlMEElMEElMjMlMjBEZWZpbmUlMjBwcm9jZXNzb3IlMjBhbmQlMjBtb2RlbC4lMEFwcm9jZXNzb3IlMjAlM0QlMjBDbHZwUHJvY2Vzc29yLmZyb21fcHJldHJhaW5lZCglMjJzdXNuYXRvJTJGY2x2cF9kZXYlMjIpJTBBbW9kZWwlMjAlM0QlMjBDbHZwTW9kZWxGb3JDb25kaXRpb25hbEdlbmVyYXRpb24uZnJvbV9wcmV0cmFpbmVkKCUyMnN1c25hdG8lMkZjbHZwX2RldiUyMiklMEElMEElMjMlMjBHZW5lcmF0ZSUyMHByb2Nlc3NvciUyMG91dHB1dCUyMGFuZCUyMG1vZGVsJTIwb3V0cHV0LiUwQXByb2Nlc3Nvcl9vdXRwdXQlMjAlM0QlMjBwcm9jZXNzb3IocmF3X3NwZWVjaCUzRHNhbXBsZSU1QiUyMmFycmF5JTIyJTVEJTJDJTIwc2FtcGxpbmdfcmF0ZSUzRHNhbXBsZSU1QiUyMnNhbXBsaW5nX3JhdGUlMjIlNUQlMkMlMjB0ZXh0JTNEdGV4dCUyQyUyMHJldHVybl90ZW5zb3JzJTNEJTIycHQlMjIpJTBBZ2VuZXJhdGVkX291dHB1dCUyMCUzRCUyMG1vZGVsLmdlbmVyYXRlKCoqcHJvY2Vzc29yX291dHB1dCk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ClvpProcessor, ClvpModelForConditionalGeneration

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Define the Text and Load the Audio (We are taking an audio example from HuggingFace Hub using \`datasets\` library).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;This is an example text.&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&quot;hf-internal-testing/librispeech_asr_dummy&quot;</span>, <span class="hljs-string">&quot;clean&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, datasets.Audio(sampling_rate=<span class="hljs-number">22050</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>sample = ds[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Define processor and model.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = ClvpProcessor.from_pretrained(<span class="hljs-string">&quot;susnato/clvp_dev&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ClvpModelForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;susnato/clvp_dev&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Generate processor output and model output.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor_output = processor(raw_speech=sample[<span class="hljs-string">&quot;array&quot;</span>], sampling_rate=sample[<span class="hljs-string">&quot;sampling_rate&quot;</span>], text=text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>generated_output = model.generate(**processor_output)`,wrap:!1}}),Ee=new U({props:{title:"ClvpConfig",local:"transformers.ClvpConfig",headingTag:"h2"}}),Ze=new x({props:{name:"class transformers.ClvpConfig",anchor:"transformers.ClvpConfig",parameters:[{name:"text_config",val:" = None"},{name:"speech_config",val:" = None"},{name:"decoder_config",val:" = None"},{name:"projection_dim",val:" = 768"},{name:"logit_scale_init_value",val:" = 2.6592"},{name:"initializer_factor",val:" = 1.0"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ClvpConfig.text_config",description:`<strong>text_config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Dictionary of configuration options used to initialize the CLVP text encoder.`,name:"text_config"},{anchor:"transformers.ClvpConfig.speech_config",description:`<strong>speech_config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Dictionary of configuration options used to initialize CLVP speech encoder.`,name:"speech_config"},{anchor:"transformers.ClvpConfig.decoder_config",description:`<strong>decoder_config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Dictionary of configuration options used to initialize <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpDecoderConfig">ClvpDecoderConfig</a>.`,name:"decoder_config"},{anchor:"transformers.ClvpConfig.projection_dim",description:`<strong>projection_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
Dimentionality of text and speech projection layers.`,name:"projection_dim"},{anchor:"transformers.ClvpConfig.logit_scale_init_value",description:`<strong>logit_scale_init_value</strong> (<code>float</code>, <em>optional</em>, defaults to 2.6592) &#x2014;
The inital value of the <em>logit_scale</em> paramter. Default is used as per the original CLVP implementation.`,name:"logit_scale_init_value"},{anchor:"transformers.ClvpConfig.initializer_factor",description:`<strong>initializer_factor</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
A factor for initializing all weight matrices (should be kept to 1.0, used internally for initialization
testing).`,name:"initializer_factor"},{anchor:"transformers.ClvpConfig.kwargs",description:`<strong>kwargs</strong> (<em>optional</em>) &#x2014;
Dictionary of keyword arguments.`,name:"kwargs"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/configuration_clvp.py#L341"}}),te=new vt({props:{anchor:"transformers.ClvpConfig.example",$$slots:{default:[oa]},$$scope:{ctx:w}}}),Ie=new x({props:{name:"from_sub_model_configs",anchor:"transformers.ClvpConfig.from_sub_model_configs",parameters:[{name:"text_config",val:": ClvpEncoderConfig"},{name:"speech_config",val:": ClvpEncoderConfig"},{name:"decoder_config",val:": ClvpDecoderConfig"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ClvpConfig.from_sub_model_configs.text_config",description:`<strong>text_config</strong> (<code>ClvpEncoderConfig</code>) &#x2014;
Text model configuration of type <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpEncoderConfig">ClvpEncoderConfig</a>.`,name:"text_config"},{anchor:"transformers.ClvpConfig.from_sub_model_configs.speech_config",description:`<strong>speech_config</strong> (<code>ClvpEncoderConfig</code>) &#x2014;
Speech model configuration of type <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpEncoderConfig">ClvpEncoderConfig</a>.`,name:"speech_config"},{anchor:"transformers.ClvpConfig.from_sub_model_configs.decoder_config",description:`<strong>decoder_config</strong> (<code>ClvpDecoderConfig</code>) &#x2014;
Decoder model configuration of type <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpDecoderConfig">ClvpDecoderConfig</a>.`,name:"decoder_config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/configuration_clvp.py#L428",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>An instance of a configuration object</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpConfig"
>ClvpConfig</a></p>
`}}),Ue=new U({props:{title:"ClvpEncoderConfig",local:"transformers.ClvpEncoderConfig",headingTag:"h2"}}),We=new x({props:{name:"class transformers.ClvpEncoderConfig",anchor:"transformers.ClvpEncoderConfig",parameters:[{name:"vocab_size",val:" = 256"},{name:"hidden_size",val:" = 768"},{name:"intermediate_size",val:" = 1536"},{name:"projection_dim",val:" = 768"},{name:"num_hidden_layers",val:" = 20"},{name:"num_attention_heads",val:" = 12"},{name:"hidden_act",val:" = 'gelu'"},{name:"layer_norm_eps",val:" = 1e-05"},{name:"attention_dropout",val:" = 0.1"},{name:"dropout",val:" = 0.1"},{name:"use_rotary_embedding",val:" = True"},{name:"use_attention_bias",val:" = False"},{name:"summary_type",val:" = 'mean'"},{name:"initializer_factor",val:" = 1.0"},{name:"bos_token_id",val:" = 255"},{name:"eos_token_id",val:" = 0"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ClvpEncoderConfig.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
Vocabulary size of the CLVP Encoder model.`,name:"vocab_size"},{anchor:"transformers.ClvpEncoderConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
Dimensionality of the encoder layers and the pooler layer.`,name:"hidden_size"},{anchor:"transformers.ClvpEncoderConfig.intermediate_size",description:`<strong>intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1536) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (i.e., feed-forward) layer in the Transformer encoder.`,name:"intermediate_size"},{anchor:"transformers.ClvpEncoderConfig.projection_dim",description:`<strong>projection_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
Dimensionality of the projection vector.`,name:"projection_dim"},{anchor:"transformers.ClvpEncoderConfig.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 20) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"num_hidden_layers"},{anchor:"transformers.ClvpEncoderConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.ClvpEncoderConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> <code>&quot;quick_gelu&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.ClvpEncoderConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-05) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.ClvpEncoderConfig.attention_dropout",description:`<strong>attention_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_dropout"},{anchor:"transformers.ClvpEncoderConfig.dropout",description:`<strong>dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the feed-forward layers in <code>ClvpEncoderMLP</code>.`,name:"dropout"},{anchor:"transformers.ClvpEncoderConfig.use_rotary_embedding",description:`<strong>use_rotary_embedding</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to use rotary_embedding or not.`,name:"use_rotary_embedding"},{anchor:"transformers.ClvpEncoderConfig.use_attention_bias",description:`<strong>use_attention_bias</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use bias in Query, Key and Value layers during self attention.`,name:"use_attention_bias"},{anchor:"transformers.ClvpEncoderConfig.summary_type",description:`<strong>summary_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;mean&quot;</code>) &#x2014;
What strategy to use to get pooler_output from the last_hidden_state. <code>&quot;last&quot;</code>, <code>&quot;first&quot;</code>, <code>&quot;mean&quot;</code> and
<code>&quot;cls_index&quot;</code> are supported.`,name:"summary_type"},{anchor:"transformers.ClvpEncoderConfig.initializer_factor",description:`<strong>initializer_factor</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
A factor for initializing all weight matrices (should be kept to 1.0, used internally for initialization
testing).`,name:"initializer_factor"},{anchor:"transformers.ClvpEncoderConfig.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 255) &#x2014;
Beginning of sequence token id.`,name:"bos_token_id"},{anchor:"transformers.ClvpEncoderConfig.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
End of sequence token id.`,name:"eos_token_id"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/configuration_clvp.py#L36"}}),ne=new vt({props:{anchor:"transformers.ClvpEncoderConfig.example",$$slots:{default:[na]},$$scope:{ctx:w}}}),Ge=new U({props:{title:"ClvpDecoderConfig",local:"transformers.ClvpDecoderConfig",headingTag:"h2"}}),Ne=new x({props:{name:"class transformers.ClvpDecoderConfig",anchor:"transformers.ClvpDecoderConfig",parameters:[{name:"vocab_size",val:" = 8194"},{name:"max_position_embeddings",val:" = 608"},{name:"max_text_tokens",val:" = 404"},{name:"hidden_size",val:" = 1024"},{name:"num_hidden_layers",val:" = 30"},{name:"num_attention_heads",val:" = 16"},{name:"n_inner",val:" = None"},{name:"num_mel_attn_blocks",val:" = 6"},{name:"activation_function",val:" = 'gelu_new'"},{name:"resid_pdrop",val:" = 0.1"},{name:"embd_pdrop",val:" = 0.1"},{name:"attention_dropout",val:" = 0.1"},{name:"layer_norm_epsilon",val:" = 1e-05"},{name:"initializer_range",val:" = 0.02"},{name:"summary_type",val:" = 'cls_index'"},{name:"summary_use_proj",val:" = True"},{name:"summary_activation",val:" = None"},{name:"summary_proj_to_labels",val:" = True"},{name:"summary_first_dropout",val:" = 0.1"},{name:"use_cache",val:" = True"},{name:"bos_token_id",val:" = 8192"},{name:"eos_token_id",val:" = 8193"},{name:"feature_size",val:" = 80"},{name:"use_attention_bias",val:" = True"},{name:"initializer_factor",val:" = 1.0"},{name:"decoder_fixing_codes",val:" = [83, 45, 45, 248]"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ClvpDecoderConfig.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8194) &#x2014;
Vocabulary size of the model.`,name:"vocab_size"},{anchor:"transformers.ClvpDecoderConfig.max_position_embeddings",description:`<strong>max_position_embeddings</strong> (<code>int</code>, <em>optional</em>, defaults to 608) &#x2014;
The maximum sequence length of mel tokens that this model might ever be used with. Similar to <code>n_positions</code>
in <code>GPT2Config</code>.`,name:"max_position_embeddings"},{anchor:"transformers.ClvpDecoderConfig.max_text_tokens",description:`<strong>max_text_tokens</strong> (<code>int</code>, <em>optional</em>, defaults to 404) &#x2014;
The maximum sequence length of text tokens that this model might ever be used with. Similar to
<code>n_positions</code> in <code>GPT2Config</code>.`,name:"max_text_tokens"},{anchor:"transformers.ClvpDecoderConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1024) &#x2014;
Dimensionality of the embeddings and hidden states.`,name:"hidden_size"},{anchor:"transformers.ClvpDecoderConfig.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 30) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"num_hidden_layers"},{anchor:"transformers.ClvpDecoderConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.ClvpDecoderConfig.n_inner",description:`<strong>n_inner</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Dimensionality of the inner feed-forward layers. <code>None</code> will set it to 4 times <code>hidden_size</code>.`,name:"n_inner"},{anchor:"transformers.ClvpDecoderConfig.num_mel_attn_blocks",description:`<strong>num_mel_attn_blocks</strong> (<code>int</code>, <em>optional</em>, defaults to 6) &#x2014;
Denotes the number of self attention layers in <code>ClvpConditioningEncoder</code>.`,name:"num_mel_attn_blocks"},{anchor:"transformers.ClvpDecoderConfig.activation_function",description:`<strong>activation_function</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;gelu_new&quot;</code>) &#x2014;
Activation function, to be selected in the list <code>[&quot;relu&quot;, &quot;silu&quot;, &quot;gelu&quot;, &quot;tanh&quot;, &quot;gelu_new&quot;]</code>.`,name:"activation_function"},{anchor:"transformers.ClvpDecoderConfig.resid_pdrop",description:`<strong>resid_pdrop</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.`,name:"resid_pdrop"},{anchor:"transformers.ClvpDecoderConfig.embd_pdrop",description:`<strong>embd_pdrop</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the embeddings.`,name:"embd_pdrop"},{anchor:"transformers.ClvpDecoderConfig.attention_dropout",description:`<strong>attention_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the attention.`,name:"attention_dropout"},{anchor:"transformers.ClvpDecoderConfig.layer_norm_epsilon",description:`<strong>layer_norm_epsilon</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-05) &#x2014;
The epsilon to use in the layer normalization layers.`,name:"layer_norm_epsilon"},{anchor:"transformers.ClvpDecoderConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.ClvpDecoderConfig.summary_type",description:`<strong>summary_type</strong> (<code>string</code>, <em>optional</em>, defaults to <code>&quot;cls_index&quot;</code>) &#x2014;
Argument used when doing sequence summary.</p>
<p>Has to be one of the following options:</p>
<ul>
<li><code>&quot;last&quot;</code>: Take the last token hidden state (like XLNet).</li>
<li><code>&quot;first&quot;</code>: Take the first token hidden state (like BERT).</li>
<li><code>&quot;mean&quot;</code>: Take the mean of all tokens hidden states.</li>
<li><code>&quot;cls_index&quot;</code>: Supply a Tensor of classification token position (like GPT/GPT-2).</li>
<li><code>&quot;attn&quot;</code>: Not implemented now, use multi-head attention.</li>
</ul>`,name:"summary_type"},{anchor:"transformers.ClvpDecoderConfig.summary_use_proj",description:`<strong>summary_use_proj</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to add a projection after the vector extraction.`,name:"summary_use_proj"},{anchor:"transformers.ClvpDecoderConfig.summary_activation",description:`<strong>summary_activation</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Pass <code>&quot;tanh&quot;</code> for a tanh activation to the output, any other value will result in no activation.`,name:"summary_activation"},{anchor:"transformers.ClvpDecoderConfig.summary_proj_to_labels",description:`<strong>summary_proj_to_labels</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether the projection outputs should have <code>config.num_labels</code> or <code>config.hidden_size</code> classes.`,name:"summary_proj_to_labels"},{anchor:"transformers.ClvpDecoderConfig.summary_first_dropout",description:`<strong>summary_first_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio to be used after the projection and activation.`,name:"summary_first_dropout"},{anchor:"transformers.ClvpDecoderConfig.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the model should return the last key/values attentions (not used by all models).`,name:"use_cache"},{anchor:"transformers.ClvpDecoderConfig.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 8192) &#x2014;
Beginning of sequence token id, used at the start of the generation.`,name:"bos_token_id"},{anchor:"transformers.ClvpDecoderConfig.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 8193) &#x2014;
End of sequence token id, used in the method
<code>ClvpModelForConditionalGeneration.fix_speech_decoder_output()</code> to correct decoder outputs.`,name:"eos_token_id"},{anchor:"transformers.ClvpDecoderConfig.feature_size",description:`<strong>feature_size</strong> (<code>int</code>, <em>optional</em>, defaults to 80) &#x2014;
The feature dimension of the extracted mel features. This value is used in <code>ClvpConditioningEncoder</code>.`,name:"feature_size"},{anchor:"transformers.ClvpDecoderConfig.use_attention_bias",description:`<strong>use_attention_bias</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to use bias in Query, Key and Value layers during self attention.`,name:"use_attention_bias"},{anchor:"transformers.ClvpDecoderConfig.initializer_factor",description:`<strong>initializer_factor</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
A factor for initializing all weight matrices (should be kept to 1.0, used internally for initialization
testing).`,name:"initializer_factor"},{anchor:"transformers.ClvpDecoderConfig.decoder_fixing_codes",description:`<strong>decoder_fixing_codes</strong> (<code>list</code>, <em>optional</em>, defaults to <code>[83, 45, 45, 248]</code>) &#x2014;
These values are used in the method <code>fix_speech_decoder_output</code> to fix decoder generated outputs.`,name:"decoder_fixing_codes"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/configuration_clvp.py#L167"}}),se=new vt({props:{anchor:"transformers.ClvpDecoderConfig.example",$$slots:{default:[sa]},$$scope:{ctx:w}}}),Be=new U({props:{title:"ClvpTokenizer",local:"transformers.ClvpTokenizer",headingTag:"h2"}}),Ve=new x({props:{name:"class transformers.ClvpTokenizer",anchor:"transformers.ClvpTokenizer",parameters:[{name:"vocab_file",val:""},{name:"merges_file",val:""},{name:"errors",val:" = 'replace'"},{name:"unk_token",val:" = '[UNK]'"},{name:"bos_token",val:" = '<|endoftext|>'"},{name:"eos_token",val:" = '[STOP]'"},{name:"pad_token",val:" = '[STOP]'"},{name:"add_prefix_space",val:" = False"},{name:"add_bos_token",val:" = False"},{name:"add_eos_token",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ClvpTokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
Path to the vocabulary file.`,name:"vocab_file"},{anchor:"transformers.ClvpTokenizer.merges_file",description:`<strong>merges_file</strong> (<code>str</code>) &#x2014;
Path to the merges file.`,name:"merges_file"},{anchor:"transformers.ClvpTokenizer.errors",description:`<strong>errors</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;replace&quot;</code>) &#x2014;
Paradigm to follow when decoding bytes to UTF-8. See
<a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow">bytes.decode</a> for more information.`,name:"errors"},{anchor:"transformers.ClvpTokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[UNK]&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.ClvpTokenizer.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;|endoftext|&gt;&quot;</code>) &#x2014;
The beginning of sequence token.`,name:"bos_token"},{anchor:"transformers.ClvpTokenizer.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[STOP]&quot;</code>) &#x2014;
The end of sequence token.`,name:"eos_token"},{anchor:"transformers.ClvpTokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[STOP]&quot;</code>) &#x2014;
The pad token of the sequence.`,name:"pad_token"},{anchor:"transformers.ClvpTokenizer.add_prefix_space",description:`<strong>add_prefix_space</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to add an initial space to the input. This allows to treat the leading word just as any
other word. (CLVP tokenizer detect beginning of words by the preceding space).`,name:"add_prefix_space"},{anchor:"transformers.ClvpTokenizer.add_bos_token",description:`<strong>add_bos_token</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to add <code>bos_token</code> in front of the sequence when add_special_tokens=True.`,name:"add_bos_token"},{anchor:"transformers.ClvpTokenizer.add_eos_token",description:`<strong>add_eos_token</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to add <code>eos_token</code> in end of the sequence when add_special_tokens=True.`,name:"add_eos_token"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/tokenization_clvp.py#L91"}}),ae=new vt({props:{anchor:"transformers.ClvpTokenizer.example",$$slots:{default:[aa]},$$scope:{ctx:w}}}),re=new uo({props:{$$slots:{default:[ra]},$$scope:{ctx:w}}}),He=new x({props:{name:"save_vocabulary",anchor:"transformers.ClvpTokenizer.save_vocabulary",parameters:[{name:"save_directory",val:": str"},{name:"filename_prefix",val:": Optional = None"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/tokenization_clvp.py#L352"}}),Le=new U({props:{title:"ClvpFeatureExtractor",local:"transformers.ClvpFeatureExtractor",headingTag:"h2"}}),Pe=new x({props:{name:"class transformers.ClvpFeatureExtractor",anchor:"transformers.ClvpFeatureExtractor",parameters:[{name:"feature_size",val:" = 80"},{name:"sampling_rate",val:" = 22050"},{name:"default_audio_length",val:" = 6"},{name:"hop_length",val:" = 256"},{name:"chunk_length",val:" = 30"},{name:"n_fft",val:" = 1024"},{name:"padding_value",val:" = 0.0"},{name:"mel_norms",val:" = None"},{name:"return_attention_mask",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ClvpFeatureExtractor.feature_size",description:`<strong>feature_size</strong> (<code>int</code>, <em>optional</em>, defaults to 80) &#x2014;
The feature dimension of the extracted features.`,name:"feature_size"},{anchor:"transformers.ClvpFeatureExtractor.sampling_rate",description:`<strong>sampling_rate</strong> (<code>int</code>, <em>optional</em>, defaults to 22050) &#x2014;
The sampling rate at which the audio files should be digitalized expressed in hertz (Hz).`,name:"sampling_rate"},{anchor:"transformers.ClvpFeatureExtractor.default_audio_length",description:`<strong>default_audio_length</strong> (<code>int</code>, <em>optional</em>, defaults to 6) &#x2014;
The default length of raw audio in seconds. If <code>max_length</code> is not set during <code>__call__</code> then it will
automatically be set to default_audio_length * <code>self.sampling_rate</code>.`,name:"default_audio_length"},{anchor:"transformers.ClvpFeatureExtractor.hop_length",description:`<strong>hop_length</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
Length of the overlaping windows for the STFT used to obtain the Mel Frequency coefficients.`,name:"hop_length"},{anchor:"transformers.ClvpFeatureExtractor.chunk_length",description:`<strong>chunk_length</strong> (<code>int</code>, <em>optional</em>, defaults to 30) &#x2014;
The maximum number of chuncks of <code>sampling_rate</code> samples used to trim and pad longer or shorter audio
sequences.`,name:"chunk_length"},{anchor:"transformers.ClvpFeatureExtractor.n_fft",description:`<strong>n_fft</strong> (<code>int</code>, <em>optional</em>, defaults to 1024) &#x2014;
Size of the Fourier transform.`,name:"n_fft"},{anchor:"transformers.ClvpFeatureExtractor.padding_value",description:`<strong>padding_value</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
Padding value used to pad the audio. Should correspond to silences.`,name:"padding_value"},{anchor:"transformers.ClvpFeatureExtractor.mel_norms",description:`<strong>mel_norms</strong> (<code>list</code> of length <code>feature_size</code>, <em>optional</em>) &#x2014;
If <code>mel_norms</code> is provided then it will be used to normalize the log-mel spectrograms along each
mel-filter.`,name:"mel_norms"},{anchor:"transformers.ClvpFeatureExtractor.return_attention_mask",description:`<strong>return_attention_mask</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to return the attention mask. If left to the default, it will return the attention mask.</p>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"return_attention_mask"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/feature_extraction_clvp.py#L33"}}),qe=new x({props:{name:"__call__",anchor:"transformers.ClvpFeatureExtractor.__call__",parameters:[{name:"raw_speech",val:": Union"},{name:"sampling_rate",val:": Optional = None"},{name:"truncation",val:": bool = True"},{name:"pad_to_multiple_of",val:": Optional = None"},{name:"return_tensors",val:": Union = None"},{name:"return_attention_mask",val:": Optional = True"},{name:"padding",val:": Optional = 'max_length'"},{name:"max_length",val:": Optional = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ClvpFeatureExtractor.__call__.raw_speech",description:`<strong>raw_speech</strong> (<code>np.ndarray</code>, <code>List[float]</code>, <code>List[np.ndarray]</code>, <code>List[List[float]]</code>) &#x2014;
The sequence or batch of sequences to be padded. Each sequence can be a numpy array, a list of float
values, a list of numpy arrays or a list of list of float values. Must be mono channel audio, not
stereo, i.e. single float per timestep.`,name:"raw_speech"},{anchor:"transformers.ClvpFeatureExtractor.__call__.sampling_rate",description:`<strong>sampling_rate</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The sampling rate at which the <code>raw_speech</code> input was sampled. It is strongly recommended to pass
<code>sampling_rate</code> at the forward call to prevent silent errors and allow automatic speech recognition
pipeline.`,name:"sampling_rate"},{anchor:"transformers.ClvpFeatureExtractor.__call__.truncation",description:`<strong>truncation</strong> (<code>bool</code>, <em>optional</em>, default to <code>True</code>) &#x2014;
Activates truncation to cut input sequences longer than <em>max_length</em> to <em>max_length</em>.`,name:"truncation"},{anchor:"transformers.ClvpFeatureExtractor.__call__.pad_to_multiple_of",description:`<strong>pad_to_multiple_of</strong> (<code>int</code>, <em>optional</em>) &#x2014;
If set will pad the sequence to a multiple of the provided value.</p>
<p>This is especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute capability
<code>&gt;= 7.5</code> (Volta), or on TPUs which benefit from having sequence lengths be a multiple of 128.`,name:"pad_to_multiple_of"},{anchor:"transformers.ClvpFeatureExtractor.__call__.return_attention_mask",description:`<strong>return_attention_mask</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to return the attention mask. If left to the default, it will return the attention mask.</p>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"return_attention_mask"},{anchor:"transformers.ClvpFeatureExtractor.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/main/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>) &#x2014;
If set, will return tensors instead of list of python integers. Acceptable values are:</p>
<ul>
<li><code>&apos;tf&apos;</code>: Return TensorFlow <code>tf.constant</code> objects.</li>
<li><code>&apos;pt&apos;</code>: Return PyTorch <code>torch.Tensor</code> objects.</li>
<li><code>&apos;np&apos;</code>: Return Numpy <code>np.ndarray</code> objects.</li>
</ul>`,name:"return_tensors"},{anchor:"transformers.ClvpFeatureExtractor.__call__.padding_value",description:`<strong>padding_value</strong> (<code>float</code>, defaults to 0.0) &#x2014;
The value that is used to fill the padding values / vectors.`,name:"padding_value"},{anchor:"transformers.ClvpFeatureExtractor.__call__.max_length",description:`<strong>max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The maximum input length of the inputs.`,name:"max_length"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/feature_extraction_clvp.py#L131"}}),De=new U({props:{title:"ClvpProcessor",local:"transformers.ClvpProcessor",headingTag:"h2"}}),Xe=new x({props:{name:"class transformers.ClvpProcessor",anchor:"transformers.ClvpProcessor",parameters:[{name:"feature_extractor",val:""},{name:"tokenizer",val:""}],parametersDescription:[{anchor:"transformers.ClvpProcessor.feature_extractor",description:`<strong>feature_extractor</strong> (<code>ClvpFeatureExtractor</code>) &#x2014;
An instance of <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpFeatureExtractor">ClvpFeatureExtractor</a>. The feature extractor is a required input.`,name:"feature_extractor"},{anchor:"transformers.ClvpProcessor.tokenizer",description:`<strong>tokenizer</strong> (<code>ClvpTokenizer</code>) &#x2014;
An instance of <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpTokenizer">ClvpTokenizer</a>. The tokenizer is a required input.`,name:"tokenizer"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/processing_clvp.py#L24"}}),Re=new x({props:{name:"__call__",anchor:"transformers.ClvpProcessor.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/processing_clvp.py#L49"}}),Qe=new x({props:{name:"decode",anchor:"transformers.ClvpProcessor.decode",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/processing_clvp.py#L86"}}),Ye=new x({props:{name:"batch_decode",anchor:"transformers.ClvpProcessor.batch_decode",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/processing_clvp.py#L78"}}),Se=new U({props:{title:"ClvpModelForConditionalGeneration",local:"transformers.ClvpModelForConditionalGeneration",headingTag:"h2"}}),Oe=new x({props:{name:"class transformers.ClvpModelForConditionalGeneration",anchor:"transformers.ClvpModelForConditionalGeneration",parameters:[{name:"config",val:": ClvpConfig"}],parametersDescription:[{anchor:"transformers.ClvpModelForConditionalGeneration.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpConfig">ClvpConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/modeling_clvp.py#L1509"}}),Ae=new x({props:{name:"forward",anchor:"transformers.ClvpModelForConditionalGeneration.forward",parameters:[{name:"input_ids",val:": LongTensor = None"},{name:"input_features",val:": FloatTensor = None"},{name:"conditioning_encoder_inputs_embeds",val:": Optional = None"},{name:"text_encoder_inputs_embeds",val:": Optional = None"},{name:"attention_mask",val:": Optional = None"},{name:"return_loss",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"output_attentions",val:": Optional = False"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.ClvpModelForConditionalGeneration.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provide
it.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer">AutoTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ClvpModelForConditionalGeneration.forward.input_features",description:`<strong>input_features</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, feature_size, time_dim)</code>) &#x2014;
Indicates log mel-spectrogram representations for audio returned by <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpFeatureExtractor">ClvpFeatureExtractor</a>.`,name:"input_features"},{anchor:"transformers.ClvpModelForConditionalGeneration.forward.conditioning_encoder_inputs_embeds",description:`<strong>conditioning_encoder_inputs_embeds</strong> (<code>torch.FloatTensor</code>, <em>optional</em>) &#x2014;
inputs_embeds for <code>ClvpConditioningEncoder</code>. Can be used in place of <code>input_ids</code>.`,name:"conditioning_encoder_inputs_embeds"},{anchor:"transformers.ClvpModelForConditionalGeneration.forward.text_encoder_inputs_embeds",description:`<strong>text_encoder_inputs_embeds</strong> (<code>torch.FloatTensor</code>, <em>optional</em>) &#x2014;
inputs_embeds for the text encoder model passed in place of <code>input_ids</code>.`,name:"text_encoder_inputs_embeds"},{anchor:"transformers.ClvpModelForConditionalGeneration.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding text token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.ClvpModelForConditionalGeneration.forward.return_loss",description:`<strong>return_loss</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the contrastive loss.`,name:"return_loss"},{anchor:"transformers.ClvpModelForConditionalGeneration.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.ClvpModelForConditionalGeneration.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ClvpModelForConditionalGeneration.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/modeling_clvp.py#L1737",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <code>transformers.models.clvp.modeling_clvp.ClvpOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<code>&lt;class 'transformers.models.clvp.configuration_clvp.ClvpConfig'&gt;</code>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>return_loss</code> is <code>True</code>) — Contrastive loss for speech-text similarity.</li>
<li><strong>speech_ids</strong> (<code>torch.LongTensor</code>, <em>optional</em>) — speech_ids (or speech candidates) generated by the <code>ClvpForCausalLM</code> model.</li>
<li><strong>logits_per_speech</strong> (<code>torch.FloatTensor</code> of shape <code>(speech_batch_size, text_batch_size)</code>) — The scaled dot product scores between <code>speech_embeds</code> and <code>text_embeds</code>. This represents the speech-text
similarity scores.</li>
<li><strong>logits_per_text</strong> (<code>torch.FloatTensor</code> of shape <code>(text_batch_size, speech_batch_size)</code>) — The scaled dot product scores between <code>text_embeds</code> and <code>speech_embeds</code>. This represents the text-speech
similarity scores.</li>
<li><strong>text_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, output_dim</code>) — The text embeddings obtained by applying the projection layer to the pooled output of the text encoder
model.</li>
<li><strong>speech_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, output_dim</code>) — The speech embeddings obtained by applying the projection layer to the pooled output of the speech encoder
model.</li>
<li><strong>text_model_output</strong> (<code>BaseModelOutputWithPooling</code>) — The pooled output of the <code>last_hidden_state</code> of the text encoder Model.</li>
<li><strong>speech_model_output</strong> (<code>BaseModelOutputWithPooling</code>) — The pooled output of the <code>last_hidden_state</code> of the speech encoder Model.</li>
<li><strong>decoder_hidden_states</strong> (<code>torch.FloatTensor</code>, <em>optional</em>) — The hidden states of the decoder model.</li>
<li><strong>text_encoder_hidden_states</strong> (<code>torch.FloatTensor</code>, <em>optional</em>) — The hidden states of the text encoder model.</li>
<li><strong>speech_encoder_hidden_states</strong> (<code>torch.FloatTensor</code>, <em>optional</em>) — The hidden states of the speech encoder model.</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>transformers.models.clvp.modeling_clvp.ClvpOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),ce=new uo({props:{$$slots:{default:[ia]},$$scope:{ctx:w}}}),pe=new vt({props:{anchor:"transformers.ClvpModelForConditionalGeneration.forward.example",$$slots:{default:[la]},$$scope:{ctx:w}}}),Ke=new x({props:{name:"generate",anchor:"transformers.ClvpModelForConditionalGeneration.generate",parameters:[{name:"input_ids",val:": LongTensor = None"},{name:"input_features",val:": FloatTensor = None"},{name:"attention_mask",val:": Optional = None"},{name:"generation_config",val:": Optional = None"},{name:"pad_to_max_mel_tokens",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ClvpModelForConditionalGeneration.generate.input_ids",description:`<strong>input_ids</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Input text Tokens. Processed from the <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpTokenizer">ClvpTokenizer</a>.`,name:"input_ids"},{anchor:"transformers.ClvpModelForConditionalGeneration.generate.input_features",description:`<strong>input_features</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, feature_size, time_dim)</code>, <em>optional</em>) &#x2014;
Indicates log-melspectrogram representations for audio returned by <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpFeatureExtractor">ClvpFeatureExtractor</a>.`,name:"input_features"},{anchor:"transformers.ClvpModelForConditionalGeneration.generate.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding text token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.ClvpModelForConditionalGeneration.generate.generation_config",description:`<strong>generation_config</strong> (<code>~generation.GenerationConfig</code>, <em>optional</em>) &#x2014;
The generation configuration to be used as base parametrization for the generation call. <code>**kwargs</code>
passed to generate matching the attributes of <code>generation_config</code> will override them. If
<code>generation_config</code> is not provided, the default will be used, which had the following loading
priority: 1) from the <code>generation_config.json</code> model file, if it exists; 2) from the model
configuration. Please note that unspecified parameters will inherit <a href="/docs/transformers/main/en/main_classes/text_generation#transformers.GenerationConfig">GenerationConfig</a>&#x2019;s
default values, whose documentation should be checked to parameterize generation.`,name:"generation_config"},{anchor:"transformers.ClvpModelForConditionalGeneration.generate.pad_to_max_mel_tokens",description:`<strong>pad_to_max_mel_tokens</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Pads generated speech_ids to the specified value. This is to implement the same logic from the official
repo, link: <a href="https://github.com/neonbjb/tortoise-tts/blob/80f89987a5abda5e2b082618cd74f9c7411141dc/tortoise/api.py#L430" rel="nofollow">https://github.com/neonbjb/tortoise-tts/blob/80f89987a5abda5e2b082618cd74f9c7411141dc/tortoise/api.py#L430</a>
and to make sure the logits are same.
This does not affect generation quality so please don&#x2019;t consider using it since it is less efficient.`,name:"pad_to_max_mel_tokens"},{anchor:"transformers.ClvpModelForConditionalGeneration.generate.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of decoder model, text encoder and speech encoder models.`,name:"output_hidden_states"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/modeling_clvp.py#L1869",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A <code>ClvpOutput</code> (if <code>return_dict_in_generate=True</code> or when
<code>config.return_dict_in_generate=True</code>) or a tuple.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>ClvpOutput</code> or tuple</p>
`}}),et=new x({props:{name:"get_text_features",anchor:"transformers.ClvpModelForConditionalGeneration.get_text_features",parameters:[{name:"input_ids",val:": Optional = None"},{name:"text_encoder_inputs_embeds",val:": Optional = None"},{name:"attention_mask",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.ClvpModelForConditionalGeneration.get_text_features.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you
provide it.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ClvpModelForConditionalGeneration.get_text_features.text_encoder_inputs_embeds",description:`<strong>text_encoder_inputs_embeds</strong> (<code>torch.FloatTensor</code>, <em>optional</em>) &#x2014;
inputs_embeds for the text encoder model passed in place of <code>input_ids</code>.`,name:"text_encoder_inputs_embeds"},{anchor:"transformers.ClvpModelForConditionalGeneration.get_text_features.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/modeling_clvp.py#L1583",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The text embeddings obtained by applying the projection layer to the pooled output of the CLVP Text
Model.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>torch.FloatTensor</code> of shape <code>(batch_size, output_dim)</code></p>
`}}),fe=new vt({props:{anchor:"transformers.ClvpModelForConditionalGeneration.get_text_features.example",$$slots:{default:[da]},$$scope:{ctx:w}}}),tt=new x({props:{name:"get_speech_features",anchor:"transformers.ClvpModelForConditionalGeneration.get_speech_features",parameters:[{name:"speech_ids",val:": Optional = None"},{name:"input_ids",val:": Optional = None"},{name:"input_features",val:": Optional = None"},{name:"conditioning_encoder_inputs_embeds",val:": Optional = None"},{name:"attention_mask",val:": Optional = None"},{name:"generation_config",val:": Optional = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ClvpModelForConditionalGeneration.get_speech_features.speech_ids",description:`<strong>speech_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, num_speech_ids)</code>, <em>optional</em>) &#x2014;
Speech Tokens. Padding will be ignored by default should you provide it. If speech_ids are provided
then input_ids and input_features will be automatically ignored.`,name:"speech_ids"},{anchor:"transformers.ClvpModelForConditionalGeneration.get_speech_features.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Input text Tokens. Processed from the <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpTokenizer">ClvpTokenizer</a>. If speech_ids is not provided, then input_ids
and input_features will be used.`,name:"input_ids"},{anchor:"transformers.ClvpModelForConditionalGeneration.get_speech_features.input_features",description:`<strong>input_features</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, feature_size, time_dim)</code>, <em>optional</em>) &#x2014;
Indicates log-melspectrogram representations for audio returned by <a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpFeatureExtractor">ClvpFeatureExtractor</a>. If
speech_ids is not provided, then input_ids and input_features will be used.`,name:"input_features"},{anchor:"transformers.ClvpModelForConditionalGeneration.get_speech_features.conditioning_encoder_inputs_embeds",description:`<strong>conditioning_encoder_inputs_embeds</strong> (<code>torch.FloatTensor</code>, <em>optional</em>) &#x2014;
inputs_embeds for <code>ClvpConditioningEncoder</code>. Can be used in place of <code>input_ids</code>.`,name:"conditioning_encoder_inputs_embeds"},{anchor:"transformers.ClvpModelForConditionalGeneration.get_speech_features.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding speech token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.ClvpModelForConditionalGeneration.get_speech_features.generation_config",description:`<strong>generation_config</strong> (<code>GenerationConfig</code>, <em>optional</em>) &#x2014;
generation config to control the generation of speech_ids if they are not provided.`,name:"generation_config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/modeling_clvp.py#L1640",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The speech embeddings obtained by applying the projection layer to the pooled output of the CLVP Speech
Model.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>torch.FloatTensor</code> of shape <code>(batch_size, output_dim)</code></p>
`}}),ue=new vt({props:{anchor:"transformers.ClvpModelForConditionalGeneration.get_speech_features.example",$$slots:{default:[ca]},$$scope:{ctx:w}}}),ot=new U({props:{title:"ClvpForCausalLM",local:"transformers.ClvpForCausalLM",headingTag:"h2"}}),nt=new x({props:{name:"class transformers.ClvpForCausalLM",anchor:"transformers.ClvpForCausalLM",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.ClvpForCausalLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpConfig">ClvpConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/modeling_clvp.py#L1280"}}),st=new x({props:{name:"forward",anchor:"transformers.ClvpForCausalLM.forward",parameters:[{name:"input_ids",val:": Optional = None"},{name:"past_key_values",val:": Optional = None"},{name:"attention_mask",val:": Optional = None"},{name:"token_type_ids",val:": Optional = None"},{name:"position_ids",val:": Optional = None"},{name:"head_mask",val:": Optional = None"},{name:"inputs_embeds",val:": Optional = None"},{name:"labels",val:": Optional = None"},{name:"use_cache",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.ClvpForCausalLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, input_ids_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer">AutoTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ClvpForCausalLM.forward.past_key_values",description:`<strong>past_key_values</strong> (<code>Tuple[Tuple[torch.Tensor]]</code> of length <code>config.n_layers</code>) &#x2014;
Contains precomputed hidden-states (key and values in the attention blocks) as computed by the model (see
<code>past_key_values</code> output below). Can be used to speed up sequential decoding. The <code>input_ids</code> which have
their past given to this model should not be passed as <code>input_ids</code> as they have already been computed.`,name:"past_key_values"},{anchor:"transformers.ClvpForCausalLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p>If <code>past_key_values</code> is used, <code>attention_mask</code> needs to contain the masking strategy that was used for
<code>past_key_values</code>. In other words, the <code>attention_mask</code> always has to have the length:
<code>len(past_key_values) + len(input_ids)</code></p>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.ClvpForCausalLM.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, input_ids_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.ClvpForCausalLM.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.ClvpForCausalLM.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.ClvpForCausalLM.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.</p>
<p>If <code>past_key_values</code> is used, optionally only the last <code>inputs_embeds</code> have to be input (see
<code>past_key_values</code>).`,name:"inputs_embeds"},{anchor:"transformers.ClvpForCausalLM.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see
<code>past_key_values</code>).`,name:"use_cache"},{anchor:"transformers.ClvpForCausalLM.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.ClvpForCausalLM.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ClvpForCausalLM.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.ClvpForCausalLM.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for language modeling. Note that the labels <strong>are shifted</strong> inside the model, i.e. you can set
<code>labels = input_ids</code> Indices are selected in <code>[-100, 0, ..., config.vocab_size]</code> All labels set to <code>-100</code>
are ignored (masked), the loss is only computed for labels in <code>[0, ..., config.vocab_size]</code>`,name:"labels"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/modeling_clvp.py#L1421"}}),he=new uo({props:{$$slots:{default:[pa]},$$scope:{ctx:w}}}),at=new U({props:{title:"ClvpModel",local:"transformers.ClvpModel",headingTag:"h2"}}),rt=new x({props:{name:"class transformers.ClvpModel",anchor:"transformers.ClvpModel",parameters:[{name:"config",val:": ClvpDecoderConfig"}],parametersDescription:[{anchor:"transformers.ClvpModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/clvp#transformers.ClvpConfig">ClvpConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/modeling_clvp.py#L1209"}}),it=new x({props:{name:"forward",anchor:"transformers.ClvpModel.forward",parameters:[{name:"input_ids",val:": Optional = None"},{name:"attention_mask",val:": Optional = None"},{name:"token_type_ids",val:": Optional = None"},{name:"position_ids",val:": Optional = None"},{name:"head_mask",val:": Optional = None"},{name:"past_key_values",val:": Optional = None"},{name:"inputs_embeds",val:": Optional = None"},{name:"use_cache",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.ClvpModel.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, input_ids_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer">AutoTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ClvpModel.forward.past_key_values",description:`<strong>past_key_values</strong> (<code>Tuple[Tuple[torch.Tensor]]</code> of length <code>config.n_layers</code>) &#x2014;
Contains precomputed hidden-states (key and values in the attention blocks) as computed by the model (see
<code>past_key_values</code> output below). Can be used to speed up sequential decoding. The <code>input_ids</code> which have
their past given to this model should not be passed as <code>input_ids</code> as they have already been computed.`,name:"past_key_values"},{anchor:"transformers.ClvpModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p>If <code>past_key_values</code> is used, <code>attention_mask</code> needs to contain the masking strategy that was used for
<code>past_key_values</code>. In other words, the <code>attention_mask</code> always has to have the length:
<code>len(past_key_values) + len(input_ids)</code></p>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.ClvpModel.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, input_ids_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.ClvpModel.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.ClvpModel.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.ClvpModel.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.</p>
<p>If <code>past_key_values</code> is used, optionally only the last <code>inputs_embeds</code> have to be input (see
<code>past_key_values</code>).`,name:"inputs_embeds"},{anchor:"transformers.ClvpModel.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see
<code>past_key_values</code>).`,name:"use_cache"},{anchor:"transformers.ClvpModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.ClvpModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ClvpModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/modeling_clvp.py#L1231"}}),ge=new uo({props:{$$slots:{default:[ma]},$$scope:{ctx:w}}}),lt=new U({props:{title:"ClvpEncoder",local:"transformers.ClvpEncoder",headingTag:"h2"}}),dt=new x({props:{name:"class transformers.ClvpEncoder",anchor:"transformers.ClvpEncoder",parameters:[{name:"config",val:": ClvpConfig"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/modeling_clvp.py#L874"}}),ct=new x({props:{name:"forward",anchor:"transformers.ClvpEncoder.forward",parameters:[{name:"input_ids",val:": Optional = None"},{name:"inputs_embeds",val:": Optional = None"},{name:"attention_mask",val:": Optional = None"},{name:"position_ids",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.ClvpEncoder.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, input_ids_length)</code>, <em>optional</em>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer">AutoTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ClvpEncoder.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
input embeddings for the model. This bypasses the model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.ClvpEncoder.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.ClvpEncoder.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code>, <em>optional</em>) &#x2014;
Denotes the position ids of <code>input_ids</code>.`,name:"position_ids"},{anchor:"transformers.ClvpEncoder.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under
returned tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.ClvpEncoder.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors
for more detail.`,name:"output_hidden_states"},{anchor:"transformers.ClvpEncoder.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/modeling_clvp.py#L906"}}),pt=new U({props:{title:"ClvpDecoder",local:"transformers.ClvpDecoder",headingTag:"h2"}}),mt=new x({props:{name:"class transformers.ClvpDecoder",anchor:"transformers.ClvpDecoder",parameters:[{name:"config",val:""}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/modeling_clvp.py#L1030"}}),ft=new x({props:{name:"forward",anchor:"transformers.ClvpDecoder.forward",parameters:[{name:"input_ids",val:": Optional = None"},{name:"attention_mask",val:": Optional = None"},{name:"token_type_ids",val:": Optional = None"},{name:"position_ids",val:": Optional = None"},{name:"head_mask",val:": Optional = None"},{name:"past_key_values",val:": Optional = None"},{name:"inputs_embeds",val:": Optional = None"},{name:"use_cache",val:": Optional = None"},{name:"output_attentions",val:": Optional = None"},{name:"output_hidden_states",val:": Optional = None"},{name:"return_dict",val:": Optional = None"}],parametersDescription:[{anchor:"transformers.ClvpDecoder.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, input_ids_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer">AutoTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ClvpDecoder.forward.past_key_values",description:`<strong>past_key_values</strong> (<code>Tuple[Tuple[torch.Tensor]]</code> of length <code>config.n_layers</code>) &#x2014;
Contains precomputed hidden-states (key and values in the attention blocks) as computed by the model (see
<code>past_key_values</code> output below). Can be used to speed up sequential decoding. The <code>input_ids</code> which have
their past given to this model should not be passed as <code>input_ids</code> as they have already been computed.`,name:"past_key_values"},{anchor:"transformers.ClvpDecoder.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p>If <code>past_key_values</code> is used, <code>attention_mask</code> needs to contain the masking strategy that was used for
<code>past_key_values</code>. In other words, the <code>attention_mask</code> always has to have the length:
<code>len(past_key_values) + len(input_ids)</code></p>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.ClvpDecoder.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, input_ids_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.ClvpDecoder.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.ClvpDecoder.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.ClvpDecoder.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.</p>
<p>If <code>past_key_values</code> is used, optionally only the last <code>inputs_embeds</code> have to be input (see
<code>past_key_values</code>).`,name:"inputs_embeds"},{anchor:"transformers.ClvpDecoder.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see
<code>past_key_values</code>).`,name:"use_cache"},{anchor:"transformers.ClvpDecoder.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.ClvpDecoder.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ClvpDecoder.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/QubitPi/huggingface-transformers/blob/main/src/transformers/models/clvp/modeling_clvp.py#L1065"}}),_e=new uo({props:{$$slots:{default:[fa]},$$scope:{ctx:w}}}),{c(){a=l("meta"),y=n(),p=l("p"),m=n(),f(C.$$.fragment),o=n(),f(M.$$.fragment),ho=n(),Me=l("p"),Me.innerHTML=rs,go=n(),Te=l("p"),Te.textContent=is,_o=n(),ke=l("p"),ke.innerHTML=ls,vo=n(),we=l("p"),we.innerHTML=ds,bo=n(),f(xe.$$.fragment),Co=n(),$e=l("ol"),$e.innerHTML=cs,yo=n(),f(je.$$.fragment),Mo=n(),Je=l("ul"),Je.innerHTML=ps,To=n(),ze=l("p"),ze.textContent=ms,ko=n(),f(Fe.$$.fragment),wo=n(),f(Ee.$$.fragment),xo=n(),F=l("div"),f(Ze.$$.fragment),So=n(),bt=l("p"),bt.innerHTML=fs,Oo=n(),Ct=l("p"),Ct.innerHTML=us,Ao=n(),f(te.$$.fragment),Ko=n(),oe=l("div"),f(Ie.$$.fragment),en=n(),yt=l("p"),yt.innerHTML=hs,$o=n(),f(Ue.$$.fragment),jo=n(),G=l("div"),f(We.$$.fragment),tn=n(),Mt=l("p"),Mt.innerHTML=gs,on=n(),Tt=l("p"),Tt.innerHTML=_s,nn=n(),f(ne.$$.fragment),Jo=n(),f(Ge.$$.fragment),zo=n(),E=l("div"),f(Ne.$$.fragment),sn=n(),kt=l("p"),kt.innerHTML=vs,an=n(),wt=l("p"),wt.innerHTML=bs,rn=n(),xt=l("p"),xt.textContent=Cs,ln=n(),f(se.$$.fragment),Fo=n(),f(Be.$$.fragment),Eo=n(),$=l("div"),f(Ve.$$.fragment),dn=n(),$t=l("p"),$t.textContent=ys,cn=n(),jt=l("p"),jt.textContent=Ms,pn=n(),f(ae.$$.fragment),mn=n(),Jt=l("p"),Jt.innerHTML=Ts,fn=n(),f(re.$$.fragment),un=n(),zt=l("p"),zt.innerHTML=ks,hn=n(),Ft=l("div"),f(He.$$.fragment),Zo=n(),f(Le.$$.fragment),Io=n(),Z=l("div"),f(Pe.$$.fragment),gn=n(),Et=l("p"),Et.textContent=ws,_n=n(),Zt=l("p"),Zt.innerHTML=xs,vn=n(),It=l("p"),It.innerHTML=$s,bn=n(),Q=l("div"),f(qe.$$.fragment),Cn=n(),Ut=l("p"),Ut.innerHTML=js,yn=n(),Wt=l("p"),Wt.innerHTML=Js,Uo=n(),f(De.$$.fragment),Wo=n(),z=l("div"),f(Xe.$$.fragment),Mn=n(),Gt=l("p"),Gt.textContent=zs,Tn=n(),Nt=l("p"),Nt.innerHTML=Fs,kn=n(),ie=l("div"),f(Re.$$.fragment),wn=n(),Bt=l("p"),Bt.innerHTML=Es,xn=n(),le=l("div"),f(Qe.$$.fragment),$n=n(),Vt=l("p"),Vt.innerHTML=Zs,jn=n(),de=l("div"),f(Ye.$$.fragment),Jn=n(),Ht=l("p"),Ht.innerHTML=Is,Go=n(),f(Se.$$.fragment),No=n(),j=l("div"),f(Oe.$$.fragment),zn=n(),Lt=l("p"),Lt.innerHTML=Us,Fn=n(),Pt=l("p"),Pt.innerHTML=Ws,En=n(),P=l("div"),f(Ae.$$.fragment),Zn=n(),qt=l("p"),qt.innerHTML=Gs,In=n(),f(ce.$$.fragment),Un=n(),f(pe.$$.fragment),Wn=n(),me=l("div"),f(Ke.$$.fragment),Gn=n(),Dt=l("p"),Dt.innerHTML=Ns,Nn=n(),Y=l("div"),f(et.$$.fragment),Bn=n(),Xt=l("p"),Xt.textContent=Bs,Vn=n(),f(fe.$$.fragment),Hn=n(),S=l("div"),f(tt.$$.fragment),Ln=n(),Rt=l("p"),Rt.textContent=Vs,Pn=n(),f(ue.$$.fragment),Bo=n(),f(ot.$$.fragment),Vo=n(),N=l("div"),f(nt.$$.fragment),qn=n(),Qt=l("p"),Qt.innerHTML=Hs,Dn=n(),Yt=l("p"),Yt.innerHTML=Ls,Xn=n(),O=l("div"),f(st.$$.fragment),Rn=n(),St=l("p"),St.innerHTML=Ps,Qn=n(),f(he.$$.fragment),Ho=n(),f(at.$$.fragment),Lo=n(),B=l("div"),f(rt.$$.fragment),Yn=n(),Ot=l("p"),Ot.innerHTML=qs,Sn=n(),At=l("p"),At.innerHTML=Ds,On=n(),A=l("div"),f(it.$$.fragment),An=n(),Kt=l("p"),Kt.innerHTML=Xs,Kn=n(),f(ge.$$.fragment),Po=n(),f(lt.$$.fragment),qo=n(),D=l("div"),f(dt.$$.fragment),es=n(),eo=l("p"),eo.innerHTML=Rs,ts=n(),to=l("div"),f(ct.$$.fragment),Do=n(),f(pt.$$.fragment),Xo=n(),X=l("div"),f(mt.$$.fragment),os=n(),oo=l("p"),oo.innerHTML=Qs,ns=n(),K=l("div"),f(ft.$$.fragment),ss=n(),no=l("p"),no.innerHTML=Ys,as=n(),f(_e.$$.fragment),Ro=n(),mo=l("p"),this.h()},l(e){const i=ta("svelte-u9bgzb",document.head);a=d(i,"META",{name:!0,content:!0}),i.forEach(r),y=s(e),p=d(e,"P",{}),T(p).forEach(r),m=s(e),u(C.$$.fragment,e),o=s(e),u(M.$$.fragment,e),ho=s(e),Me=d(e,"P",{"data-svelte-h":!0}),b(Me)!=="svelte-hsgi6a"&&(Me.innerHTML=rs),go=s(e),Te=d(e,"P",{"data-svelte-h":!0}),b(Te)!=="svelte-vfdo9a"&&(Te.textContent=is),_o=s(e),ke=d(e,"P",{"data-svelte-h":!0}),b(ke)!=="svelte-1io4mb1"&&(ke.innerHTML=ls),vo=s(e),we=d(e,"P",{"data-svelte-h":!0}),b(we)!=="svelte-4bcqbf"&&(we.innerHTML=ds),bo=s(e),u(xe.$$.fragment,e),Co=s(e),$e=d(e,"OL",{"data-svelte-h":!0}),b($e)!=="svelte-1m39cyt"&&($e.innerHTML=cs),yo=s(e),u(je.$$.fragment,e),Mo=s(e),Je=d(e,"UL",{"data-svelte-h":!0}),b(Je)!=="svelte-xm54ps"&&(Je.innerHTML=ps),To=s(e),ze=d(e,"P",{"data-svelte-h":!0}),b(ze)!=="svelte-12pxzug"&&(ze.textContent=ms),ko=s(e),u(Fe.$$.fragment,e),wo=s(e),u(Ee.$$.fragment,e),xo=s(e),F=d(e,"DIV",{class:!0});var V=T(F);u(Ze.$$.fragment,V),So=s(V),bt=d(V,"P",{"data-svelte-h":!0}),b(bt)!=="svelte-1xsxtze"&&(bt.innerHTML=fs),Oo=s(V),Ct=d(V,"P",{"data-svelte-h":!0}),b(Ct)!=="svelte-o55m63"&&(Ct.innerHTML=us),Ao=s(V),u(te.$$.fragment,V),Ko=s(V),oe=d(V,"DIV",{class:!0});var ut=T(oe);u(Ie.$$.fragment,ut),en=s(ut),yt=d(ut,"P",{"data-svelte-h":!0}),b(yt)!=="svelte-147s9qv"&&(yt.innerHTML=hs),ut.forEach(r),V.forEach(r),$o=s(e),u(Ue.$$.fragment,e),jo=s(e),G=d(e,"DIV",{class:!0});var R=T(G);u(We.$$.fragment,R),tn=s(R),Mt=d(R,"P",{"data-svelte-h":!0}),b(Mt)!=="svelte-9u7dqp"&&(Mt.innerHTML=gs),on=s(R),Tt=d(R,"P",{"data-svelte-h":!0}),b(Tt)!=="svelte-o55m63"&&(Tt.innerHTML=_s),nn=s(R),u(ne.$$.fragment,R),R.forEach(r),Jo=s(e),u(Ge.$$.fragment,e),zo=s(e),E=d(e,"DIV",{class:!0});var H=T(E);u(Ne.$$.fragment,H),sn=s(H),kt=d(H,"P",{"data-svelte-h":!0}),b(kt)!=="svelte-au4l01"&&(kt.innerHTML=vs),an=s(H),wt=d(H,"P",{"data-svelte-h":!0}),b(wt)!=="svelte-o55m63"&&(wt.innerHTML=bs),rn=s(H),xt=d(H,"P",{"data-svelte-h":!0}),b(xt)!=="svelte-18r2yl3"&&(xt.textContent=Cs),ln=s(H),u(se.$$.fragment,H),H.forEach(r),Fo=s(e),u(Be.$$.fragment,e),Eo=s(e),$=d(e,"DIV",{class:!0});var J=T($);u(Ve.$$.fragment,J),dn=s(J),$t=d(J,"P",{"data-svelte-h":!0}),b($t)!=="svelte-dtdgzo"&&($t.textContent=ys),cn=s(J),jt=d(J,"P",{"data-svelte-h":!0}),b(jt)!=="svelte-1s077p3"&&(jt.textContent=Ms),pn=s(J),u(ae.$$.fragment,J),mn=s(J),Jt=d(J,"P",{"data-svelte-h":!0}),b(Jt)!=="svelte-1jfcabo"&&(Jt.innerHTML=Ts),fn=s(J),u(re.$$.fragment,J),un=s(J),zt=d(J,"P",{"data-svelte-h":!0}),b(zt)!=="svelte-1c3t5ty"&&(zt.innerHTML=ks),hn=s(J),Ft=d(J,"DIV",{class:!0});var fo=T(Ft);u(He.$$.fragment,fo),fo.forEach(r),J.forEach(r),Zo=s(e),u(Le.$$.fragment,e),Io=s(e),Z=d(e,"DIV",{class:!0});var L=T(Z);u(Pe.$$.fragment,L),gn=s(L),Et=d(L,"P",{"data-svelte-h":!0}),b(Et)!=="svelte-4dw9vm"&&(Et.textContent=ws),_n=s(L),Zt=d(L,"P",{"data-svelte-h":!0}),b(Zt)!=="svelte-3gz575"&&(Zt.innerHTML=xs),vn=s(L),It=d(L,"P",{"data-svelte-h":!0}),b(It)!=="svelte-1z3w69"&&(It.innerHTML=$s),bn=s(L),Q=d(L,"DIV",{class:!0});var ee=T(Q);u(qe.$$.fragment,ee),Cn=s(ee),Ut=d(ee,"P",{"data-svelte-h":!0}),b(Ut)!=="svelte-3nm4pm"&&(Ut.innerHTML=js),yn=s(ee),Wt=d(ee,"P",{"data-svelte-h":!0}),b(Wt)!=="svelte-11lzm20"&&(Wt.innerHTML=Js),ee.forEach(r),L.forEach(r),Uo=s(e),u(De.$$.fragment,e),Wo=s(e),z=d(e,"DIV",{class:!0});var I=T(z);u(Xe.$$.fragment,I),Mn=s(I),Gt=d(I,"P",{"data-svelte-h":!0}),b(Gt)!=="svelte-14s26xb"&&(Gt.textContent=zs),Tn=s(I),Nt=d(I,"P",{"data-svelte-h":!0}),b(Nt)!=="svelte-14u9hwi"&&(Nt.innerHTML=Fs),kn=s(I),ie=d(I,"DIV",{class:!0});var ht=T(ie);u(Re.$$.fragment,ht),wn=s(ht),Bt=d(ht,"P",{"data-svelte-h":!0}),b(Bt)!=="svelte-wvibq5"&&(Bt.innerHTML=Es),ht.forEach(r),xn=s(I),le=d(I,"DIV",{class:!0});var gt=T(le);u(Qe.$$.fragment,gt),$n=s(gt),Vt=d(gt,"P",{"data-svelte-h":!0}),b(Vt)!=="svelte-10ieznj"&&(Vt.innerHTML=Zs),gt.forEach(r),jn=s(I),de=d(I,"DIV",{class:!0});var _t=T(de);u(Ye.$$.fragment,_t),Jn=s(_t),Ht=d(_t,"P",{"data-svelte-h":!0}),b(Ht)!=="svelte-7xrqq"&&(Ht.innerHTML=Is),_t.forEach(r),I.forEach(r),Go=s(e),u(Se.$$.fragment,e),No=s(e),j=d(e,"DIV",{class:!0});var W=T(j);u(Oe.$$.fragment,W),zn=s(W),Lt=d(W,"P",{"data-svelte-h":!0}),b(Lt)!=="svelte-10372mp"&&(Lt.innerHTML=Us),Fn=s(W),Pt=d(W,"P",{"data-svelte-h":!0}),b(Pt)!=="svelte-hswkmf"&&(Pt.innerHTML=Ws),En=s(W),P=d(W,"DIV",{class:!0});var ve=T(P);u(Ae.$$.fragment,ve),Zn=s(ve),qt=d(ve,"P",{"data-svelte-h":!0}),b(qt)!=="svelte-csozb4"&&(qt.innerHTML=Gs),In=s(ve),u(ce.$$.fragment,ve),Un=s(ve),u(pe.$$.fragment,ve),ve.forEach(r),Wn=s(W),me=d(W,"DIV",{class:!0});var Yo=T(me);u(Ke.$$.fragment,Yo),Gn=s(Yo),Dt=d(Yo,"P",{"data-svelte-h":!0}),b(Dt)!=="svelte-11sygp1"&&(Dt.innerHTML=Ns),Yo.forEach(r),Nn=s(W),Y=d(W,"DIV",{class:!0});var so=T(Y);u(et.$$.fragment,so),Bn=s(so),Xt=d(so,"P",{"data-svelte-h":!0}),b(Xt)!=="svelte-1gkgya2"&&(Xt.textContent=Bs),Vn=s(so),u(fe.$$.fragment,so),so.forEach(r),Hn=s(W),S=d(W,"DIV",{class:!0});var ao=T(S);u(tt.$$.fragment,ao),Ln=s(ao),Rt=d(ao,"P",{"data-svelte-h":!0}),b(Rt)!=="svelte-10cw2ku"&&(Rt.textContent=Vs),Pn=s(ao),u(ue.$$.fragment,ao),ao.forEach(r),W.forEach(r),Bo=s(e),u(ot.$$.fragment,e),Vo=s(e),N=d(e,"DIV",{class:!0});var be=T(N);u(nt.$$.fragment,be),qn=s(be),Qt=d(be,"P",{"data-svelte-h":!0}),b(Qt)!=="svelte-1db7k6x"&&(Qt.innerHTML=Hs),Dn=s(be),Yt=d(be,"P",{"data-svelte-h":!0}),b(Yt)!=="svelte-hswkmf"&&(Yt.innerHTML=Ls),Xn=s(be),O=d(be,"DIV",{class:!0});var ro=T(O);u(st.$$.fragment,ro),Rn=s(ro),St=d(ro,"P",{"data-svelte-h":!0}),b(St)!=="svelte-x6vtps"&&(St.innerHTML=Ps),Qn=s(ro),u(he.$$.fragment,ro),ro.forEach(r),be.forEach(r),Ho=s(e),u(at.$$.fragment,e),Lo=s(e),B=d(e,"DIV",{class:!0});var Ce=T(B);u(rt.$$.fragment,Ce),Yn=s(Ce),Ot=d(Ce,"P",{"data-svelte-h":!0}),b(Ot)!=="svelte-a6gzib"&&(Ot.innerHTML=qs),Sn=s(Ce),At=d(Ce,"P",{"data-svelte-h":!0}),b(At)!=="svelte-hswkmf"&&(At.innerHTML=Ds),On=s(Ce),A=d(Ce,"DIV",{class:!0});var io=T(A);u(it.$$.fragment,io),An=s(io),Kt=d(io,"P",{"data-svelte-h":!0}),b(Kt)!=="svelte-1szwxvk"&&(Kt.innerHTML=Xs),Kn=s(io),u(ge.$$.fragment,io),io.forEach(r),Ce.forEach(r),Po=s(e),u(lt.$$.fragment,e),qo=s(e),D=d(e,"DIV",{class:!0});var lo=T(D);u(dt.$$.fragment,lo),es=s(lo),eo=d(lo,"P",{"data-svelte-h":!0}),b(eo)!=="svelte-sugv3q"&&(eo.innerHTML=Rs),ts=s(lo),to=d(lo,"DIV",{class:!0});var Ss=T(to);u(ct.$$.fragment,Ss),Ss.forEach(r),lo.forEach(r),Do=s(e),u(pt.$$.fragment,e),Xo=s(e),X=d(e,"DIV",{class:!0});var co=T(X);u(mt.$$.fragment,co),os=s(co),oo=d(co,"P",{"data-svelte-h":!0}),b(oo)!=="svelte-1yztecs"&&(oo.innerHTML=Qs),ns=s(co),K=d(co,"DIV",{class:!0});var po=T(K);u(ft.$$.fragment,po),ss=s(po),no=d(po,"P",{"data-svelte-h":!0}),b(no)!=="svelte-1ypwjpw"&&(no.innerHTML=Ys),as=s(po),u(_e.$$.fragment,po),po.forEach(r),co.forEach(r),Ro=s(e),mo=d(e,"P",{}),T(mo).forEach(r),this.h()},h(){k(a,"name","hf:doc:metadata"),k(a,"content",ha),k(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),k(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,i){t(document.head,a),c(e,y,i),c(e,p,i),c(e,m,i),h(C,e,i),c(e,o,i),h(M,e,i),c(e,ho,i),c(e,Me,i),c(e,go,i),c(e,Te,i),c(e,_o,i),c(e,ke,i),c(e,vo,i),c(e,we,i),c(e,bo,i),h(xe,e,i),c(e,Co,i),c(e,$e,i),c(e,yo,i),h(je,e,i),c(e,Mo,i),c(e,Je,i),c(e,To,i),c(e,ze,i),c(e,ko,i),h(Fe,e,i),c(e,wo,i),h(Ee,e,i),c(e,xo,i),c(e,F,i),h(Ze,F,null),t(F,So),t(F,bt),t(F,Oo),t(F,Ct),t(F,Ao),h(te,F,null),t(F,Ko),t(F,oe),h(Ie,oe,null),t(oe,en),t(oe,yt),c(e,$o,i),h(Ue,e,i),c(e,jo,i),c(e,G,i),h(We,G,null),t(G,tn),t(G,Mt),t(G,on),t(G,Tt),t(G,nn),h(ne,G,null),c(e,Jo,i),h(Ge,e,i),c(e,zo,i),c(e,E,i),h(Ne,E,null),t(E,sn),t(E,kt),t(E,an),t(E,wt),t(E,rn),t(E,xt),t(E,ln),h(se,E,null),c(e,Fo,i),h(Be,e,i),c(e,Eo,i),c(e,$,i),h(Ve,$,null),t($,dn),t($,$t),t($,cn),t($,jt),t($,pn),h(ae,$,null),t($,mn),t($,Jt),t($,fn),h(re,$,null),t($,un),t($,zt),t($,hn),t($,Ft),h(He,Ft,null),c(e,Zo,i),h(Le,e,i),c(e,Io,i),c(e,Z,i),h(Pe,Z,null),t(Z,gn),t(Z,Et),t(Z,_n),t(Z,Zt),t(Z,vn),t(Z,It),t(Z,bn),t(Z,Q),h(qe,Q,null),t(Q,Cn),t(Q,Ut),t(Q,yn),t(Q,Wt),c(e,Uo,i),h(De,e,i),c(e,Wo,i),c(e,z,i),h(Xe,z,null),t(z,Mn),t(z,Gt),t(z,Tn),t(z,Nt),t(z,kn),t(z,ie),h(Re,ie,null),t(ie,wn),t(ie,Bt),t(z,xn),t(z,le),h(Qe,le,null),t(le,$n),t(le,Vt),t(z,jn),t(z,de),h(Ye,de,null),t(de,Jn),t(de,Ht),c(e,Go,i),h(Se,e,i),c(e,No,i),c(e,j,i),h(Oe,j,null),t(j,zn),t(j,Lt),t(j,Fn),t(j,Pt),t(j,En),t(j,P),h(Ae,P,null),t(P,Zn),t(P,qt),t(P,In),h(ce,P,null),t(P,Un),h(pe,P,null),t(j,Wn),t(j,me),h(Ke,me,null),t(me,Gn),t(me,Dt),t(j,Nn),t(j,Y),h(et,Y,null),t(Y,Bn),t(Y,Xt),t(Y,Vn),h(fe,Y,null),t(j,Hn),t(j,S),h(tt,S,null),t(S,Ln),t(S,Rt),t(S,Pn),h(ue,S,null),c(e,Bo,i),h(ot,e,i),c(e,Vo,i),c(e,N,i),h(nt,N,null),t(N,qn),t(N,Qt),t(N,Dn),t(N,Yt),t(N,Xn),t(N,O),h(st,O,null),t(O,Rn),t(O,St),t(O,Qn),h(he,O,null),c(e,Ho,i),h(at,e,i),c(e,Lo,i),c(e,B,i),h(rt,B,null),t(B,Yn),t(B,Ot),t(B,Sn),t(B,At),t(B,On),t(B,A),h(it,A,null),t(A,An),t(A,Kt),t(A,Kn),h(ge,A,null),c(e,Po,i),h(lt,e,i),c(e,qo,i),c(e,D,i),h(dt,D,null),t(D,es),t(D,eo),t(D,ts),t(D,to),h(ct,to,null),c(e,Do,i),h(pt,e,i),c(e,Xo,i),c(e,X,i),h(mt,X,null),t(X,os),t(X,oo),t(X,ns),t(X,K),h(ft,K,null),t(K,ss),t(K,no),t(K,as),h(_e,K,null),c(e,Ro,i),c(e,mo,i),Qo=!0},p(e,[i]){const V={};i&2&&(V.$$scope={dirty:i,ctx:e}),te.$set(V);const ut={};i&2&&(ut.$$scope={dirty:i,ctx:e}),ne.$set(ut);const R={};i&2&&(R.$$scope={dirty:i,ctx:e}),se.$set(R);const H={};i&2&&(H.$$scope={dirty:i,ctx:e}),ae.$set(H);const J={};i&2&&(J.$$scope={dirty:i,ctx:e}),re.$set(J);const fo={};i&2&&(fo.$$scope={dirty:i,ctx:e}),ce.$set(fo);const L={};i&2&&(L.$$scope={dirty:i,ctx:e}),pe.$set(L);const ee={};i&2&&(ee.$$scope={dirty:i,ctx:e}),fe.$set(ee);const I={};i&2&&(I.$$scope={dirty:i,ctx:e}),ue.$set(I);const ht={};i&2&&(ht.$$scope={dirty:i,ctx:e}),he.$set(ht);const gt={};i&2&&(gt.$$scope={dirty:i,ctx:e}),ge.$set(gt);const _t={};i&2&&(_t.$$scope={dirty:i,ctx:e}),_e.$set(_t)},i(e){Qo||(g(C.$$.fragment,e),g(M.$$.fragment,e),g(xe.$$.fragment,e),g(je.$$.fragment,e),g(Fe.$$.fragment,e),g(Ee.$$.fragment,e),g(Ze.$$.fragment,e),g(te.$$.fragment,e),g(Ie.$$.fragment,e),g(Ue.$$.fragment,e),g(We.$$.fragment,e),g(ne.$$.fragment,e),g(Ge.$$.fragment,e),g(Ne.$$.fragment,e),g(se.$$.fragment,e),g(Be.$$.fragment,e),g(Ve.$$.fragment,e),g(ae.$$.fragment,e),g(re.$$.fragment,e),g(He.$$.fragment,e),g(Le.$$.fragment,e),g(Pe.$$.fragment,e),g(qe.$$.fragment,e),g(De.$$.fragment,e),g(Xe.$$.fragment,e),g(Re.$$.fragment,e),g(Qe.$$.fragment,e),g(Ye.$$.fragment,e),g(Se.$$.fragment,e),g(Oe.$$.fragment,e),g(Ae.$$.fragment,e),g(ce.$$.fragment,e),g(pe.$$.fragment,e),g(Ke.$$.fragment,e),g(et.$$.fragment,e),g(fe.$$.fragment,e),g(tt.$$.fragment,e),g(ue.$$.fragment,e),g(ot.$$.fragment,e),g(nt.$$.fragment,e),g(st.$$.fragment,e),g(he.$$.fragment,e),g(at.$$.fragment,e),g(rt.$$.fragment,e),g(it.$$.fragment,e),g(ge.$$.fragment,e),g(lt.$$.fragment,e),g(dt.$$.fragment,e),g(ct.$$.fragment,e),g(pt.$$.fragment,e),g(mt.$$.fragment,e),g(ft.$$.fragment,e),g(_e.$$.fragment,e),Qo=!0)},o(e){_(C.$$.fragment,e),_(M.$$.fragment,e),_(xe.$$.fragment,e),_(je.$$.fragment,e),_(Fe.$$.fragment,e),_(Ee.$$.fragment,e),_(Ze.$$.fragment,e),_(te.$$.fragment,e),_(Ie.$$.fragment,e),_(Ue.$$.fragment,e),_(We.$$.fragment,e),_(ne.$$.fragment,e),_(Ge.$$.fragment,e),_(Ne.$$.fragment,e),_(se.$$.fragment,e),_(Be.$$.fragment,e),_(Ve.$$.fragment,e),_(ae.$$.fragment,e),_(re.$$.fragment,e),_(He.$$.fragment,e),_(Le.$$.fragment,e),_(Pe.$$.fragment,e),_(qe.$$.fragment,e),_(De.$$.fragment,e),_(Xe.$$.fragment,e),_(Re.$$.fragment,e),_(Qe.$$.fragment,e),_(Ye.$$.fragment,e),_(Se.$$.fragment,e),_(Oe.$$.fragment,e),_(Ae.$$.fragment,e),_(ce.$$.fragment,e),_(pe.$$.fragment,e),_(Ke.$$.fragment,e),_(et.$$.fragment,e),_(fe.$$.fragment,e),_(tt.$$.fragment,e),_(ue.$$.fragment,e),_(ot.$$.fragment,e),_(nt.$$.fragment,e),_(st.$$.fragment,e),_(he.$$.fragment,e),_(at.$$.fragment,e),_(rt.$$.fragment,e),_(it.$$.fragment,e),_(ge.$$.fragment,e),_(lt.$$.fragment,e),_(dt.$$.fragment,e),_(ct.$$.fragment,e),_(pt.$$.fragment,e),_(mt.$$.fragment,e),_(ft.$$.fragment,e),_(_e.$$.fragment,e),Qo=!1},d(e){e&&(r(y),r(p),r(m),r(o),r(ho),r(Me),r(go),r(Te),r(_o),r(ke),r(vo),r(we),r(bo),r(Co),r($e),r(yo),r(Mo),r(Je),r(To),r(ze),r(ko),r(wo),r(xo),r(F),r($o),r(jo),r(G),r(Jo),r(zo),r(E),r(Fo),r(Eo),r($),r(Zo),r(Io),r(Z),r(Uo),r(Wo),r(z),r(Go),r(No),r(j),r(Bo),r(Vo),r(N),r(Ho),r(Lo),r(B),r(Po),r(qo),r(D),r(Do),r(Xo),r(X),r(Ro),r(mo)),r(a),v(C,e),v(M,e),v(xe,e),v(je,e),v(Fe,e),v(Ee,e),v(Ze),v(te),v(Ie),v(Ue,e),v(We),v(ne),v(Ge,e),v(Ne),v(se),v(Be,e),v(Ve),v(ae),v(re),v(He),v(Le,e),v(Pe),v(qe),v(De,e),v(Xe),v(Re),v(Qe),v(Ye),v(Se,e),v(Oe),v(Ae),v(ce),v(pe),v(Ke),v(et),v(fe),v(tt),v(ue),v(ot,e),v(nt),v(st),v(he),v(at,e),v(rt),v(it),v(ge),v(lt,e),v(dt),v(ct),v(pt,e),v(mt),v(ft),v(_e)}}}const ha='{"title":"CLVP","local":"clvp","sections":[{"title":"Overview","local":"overview","sections":[],"depth":2},{"title":"Usage tips","local":"usage-tips","sections":[],"depth":2},{"title":"Brief Explanation:","local":"brief-explanation","sections":[],"depth":2},{"title":"ClvpConfig","local":"transformers.ClvpConfig","sections":[],"depth":2},{"title":"ClvpEncoderConfig","local":"transformers.ClvpEncoderConfig","sections":[],"depth":2},{"title":"ClvpDecoderConfig","local":"transformers.ClvpDecoderConfig","sections":[],"depth":2},{"title":"ClvpTokenizer","local":"transformers.ClvpTokenizer","sections":[],"depth":2},{"title":"ClvpFeatureExtractor","local":"transformers.ClvpFeatureExtractor","sections":[],"depth":2},{"title":"ClvpProcessor","local":"transformers.ClvpProcessor","sections":[],"depth":2},{"title":"ClvpModelForConditionalGeneration","local":"transformers.ClvpModelForConditionalGeneration","sections":[],"depth":2},{"title":"ClvpForCausalLM","local":"transformers.ClvpForCausalLM","sections":[],"depth":2},{"title":"ClvpModel","local":"transformers.ClvpModel","sections":[],"depth":2},{"title":"ClvpEncoder","local":"transformers.ClvpEncoder","sections":[],"depth":2},{"title":"ClvpDecoder","local":"transformers.ClvpDecoder","sections":[],"depth":2}],"depth":1}';function ga(w){return As(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ka extends Ks{constructor(a){super(),ea(this,a,ga,ua,Os,{})}}export{ka as component};
