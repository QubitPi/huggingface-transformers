import{s as Na,n as va,o as Ra}from"../chunks/scheduler.9991993c.js";import{S as za,i as Ya,g as p,s as n,r,A as Qa,h as i,f as a,c as e,j as qa,u as j,x as c,k as Va,y as Xa,a as t,v as m,d as h,t as M,w as y}from"../chunks/index.7fc9a5e7.js";import{C as g}from"../chunks/CodeBlock.e11cba92.js";import{H as J}from"../chunks/Heading.e3de321f.js";function Ea(Ll){let o,Gs,ks,Hs,u,qs,T,Pl="🤗 Transformers是一个用于自然语言处理（NLP）、计算机视觉和音频和语音处理任务的预训练模型库。该库不仅包含Transformer模型，还包括用于计算机视觉任务的现代卷积网络等非Transformer模型。如果您看看今天最受欢迎的一些消费产品，比如智能手机、应用程序和电视，很可能背后都有某种深度学习技术的支持。想要从您智能手机拍摄的照片中删除背景对象吗？这里是一个全景分割任务的例子（如果您还不了解这是什么意思，我们将在以下部分进行描述！）。",Vs,d,Kl="本页面提供了使用🤗 Transformers库仅用三行代码解决不同的语音和音频、计算机视觉和NLP任务的概述！",Ns,x,vs,U,Dl="音频和语音处理任务与其他模态略有不同，主要是因为音频作为输入是一个连续的信号。与文本不同，原始音频波形不能像句子可以被划分为单词那样被整齐地分割成离散的块。为了解决这个问题，通常在固定的时间间隔内对原始音频信号进行采样。如果在每个时间间隔内采样更多样本，采样率就会更高，音频更接近原始音频源。",Rs,b,Ol="以前的方法是预处理音频以从中提取有用的特征。现在更常见的做法是直接将原始音频波形输入到特征编码器中，以提取音频表示。这样可以简化预处理步骤，并允许模型学习最重要的特征。",zs,w,Ys,f,sa="音频分类是一项将音频数据从预定义的类别集合中进行标记的任务。这是一个广泛的类别，具有许多具体的应用，其中一些包括：",Qs,I,la="<li>声学场景分类：使用场景标签（“办公室”、“海滩”、“体育场”）对音频进行标记。</li> <li>声学事件检测：使用声音事件标签（“汽车喇叭声”、“鲸鱼叫声”、“玻璃破碎声”）对音频进行标记。</li> <li>标记：对包含多种声音的音频进行标记（鸟鸣、会议中的说话人识别）。</li> <li>音乐分类：使用流派标签（“金属”、“嘻哈”、“乡村”）对音乐进行标记。</li>",Xs,Z,Es,B,Fs,W,aa="自动语音识别（ASR）将语音转录为文本。这是最常见的音频任务之一，部分原因是因为语音是人类交流的自然形式。如今，ASR系统嵌入在智能技术产品中，如扬声器、电话和汽车。我们可以要求虚拟助手播放音乐、设置提醒和告诉我们天气。",Ss,C,ta="但是，Transformer架构帮助解决的一个关键挑战是低资源语言。通过在大量语音数据上进行预训练，仅在一个低资源语言的一小时标记语音数据上进行微调，仍然可以产生与以前在100倍更多标记数据上训练的ASR系统相比高质量的结果。",As,k,_s,$,Ls,G,na='计算机视觉任务中最早成功之一是使用卷积神经网络（<a href="glossary#convolution">CNN</a>）识别邮政编码数字图像。图像由像素组成，每个像素都有一个数值。这使得将图像表示为像素值矩阵变得容易。每个像素值组合描述了图像的颜色。',Ps,H,ea="计算机视觉任务可以通过以下两种通用方式解决：",Ks,q,pa="<li>使用卷积来学习图像的层次特征，从低级特征到高级抽象特征。</li> <li>将图像分成块，并使用Transformer逐步学习每个图像块如何相互关联以形成图像。与CNN偏好的自底向上方法不同，这种方法有点像从一个模糊的图像开始，然后逐渐将其聚焦清晰。</li>",Ds,V,Os,N,ia="图像分类将整个图像从预定义的类别集合中进行标记。像大多数分类任务一样，图像分类有许多实际用例，其中一些包括：",sl,v,ca="<li>医疗保健：标记医学图像以检测疾病或监测患者健康状况</li> <li>环境：标记卫星图像以监测森林砍伐、提供野外管理信息或检测野火</li> <li>农业：标记农作物图像以监测植物健康或用于土地使用监测的卫星图像</li> <li>生态学：标记动物或植物物种的图像以监测野生动物种群或跟踪濒危物种</li>",ll,R,al,z,tl,Y,ra="与图像分类不同，目标检测在图像中识别多个对象以及这些对象在图像中的位置（由边界框定义）。目标检测的一些示例应用包括：",nl,Q,ja="<li>自动驾驶车辆：检测日常交通对象，如其他车辆、行人和红绿灯</li> <li>遥感：灾害监测、城市规划和天气预报</li> <li>缺陷检测：检测建筑物中的裂缝或结构损坏，以及制造业产品缺陷</li>",el,X,pl,E,il,F,ma="图像分割是一项像素级任务，将图像中的每个像素分配给一个类别。它与使用边界框标记和预测图像中的对象的目标检测不同，因为分割更加精细。分割可以在像素级别检测对象。有几种类型的图像分割：",cl,S,ha="<li>实例分割：除了标记对象的类别外，还标记每个对象的不同实例（“dog-1”，“dog-2”）</li> <li>全景分割：语义分割和实例分割的组合； 它使用语义类为每个像素标记并标记每个对象的不同实例</li>",rl,A,Ma="分割任务对于自动驾驶车辆很有帮助，可以创建周围世界的像素级地图，以便它们可以在行人和其他车辆周围安全导航。它还适用于医学成像，其中任务的更精细粒度可以帮助识别异常细胞或器官特征。图像分割也可以用于电子商务，通过您的相机在现实世界中覆盖物体来虚拟试穿衣服或创建增强现实体验。",jl,_,ml,L,hl,P,ya="深度估计预测图像中每个像素到相机的距离。这个计算机视觉任务对于场景理解和重建尤为重要。例如，在自动驾驶汽车中，车辆需要了解行人、交通标志和其他车辆等物体的距离，以避免障碍物和碰撞。深度信息还有助于从2D图像构建3D表示，并可用于创建生物结构或建筑物的高质量3D表示。",Ml,K,Ja="有两种方法可以进行深度估计：",yl,D,ga="<li>stereo（立体）：通过比较同一图像的两个略微不同角度的图像来估计深度</li> <li>monocular（单目）：从单个图像中估计深度</li>",Jl,O,gl,ss,ol,ls,oa="NLP任务是最常见的类型之一，因为文本是我们进行交流的自然方式。为了让文本变成模型识别的格式，需要对其进行分词。这意味着将一段文本分成单独的单词或子词（<code>tokens</code>），然后将这些<code>tokens</code>转换为数字。因此，可以将一段文本表示为一系列数字，一旦有了一系列的数字，就可以将其输入到模型中以解决各种NLP任务！",ul,as,Tl,ts,ua="像任何模态的分类任务一样，文本分类将一段文本（可以是句子级别、段落或文档）从预定义的类别集合中进行标记。文本分类有许多实际应用，其中一些包括：",dl,ns,Ta="<li>情感分析：根据某些极性（如<code>积极</code>或<code>消极</code>）对文本进行标记，可以支持政治、金融和营销等领域的决策制定</li> <li>内容分类：根据某些主题对文本进行标记，有助于组织和过滤新闻和社交媒体提要中的信息（<code>天气</code>、<code>体育</code>、<code>金融</code>等）</li>",xl,es,Ul,ps,bl,is,da='在任何NLP任务中，文本都经过预处理，将文本序列分成单个单词或子词。这些被称为<a href="/glossary#token">tokens</a>。Token分类将每个<code>token</code>分配一个来自预定义类别集的标签。',wl,cs,xa="两种常见的Token分类是：",fl,rs,Ua="<li>命名实体识别（NER）：根据实体类别（如组织、人员、位置或日期）对<code>token</code>进行标记。NER在生物医学设置中特别受欢迎，可以标记基因、蛋白质和药物名称。</li> <li>词性标注（POS）：根据其词性（如名词、动词或形容词）对标记进行标记。POS对于帮助翻译系统了解两个相同的单词如何在语法上不同很有用（作为名词的银行与作为动词的银行）。</li>",Il,js,Zl,ms,Bl,hs,ba="问答是另一个<code>token-level</code>的任务，返回一个问题的答案，有时带有上下文（开放领域），有时不带上下文（封闭领域）。每当我们向虚拟助手提出问题时，例如询问一家餐厅是否营业，就会发生这种情况。它还可以提供客户或技术支持，并帮助搜索引擎检索您要求的相关信息。",Wl,Ms,wa="有两种常见的问答类型：",Cl,ys,fa='<li>提取式：给定一个问题和一些上下文，答案是从模型必须提取的上下文中的一段文本跨度。</li> <li>抽象式：给定一个问题和一些上下文，答案从上下文中生成；这种方法由<a href="/docs/transformers/main/zh/main_classes/pipelines#transformers.Text2TextGenerationPipeline">Text2TextGenerationPipeline</a>处理，而不是下面显示的<a href="/docs/transformers/main/zh/main_classes/pipelines#transformers.QuestionAnsweringPipeline">QuestionAnsweringPipeline</a>。</li>',kl,Js,$l,gs,Gl,os,Ia="摘要从较长的文本中创建一个较短的版本，同时尽可能保留原始文档的大部分含义。摘要是一个序列到序列的任务；它输出比输入更短的文本序列。有许多长篇文档可以进行摘要，以帮助读者快速了解主要要点。法案、法律和财务文件、专利和科学论文等文档可以摘要，以节省读者的时间并作为阅读辅助工具。",Hl,us,Za="像问答一样，摘要有两种类型：",ql,Ts,Ba='<li>提取式：从原始文本中识别和提取最重要的句子</li> <li>抽象式：从原始文本生成目标摘要（可能包括不在输入文档中的新单词）；<a href="/docs/transformers/main/zh/main_classes/pipelines#transformers.SummarizationPipeline">SummarizationPipeline</a>使用抽象方法。</li>',Vl,ds,Nl,xs,vl,Us,Wa="翻译将一种语言的文本序列转换为另一种语言。它对于帮助来自不同背景的人们相互交流、帮助翻译内容以吸引更广泛的受众，甚至成为学习工具以帮助人们学习一门新语言都非常重要。除了摘要之外，翻译也是一个序列到序列的任务，意味着模型接收输入序列并返回目标输出序列。",Rl,bs,Ca="在早期，翻译模型大多是单语的，但最近，越来越多的人对可以在多种语言之间进行翻译的多语言模型感兴趣。",zl,ws,Yl,fs,Ql,Is,ka="语言模型是一种预测文本序列中单词的任务。它已成为一种非常流行的NLP任务，因为预训练的语言模型可以微调用于许多其他下游任务。最近，人们对大型语言模型（LLMs）表现出了极大的兴趣，这些模型展示了<code>zero learning</code>或<code>few-shot learning</code>的能力。这意味着模型可以解决它未被明确训练过的任务！语言模型可用于生成流畅和令人信服的文本，但需要小心，因为文本可能并不总是准确的。",Xl,Zs,$a="有两种类型的话语模型：",El,Bs,Ga="<li>causal：模型的目标是预测序列中的下一个<code>token</code>，而未来的<code>tokens</code>被遮盖。</li>",Fl,Ws,Sl,Cs,Ha='希望这个页面为您提供了一些有关每种模态中所有类型任务的背景信息以及每个任务的实际重要性。在<a href="tasks_explained">下一节</a>中，您将了解Transformers如何解决这些任务。',Al,$s,_l;return u=new J({props:{title:"🤗 Transformers 能做什么",local:"-transformers-能做什么",headingTag:"h1"}}),x=new J({props:{title:"音频",local:"音频",headingTag:"h2"}}),w=new J({props:{title:"音频分类",local:"音频分类",headingTag:"h3"}}),Z=new g({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBY2xhc3NpZmllciUyMCUzRCUyMHBpcGVsaW5lKHRhc2slM0QlMjJhdWRpby1jbGFzc2lmaWNhdGlvbiUyMiUyQyUyMG1vZGVsJTNEJTIyc3VwZXJiJTJGaHViZXJ0LWJhc2Utc3VwZXJiLWVyJTIyKSUwQXByZWRzJTIwJTNEJTIwY2xhc3NpZmllciglMjJodHRwcyUzQSUyRiUyRmh1Z2dpbmdmYWNlLmNvJTJGZGF0YXNldHMlMkZOYXJzaWwlMkZhc3JfZHVtbXklMkZyZXNvbHZlJTJGbWFpbiUyRm1say5mbGFjJTIyKSUwQXByZWRzJTIwJTNEJTIwJTVCJTdCJTIyc2NvcmUlMjIlM0ElMjByb3VuZChwcmVkJTVCJTIyc2NvcmUlMjIlNUQlMkMlMjA0KSUyQyUyMCUyMmxhYmVsJTIyJTNBJTIwcHJlZCU1QiUyMmxhYmVsJTIyJTVEJTdEJTIwZm9yJTIwcHJlZCUyMGluJTIwcHJlZHMlNUQlMEFwcmVkcw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(task=<span class="hljs-string">&quot;audio-classification&quot;</span>, model=<span class="hljs-string">&quot;superb/hubert-base-superb-er&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>preds = classifier(<span class="hljs-string">&quot;https://huggingface.co/datasets/Narsil/asr_dummy/resolve/main/mlk.flac&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>preds = [{<span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-built_in">round</span>(pred[<span class="hljs-string">&quot;score&quot;</span>], <span class="hljs-number">4</span>), <span class="hljs-string">&quot;label&quot;</span>: pred[<span class="hljs-string">&quot;label&quot;</span>]} <span class="hljs-keyword">for</span> pred <span class="hljs-keyword">in</span> preds]
<span class="hljs-meta">&gt;&gt;&gt; </span>preds
[{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.4532</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;hap&#x27;</span>},
 {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.3622</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;sad&#x27;</span>},
 {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.0943</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;neu&#x27;</span>},
 {<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.0903</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;ang&#x27;</span>}]`,wrap:!1}}),B=new J({props:{title:"自动语音识别",local:"自动语音识别",headingTag:"h3"}}),k=new g({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBdHJhbnNjcmliZXIlMjAlM0QlMjBwaXBlbGluZSh0YXNrJTNEJTIyYXV0b21hdGljLXNwZWVjaC1yZWNvZ25pdGlvbiUyMiUyQyUyMG1vZGVsJTNEJTIyb3BlbmFpJTJGd2hpc3Blci1zbWFsbCUyMiklMEF0cmFuc2NyaWJlciglMjJodHRwcyUzQSUyRiUyRmh1Z2dpbmdmYWNlLmNvJTJGZGF0YXNldHMlMkZOYXJzaWwlMkZhc3JfZHVtbXklMkZyZXNvbHZlJTJGbWFpbiUyRm1say5mbGFjJTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>transcriber = pipeline(task=<span class="hljs-string">&quot;automatic-speech-recognition&quot;</span>, model=<span class="hljs-string">&quot;openai/whisper-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>transcriber(<span class="hljs-string">&quot;https://huggingface.co/datasets/Narsil/asr_dummy/resolve/main/mlk.flac&quot;</span>)
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27; I have a dream that one day this nation will rise up and live out the true meaning of its creed.&#x27;</span>}`,wrap:!1}}),$=new J({props:{title:"计算机视觉",local:"计算机视觉",headingTag:"h2"}}),V=new J({props:{title:"图像分类",local:"图像分类",headingTag:"h3"}}),R=new g({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBY2xhc3NpZmllciUyMCUzRCUyMHBpcGVsaW5lKHRhc2slM0QlMjJpbWFnZS1jbGFzc2lmaWNhdGlvbiUyMiklMEFwcmVkcyUyMCUzRCUyMGNsYXNzaWZpZXIoJTBBJTIwJTIwJTIwJTIwJTIyaHR0cHMlM0ElMkYlMkZodWdnaW5nZmFjZS5jbyUyRmRhdGFzZXRzJTJGaHVnZ2luZ2ZhY2UlMkZkb2N1bWVudGF0aW9uLWltYWdlcyUyRnJlc29sdmUlMkZtYWluJTJGcGlwZWxpbmUtY2F0LWNob25rLmpwZWclMjIlMEEpJTBBcHJlZHMlMjAlM0QlMjAlNUIlN0IlMjJzY29yZSUyMiUzQSUyMHJvdW5kKHByZWQlNUIlMjJzY29yZSUyMiU1RCUyQyUyMDQpJTJDJTIwJTIybGFiZWwlMjIlM0ElMjBwcmVkJTVCJTIybGFiZWwlMjIlNUQlN0QlMjBmb3IlMjBwcmVkJTIwaW4lMjBwcmVkcyU1RCUwQXByaW50KCpwcmVkcyUyQyUyMHNlcCUzRCUyMiU1Q24lMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(task=<span class="hljs-string">&quot;image-classification&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>preds = classifier(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/pipeline-cat-chonk.jpeg&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>preds = [{<span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-built_in">round</span>(pred[<span class="hljs-string">&quot;score&quot;</span>], <span class="hljs-number">4</span>), <span class="hljs-string">&quot;label&quot;</span>: pred[<span class="hljs-string">&quot;label&quot;</span>]} <span class="hljs-keyword">for</span> pred <span class="hljs-keyword">in</span> preds]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(*preds, sep=<span class="hljs-string">&quot;\\n&quot;</span>)
{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.4335</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;lynx, catamount&#x27;</span>}
{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.0348</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;cougar, puma, catamount, mountain lion, painter, panther, Felis concolor&#x27;</span>}
{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.0324</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;snow leopard, ounce, Panthera uncia&#x27;</span>}
{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.0239</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;Egyptian cat&#x27;</span>}
{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.0229</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;tiger cat&#x27;</span>}`,wrap:!1}}),z=new J({props:{title:"目标检测",local:"目标检测",headingTag:"h3"}}),X=new g({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBZGV0ZWN0b3IlMjAlM0QlMjBwaXBlbGluZSh0YXNrJTNEJTIyb2JqZWN0LWRldGVjdGlvbiUyMiklMEFwcmVkcyUyMCUzRCUyMGRldGVjdG9yKCUwQSUyMCUyMCUyMCUyMCUyMmh0dHBzJTNBJTJGJTJGaHVnZ2luZ2ZhY2UuY28lMkZkYXRhc2V0cyUyRmh1Z2dpbmdmYWNlJTJGZG9jdW1lbnRhdGlvbi1pbWFnZXMlMkZyZXNvbHZlJTJGbWFpbiUyRnBpcGVsaW5lLWNhdC1jaG9uay5qcGVnJTIyJTBBKSUwQXByZWRzJTIwJTNEJTIwJTVCJTdCJTIyc2NvcmUlMjIlM0ElMjByb3VuZChwcmVkJTVCJTIyc2NvcmUlMjIlNUQlMkMlMjA0KSUyQyUyMCUyMmxhYmVsJTIyJTNBJTIwcHJlZCU1QiUyMmxhYmVsJTIyJTVEJTJDJTIwJTIyYm94JTIyJTNBJTIwcHJlZCU1QiUyMmJveCUyMiU1RCU3RCUyMGZvciUyMHByZWQlMjBpbiUyMHByZWRzJTVEJTBBcHJlZHM=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>detector = pipeline(task=<span class="hljs-string">&quot;object-detection&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>preds = detector(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/pipeline-cat-chonk.jpeg&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>preds = [{<span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-built_in">round</span>(pred[<span class="hljs-string">&quot;score&quot;</span>], <span class="hljs-number">4</span>), <span class="hljs-string">&quot;label&quot;</span>: pred[<span class="hljs-string">&quot;label&quot;</span>], <span class="hljs-string">&quot;box&quot;</span>: pred[<span class="hljs-string">&quot;box&quot;</span>]} <span class="hljs-keyword">for</span> pred <span class="hljs-keyword">in</span> preds]
<span class="hljs-meta">&gt;&gt;&gt; </span>preds
[{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9865</span>,
  <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;cat&#x27;</span>,
  <span class="hljs-string">&#x27;box&#x27;</span>: {<span class="hljs-string">&#x27;xmin&#x27;</span>: <span class="hljs-number">178</span>, <span class="hljs-string">&#x27;ymin&#x27;</span>: <span class="hljs-number">154</span>, <span class="hljs-string">&#x27;xmax&#x27;</span>: <span class="hljs-number">882</span>, <span class="hljs-string">&#x27;ymax&#x27;</span>: <span class="hljs-number">598</span>}}]`,wrap:!1}}),E=new J({props:{title:"图像分割",local:"图像分割",headingTag:"h3"}}),_=new g({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBc2VnbWVudGVyJTIwJTNEJTIwcGlwZWxpbmUodGFzayUzRCUyMmltYWdlLXNlZ21lbnRhdGlvbiUyMiklMEFwcmVkcyUyMCUzRCUyMHNlZ21lbnRlciglMEElMjAlMjAlMjAlMjAlMjJodHRwcyUzQSUyRiUyRmh1Z2dpbmdmYWNlLmNvJTJGZGF0YXNldHMlMkZodWdnaW5nZmFjZSUyRmRvY3VtZW50YXRpb24taW1hZ2VzJTJGcmVzb2x2ZSUyRm1haW4lMkZwaXBlbGluZS1jYXQtY2hvbmsuanBlZyUyMiUwQSklMEFwcmVkcyUyMCUzRCUyMCU1QiU3QiUyMnNjb3JlJTIyJTNBJTIwcm91bmQocHJlZCU1QiUyMnNjb3JlJTIyJTVEJTJDJTIwNCklMkMlMjAlMjJsYWJlbCUyMiUzQSUyMHByZWQlNUIlMjJsYWJlbCUyMiU1RCU3RCUyMGZvciUyMHByZWQlMjBpbiUyMHByZWRzJTVEJTBBcHJpbnQoKnByZWRzJTJDJTIwc2VwJTNEJTIyJTVDbiUyMik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>segmenter = pipeline(task=<span class="hljs-string">&quot;image-segmentation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>preds = segmenter(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/pipeline-cat-chonk.jpeg&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>preds = [{<span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-built_in">round</span>(pred[<span class="hljs-string">&quot;score&quot;</span>], <span class="hljs-number">4</span>), <span class="hljs-string">&quot;label&quot;</span>: pred[<span class="hljs-string">&quot;label&quot;</span>]} <span class="hljs-keyword">for</span> pred <span class="hljs-keyword">in</span> preds]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(*preds, sep=<span class="hljs-string">&quot;\\n&quot;</span>)
{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9879</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;LABEL_184&#x27;</span>}
{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9973</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;snow&#x27;</span>}
{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9972</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;cat&#x27;</span>}`,wrap:!1}}),L=new J({props:{title:"深度估计",local:"深度估计",headingTag:"h3"}}),O=new g({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBZGVwdGhfZXN0aW1hdG9yJTIwJTNEJTIwcGlwZWxpbmUodGFzayUzRCUyMmRlcHRoLWVzdGltYXRpb24lMjIpJTBBcHJlZHMlMjAlM0QlMjBkZXB0aF9lc3RpbWF0b3IoJTBBJTIwJTIwJTIwJTIwJTIyaHR0cHMlM0ElMkYlMkZodWdnaW5nZmFjZS5jbyUyRmRhdGFzZXRzJTJGaHVnZ2luZ2ZhY2UlMkZkb2N1bWVudGF0aW9uLWltYWdlcyUyRnJlc29sdmUlMkZtYWluJTJGcGlwZWxpbmUtY2F0LWNob25rLmpwZWclMjIlMEEp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>depth_estimator = pipeline(task=<span class="hljs-string">&quot;depth-estimation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>preds = depth_estimator(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/pipeline-cat-chonk.jpeg&quot;</span>
<span class="hljs-meta">... </span>)`,wrap:!1}}),ss=new J({props:{title:"自然语言处理",local:"自然语言处理",headingTag:"h2"}}),as=new J({props:{title:"文本分类",local:"文本分类",headingTag:"h3"}}),es=new g({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBY2xhc3NpZmllciUyMCUzRCUyMHBpcGVsaW5lKHRhc2slM0QlMjJzZW50aW1lbnQtYW5hbHlzaXMlMjIpJTBBcHJlZHMlMjAlM0QlMjBjbGFzc2lmaWVyKCUyMkh1Z2dpbmclMjBGYWNlJTIwaXMlMjB0aGUlMjBiZXN0JTIwdGhpbmclMjBzaW5jZSUyMHNsaWNlZCUyMGJyZWFkISUyMiklMEFwcmVkcyUyMCUzRCUyMCU1QiU3QiUyMnNjb3JlJTIyJTNBJTIwcm91bmQocHJlZCU1QiUyMnNjb3JlJTIyJTVEJTJDJTIwNCklMkMlMjAlMjJsYWJlbCUyMiUzQSUyMHByZWQlNUIlMjJsYWJlbCUyMiU1RCU3RCUyMGZvciUyMHByZWQlMjBpbiUyMHByZWRzJTVEJTBBcHJlZHM=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(task=<span class="hljs-string">&quot;sentiment-analysis&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>preds = classifier(<span class="hljs-string">&quot;Hugging Face is the best thing since sliced bread!&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>preds = [{<span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-built_in">round</span>(pred[<span class="hljs-string">&quot;score&quot;</span>], <span class="hljs-number">4</span>), <span class="hljs-string">&quot;label&quot;</span>: pred[<span class="hljs-string">&quot;label&quot;</span>]} <span class="hljs-keyword">for</span> pred <span class="hljs-keyword">in</span> preds]
<span class="hljs-meta">&gt;&gt;&gt; </span>preds
[{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9991</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>}]`,wrap:!1}}),ps=new J({props:{title:"Token分类",local:"token分类",headingTag:"h3"}}),js=new g({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBY2xhc3NpZmllciUyMCUzRCUyMHBpcGVsaW5lKHRhc2slM0QlMjJuZXIlMjIpJTBBcHJlZHMlMjAlM0QlMjBjbGFzc2lmaWVyKCUyMkh1Z2dpbmclMjBGYWNlJTIwaXMlMjBhJTIwRnJlbmNoJTIwY29tcGFueSUyMGJhc2VkJTIwaW4lMjBOZXclMjBZb3JrJTIwQ2l0eS4lMjIpJTBBcHJlZHMlMjAlM0QlMjAlNUIlMEElMjAlMjAlMjAlMjAlN0IlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjJlbnRpdHklMjIlM0ElMjBwcmVkJTVCJTIyZW50aXR5JTIyJTVEJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIyc2NvcmUlMjIlM0ElMjByb3VuZChwcmVkJTVCJTIyc2NvcmUlMjIlNUQlMkMlMjA0KSUyQyUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMmluZGV4JTIyJTNBJTIwcHJlZCU1QiUyMmluZGV4JTIyJTVEJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIyd29yZCUyMiUzQSUyMHByZWQlNUIlMjJ3b3JkJTIyJTVEJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIyc3RhcnQlMjIlM0ElMjBwcmVkJTVCJTIyc3RhcnQlMjIlNUQlMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjJlbmQlMjIlM0ElMjBwcmVkJTVCJTIyZW5kJTIyJTVEJTJDJTBBJTIwJTIwJTIwJTIwJTdEJTBBJTIwJTIwJTIwJTIwZm9yJTIwcHJlZCUyMGluJTIwcHJlZHMlMEElNUQlMEFwcmludCgqcHJlZHMlMkMlMjBzZXAlM0QlMjIlNUNuJTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(task=<span class="hljs-string">&quot;ner&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>preds = classifier(<span class="hljs-string">&quot;Hugging Face is a French company based in New York City.&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>preds = [
<span class="hljs-meta">... </span>    {
<span class="hljs-meta">... </span>        <span class="hljs-string">&quot;entity&quot;</span>: pred[<span class="hljs-string">&quot;entity&quot;</span>],
<span class="hljs-meta">... </span>        <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-built_in">round</span>(pred[<span class="hljs-string">&quot;score&quot;</span>], <span class="hljs-number">4</span>),
<span class="hljs-meta">... </span>        <span class="hljs-string">&quot;index&quot;</span>: pred[<span class="hljs-string">&quot;index&quot;</span>],
<span class="hljs-meta">... </span>        <span class="hljs-string">&quot;word&quot;</span>: pred[<span class="hljs-string">&quot;word&quot;</span>],
<span class="hljs-meta">... </span>        <span class="hljs-string">&quot;start&quot;</span>: pred[<span class="hljs-string">&quot;start&quot;</span>],
<span class="hljs-meta">... </span>        <span class="hljs-string">&quot;end&quot;</span>: pred[<span class="hljs-string">&quot;end&quot;</span>],
<span class="hljs-meta">... </span>    }
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> pred <span class="hljs-keyword">in</span> preds
<span class="hljs-meta">... </span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(*preds, sep=<span class="hljs-string">&quot;\\n&quot;</span>)
{<span class="hljs-string">&#x27;entity&#x27;</span>: <span class="hljs-string">&#x27;I-ORG&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9968</span>, <span class="hljs-string">&#x27;index&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;Hu&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">2</span>}
{<span class="hljs-string">&#x27;entity&#x27;</span>: <span class="hljs-string">&#x27;I-ORG&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9293</span>, <span class="hljs-string">&#x27;index&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;##gging&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">7</span>}
{<span class="hljs-string">&#x27;entity&#x27;</span>: <span class="hljs-string">&#x27;I-ORG&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9763</span>, <span class="hljs-string">&#x27;index&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;Face&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">12</span>}
{<span class="hljs-string">&#x27;entity&#x27;</span>: <span class="hljs-string">&#x27;I-MISC&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9983</span>, <span class="hljs-string">&#x27;index&#x27;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;French&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">24</span>}
{<span class="hljs-string">&#x27;entity&#x27;</span>: <span class="hljs-string">&#x27;I-LOC&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.999</span>, <span class="hljs-string">&#x27;index&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;New&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">42</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">45</span>}
{<span class="hljs-string">&#x27;entity&#x27;</span>: <span class="hljs-string">&#x27;I-LOC&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9987</span>, <span class="hljs-string">&#x27;index&#x27;</span>: <span class="hljs-number">11</span>, <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;York&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">50</span>}
{<span class="hljs-string">&#x27;entity&#x27;</span>: <span class="hljs-string">&#x27;I-LOC&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9992</span>, <span class="hljs-string">&#x27;index&#x27;</span>: <span class="hljs-number">12</span>, <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;City&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">51</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">55</span>}`,wrap:!1}}),ms=new J({props:{title:"问答",local:"问答",headingTag:"h3"}}),Js=new g({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBcXVlc3Rpb25fYW5zd2VyZXIlMjAlM0QlMjBwaXBlbGluZSh0YXNrJTNEJTIycXVlc3Rpb24tYW5zd2VyaW5nJTIyKSUwQXByZWRzJTIwJTNEJTIwcXVlc3Rpb25fYW5zd2VyZXIoJTBBJTIwJTIwJTIwJTIwcXVlc3Rpb24lM0QlMjJXaGF0JTIwaXMlMjB0aGUlMjBuYW1lJTIwb2YlMjB0aGUlMjByZXBvc2l0b3J5JTNGJTIyJTJDJTBBJTIwJTIwJTIwJTIwY29udGV4dCUzRCUyMlRoZSUyMG5hbWUlMjBvZiUyMHRoZSUyMHJlcG9zaXRvcnklMjBpcyUyMGh1Z2dpbmdmYWNlJTJGdHJhbnNmb3JtZXJzJTIyJTJDJTBBKSUwQXByaW50KCUwQSUyMCUyMCUyMCUyMGYlMjJzY29yZSUzQSUyMCU3QnJvdW5kKHByZWRzJTVCJ3Njb3JlJyU1RCUyQyUyMDQpJTdEJTJDJTIwc3RhcnQlM0ElMjAlN0JwcmVkcyU1QidzdGFydCclNUQlN0QlMkMlMjBlbmQlM0ElMjAlN0JwcmVkcyU1QidlbmQnJTVEJTdEJTJDJTIwYW5zd2VyJTNBJTIwJTdCcHJlZHMlNUInYW5zd2VyJyU1RCU3RCUyMiUwQSk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>question_answerer = pipeline(task=<span class="hljs-string">&quot;question-answering&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>preds = question_answerer(
<span class="hljs-meta">... </span>    question=<span class="hljs-string">&quot;What is the name of the repository?&quot;</span>,
<span class="hljs-meta">... </span>    context=<span class="hljs-string">&quot;The name of the repository is huggingface/transformers&quot;</span>,
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(
<span class="hljs-meta">... </span>    <span class="hljs-string">f&quot;score: <span class="hljs-subst">{<span class="hljs-built_in">round</span>(preds[<span class="hljs-string">&#x27;score&#x27;</span>], <span class="hljs-number">4</span>)}</span>, start: <span class="hljs-subst">{preds[<span class="hljs-string">&#x27;start&#x27;</span>]}</span>, end: <span class="hljs-subst">{preds[<span class="hljs-string">&#x27;end&#x27;</span>]}</span>, answer: <span class="hljs-subst">{preds[<span class="hljs-string">&#x27;answer&#x27;</span>]}</span>&quot;</span>
<span class="hljs-meta">... </span>)
score: <span class="hljs-number">0.9327</span>, start: <span class="hljs-number">30</span>, end: <span class="hljs-number">54</span>, answer: huggingface/transformers`,wrap:!1}}),gs=new J({props:{title:"摘要",local:"摘要",headingTag:"h3"}}),ds=new g({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBc3VtbWFyaXplciUyMCUzRCUyMHBpcGVsaW5lKHRhc2slM0QlMjJzdW1tYXJpemF0aW9uJTIyKSUwQXN1bW1hcml6ZXIoJTBBJTIwJTIwJTIwJTIwJTIySW4lMjB0aGlzJTIwd29yayUyQyUyMHdlJTIwcHJlc2VudGVkJTIwdGhlJTIwVHJhbnNmb3JtZXIlMkMlMjB0aGUlMjBmaXJzdCUyMHNlcXVlbmNlJTIwdHJhbnNkdWN0aW9uJTIwbW9kZWwlMjBiYXNlZCUyMGVudGlyZWx5JTIwb24lMjBhdHRlbnRpb24lMkMlMjByZXBsYWNpbmclMjB0aGUlMjByZWN1cnJlbnQlMjBsYXllcnMlMjBtb3N0JTIwY29tbW9ubHklMjB1c2VkJTIwaW4lMjBlbmNvZGVyLWRlY29kZXIlMjBhcmNoaXRlY3R1cmVzJTIwd2l0aCUyMG11bHRpLWhlYWRlZCUyMHNlbGYtYXR0ZW50aW9uLiUyMEZvciUyMHRyYW5zbGF0aW9uJTIwdGFza3MlMkMlMjB0aGUlMjBUcmFuc2Zvcm1lciUyMGNhbiUyMGJlJTIwdHJhaW5lZCUyMHNpZ25pZmljYW50bHklMjBmYXN0ZXIlMjB0aGFuJTIwYXJjaGl0ZWN0dXJlcyUyMGJhc2VkJTIwb24lMjByZWN1cnJlbnQlMjBvciUyMGNvbnZvbHV0aW9uYWwlMjBsYXllcnMuJTIwT24lMjBib3RoJTIwV01UJTIwMjAxNCUyMEVuZ2xpc2gtdG8tR2VybWFuJTIwYW5kJTIwV01UJTIwMjAxNCUyMEVuZ2xpc2gtdG8tRnJlbmNoJTIwdHJhbnNsYXRpb24lMjB0YXNrcyUyQyUyMHdlJTIwYWNoaWV2ZSUyMGElMjBuZXclMjBzdGF0ZSUyMG9mJTIwdGhlJTIwYXJ0LiUyMEluJTIwdGhlJTIwZm9ybWVyJTIwdGFzayUyMG91ciUyMGJlc3QlMjBtb2RlbCUyMG91dHBlcmZvcm1zJTIwZXZlbiUyMGFsbCUyMHByZXZpb3VzbHklMjByZXBvcnRlZCUyMGVuc2VtYmxlcy4lMjIlMEEp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>summarizer = pipeline(task=<span class="hljs-string">&quot;summarization&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>summarizer(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;In this work, we presented the Transformer, the first sequence transduction model based entirely on attention, replacing the recurrent layers most commonly used in encoder-decoder architectures with multi-headed self-attention. For translation tasks, the Transformer can be trained significantly faster than architectures based on recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014 English-to-French translation tasks, we achieve a new state of the art. In the former task our best model outperforms even all previously reported ensembles.&quot;</span>
<span class="hljs-meta">... </span>)
[{<span class="hljs-string">&#x27;summary_text&#x27;</span>: <span class="hljs-string">&#x27; The Transformer is the first sequence transduction model based entirely on attention . It replaces the recurrent layers most commonly used in encoder-decoder architectures with multi-headed self-attention . For translation tasks, the Transformer can be trained significantly faster than architectures based on recurrent or convolutional layers .&#x27;</span>}]`,wrap:!1}}),xs=new J({props:{title:"翻译",local:"翻译",headingTag:"h3"}}),ws=new g({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBdGV4dCUyMCUzRCUyMCUyMnRyYW5zbGF0ZSUyMEVuZ2xpc2glMjB0byUyMEZyZW5jaCUzQSUyMEh1Z2dpbmclMjBGYWNlJTIwaXMlMjBhJTIwY29tbXVuaXR5LWJhc2VkJTIwb3Blbi1zb3VyY2UlMjBwbGF0Zm9ybSUyMGZvciUyMG1hY2hpbmUlMjBsZWFybmluZy4lMjIlMEF0cmFuc2xhdG9yJTIwJTNEJTIwcGlwZWxpbmUodGFzayUzRCUyMnRyYW5zbGF0aW9uJTIyJTJDJTIwbW9kZWwlM0QlMjJnb29nbGUtdDUlMkZ0NS1zbWFsbCUyMiklMEF0cmFuc2xhdG9yKHRleHQp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;translate English to French: Hugging Face is a community-based open-source platform for machine learning.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>translator = pipeline(task=<span class="hljs-string">&quot;translation&quot;</span>, model=<span class="hljs-string">&quot;google-t5/t5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>translator(text)
[{<span class="hljs-string">&#x27;translation_text&#x27;</span>: <span class="hljs-string">&quot;Hugging Face est une tribune communautaire de l&#x27;apprentissage des machines.&quot;</span>}]`,wrap:!1}}),fs=new J({props:{title:"语言模型",local:"语言模型",headingTag:"h3"}}),Ws=new g({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBcHJvbXB0JTIwJTNEJTIwJTIySHVnZ2luZyUyMEZhY2UlMjBpcyUyMGElMjBjb21tdW5pdHktYmFzZWQlMjBvcGVuLXNvdXJjZSUyMHBsYXRmb3JtJTIwZm9yJTIwbWFjaGluZSUyMGxlYXJuaW5nLiUyMiUwQWdlbmVyYXRvciUyMCUzRCUyMHBpcGVsaW5lKHRhc2slM0QlMjJ0ZXh0LWdlbmVyYXRpb24lMjIpJTBBZ2VuZXJhdG9yKHByb21wdCklMjAlMjAlMjMlMjBkb2N0ZXN0JTNBJTIwJTJCU0tJUCUwQSUwQSUwQSUwQXRleHQlMjAlM0QlMjAlMjJIdWdnaW5nJTIwRmFjZSUyMGlzJTIwYSUyMGNvbW11bml0eS1iYXNlZCUyMG9wZW4tc291cmNlJTIwJTNDbWFzayUzRSUyMGZvciUyMG1hY2hpbmUlMjBsZWFybmluZy4lMjIlMEFmaWxsX21hc2slMjAlM0QlMjBwaXBlbGluZSh0YXNrJTNEJTIyZmlsbC1tYXNrJTIyKSUwQXByZWRzJTIwJTNEJTIwZmlsbF9tYXNrKHRleHQlMkMlMjB0b3BfayUzRDEpJTBBcHJlZHMlMjAlM0QlMjAlNUIlMEElMjAlMjAlMjAlMjAlN0IlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjJzY29yZSUyMiUzQSUyMHJvdW5kKHByZWQlNUIlMjJzY29yZSUyMiU1RCUyQyUyMDQpJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIydG9rZW4lMjIlM0ElMjBwcmVkJTVCJTIydG9rZW4lMjIlNUQlMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjJ0b2tlbl9zdHIlMjIlM0ElMjBwcmVkJTVCJTIydG9rZW5fc3RyJTIyJTVEJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIyc2VxdWVuY2UlMjIlM0ElMjBwcmVkJTVCJTIyc2VxdWVuY2UlMjIlNUQlMkMlMEElMjAlMjAlMjAlMjAlN0QlMEElMjAlMjAlMjAlMjBmb3IlMjBwcmVkJTIwaW4lMjBwcmVkcyUwQSU1RCUwQXByZWRzJTBBJTBBJTBBJTBBJTBBJTBBJTBBZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBZnJvbSUyMFBJTCUyMGltcG9ydCUyMEltYWdlJTBBaW1wb3J0JTIwcmVxdWVzdHMlMEElMEF1cmwlMjAlM0QlMjAlMjJodHRwcyUzQSUyRiUyRmRhdGFzZXRzLXNlcnZlci5odWdnaW5nZmFjZS5jbyUyRmFzc2V0cyUyRmhmLWludGVybmFsLXRlc3RpbmclMkZleGFtcGxlLWRvY3VtZW50cyUyRi0tJTJGaGYtaW50ZXJuYWwtdGVzdGluZy0tZXhhbXBsZS1kb2N1bWVudHMlMkZ0ZXN0JTJGMiUyRmltYWdlJTJGaW1hZ2UuanBnJTIyJTBBaW1hZ2UlMjAlM0QlMjBJbWFnZS5vcGVuKHJlcXVlc3RzLmdldCh1cmwlMkMlMjBzdHJlYW0lM0RUcnVlKS5yYXcpJTBBJTBBZG9jX3F1ZXN0aW9uX2Fuc3dlcmVyJTIwJTNEJTIwcGlwZWxpbmUoJTIyZG9jdW1lbnQtcXVlc3Rpb24tYW5zd2VyaW5nJTIyJTJDJTIwbW9kZWwlM0QlMjJtYWdvcnNodW5vdiUyRmxheW91dGxtLWludm9pY2VzJTIyKSUwQXByZWRzJTIwJTNEJTIwZG9jX3F1ZXN0aW9uX2Fuc3dlcmVyKCUwQSUyMCUyMCUyMCUyMHF1ZXN0aW9uJTNEJTIyV2hhdCUyMGlzJTIwdGhlJTIwdG90YWwlMjBhbW91bnQlM0YlMjIlMkMlMEElMjAlMjAlMjAlMjBpbWFnZSUzRGltYWdlJTJDJTBBKSUwQXByZWRz",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>prompt = <span class="hljs-string">&quot;Hugging Face is a community-based open-source platform for machine learning.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>generator = pipeline(task=<span class="hljs-string">&quot;text-generation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>generator(prompt)  <span class="hljs-comment"># doctest: +SKIP</span>
\`\`\`

*  masked：模型的目标是预测序列中被遮蔽的\`token\`，同时具有对序列中所有\`tokens\`的完全访问权限。


\`\`\`py
<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;Hugging Face is a community-based open-source &lt;mask&gt; for machine learning.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>fill_mask = pipeline(task=<span class="hljs-string">&quot;fill-mask&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>preds = fill_mask(text, top_k=<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>preds = [
<span class="hljs-meta">... </span>    {
<span class="hljs-meta">... </span>        <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-built_in">round</span>(pred[<span class="hljs-string">&quot;score&quot;</span>], <span class="hljs-number">4</span>),
<span class="hljs-meta">... </span>        <span class="hljs-string">&quot;token&quot;</span>: pred[<span class="hljs-string">&quot;token&quot;</span>],
<span class="hljs-meta">... </span>        <span class="hljs-string">&quot;token_str&quot;</span>: pred[<span class="hljs-string">&quot;token_str&quot;</span>],
<span class="hljs-meta">... </span>        <span class="hljs-string">&quot;sequence&quot;</span>: pred[<span class="hljs-string">&quot;sequence&quot;</span>],
<span class="hljs-meta">... </span>    }
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> pred <span class="hljs-keyword">in</span> preds
<span class="hljs-meta">... </span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>preds
[{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.2236</span>,
  <span class="hljs-string">&#x27;token&#x27;</span>: <span class="hljs-number">1761</span>,
  <span class="hljs-string">&#x27;token_str&#x27;</span>: <span class="hljs-string">&#x27; platform&#x27;</span>,
  <span class="hljs-string">&#x27;sequence&#x27;</span>: <span class="hljs-string">&#x27;Hugging Face is a community-based open-source platform for machine learning.&#x27;</span>}]
\`\`\`

<span class="hljs-comment">## 多模态</span>

多模态任务要求模型处理多种数据模态（文本、图像、音频、视频）以解决特定问题。图像描述是一个多模态任务的例子，其中模型将图像作为输入并输出描述图像或图像某些属性的文本序列。

虽然多模态模型处理不同的数据类型或模态，但内部预处理步骤帮助模型将所有数据类型转换为\`embeddings\`（向量或数字列表，包含有关数据的有意义信息）。对于像图像描述这样的任务，模型学习图像嵌入和文本嵌入之间的关系。

<span class="hljs-comment">### 文档问答</span>

文档问答是从文档中回答自然语言问题的任务。与\`token-level\`问答任务不同，文档问答将包含问题的文档的图像作为输入，并返回答案。文档问答可用于解析结构化文档并从中提取关键信息。在下面的例子中，可以从收据中提取总金额和找零金额。

\`\`\`py
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;https://datasets-server.huggingface.co/assets/hf-internal-testing/example-documents/--/hf-internal-testing--example-documents/test/2/image/image.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>doc_question_answerer = pipeline(<span class="hljs-string">&quot;document-question-answering&quot;</span>, model=<span class="hljs-string">&quot;magorshunov/layoutlm-invoices&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>preds = doc_question_answerer(
<span class="hljs-meta">... </span>    question=<span class="hljs-string">&quot;What is the total amount?&quot;</span>,
<span class="hljs-meta">... </span>    image=image,
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>preds
[{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.8531</span>, <span class="hljs-string">&#x27;answer&#x27;</span>: <span class="hljs-string">&#x27;17,000&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">4</span>}]`,wrap:!1}}),{c(){o=p("meta"),Gs=n(),ks=p("p"),Hs=n(),r(u.$$.fragment),qs=n(),T=p("p"),T.textContent=Pl,Vs=n(),d=p("p"),d.textContent=Kl,Ns=n(),r(x.$$.fragment),vs=n(),U=p("p"),U.textContent=Dl,Rs=n(),b=p("p"),b.textContent=Ol,zs=n(),r(w.$$.fragment),Ys=n(),f=p("p"),f.textContent=sa,Qs=n(),I=p("ul"),I.innerHTML=la,Xs=n(),r(Z.$$.fragment),Es=n(),r(B.$$.fragment),Fs=n(),W=p("p"),W.textContent=aa,Ss=n(),C=p("p"),C.textContent=ta,As=n(),r(k.$$.fragment),_s=n(),r($.$$.fragment),Ls=n(),G=p("p"),G.innerHTML=na,Ps=n(),H=p("p"),H.textContent=ea,Ks=n(),q=p("ol"),q.innerHTML=pa,Ds=n(),r(V.$$.fragment),Os=n(),N=p("p"),N.textContent=ia,sl=n(),v=p("ul"),v.innerHTML=ca,ll=n(),r(R.$$.fragment),al=n(),r(z.$$.fragment),tl=n(),Y=p("p"),Y.textContent=ra,nl=n(),Q=p("ul"),Q.innerHTML=ja,el=n(),r(X.$$.fragment),pl=n(),r(E.$$.fragment),il=n(),F=p("p"),F.textContent=ma,cl=n(),S=p("ul"),S.innerHTML=ha,rl=n(),A=p("p"),A.textContent=Ma,jl=n(),r(_.$$.fragment),ml=n(),r(L.$$.fragment),hl=n(),P=p("p"),P.textContent=ya,Ml=n(),K=p("p"),K.textContent=Ja,yl=n(),D=p("ul"),D.innerHTML=ga,Jl=n(),r(O.$$.fragment),gl=n(),r(ss.$$.fragment),ol=n(),ls=p("p"),ls.innerHTML=oa,ul=n(),r(as.$$.fragment),Tl=n(),ts=p("p"),ts.textContent=ua,dl=n(),ns=p("ul"),ns.innerHTML=Ta,xl=n(),r(es.$$.fragment),Ul=n(),r(ps.$$.fragment),bl=n(),is=p("p"),is.innerHTML=da,wl=n(),cs=p("p"),cs.textContent=xa,fl=n(),rs=p("ul"),rs.innerHTML=Ua,Il=n(),r(js.$$.fragment),Zl=n(),r(ms.$$.fragment),Bl=n(),hs=p("p"),hs.innerHTML=ba,Wl=n(),Ms=p("p"),Ms.textContent=wa,Cl=n(),ys=p("ul"),ys.innerHTML=fa,kl=n(),r(Js.$$.fragment),$l=n(),r(gs.$$.fragment),Gl=n(),os=p("p"),os.textContent=Ia,Hl=n(),us=p("p"),us.textContent=Za,ql=n(),Ts=p("ul"),Ts.innerHTML=Ba,Vl=n(),r(ds.$$.fragment),Nl=n(),r(xs.$$.fragment),vl=n(),Us=p("p"),Us.textContent=Wa,Rl=n(),bs=p("p"),bs.textContent=Ca,zl=n(),r(ws.$$.fragment),Yl=n(),r(fs.$$.fragment),Ql=n(),Is=p("p"),Is.innerHTML=ka,Xl=n(),Zs=p("p"),Zs.textContent=$a,El=n(),Bs=p("ul"),Bs.innerHTML=Ga,Fl=n(),r(Ws.$$.fragment),Sl=n(),Cs=p("p"),Cs.innerHTML=Ha,Al=n(),$s=p("p"),this.h()},l(s){const l=Qa("svelte-u9bgzb",document.head);o=i(l,"META",{name:!0,content:!0}),l.forEach(a),Gs=e(s),ks=i(s,"P",{}),qa(ks).forEach(a),Hs=e(s),j(u.$$.fragment,s),qs=e(s),T=i(s,"P",{"data-svelte-h":!0}),c(T)!=="svelte-1yk0qjn"&&(T.textContent=Pl),Vs=e(s),d=i(s,"P",{"data-svelte-h":!0}),c(d)!=="svelte-1q3isv5"&&(d.textContent=Kl),Ns=e(s),j(x.$$.fragment,s),vs=e(s),U=i(s,"P",{"data-svelte-h":!0}),c(U)!=="svelte-kxw3he"&&(U.textContent=Dl),Rs=e(s),b=i(s,"P",{"data-svelte-h":!0}),c(b)!=="svelte-1fqaih7"&&(b.textContent=Ol),zs=e(s),j(w.$$.fragment,s),Ys=e(s),f=i(s,"P",{"data-svelte-h":!0}),c(f)!=="svelte-ogab72"&&(f.textContent=sa),Qs=e(s),I=i(s,"UL",{"data-svelte-h":!0}),c(I)!=="svelte-1tgqk0q"&&(I.innerHTML=la),Xs=e(s),j(Z.$$.fragment,s),Es=e(s),j(B.$$.fragment,s),Fs=e(s),W=i(s,"P",{"data-svelte-h":!0}),c(W)!=="svelte-3fhmlj"&&(W.textContent=aa),Ss=e(s),C=i(s,"P",{"data-svelte-h":!0}),c(C)!=="svelte-eiibdh"&&(C.textContent=ta),As=e(s),j(k.$$.fragment,s),_s=e(s),j($.$$.fragment,s),Ls=e(s),G=i(s,"P",{"data-svelte-h":!0}),c(G)!=="svelte-3wsobn"&&(G.innerHTML=na),Ps=e(s),H=i(s,"P",{"data-svelte-h":!0}),c(H)!=="svelte-rqo45d"&&(H.textContent=ea),Ks=e(s),q=i(s,"OL",{"data-svelte-h":!0}),c(q)!=="svelte-7wlh2t"&&(q.innerHTML=pa),Ds=e(s),j(V.$$.fragment,s),Os=e(s),N=i(s,"P",{"data-svelte-h":!0}),c(N)!=="svelte-1d4fmzz"&&(N.textContent=ia),sl=e(s),v=i(s,"UL",{"data-svelte-h":!0}),c(v)!=="svelte-cq7kk5"&&(v.innerHTML=ca),ll=e(s),j(R.$$.fragment,s),al=e(s),j(z.$$.fragment,s),tl=e(s),Y=i(s,"P",{"data-svelte-h":!0}),c(Y)!=="svelte-1e03h7b"&&(Y.textContent=ra),nl=e(s),Q=i(s,"UL",{"data-svelte-h":!0}),c(Q)!=="svelte-d6o1c8"&&(Q.innerHTML=ja),el=e(s),j(X.$$.fragment,s),pl=e(s),j(E.$$.fragment,s),il=e(s),F=i(s,"P",{"data-svelte-h":!0}),c(F)!=="svelte-1f4qyz8"&&(F.textContent=ma),cl=e(s),S=i(s,"UL",{"data-svelte-h":!0}),c(S)!=="svelte-1u68kcz"&&(S.innerHTML=ha),rl=e(s),A=i(s,"P",{"data-svelte-h":!0}),c(A)!=="svelte-1a7hojw"&&(A.textContent=Ma),jl=e(s),j(_.$$.fragment,s),ml=e(s),j(L.$$.fragment,s),hl=e(s),P=i(s,"P",{"data-svelte-h":!0}),c(P)!=="svelte-14ysbtv"&&(P.textContent=ya),Ml=e(s),K=i(s,"P",{"data-svelte-h":!0}),c(K)!=="svelte-1l6f0nz"&&(K.textContent=Ja),yl=e(s),D=i(s,"UL",{"data-svelte-h":!0}),c(D)!=="svelte-4dcp4j"&&(D.innerHTML=ga),Jl=e(s),j(O.$$.fragment,s),gl=e(s),j(ss.$$.fragment,s),ol=e(s),ls=i(s,"P",{"data-svelte-h":!0}),c(ls)!=="svelte-147e8zn"&&(ls.innerHTML=oa),ul=e(s),j(as.$$.fragment,s),Tl=e(s),ts=i(s,"P",{"data-svelte-h":!0}),c(ts)!=="svelte-jabfvo"&&(ts.textContent=ua),dl=e(s),ns=i(s,"UL",{"data-svelte-h":!0}),c(ns)!=="svelte-1blazda"&&(ns.innerHTML=Ta),xl=e(s),j(es.$$.fragment,s),Ul=e(s),j(ps.$$.fragment,s),bl=e(s),is=i(s,"P",{"data-svelte-h":!0}),c(is)!=="svelte-zkfose"&&(is.innerHTML=da),wl=e(s),cs=i(s,"P",{"data-svelte-h":!0}),c(cs)!=="svelte-1bzpo29"&&(cs.textContent=xa),fl=e(s),rs=i(s,"UL",{"data-svelte-h":!0}),c(rs)!=="svelte-a2v11b"&&(rs.innerHTML=Ua),Il=e(s),j(js.$$.fragment,s),Zl=e(s),j(ms.$$.fragment,s),Bl=e(s),hs=i(s,"P",{"data-svelte-h":!0}),c(hs)!=="svelte-8e6n8u"&&(hs.innerHTML=ba),Wl=e(s),Ms=i(s,"P",{"data-svelte-h":!0}),c(Ms)!=="svelte-1w362c1"&&(Ms.textContent=wa),Cl=e(s),ys=i(s,"UL",{"data-svelte-h":!0}),c(ys)!=="svelte-15xpyrl"&&(ys.innerHTML=fa),kl=e(s),j(Js.$$.fragment,s),$l=e(s),j(gs.$$.fragment,s),Gl=e(s),os=i(s,"P",{"data-svelte-h":!0}),c(os)!=="svelte-1ar9w1m"&&(os.textContent=Ia),Hl=e(s),us=i(s,"P",{"data-svelte-h":!0}),c(us)!=="svelte-ztwnkj"&&(us.textContent=Za),ql=e(s),Ts=i(s,"UL",{"data-svelte-h":!0}),c(Ts)!=="svelte-qrbrnh"&&(Ts.innerHTML=Ba),Vl=e(s),j(ds.$$.fragment,s),Nl=e(s),j(xs.$$.fragment,s),vl=e(s),Us=i(s,"P",{"data-svelte-h":!0}),c(Us)!=="svelte-bqrw32"&&(Us.textContent=Wa),Rl=e(s),bs=i(s,"P",{"data-svelte-h":!0}),c(bs)!=="svelte-hsuytg"&&(bs.textContent=Ca),zl=e(s),j(ws.$$.fragment,s),Yl=e(s),j(fs.$$.fragment,s),Ql=e(s),Is=i(s,"P",{"data-svelte-h":!0}),c(Is)!=="svelte-qj4v3z"&&(Is.innerHTML=ka),Xl=e(s),Zs=i(s,"P",{"data-svelte-h":!0}),c(Zs)!=="svelte-th5qxy"&&(Zs.textContent=$a),El=e(s),Bs=i(s,"UL",{"data-svelte-h":!0}),c(Bs)!=="svelte-1ovzyx0"&&(Bs.innerHTML=Ga),Fl=e(s),j(Ws.$$.fragment,s),Sl=e(s),Cs=i(s,"P",{"data-svelte-h":!0}),c(Cs)!=="svelte-dcukiu"&&(Cs.innerHTML=Ha),Al=e(s),$s=i(s,"P",{}),qa($s).forEach(a),this.h()},h(){Va(o,"name","hf:doc:metadata"),Va(o,"content",Fa)},m(s,l){Xa(document.head,o),t(s,Gs,l),t(s,ks,l),t(s,Hs,l),m(u,s,l),t(s,qs,l),t(s,T,l),t(s,Vs,l),t(s,d,l),t(s,Ns,l),m(x,s,l),t(s,vs,l),t(s,U,l),t(s,Rs,l),t(s,b,l),t(s,zs,l),m(w,s,l),t(s,Ys,l),t(s,f,l),t(s,Qs,l),t(s,I,l),t(s,Xs,l),m(Z,s,l),t(s,Es,l),m(B,s,l),t(s,Fs,l),t(s,W,l),t(s,Ss,l),t(s,C,l),t(s,As,l),m(k,s,l),t(s,_s,l),m($,s,l),t(s,Ls,l),t(s,G,l),t(s,Ps,l),t(s,H,l),t(s,Ks,l),t(s,q,l),t(s,Ds,l),m(V,s,l),t(s,Os,l),t(s,N,l),t(s,sl,l),t(s,v,l),t(s,ll,l),m(R,s,l),t(s,al,l),m(z,s,l),t(s,tl,l),t(s,Y,l),t(s,nl,l),t(s,Q,l),t(s,el,l),m(X,s,l),t(s,pl,l),m(E,s,l),t(s,il,l),t(s,F,l),t(s,cl,l),t(s,S,l),t(s,rl,l),t(s,A,l),t(s,jl,l),m(_,s,l),t(s,ml,l),m(L,s,l),t(s,hl,l),t(s,P,l),t(s,Ml,l),t(s,K,l),t(s,yl,l),t(s,D,l),t(s,Jl,l),m(O,s,l),t(s,gl,l),m(ss,s,l),t(s,ol,l),t(s,ls,l),t(s,ul,l),m(as,s,l),t(s,Tl,l),t(s,ts,l),t(s,dl,l),t(s,ns,l),t(s,xl,l),m(es,s,l),t(s,Ul,l),m(ps,s,l),t(s,bl,l),t(s,is,l),t(s,wl,l),t(s,cs,l),t(s,fl,l),t(s,rs,l),t(s,Il,l),m(js,s,l),t(s,Zl,l),m(ms,s,l),t(s,Bl,l),t(s,hs,l),t(s,Wl,l),t(s,Ms,l),t(s,Cl,l),t(s,ys,l),t(s,kl,l),m(Js,s,l),t(s,$l,l),m(gs,s,l),t(s,Gl,l),t(s,os,l),t(s,Hl,l),t(s,us,l),t(s,ql,l),t(s,Ts,l),t(s,Vl,l),m(ds,s,l),t(s,Nl,l),m(xs,s,l),t(s,vl,l),t(s,Us,l),t(s,Rl,l),t(s,bs,l),t(s,zl,l),m(ws,s,l),t(s,Yl,l),m(fs,s,l),t(s,Ql,l),t(s,Is,l),t(s,Xl,l),t(s,Zs,l),t(s,El,l),t(s,Bs,l),t(s,Fl,l),m(Ws,s,l),t(s,Sl,l),t(s,Cs,l),t(s,Al,l),t(s,$s,l),_l=!0},p:va,i(s){_l||(h(u.$$.fragment,s),h(x.$$.fragment,s),h(w.$$.fragment,s),h(Z.$$.fragment,s),h(B.$$.fragment,s),h(k.$$.fragment,s),h($.$$.fragment,s),h(V.$$.fragment,s),h(R.$$.fragment,s),h(z.$$.fragment,s),h(X.$$.fragment,s),h(E.$$.fragment,s),h(_.$$.fragment,s),h(L.$$.fragment,s),h(O.$$.fragment,s),h(ss.$$.fragment,s),h(as.$$.fragment,s),h(es.$$.fragment,s),h(ps.$$.fragment,s),h(js.$$.fragment,s),h(ms.$$.fragment,s),h(Js.$$.fragment,s),h(gs.$$.fragment,s),h(ds.$$.fragment,s),h(xs.$$.fragment,s),h(ws.$$.fragment,s),h(fs.$$.fragment,s),h(Ws.$$.fragment,s),_l=!0)},o(s){M(u.$$.fragment,s),M(x.$$.fragment,s),M(w.$$.fragment,s),M(Z.$$.fragment,s),M(B.$$.fragment,s),M(k.$$.fragment,s),M($.$$.fragment,s),M(V.$$.fragment,s),M(R.$$.fragment,s),M(z.$$.fragment,s),M(X.$$.fragment,s),M(E.$$.fragment,s),M(_.$$.fragment,s),M(L.$$.fragment,s),M(O.$$.fragment,s),M(ss.$$.fragment,s),M(as.$$.fragment,s),M(es.$$.fragment,s),M(ps.$$.fragment,s),M(js.$$.fragment,s),M(ms.$$.fragment,s),M(Js.$$.fragment,s),M(gs.$$.fragment,s),M(ds.$$.fragment,s),M(xs.$$.fragment,s),M(ws.$$.fragment,s),M(fs.$$.fragment,s),M(Ws.$$.fragment,s),_l=!1},d(s){s&&(a(Gs),a(ks),a(Hs),a(qs),a(T),a(Vs),a(d),a(Ns),a(vs),a(U),a(Rs),a(b),a(zs),a(Ys),a(f),a(Qs),a(I),a(Xs),a(Es),a(Fs),a(W),a(Ss),a(C),a(As),a(_s),a(Ls),a(G),a(Ps),a(H),a(Ks),a(q),a(Ds),a(Os),a(N),a(sl),a(v),a(ll),a(al),a(tl),a(Y),a(nl),a(Q),a(el),a(pl),a(il),a(F),a(cl),a(S),a(rl),a(A),a(jl),a(ml),a(hl),a(P),a(Ml),a(K),a(yl),a(D),a(Jl),a(gl),a(ol),a(ls),a(ul),a(Tl),a(ts),a(dl),a(ns),a(xl),a(Ul),a(bl),a(is),a(wl),a(cs),a(fl),a(rs),a(Il),a(Zl),a(Bl),a(hs),a(Wl),a(Ms),a(Cl),a(ys),a(kl),a($l),a(Gl),a(os),a(Hl),a(us),a(ql),a(Ts),a(Vl),a(Nl),a(vl),a(Us),a(Rl),a(bs),a(zl),a(Yl),a(Ql),a(Is),a(Xl),a(Zs),a(El),a(Bs),a(Fl),a(Sl),a(Cs),a(Al),a($s)),a(o),y(u,s),y(x,s),y(w,s),y(Z,s),y(B,s),y(k,s),y($,s),y(V,s),y(R,s),y(z,s),y(X,s),y(E,s),y(_,s),y(L,s),y(O,s),y(ss,s),y(as,s),y(es,s),y(ps,s),y(js,s),y(ms,s),y(Js,s),y(gs,s),y(ds,s),y(xs,s),y(ws,s),y(fs,s),y(Ws,s)}}}const Fa='{"title":"🤗 Transformers 能做什么","local":"-transformers-能做什么","sections":[{"title":"音频","local":"音频","sections":[{"title":"音频分类","local":"音频分类","sections":[],"depth":3},{"title":"自动语音识别","local":"自动语音识别","sections":[],"depth":3}],"depth":2},{"title":"计算机视觉","local":"计算机视觉","sections":[{"title":"图像分类","local":"图像分类","sections":[],"depth":3},{"title":"目标检测","local":"目标检测","sections":[],"depth":3},{"title":"图像分割","local":"图像分割","sections":[],"depth":3},{"title":"深度估计","local":"深度估计","sections":[],"depth":3}],"depth":2},{"title":"自然语言处理","local":"自然语言处理","sections":[{"title":"文本分类","local":"文本分类","sections":[],"depth":3},{"title":"Token分类","local":"token分类","sections":[],"depth":3},{"title":"问答","local":"问答","sections":[],"depth":3},{"title":"摘要","local":"摘要","sections":[],"depth":3},{"title":"翻译","local":"翻译","sections":[],"depth":3},{"title":"语言模型","local":"语言模型","sections":[],"depth":3}],"depth":2}],"depth":1}';function Sa(Ll){return Ra(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ka extends za{constructor(o){super(),Ya(this,o,Sa,Ea,Na,{})}}export{Ka as component};
