import{s as Mn,o as Cn,n as vn}from"../chunks/scheduler.987d3921.js";import{S as Tn,i as yn,g as s,s as l,r as m,A as zn,h as d,f as n,c as r,j as $n,u,x as o,k as wn,y as _n,a as i,v as f,d as p,t as c,w as h}from"../chunks/index.c8b1fed4.js";import{T as kn}from"../chunks/Tip.6bc1e794.js";import{C as g}from"../chunks/CodeBlock.18094d58.js";import{H as ze}from"../chunks/Heading.3fa3b67f.js";function xn(ye){let a,$="Wenn eine Datei eine vollst√§ndige Kopie einer anderen Datei ist, sollten Sie sie in der Konstante <code>FULL_COPIES</code> von <code>utils/check_copies.py</code> registrieren.";return{c(){a=s("p"),a.innerHTML=$},l(b){a=d(b,"P",{"data-svelte-h":!0}),o(a)!=="svelte-1dokyk3"&&(a.innerHTML=$)},m(b,w){i(b,a,w)},p:vn,d(b){b&&n(a)}}}function Rn(ye){let a,$="Wenn die Ersetzungen die Formatierung √§ndern (wenn Sie z.B. einen kurzen Namen durch einen sehr langen Namen ersetzen), wird die Kopie nach Anwendung des automatischen Formats √ºberpr√ºft.";return{c(){a=s("p"),a.textContent=$},l(b){a=d(b,"P",{"data-svelte-h":!0}),o(a)!=="svelte-11jandl"&&(a.textContent=$)},m(b,w){i(b,a,w)},p:vn,d(b){b&&n(a)}}}function Sn(ye){let a,$,b,w,M,xe,C,Bt="Wenn Sie eine Pull-Anfrage f√ºr ü§ó Transformers √∂ffnen, wird eine ganze Reihe von Pr√ºfungen durchgef√ºhrt, um sicherzustellen, dass der Patch, den Sie hinzuf√ºgen, nichts Bestehendes zerst√∂rt. Es gibt vier Arten von Pr√ºfungen:",Re,T,Dt="<li>regul√§re Tests</li> <li>Erstellung der Dokumentation</li> <li>Stil von Code und Dokumentation</li> <li>allgemeine Konsistenz des Repository</li>",Se,y,Jt="In diesem Dokument werden wir versuchen zu erkl√§ren, worum es sich bei diesen verschiedenen Pr√ºfungen handelt und wie Sie sie lokal debuggen k√∂nnen, wenn eine der Pr√ºfungen in Ihrer PR fehlschl√§gt.",Le,z,Wt="Beachten Sie, dass Sie im Idealfall eine Dev-Installation ben√∂tigen:",Pe,_,He,x,It="oder f√ºr eine bearbeitbare Installation:",Be,R,De,S,Zt="innerhalb des Transformers Repo. Da die Anzahl der optionalen Abh√§ngigkeiten von Transformers stark zugenommen hat, ist es m√∂glich, dass Sie nicht alle davon bekommen k√∂nnen. Wenn die Dev-Installation fehlschl√§gt, stellen Sie sicher, dass Sie das Deep Learning-Framework, mit dem Sie arbeiten, installieren (PyTorch, TensorFlow und/oder Flax).",Je,L,We,P,Ut="oder f√ºr eine bearbeitbare Installation:",Ie,H,Ze,B,Ue,D,Ft="Alle Jobs, die mit <code>ci/circleci: run_tests_</code> beginnen, f√ºhren Teile der Transformers-Testsuite aus. Jeder dieser Jobs konzentriert sich auf einen Teil der Bibliothek in einer bestimmten Umgebung: <code>ci/circleci: run_tests_pipelines_tf</code> zum Beispiel f√ºhrt den Pipelines-Test in einer Umgebung aus, in der nur TensorFlow installiert ist.",Fe,J,At="Beachten Sie, dass nur ein Teil der Testsuite jedes Mal ausgef√ºhrt wird, um zu vermeiden, dass Tests ausgef√ºhrt werden, wenn es keine wirkliche √Ñnderung in den Modulen gibt, die sie testen: ein Dienstprogramm wird ausgef√ºhrt, um die Unterschiede in der Bibliothek zwischen vor und nach dem PR zu ermitteln (was GitHub Ihnen auf der Registerkarte ‚ÄúFiles changes‚Äù anzeigt) und die Tests auszuw√§hlen, die von diesem Unterschied betroffen sind. Dieses Dienstprogramm kann lokal mit ausgef√ºhrt werden:",Ae,W,Ee,I,Et="aus dem Stammverzeichnis des Transformers-Repositoriums. Es wird:",Ve,Z,Vt="<li>√úberpr√ºfen Sie f√ºr jede Datei im Diff, ob die √Ñnderungen im Code oder nur in Kommentaren oder Docstrings enthalten sind. Nur die Dateien mit echten Code√§nderungen werden beibehalten.</li> <li>Erstellen Sie eine interne Map, die f√ºr jede Datei des Quellcodes der Bibliothek alle Dateien angibt, auf die sie rekursiv Einfluss nimmt. Von Modul A wird gesagt, dass es sich auf Modul B auswirkt, wenn Modul B Modul A importiert. F√ºr die rekursive Auswirkung ben√∂tigen wir eine Kette von Modulen, die von Modul A zu Modul B f√ºhrt und in der jedes Modul das vorherige importiert.</li> <li>Wenden Sie diese Zuordnung auf die in Schritt 1 gesammelten Dateien an. So erhalten wir die Liste der Modelldateien, die von der PR betroffen sind.</li> <li>Ordnen Sie jede dieser Dateien der/den entsprechenden Testdatei(en) zu und erhalten Sie die Liste der auszuf√ºhrenden Tests.</li>",Ke,U,Kt="Wenn Sie das Skript lokal ausf√ºhren, sollten Sie die Ergebnisse von Schritt 1, 3 und 4 ausgegeben bekommen und somit wissen, welche Tests ausgef√ºhrt werden. Das Skript erstellt au√üerdem eine Datei namens <code>test_list.txt</code>, die die Liste der auszuf√ºhrenden Tests enth√§lt, die Sie mit dem folgenden Befehl lokal ausf√ºhren k√∂nnen:",je,F,Ge,A,jt="F√ºr den Fall, dass Ihnen etwas entgangen ist, wird die komplette Testreihe ebenfalls t√§glich ausgef√ºhrt.",Qe,E,Ye,V,Gt="Der Job <code>build_pr_documentation</code> erstellt und generiert eine Vorschau der Dokumentation, um sicherzustellen, dass alles in Ordnung ist, wenn Ihr PR zusammengef√ºhrt wird. Ein Bot f√ºgt einen Link zur Vorschau der Dokumentation zu Ihrem PR hinzu. Alle √Ñnderungen, die Sie an dem PR vornehmen, werden automatisch in der Vorschau aktualisiert. Wenn die Dokumentation nicht erstellt werden kann, klicken Sie auf <strong>Details</strong> neben dem fehlgeschlagenen Auftrag, um zu sehen, wo der Fehler liegt. Oft ist der Fehler so einfach wie eine fehlende Datei im <code>toctree</code>.",Ne,K,Qt='Wenn Sie daran interessiert sind, die Dokumentation lokal zu erstellen oder in der Vorschau anzusehen, werfen Sie einen Blick in die <a href="https://github.com/huggingface/transformers/tree/main/docs" rel="nofollow"><code>README.md</code></a> im Ordner docs.',Oe,j,Xe,G,Yt="Die Formatierung des Codes erfolgt f√ºr alle Quelldateien, die Beispiele und die Tests mit <code>black</code> und <code>ruff</code>. Wir haben auch ein benutzerdefiniertes Tool, das sich um die Formatierung von docstrings und <code>rst</code>-Dateien k√ºmmert (<code>utils/style_doc.py</code>), sowie um die Reihenfolge der Lazy-Importe, die in den Transformers <code>__init__.py</code>-Dateien durchgef√ºhrt werden (<code>utils/custom_init_isort.py</code>). All dies k√∂nnen Sie starten, indem Sie Folgendes ausf√ºhren",qe,Q,et,Y,Nt="Das CI pr√ºft, ob diese innerhalb der Pr√ºfung <code>ci/circleci: check_code_quality</code> angewendet wurden. Es f√ºhrt auch <code>ruff</code> aus, das einen grundlegenden Blick auf Ihren Code wirft und sich beschwert, wenn es eine undefinierte Variable findet oder eine, die nicht verwendet wird. Um diese Pr√ºfung lokal auszuf√ºhren, verwenden Sie",tt,N,nt,O,Ot="Dies kann sehr viel Zeit in Anspruch nehmen. Um dasselbe nur f√ºr die Dateien zu tun, die Sie im aktuellen Zweig ge√§ndert haben, f√ºhren Sie",it,X,lt,q,Xt="Dieser letzte Befehl f√ºhrt auch alle zus√§tzlichen Pr√ºfungen f√ºr die Konsistenz des Repositorys durch. Schauen wir uns diese an.",rt,ee,st,te,qt="Dies fasst alle Tests zusammen, die sicherstellen, dass Ihr PR das Repository in einem guten Zustand verl√§sst. Sie k√∂nnen diese Pr√ºfung lokal durchf√ºhren, indem Sie Folgendes ausf√ºhren:",dt,ne,ot,ie,en="Dies √ºberpr√ºft, ob:",at,le,tn="<li>Alle zum Init hinzugef√ºgten Objekte sind dokumentiert (ausgef√ºhrt von <code>utils/check_repo.py</code>)</li> <li>Alle <code>__init__.py</code>-Dateien haben in ihren beiden Abschnitten den gleichen Inhalt (ausgef√ºhrt von <code>utils/check_inits.py</code>)</li> <li>Der gesamte Code, der als Kopie eines anderen Moduls identifiziert wurde, stimmt mit dem Original √ºberein (ausgef√ºhrt von <code>utils/check_copies.py</code>)</li> <li>Alle Konfigurationsklassen haben mindestens einen g√ºltigen Pr√ºfpunkt, der in ihren Dokumentationen erw√§hnt wird (ausgef√ºhrt von <code>utils/check_config_docstrings.py</code>)</li> <li>Alle Konfigurationsklassen enthalten nur Attribute, die in den entsprechenden Modellierungsdateien verwendet werden (ausgef√ºhrt von <code>utils/check_config_attributes.py</code>)</li> <li>Die √úbersetzungen der READMEs und der Index des Dokuments haben die gleiche Modellliste wie die Haupt-README (durchgef√ºhrt von <code>utils/check_copies.py</code>)</li> <li>Die automatisch generierten Tabellen in der Dokumentation sind auf dem neuesten Stand (ausgef√ºhrt von <code>utils/check_table.py</code>)</li> <li>Die Bibliothek verf√ºgt √ºber alle Objekte, auch wenn nicht alle optionalen Abh√§ngigkeiten installiert sind (ausgef√ºhrt von <code>utils/check_dummies.py</code>)</li>",mt,re,nn="Sollte diese Pr√ºfung fehlschlagen, m√ºssen die ersten beiden Punkte manuell korrigiert werden, die letzten vier k√∂nnen automatisch f√ºr Sie korrigiert werden, indem Sie den Befehl",ut,se,ft,de,ln="Zus√§tzliche Pr√ºfungen betreffen PRs, die neue Modelle hinzuf√ºgen, vor allem, dass:",pt,oe,rn="<li>Alle hinzugef√ºgten Modelle befinden sich in einer Auto-Zuordnung (durchgef√ºhrt von <code>utils/check_repo.py</code>)</li> <li>Alle Modelle werden ordnungsgem√§√ü getestet (ausgef√ºhrt von <code>utils/check_repo.py</code>)</li>",ct,ae,ht,me,sn="Da die Transformers-Bibliothek in Bezug auf den Modellcode sehr eigenwillig ist und jedes Modell vollst√§ndig in einer einzigen Datei implementiert sein sollte, ohne sich auf andere Modelle zu st√ºtzen, haben wir einen Mechanismus hinzugef√ºgt, der √ºberpr√ºft, ob eine Kopie des Codes einer Ebene eines bestimmten Modells mit dem Original √ºbereinstimmt. Auf diese Weise k√∂nnen wir bei einer Fehlerbehebung alle anderen betroffenen Modelle sehen und entscheiden, ob wir die √Ñnderung weitergeben oder die Kopie zerst√∂ren.",bt,k,gt,ue,dn='Dieser Mechanismus st√ºtzt sich auf Kommentare der Form <code># Kopiert von xxx</code>. Das <code>xxx</code> sollte den gesamten Pfad zu der Klasse der Funktion enthalten, die darunter kopiert wird. Zum Beispiel ist <code>RobertaSelfOutput</code> eine direkte Kopie der Klasse <code>BertSelfOutput</code>. Sie k√∂nnen also <a href="https://github.com/huggingface/transformers/blob/2bd7a27a671fd1d98059124024f580f8f5c0f3b5/src/transformers/models/roberta/modeling_roberta.py#L289" rel="nofollow">hier</a> sehen, dass sie einen Kommentar hat:',$t,fe,wt,pe,on='Beachten Sie, dass Sie dies nicht auf eine ganze Klasse anwenden, sondern auf die entsprechenden Methoden, von denen kopiert wird. Zum Beispiel <a href="https://github.com/huggingface/transformers/blob/2bd7a27a671fd1d98059124024f580f8f5c0f3b5/src/transformers/models/roberta/modeling_roberta.py#L598" rel="nofollow">hier</a> k√∂nnen Sie sehen, wie <code>RobertaPreTrainedModel._init_weights</code> von der gleichen Methode in <code>BertPreTrainedModel</code> mit dem Kommentar kopiert wird:',kt,ce,vt,he,an='Manchmal ist die Kopie bis auf die Namen genau gleich: zum Beispiel verwenden wir in <code>RobertaAttention</code> <code>RobertaSelfAttention</code> anstelle von <code>BertSelfAttention</code>, aber ansonsten ist der Code genau derselbe. Aus diesem Grund unterst√ºtzt <code>#Copied from</code> einfache String-Ersetzungen mit der folgenden Syntax: <code>Kopiert von xxx mit foo-&gt;bar</code>. Das bedeutet, dass der Code kopiert wird, wobei alle Instanzen von ‚Äúfoo‚Äù durch ‚Äúbar‚Äù ersetzt werden. Sie k√∂nnen sehen, wie es <a href="https://github.com/huggingface/transformers/blob/2bd7a27a671fd1d98059124024f580f8f5c0f3b5/src/transformers/models/roberta/modeling_roberta.py#L304C1-L304C86" rel="nofollow">hier</a> in <code>RobertaAttention</code> mit dem Kommentar verwendet wird:',Mt,be,Ct,ge,mn="Beachten Sie, dass um den Pfeil herum keine Leerzeichen stehen sollten (es sei denn, das Leerzeichen ist Teil des zu ersetzenden Musters, nat√ºrlich).",Tt,$e,un='Sie k√∂nnen mehrere Muster durch ein Komma getrennt hinzuf√ºgen. Zum Beispiel ist hier <code>CamemberForMaskedLM</code> eine direkte Kopie von <code>RobertaForMaskedLM</code> mit zwei Ersetzungen: <code>Roberta</code> zu <code>Camembert</code> und <code>ROBERTA</code> zu <code>CAMEMBERT</code>. Sie k√∂nnen <a href="https://github.com/huggingface/transformers/blob/15082a9dc6950ecae63a0d3e5060b2fc7f15050a/src/transformers/models/camembert/modeling_camembert.py#L929" rel="nofollow">hier</a> sehen, wie dies mit dem Kommentar gemacht wird:',yt,we,zt,ke,fn="Wenn die Reihenfolge eine Rolle spielt (weil eine der Ersetzungen mit einer vorherigen in Konflikt geraten k√∂nnte), werden die Ersetzungen von links nach rechts ausgef√ºhrt.",_t,v,xt,ve,pn='Eine andere M√∂glichkeit, wenn es sich bei den Mustern nur um verschiedene Umschreibungen derselben Ersetzung handelt (mit einer gro√ü- und einer kleingeschriebenen Variante), besteht darin, die Option <code>all-casing</code> hinzuzuf√ºgen. <a href="https://github.com/huggingface/transformers/blob/15082a9dc6950ecae63a0d3e5060b2fc7f15050a/src/transformers/models/mobilebert/modeling_mobilebert.py#L1237" rel="nofollow">Hier</a> ist ein Beispiel in <code>MobileBertForSequenceClassification</code> mit dem Kommentar:',Rt,Me,St,Ce,cn="In diesem Fall wird der Code von <code>BertForSequenceClassification</code> kopiert, indem er ersetzt wird:",Lt,Te,hn="<li><code>Bert</code> durch <code>MobileBert</code> (zum Beispiel bei der Verwendung von <code>MobileBertModel</code> in der Init)</li> <li><code>bert</code> durch <code>mobilebert</code> (zum Beispiel bei der Definition von <code>self.mobilebert</code>)</li> <li><code>BERT</code> durch <code>MOBILEBERT</code> (in der Konstante <code>MOBILEBERT_INPUTS_DOCSTRING</code>)</li>",Pt,_e,Ht;return M=new ze({props:{title:"√úberpr√ºfungen bei einer Pull-Anfrage",local:"√ºberpr√ºfungen-bei-einer-pull-anfrage",headingTag:"h1"}}),_=new g({props:{code:"cGlwJTIwaW5zdGFsbCUyMHRyYW5zZm9ybWVycyU1QmRldiU1RA==",highlighted:"pip install transformers[dev]",wrap:!1}}),R=new g({props:{code:"cGlwJTIwaW5zdGFsbCUyMC1lJTIwLiU1QmRldiU1RA==",highlighted:"pip install -e .[dev]",wrap:!1}}),L=new g({props:{code:"cGlwJTIwaW5zdGFsbCUyMHRyYW5zZm9ybWVycyU1QnF1YWxpdHklNUQ=",highlighted:"pip install transformers[quality]",wrap:!1}}),H=new g({props:{code:"cGlwJTIwaW5zdGFsbCUyMC1lJTIwLiU1QnF1YWxpdHklNUQ=",highlighted:"pip install -e .[quality]",wrap:!1}}),B=new ze({props:{title:"Tests",local:"tests",headingTag:"h2"}}),W=new g({props:{code:"cHl0aG9uJTIwdXRpbHMlMkZ0ZXN0c19mZXRjaGVyLnB5",highlighted:"python utils/tests_fetcher.py",wrap:!1}}),F=new g({props:{code:"cHl0aG9uJTIwLW0lMjBweXRlc3QlMjAtbiUyMDglMjAtLWRpc3QlM0Rsb2FkZmlsZSUyMC1yQSUyMC1zJTIwJTI0KGNhdCUyMHRlc3RfbGlzdC50eHQp",highlighted:'python -m pytest -n 8 --dist=loadfile -rA -s $(<span class="hljs-built_in">cat</span> test_list.txt)',wrap:!1}}),E=new ze({props:{title:"Dokumentation erstellen",local:"dokumentation-erstellen",headingTag:"h2"}}),j=new ze({props:{title:"Code und Dokumentationsstil",local:"code-und-dokumentationsstil",headingTag:"h2"}}),Q=new g({props:{code:"bWFrZSUyMHN0eWxl",highlighted:"make style",wrap:!1}}),N=new g({props:{code:"bWFrZSUyMHF1YWxpdHk=",highlighted:"make quality",wrap:!1}}),X=new g({props:{code:"bWFrZSUyMGZpeHVw",highlighted:"make fixup",wrap:!1}}),ee=new ze({props:{title:"Repository-Konsistenz",local:"repository-konsistenz",headingTag:"h2"}}),ne=new g({props:{code:"bWFrZSUyMHJlcG8tY29uc2lzdGVuY3k=",highlighted:"make repo-consistency",wrap:!1}}),se=new g({props:{code:"bWFrZSUyMGZpeC1jb3BpZXM=",highlighted:"make fix-copies",wrap:!1}}),ae=new ze({props:{title:"Kopien pr√ºfen",local:"kopien-pr√ºfen",headingTag:"h3"}}),k=new kn({props:{$$slots:{default:[xn]},$$scope:{ctx:ye}}}),fe=new g({props:{code:"JTIzJTIwQ29waWVkJTIwZnJvbSUyMHRyYW5zZm9ybWVycy5tb2RlbHMuYmVydC5tb2RlbGluZ19iZXJ0LkJlcnRTZWxmT3V0cHV0",highlighted:'<span class="hljs-comment"># Copied from transformers.models.bert.modeling_bert.BertSelfOutput</span>',wrap:!1}}),ce=new g({props:{code:"JTIzJTIwQ29waWVkJTIwZnJvbSUyMHRyYW5zZm9ybWVycy5tb2RlbHMuYmVydC5tb2RlbGluZ19iZXJ0LkJlcnRQcmVUcmFpbmVkTW9kZWwuX2luaXRfd2VpZ2h0cw==",highlighted:'<span class="hljs-comment"># Copied from transformers.models.bert.modeling_bert.BertPreTrainedModel._init_weights</span>',wrap:!1}}),be=new g({props:{code:"JTIzJTIwQ29waWVkJTIwZnJvbSUyMHRyYW5zZm9ybWVycy5tb2RlbHMuYmVydC5tb2RlbGluZ19iZXJ0LkJlcnRBdHRlbnRpb24lMjB3aXRoJTIwQmVydC0lM0VSb2JlcnRh",highlighted:'<span class="hljs-comment"># Copied from transformers.models.bert.modeling_bert.BertAttention with Bert-&gt;Roberta</span>',wrap:!1}}),we=new g({props:{code:"JTIzJTIwQ29waWVkJTIwZnJvbSUyMHRyYW5zZm9ybWVycy5tb2RlbHMucm9iZXJ0YS5tb2RlbGluZ19yb2JlcnRhLlJvYmVydGFGb3JNYXNrZWRMTSUyMHdpdGglMjBSb2JlcnRhLSUzRUNhbWVtYmVydCUyQyUyMFJPQkVSVEEtJTNFQ0FNRU1CRVJU",highlighted:'<span class="hljs-comment"># Copied from transformers.models.roberta.modeling_roberta.RobertaForMaskedLM with Roberta-&gt;Camembert, ROBERTA-&gt;CAMEMBERT</span>',wrap:!1}}),v=new kn({props:{$$slots:{default:[Rn]},$$scope:{ctx:ye}}}),Me=new g({props:{code:"JTIzJTIwQ29waWVkJTIwZnJvbSUyMHRyYW5zZm9ybWVycy5tb2RlbHMuYmVydC5tb2RlbGluZ19iZXJ0LkJlcnRGb3JTZXF1ZW5jZUNsYXNzaWZpY2F0aW9uJTIwd2l0aCUyMEJlcnQtJTNFTW9iaWxlQmVydCUyMGFsbC1jYXNpbmc=",highlighted:'<span class="hljs-comment"># Copied from transformers.models.bert.modeling_bert.BertForSequenceClassification with Bert-&gt;MobileBert all-casing</span>',wrap:!1}}),{c(){a=s("meta"),$=l(),b=s("p"),w=l(),m(M.$$.fragment),xe=l(),C=s("p"),C.textContent=Bt,Re=l(),T=s("ul"),T.innerHTML=Dt,Se=l(),y=s("p"),y.textContent=Jt,Le=l(),z=s("p"),z.textContent=Wt,Pe=l(),m(_.$$.fragment),He=l(),x=s("p"),x.textContent=It,Be=l(),m(R.$$.fragment),De=l(),S=s("p"),S.textContent=Zt,Je=l(),m(L.$$.fragment),We=l(),P=s("p"),P.textContent=Ut,Ie=l(),m(H.$$.fragment),Ze=l(),m(B.$$.fragment),Ue=l(),D=s("p"),D.innerHTML=Ft,Fe=l(),J=s("p"),J.textContent=At,Ae=l(),m(W.$$.fragment),Ee=l(),I=s("p"),I.textContent=Et,Ve=l(),Z=s("ol"),Z.innerHTML=Vt,Ke=l(),U=s("p"),U.innerHTML=Kt,je=l(),m(F.$$.fragment),Ge=l(),A=s("p"),A.textContent=jt,Qe=l(),m(E.$$.fragment),Ye=l(),V=s("p"),V.innerHTML=Gt,Ne=l(),K=s("p"),K.innerHTML=Qt,Oe=l(),m(j.$$.fragment),Xe=l(),G=s("p"),G.innerHTML=Yt,qe=l(),m(Q.$$.fragment),et=l(),Y=s("p"),Y.innerHTML=Nt,tt=l(),m(N.$$.fragment),nt=l(),O=s("p"),O.textContent=Ot,it=l(),m(X.$$.fragment),lt=l(),q=s("p"),q.textContent=Xt,rt=l(),m(ee.$$.fragment),st=l(),te=s("p"),te.textContent=qt,dt=l(),m(ne.$$.fragment),ot=l(),ie=s("p"),ie.textContent=en,at=l(),le=s("ul"),le.innerHTML=tn,mt=l(),re=s("p"),re.textContent=nn,ut=l(),m(se.$$.fragment),ft=l(),de=s("p"),de.textContent=ln,pt=l(),oe=s("ul"),oe.innerHTML=rn,ct=l(),m(ae.$$.fragment),ht=l(),me=s("p"),me.textContent=sn,bt=l(),m(k.$$.fragment),gt=l(),ue=s("p"),ue.innerHTML=dn,$t=l(),m(fe.$$.fragment),wt=l(),pe=s("p"),pe.innerHTML=on,kt=l(),m(ce.$$.fragment),vt=l(),he=s("p"),he.innerHTML=an,Mt=l(),m(be.$$.fragment),Ct=l(),ge=s("p"),ge.textContent=mn,Tt=l(),$e=s("p"),$e.innerHTML=un,yt=l(),m(we.$$.fragment),zt=l(),ke=s("p"),ke.textContent=fn,_t=l(),m(v.$$.fragment),xt=l(),ve=s("p"),ve.innerHTML=pn,Rt=l(),m(Me.$$.fragment),St=l(),Ce=s("p"),Ce.innerHTML=cn,Lt=l(),Te=s("ul"),Te.innerHTML=hn,Pt=l(),_e=s("p"),this.h()},l(e){const t=zn("svelte-u9bgzb",document.head);a=d(t,"META",{name:!0,content:!0}),t.forEach(n),$=r(e),b=d(e,"P",{}),$n(b).forEach(n),w=r(e),u(M.$$.fragment,e),xe=r(e),C=d(e,"P",{"data-svelte-h":!0}),o(C)!=="svelte-1tg9vls"&&(C.textContent=Bt),Re=r(e),T=d(e,"UL",{"data-svelte-h":!0}),o(T)!=="svelte-lgd0nh"&&(T.innerHTML=Dt),Se=r(e),y=d(e,"P",{"data-svelte-h":!0}),o(y)!=="svelte-1c9qeuq"&&(y.textContent=Jt),Le=r(e),z=d(e,"P",{"data-svelte-h":!0}),o(z)!=="svelte-1axayle"&&(z.textContent=Wt),Pe=r(e),u(_.$$.fragment,e),He=r(e),x=d(e,"P",{"data-svelte-h":!0}),o(x)!=="svelte-jmmwbn"&&(x.textContent=It),Be=r(e),u(R.$$.fragment,e),De=r(e),S=d(e,"P",{"data-svelte-h":!0}),o(S)!=="svelte-xwm4o0"&&(S.textContent=Zt),Je=r(e),u(L.$$.fragment,e),We=r(e),P=d(e,"P",{"data-svelte-h":!0}),o(P)!=="svelte-jmmwbn"&&(P.textContent=Ut),Ie=r(e),u(H.$$.fragment,e),Ze=r(e),u(B.$$.fragment,e),Ue=r(e),D=d(e,"P",{"data-svelte-h":!0}),o(D)!=="svelte-i6zz6y"&&(D.innerHTML=Ft),Fe=r(e),J=d(e,"P",{"data-svelte-h":!0}),o(J)!=="svelte-14c38si"&&(J.textContent=At),Ae=r(e),u(W.$$.fragment,e),Ee=r(e),I=d(e,"P",{"data-svelte-h":!0}),o(I)!=="svelte-8oiyaf"&&(I.textContent=Et),Ve=r(e),Z=d(e,"OL",{"data-svelte-h":!0}),o(Z)!=="svelte-o592mv"&&(Z.innerHTML=Vt),Ke=r(e),U=d(e,"P",{"data-svelte-h":!0}),o(U)!=="svelte-efgp2y"&&(U.innerHTML=Kt),je=r(e),u(F.$$.fragment,e),Ge=r(e),A=d(e,"P",{"data-svelte-h":!0}),o(A)!=="svelte-1wzvmfe"&&(A.textContent=jt),Qe=r(e),u(E.$$.fragment,e),Ye=r(e),V=d(e,"P",{"data-svelte-h":!0}),o(V)!=="svelte-ril4zp"&&(V.innerHTML=Gt),Ne=r(e),K=d(e,"P",{"data-svelte-h":!0}),o(K)!=="svelte-1j6vu33"&&(K.innerHTML=Qt),Oe=r(e),u(j.$$.fragment,e),Xe=r(e),G=d(e,"P",{"data-svelte-h":!0}),o(G)!=="svelte-1sbgnpt"&&(G.innerHTML=Yt),qe=r(e),u(Q.$$.fragment,e),et=r(e),Y=d(e,"P",{"data-svelte-h":!0}),o(Y)!=="svelte-1yjgxt9"&&(Y.innerHTML=Nt),tt=r(e),u(N.$$.fragment,e),nt=r(e),O=d(e,"P",{"data-svelte-h":!0}),o(O)!=="svelte-1jq84d8"&&(O.textContent=Ot),it=r(e),u(X.$$.fragment,e),lt=r(e),q=d(e,"P",{"data-svelte-h":!0}),o(q)!=="svelte-vgn8h4"&&(q.textContent=Xt),rt=r(e),u(ee.$$.fragment,e),st=r(e),te=d(e,"P",{"data-svelte-h":!0}),o(te)!=="svelte-vtfvey"&&(te.textContent=qt),dt=r(e),u(ne.$$.fragment,e),ot=r(e),ie=d(e,"P",{"data-svelte-h":!0}),o(ie)!=="svelte-1q05qml"&&(ie.textContent=en),at=r(e),le=d(e,"UL",{"data-svelte-h":!0}),o(le)!=="svelte-4zfg7o"&&(le.innerHTML=tn),mt=r(e),re=d(e,"P",{"data-svelte-h":!0}),o(re)!=="svelte-19hl8bo"&&(re.textContent=nn),ut=r(e),u(se.$$.fragment,e),ft=r(e),de=d(e,"P",{"data-svelte-h":!0}),o(de)!=="svelte-p07pey"&&(de.textContent=ln),pt=r(e),oe=d(e,"UL",{"data-svelte-h":!0}),o(oe)!=="svelte-w9rzpg"&&(oe.innerHTML=rn),ct=r(e),u(ae.$$.fragment,e),ht=r(e),me=d(e,"P",{"data-svelte-h":!0}),o(me)!=="svelte-1iu475x"&&(me.textContent=sn),bt=r(e),u(k.$$.fragment,e),gt=r(e),ue=d(e,"P",{"data-svelte-h":!0}),o(ue)!=="svelte-1jmgts8"&&(ue.innerHTML=dn),$t=r(e),u(fe.$$.fragment,e),wt=r(e),pe=d(e,"P",{"data-svelte-h":!0}),o(pe)!=="svelte-hn5hw4"&&(pe.innerHTML=on),kt=r(e),u(ce.$$.fragment,e),vt=r(e),he=d(e,"P",{"data-svelte-h":!0}),o(he)!=="svelte-zkus8d"&&(he.innerHTML=an),Mt=r(e),u(be.$$.fragment,e),Ct=r(e),ge=d(e,"P",{"data-svelte-h":!0}),o(ge)!=="svelte-opf6v9"&&(ge.textContent=mn),Tt=r(e),$e=d(e,"P",{"data-svelte-h":!0}),o($e)!=="svelte-roqc7w"&&($e.innerHTML=un),yt=r(e),u(we.$$.fragment,e),zt=r(e),ke=d(e,"P",{"data-svelte-h":!0}),o(ke)!=="svelte-1kxy6c4"&&(ke.textContent=fn),_t=r(e),u(v.$$.fragment,e),xt=r(e),ve=d(e,"P",{"data-svelte-h":!0}),o(ve)!=="svelte-mfn5lg"&&(ve.innerHTML=pn),Rt=r(e),u(Me.$$.fragment,e),St=r(e),Ce=d(e,"P",{"data-svelte-h":!0}),o(Ce)!=="svelte-153cd75"&&(Ce.innerHTML=cn),Lt=r(e),Te=d(e,"UL",{"data-svelte-h":!0}),o(Te)!=="svelte-1puvwpq"&&(Te.innerHTML=hn),Pt=r(e),_e=d(e,"P",{}),$n(_e).forEach(n),this.h()},h(){wn(a,"name","hf:doc:metadata"),wn(a,"content",Ln)},m(e,t){_n(document.head,a),i(e,$,t),i(e,b,t),i(e,w,t),f(M,e,t),i(e,xe,t),i(e,C,t),i(e,Re,t),i(e,T,t),i(e,Se,t),i(e,y,t),i(e,Le,t),i(e,z,t),i(e,Pe,t),f(_,e,t),i(e,He,t),i(e,x,t),i(e,Be,t),f(R,e,t),i(e,De,t),i(e,S,t),i(e,Je,t),f(L,e,t),i(e,We,t),i(e,P,t),i(e,Ie,t),f(H,e,t),i(e,Ze,t),f(B,e,t),i(e,Ue,t),i(e,D,t),i(e,Fe,t),i(e,J,t),i(e,Ae,t),f(W,e,t),i(e,Ee,t),i(e,I,t),i(e,Ve,t),i(e,Z,t),i(e,Ke,t),i(e,U,t),i(e,je,t),f(F,e,t),i(e,Ge,t),i(e,A,t),i(e,Qe,t),f(E,e,t),i(e,Ye,t),i(e,V,t),i(e,Ne,t),i(e,K,t),i(e,Oe,t),f(j,e,t),i(e,Xe,t),i(e,G,t),i(e,qe,t),f(Q,e,t),i(e,et,t),i(e,Y,t),i(e,tt,t),f(N,e,t),i(e,nt,t),i(e,O,t),i(e,it,t),f(X,e,t),i(e,lt,t),i(e,q,t),i(e,rt,t),f(ee,e,t),i(e,st,t),i(e,te,t),i(e,dt,t),f(ne,e,t),i(e,ot,t),i(e,ie,t),i(e,at,t),i(e,le,t),i(e,mt,t),i(e,re,t),i(e,ut,t),f(se,e,t),i(e,ft,t),i(e,de,t),i(e,pt,t),i(e,oe,t),i(e,ct,t),f(ae,e,t),i(e,ht,t),i(e,me,t),i(e,bt,t),f(k,e,t),i(e,gt,t),i(e,ue,t),i(e,$t,t),f(fe,e,t),i(e,wt,t),i(e,pe,t),i(e,kt,t),f(ce,e,t),i(e,vt,t),i(e,he,t),i(e,Mt,t),f(be,e,t),i(e,Ct,t),i(e,ge,t),i(e,Tt,t),i(e,$e,t),i(e,yt,t),f(we,e,t),i(e,zt,t),i(e,ke,t),i(e,_t,t),f(v,e,t),i(e,xt,t),i(e,ve,t),i(e,Rt,t),f(Me,e,t),i(e,St,t),i(e,Ce,t),i(e,Lt,t),i(e,Te,t),i(e,Pt,t),i(e,_e,t),Ht=!0},p(e,[t]){const bn={};t&2&&(bn.$$scope={dirty:t,ctx:e}),k.$set(bn);const gn={};t&2&&(gn.$$scope={dirty:t,ctx:e}),v.$set(gn)},i(e){Ht||(p(M.$$.fragment,e),p(_.$$.fragment,e),p(R.$$.fragment,e),p(L.$$.fragment,e),p(H.$$.fragment,e),p(B.$$.fragment,e),p(W.$$.fragment,e),p(F.$$.fragment,e),p(E.$$.fragment,e),p(j.$$.fragment,e),p(Q.$$.fragment,e),p(N.$$.fragment,e),p(X.$$.fragment,e),p(ee.$$.fragment,e),p(ne.$$.fragment,e),p(se.$$.fragment,e),p(ae.$$.fragment,e),p(k.$$.fragment,e),p(fe.$$.fragment,e),p(ce.$$.fragment,e),p(be.$$.fragment,e),p(we.$$.fragment,e),p(v.$$.fragment,e),p(Me.$$.fragment,e),Ht=!0)},o(e){c(M.$$.fragment,e),c(_.$$.fragment,e),c(R.$$.fragment,e),c(L.$$.fragment,e),c(H.$$.fragment,e),c(B.$$.fragment,e),c(W.$$.fragment,e),c(F.$$.fragment,e),c(E.$$.fragment,e),c(j.$$.fragment,e),c(Q.$$.fragment,e),c(N.$$.fragment,e),c(X.$$.fragment,e),c(ee.$$.fragment,e),c(ne.$$.fragment,e),c(se.$$.fragment,e),c(ae.$$.fragment,e),c(k.$$.fragment,e),c(fe.$$.fragment,e),c(ce.$$.fragment,e),c(be.$$.fragment,e),c(we.$$.fragment,e),c(v.$$.fragment,e),c(Me.$$.fragment,e),Ht=!1},d(e){e&&(n($),n(b),n(w),n(xe),n(C),n(Re),n(T),n(Se),n(y),n(Le),n(z),n(Pe),n(He),n(x),n(Be),n(De),n(S),n(Je),n(We),n(P),n(Ie),n(Ze),n(Ue),n(D),n(Fe),n(J),n(Ae),n(Ee),n(I),n(Ve),n(Z),n(Ke),n(U),n(je),n(Ge),n(A),n(Qe),n(Ye),n(V),n(Ne),n(K),n(Oe),n(Xe),n(G),n(qe),n(et),n(Y),n(tt),n(nt),n(O),n(it),n(lt),n(q),n(rt),n(st),n(te),n(dt),n(ot),n(ie),n(at),n(le),n(mt),n(re),n(ut),n(ft),n(de),n(pt),n(oe),n(ct),n(ht),n(me),n(bt),n(gt),n(ue),n($t),n(wt),n(pe),n(kt),n(vt),n(he),n(Mt),n(Ct),n(ge),n(Tt),n($e),n(yt),n(zt),n(ke),n(_t),n(xt),n(ve),n(Rt),n(St),n(Ce),n(Lt),n(Te),n(Pt),n(_e)),n(a),h(M,e),h(_,e),h(R,e),h(L,e),h(H,e),h(B,e),h(W,e),h(F,e),h(E,e),h(j,e),h(Q,e),h(N,e),h(X,e),h(ee,e),h(ne,e),h(se,e),h(ae,e),h(k,e),h(fe,e),h(ce,e),h(be,e),h(we,e),h(v,e),h(Me,e)}}}const Ln='{"title":"√úberpr√ºfungen bei einer Pull-Anfrage","local":"√ºberpr√ºfungen-bei-einer-pull-anfrage","sections":[{"title":"Tests","local":"tests","sections":[],"depth":2},{"title":"Dokumentation erstellen","local":"dokumentation-erstellen","sections":[],"depth":2},{"title":"Code und Dokumentationsstil","local":"code-und-dokumentationsstil","sections":[],"depth":2},{"title":"Repository-Konsistenz","local":"repository-konsistenz","sections":[{"title":"Kopien pr√ºfen","local":"kopien-pr√ºfen","sections":[],"depth":3}],"depth":2}],"depth":1}';function Pn(ye){return Cn(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class In extends Tn{constructor(a){super(),yn(this,a,Pn,Sn,Mn,{})}}export{In as component};
